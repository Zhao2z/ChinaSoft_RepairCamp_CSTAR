<FIXS> org.mycat.netty.mysql.MySQLHandshakeHandler.logger.info("success info return form MySQLHandshakeHandler"); <FIXE>
<FIXS> org.junit.Assert.assertTrue("checkRulesTest1 failed", ((pl.checkRules(new Point(5, 2), Board.FRIENDLY, board)) == false)); <FIXE>
<FIXS> org.apache.http.client.fluent.Request.Post(callbackUrl).bodyForm(org.apache.http.client.fluent.Form.form().add("msg", title).build(), Consts.UTF_8).execute(); <FIXE>
<FIXS> printErrorMessage(player); <FIXE>
<FIXS> if (((connection) != null) && (connection.isValid(7))) { <FIXE>
<FIXS> return "/Pages/Brands.jsp"; <FIXE>
<FIXS> data[1] = x; <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE> <FIXS> controller.setMediaPlayer(this); controller.setAnchorView(findViewById(R.id.song_list)); controller.setEnabled(true); <FIXE>
<FIXS> checkCollisions(dt, isRewind); <FIXE>
<FIXS> removeConnectRequest(request.ipAddress); <FIXE>
<FIXS> tip.setWrapText(wrap); <FIXE>
<FIXS> this.filteredList.clear(); this.filteredList.addAll(results); <FIXE> <FIXS> <FIXE>
<FIXS> if ((value != null) && ((value.contains("\n")) || (value.contains("\r")))) { <FIXE>
<FIXS> final org.eclipse.swt.browser.Browser browser = new org.eclipse.swt.browser.Browser(container, org.eclipse.swt.SWT.BORDER); <FIXE>
<FIXS> public static java.lang.String toImportHeaderValues(java.util.Collection<? extends java.util.Collection<?>> headerValues) { <FIXE>
<FIXS> if (columnDiff > 0) { <FIXE> <FIXS> if (columnDiff < 0) { <FIXE> <FIXS> if (rowDiff > 0) { <FIXE> <FIXS> if (rowDiff < 0) { <FIXE>
<FIXS> <FIXE>
<FIXS> fm.beginTransaction().add(R.id.container_fragment_activity, fragment).commit(); <FIXE> <FIXS> <FIXE>
<FIXS> for (int x = 0; x < (booleans.length); x++) { booleans[x] = openings[(sx + x)][sy]; <FIXE>
<FIXS> public com.google.cloud.genomics.dataflow.readers.bam.BAMShard finalize(htsjdk.samtools.BAMFileIndexImpl index, long lastLocus) { contig = new com.google.cloud.genomics.utils.Contig(contig.referenceName, contig.start, lastLocus); <FIXE>
<FIXS> while (true) { synchronized(toBeEvaluatedIndividuals) { if ((toBeEvaluatedIndividuals.size()) < 100) { toBeEvaluatedIndividuals.addLast(new ec.steadystate.QueueIndividual(ind, subpop)); return ; } } } <FIXE>
<FIXS> if ((activities.isEmpty()) || (activities.peek().isFinished())) { <FIXE>
<FIXS> <FIXE> <FIXS> java.lang.System.out.println("Setting up initial bets..."); Engine.initializeBets(); <FIXE>
<FIXS> private void attackClose(gladiator.Gladiator en, gladiator.Gladiator target) { <FIXE>
<FIXS> return new com.builtbroken.mc.core.network.packet.PacketTile(this, 4, this.getEnergyStored(ForgeDirection.UNKNOWN), this.getTarget().xi(), this.getTarget().yi(), this.getTarget().zi()); <FIXE>
<FIXS> public void signOutFromGplus() { <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> addVRRecord(); <FIXE> <FIXS> <FIXE>
<FIXS> call = null; <FIXE> <FIXS> body = null; <FIXE>
<FIXS> public static java.util.Map<java.lang.String, java.lang.Integer> getMostFiveItem(java.util.Map<java.lang.String, java.lang.Integer> map) { <FIXE> <FIXS> java.util.Map<java.lang.String, java.lang.Integer> list = new java.util.HashMap<java.lang.String, java.lang.Integer>(); <FIXE> <FIXS> java.lang.System.out.println(s); <FIXE> <FIXS> list.put(s, map.get(s)); <FIXE>
<FIXS> blink(); <FIXE> <FIXS> blink(); <FIXE>
<FIXS> public boolean isKingInSet(Game.Desk d, Game.Colour col, java.util.HashSet<Game.Position> set) { <FIXE>
<FIXS> private ComponentManager addComponent(ComponentManager cm, java.util.List<ComponentManager> list, java.awt.ComponentOrientation orientation) { <FIXE> <FIXS> return clone; <FIXE>
<FIXS> <FIXE>
<FIXS> if ((songPosn) < 0) { <FIXE>
<FIXS> }else return false; <FIXE> <FIXS> <FIXE>
<FIXS> if (!(values.contains(e))) { return ; } <FIXE>
<FIXS> x = s.indexOf('/', (x + 1)); <FIXE>
<FIXS> <FIXE>
<FIXS> contributionsTree.setLayoutData(new org.eclipse.swt.layout.GridData(org.eclipse.swt.SWT.FILL, org.eclipse.swt.SWT.FILL, true, true)); <FIXE>
<FIXS> java.lang.System.setProperty("java.rmi.server.hostname", exIP); <FIXE> <FIXS> registry = java.rmi.registry.LocateRegistry.createRegistry(1099); <FIXE> <FIXS> java.lang.System.setProperty("java.rmi.server.hostname", this.exIP); <FIXE>
<FIXS> if ((calendar) != null) removeItem.setText(("Mark person unavailable for " + (utilities.Utilities.getDisplayDate(calendar)))); <FIXE>
<FIXS> if (startDate.before(date)) { <FIXE> <FIXS> <FIXE>
<FIXS> public void onDueDateSelected(java.util.Date date) { super.onDueDateSelected(date); <FIXE>
<FIXS> if (shortName == null) return false; <FIXE>
<FIXS> <FIXE>
<FIXS> node = FixOneKeyNode(node, false); <FIXE>
<FIXS> <FIXE>
<FIXS> runtime.exec("shutdown -h now"); <FIXE>
<FIXS> <FIXE>
<FIXS> net.torocraft.minecoprocessors.processor.ProcessorTest.assertRegisters(processor, 0, 0, 245, 0); <FIXE> <FIXS> net.torocraft.minecoprocessors.processor.ProcessorTest.assertRegisters(processor, 0, 0, 0, 0); <FIXE>
<FIXS> geopolisTrackingsManager.trackEvent(node.identifier, event.event); <FIXE>
<FIXS> javax.swing.JButton AccettaButton = view.getAccettaButton(); AccettaButton.addActionListener(new java.awt.event.ActionListener() { @java.lang.Override public void actionPerformed(java.awt.event.ActionEvent e) { if ((Box.getSelectedItem()) != null) <FIXE> <FIXS> } }); <FIXE>
<FIXS> MeetingShould.contacts = new java.util.HashSet<>(); <FIXE>
<FIXS> <FIXE>
<FIXS> com.github.acquized.retile.ProjectRetile.getInstance().getLog().error("Could not execute SQL update!", ex); <FIXE>
<FIXS> java.util.Map<java.lang.String, java.lang.Object> expected = new java.util.HashMap<>(); <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> long pointer1 = index.put(str1); <FIXE> <FIXS> long pointer2 = index.put(str2); <FIXE>
<FIXS> if (((mState) != (com.dd.crop.TextureVideoView.State.END)) && (!(mPreventPlayback))) { <FIXE> <FIXS> if (((mIsDataSourceSet) && (mIsPlayCalled)) && (mIsVideoPrepared)) { <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> int operation = (((SUPPORT_DELETE) | (SUPPORT_PLAY)) | (SUPPORT_INFO)) | (SUPPORT_DRM_INFO); <FIXE> <FIXS> return operation; <FIXE> <FIXS> return (((((SUPPORT_DELETE) | (SUPPORT_SHARE)) | (SUPPORT_PLAY)) | (SUPPORT_INFO)) | (SUPPORT_TRIM)) | (SUPPORT_MUTE); <FIXE>
<FIXS> this.slsRange = SlsRangeType.All; <FIXE> <FIXS> this.slsRange = SlsRangeType.Odd; <FIXE> <FIXS> this.slsRange = SlsRangeType.Even; <FIXE>
<FIXS> <FIXE>
<FIXS> com.phylogeny.extrabitmanipulation.helper.SculptSettingsHelper.setHollowShape(player, stack, isWire, isHollowShape); <FIXE>
<FIXS> if (x < (mBar.getLeftX())) { thumb.setX(mBar.getLeftX()); <FIXE> <FIXS> }else if (x > (mBar.getRightX())) { thumb.setX(mBar.getRightX()); invalidate(); }else { thumb.setX(x); invalidate(); } <FIXE>
<FIXS> com.CardiacArray.data.User checkUser = userDb.getUserByEmail(user.getEmail()); <FIXE>
<FIXS> if ((pos != null) && (!(pos.equals(prevPos)))) { <FIXE> <FIXS> prevPos = pos; } <FIXE>
<FIXS> model.GameCreation.instance.tableGrid.reset(); <FIXE>
<FIXS> <FIXE>
<FIXS> java.lang.String secondaryKey = key.substring(0, 1); <FIXE>
<FIXS> return new org.sbml.jsbml.ext.layout.Point((((point1.getX()) + (point2.getX())) / 2), (((point1.getY()) + (point2.getY())) / 2), 0); <FIXE>
<FIXS> return true; <FIXE>
<FIXS> while (!(wifiDataReceived)) { } <FIXE>
<FIXS> while (counter < (content.length())) { <FIXE>
<FIXS> gridHitbox.showTileWhereClicked(touched.x, touched.y); <FIXE>
<FIXS> if (n == 2) return true; <FIXE>
<FIXS> java.util.Date date = new java.util.Date(); <FIXE>
<FIXS> java.lang.Long productId, @com.alpha.web.RequestParam(value = "count") java.lang.Long count, @com.alpha.web.RequestParam(value = "price") <FIXE> <FIXS> return new org.springframework.http.ResponseEntity(productRepository.save(product), org.springframework.http.HttpStatus.OK); <FIXE>
<FIXS> if (group13.ecobuddy2.UserNavigation.stopMarkers.isEmpty()) { group13.ecobuddy2.UserNavigation.makeALongToast("Cleaning up..."); return ; } <FIXE>
<FIXS> if ((eval2(newState)) > currentEval) { <FIXE>
<FIXS> <FIXE>
<FIXS> for (int i = filter.nextSetBit(0); i >= 0; i = filter.nextSetBit((i + 1))) { indexes.add(i); <FIXE>
<FIXS> android.content.ContentValues values = new android.content.ContentValues(); <FIXE> <FIXS> <FIXE> <FIXS> <FIXE> <FIXS> database.update(SQLiteHelper.LIST_TABLE, values, null, null); <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> dest.writeString(userRating); <FIXE>
<FIXS> <FIXE>
<FIXS> saveScaledPhoto(data, true); <FIXE>
<FIXS> org.bonitasoft.engine.service.TaskResult<java.lang.Void> taskResult = new org.bonitasoft.engine.service.TaskResult(new org.bonitasoft.engine.work.SWorkException("plop")); <FIXE>
<FIXS> <FIXE>
<FIXS> this.value = 1 / (1 + ((float) (java.lang.Math.pow(((float) (java.lang.Math.E)), ((-z) + 1))))); <FIXE>
<FIXS> if (index < 0) { index = java.lang.Math.abs((index + 1)); } if (index > ((timePoints.size()) - 2)) { <FIXE>
<FIXS> return numberOfPages - 1; <FIXE> <FIXS> return pageLimit - 1; <FIXE>
<FIXS> return ((!(task.getProtocol().isNew())) || (!(canExecuteAction(task.getProtocol(), ProtocolActionType.GRANT_EXEMPTION)))) && (hasPermission(userId, task.getProtocol(), PermissionConstants.MAINTAIN_PROTOCOL_SUBMISSIONS)); <FIXE>
<FIXS> worldObj.notifyNeighborsOfStateChange(target, neighborBlock); <FIXE>
<FIXS> public void clearFields(android.view.View v) { <FIXE>
<FIXS> mEncodedEmail = com.superpak.sammengistu.stuckapp.activities.StuckSignUpActivity.encodeEmail(account.getEmail().toLowerCase()); <FIXE>
<FIXS> mMaxCircleRadius = 0.15F * (mHeight); <FIXE>
<FIXS> public boolean logoutUser() { <FIXE> <FIXS> return true; <FIXE>
<FIXS> <FIXE>
<FIXS> } <FIXE>
<FIXS> @org.testng.annotations.Test(expectedExceptions = org.broadinstitute.sting.utils.exceptions.UserException.class) <FIXE> <FIXS> org.broadinstitute.sting.utils.variant.GATKVariantContextUtils.getIndexesOfRelevantAlleles(alleles1, alleles2, (-1)); <FIXE>
<FIXS> uk.co.qmunity.lib.raytrace.QMovingObjectPosition mop = rayTrace(uk.co.qmunity.lib.raytrace.RayTracer.getStartVector(player), uk.co.qmunity.lib.raytrace.RayTracer.getEndVector(player)); <FIXE>
<FIXS> <FIXE>
<FIXS> org.junit.Assert.assertThat(registry.getMocks(), containsInAnyOrder(allOf(doubleWithName(com.pchudzik.springmock.infrastructure.definition.registry.DoubleRegistryParserTest.ANY_SERVICE1_NAME), doubleForClass(com.pchudzik.springmock.infrastructure.definition.registry.DoubleRegistryParserTest.AnyService1.class)), allOf(doubleWithName(com.pchudzik.springmock.infrastructure.definition.registry.DoubleRegistryParserTest.ANY_SERVICE2_NAME), doubleForClass(com.pchudzik.springmock.infrastructure.definition.registry.DoubleRegistryParserTest.AnyService2.class)))); <FIXE>
<FIXS> <FIXE>
<FIXS> android.view.View view; <FIXE> <FIXS> view = inflater.inflate(headerView, parent, false); return new ayalma.ir.NavigationView.NavigationView.headerHolder(view); <FIXE> <FIXS> view = inflater.inflate(R.layout.navigation_row_rtl, parent, false); <FIXE>
<FIXS> <FIXE>
<FIXS> if (!status) { tags.add(result); <FIXE> <FIXS> <FIXE>
<FIXS> assertThat(e.getMessage(), containsString("Mustache function [toJson] must contain one and only one identifier")); <FIXE> <FIXS> assertThat(e.getMessage(), containsString("Mustache function [toJson] must contain one and only one identifier")); <FIXE>
<FIXS> if ((issues.get(country).get(publication)) == null) { issues.get(country).put(publication, new java.util.ArrayList<net.ducksmanager.whattheduck.Issue>()); } <FIXE>
<FIXS> <FIXE> <FIXS> dos.finish(); <FIXE> <FIXS> return baos.toByteArray(); <FIXE>
<FIXS> return 0; <FIXE>
<FIXS> <FIXE> <FIXS> lines.remove(line); <FIXE> <FIXS> if (line < (lines.size())) { lines.set(line, edit); }else { lines.add(edit); } <FIXE>
<FIXS> adidas.changeStockPrice(24); <FIXE>
<FIXS> cgeo.geocaching.ui.dialog.Dialogs.message(activity, R.string.init_sendToCgeo, activity.getString(R.string.init_sendToCgeo_register_ok, pin)); <FIXE>
<FIXS> assertEquals(crazyMap, model.getComplicatedMap()); assertEquals(crazyMap, model.getComplicatedMap()); <FIXE>
<FIXS> if (radioButton != null) { givenAnswer[0] = java.lang.String.valueOf(radioButton.getText()); } <FIXE>
<FIXS> videoStartAt = startAt * 1000; <FIXE> <FIXS> if ((mMediaPlayer.getDuration()) < (videoStartAt)) { <FIXE>
<FIXS> if ((zilla.libcore.file.PersistenceManager.cache.get(name)) == null) return null; <FIXE>
<FIXS> player.setShouldCancelPlay(true); <FIXE>
<FIXS> return !((dispositionService.isDisposableItemCutoff(nodeRef)) || (recordFolderService.isRecordFolderClosed(nodeRef))); <FIXE>
<FIXS> double angle2 = java.lang.Math.atan2(((target.getCoordinateY()) - (source.getCoordinateY())), ((target.getCoordinateX()) - (source.getCoordinateX()))); <FIXE>
<FIXS> public static TreeNode findCA3(TreeNode root, TreeNode a, TreeNode b) { <FIXE> <FIXS> return findCommonAncestor.ancesterHelper(root, a, b); <FIXE>
<FIXS> (waiting)--; <FIXE>
<FIXS> if (((jsonObj != null) && ((jsonObj.get(propertyName)) != null)) && (!(jsonObj.get(propertyName).isJsonNull()))) { <FIXE>
<FIXS> <FIXE> <FIXS> nl.tudelft.graphalytics.granula.GranulaPlugin.LOG.debug("Start postBenchmark in Granula"); <FIXE>
<FIXS> private org.apache.hadoop.hbase.regionserver.StoreScanner createScanner(org.apache.hadoop.hbase.regionserver.Store store) throws java.io.IOException { <FIXE> <FIXS> org.apache.hadoop.hbase.regionserver.StoreScanner internalScanner = new org.apache.hadoop.hbase.regionserver.StoreScanner(store, store.getScanInfo(), scan, java.util.Collections.singletonList(scanner), ScanType.COMPACT_RETAIN_DELETES, smallestReadPoint, org.apache.hadoop.hbase.HConstants.OLDEST_TIMESTAMP); <FIXE>
<FIXS> long createDay = (activity.getCreateDate().getTime()) / millisecondsInDay; <FIXE>
<FIXS> this.adapter.unregisterDataSetObserver(dataSetObserver); <FIXE>
<FIXS> execute(); <FIXE> <FIXS> return mHolder.read(); <FIXE>
<FIXS> org.mockito.Mockito.when(voteMap.add(moe.cdn.cweb.security.CwebImportServiceImplTest.CONTENT_HASH, moe.cdn.cweb.TorrentTrustProtos.SignedVote.newBuilder().setSignature(moe.cdn.cweb.security.CwebImportServiceImplTest.VOTE_1_SIGNATURE).setVote(moe.cdn.cweb.security.CwebImportServiceImplTest.VOTE_1).build())).thenReturn(com.google.common.util.concurrent.Futures.immediateFuture(true)); <FIXE>
<FIXS> return ((o instanceof com.tr.rp.ast.statements.While) && (((com.tr.rp.ast.statements.While) (o)).whileCondition.equals(whileCondition))) && (((com.tr.rp.ast.statements.While) (o)).body.equals(body)); <FIXE>
<FIXS> if ((getRemoteVideoView()) != null) { <FIXE>
<FIXS> public static void main(java.lang.String[] args) { <FIXE>
<FIXS> int i; <FIXE> <FIXS> for (i = 0; i < (contours.size()); i++) { <FIXE>
<FIXS> return (handler != null) && (handler instanceof tamaized.tammodized.common.tileentity.TamTileEntityInventory.ItemStackFilterHandler ? !(((tamaized.tammodized.common.tileentity.TamTileEntityInventory.ItemStackFilterHandler) (handler)).extractBypass(i, 1, true).isEmpty()) : !(handler.extractItem(i, 1, true).isEmpty())); <FIXE>
<FIXS> iterator.remove(); <FIXE>
<FIXS> if (((url.startsWith("oob")) || (url.startsWith("404"))) || (url.startsWith("ood"))) { <FIXE>
<FIXS> if (context instanceof android.app.Activity) { <FIXE> <FIXS> }else <FIXE>
<FIXS> <FIXE>
<FIXS> current = current.getNext(); <FIXE>
<FIXS> if (p[i].equals("SSLv3")) <FIXE>
<FIXS> edit.setText(searchList.get(position).toString().split(" / ")[0]); edit.setTag(searchList.get(position).toString().split(" / ")[1]); <FIXE>
<FIXS> public void setButtonState(android.view.View button, boolean selected) { <FIXE> <FIXS> <FIXE> <FIXS> } if (button instanceof android.widget.Button) { ((android.widget.Button) (button)).setTextAppearance(this.context, (selected ? R.style.WhiteBoldText : R.style.PrimaryNormalText)); <FIXE>
<FIXS> private boolean handle(final org.bedework.eventreg.requests.EventregRequest request) throws java.lang.Throwable { <FIXE>
<FIXS> visitPattern(r, (type != null ? java.util.Collections.singleton(((org.eclipse.rdf4j.model.IRI) (type))) : java.util.Collections.<org.eclipse.rdf4j.model.IRI>emptySet()), null); <FIXE>
<FIXS> if ((isBluetoothLowEnergySupported()) && ((crashCallBackWrapper) != null)) { <FIXE>
<FIXS> if ((com.xdandroid.simplerecyclerview.SingleViewTypeAdapter.getItemSpanSizeForGrid(0, 0, 1)) == (-1)) { <FIXE>
<FIXS> if (x > 0) { for (int i = 1; i < x; i++) { if ((i % 2) == 1) { java.lang.System.out.println((i + "...")); } <FIXE> <FIXS> if ((x % 2) == 1) java.lang.System.out.println((x + "!")); <FIXE> <FIXS> <FIXE>
<FIXS> final java.util.Iterator<java.lang.String> iter = message.getData().iterator(); while (iter.hasNext()) { <FIXE>
<FIXS> public com.finance.controller.KaptchaController.CaptchaResopnse getKaptchaImageCode(javax.servlet.http.HttpSession session) { <FIXE> <FIXS> <FIXE>
<FIXS> int trapNumber = at.conradi.helloworld.MainActivity.newRandomNumberBetween(limit); <FIXE> <FIXS> trapNumber = at.conradi.helloworld.MainActivity.newRandomNumberBetween(limit); <FIXE>
<FIXS> locations.add(loc); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> if ((user == null) || (!(user.getPassword().equals(logonInfo.getPassword())))) <FIXE>
<FIXS> private void checkKeys() { <FIXE>
<FIXS> <FIXE>
<FIXS> private java.util.Set<org.rapla.facade.Conflict> getConflictsToDeleteFromCache(org.rapla.storage.UpdateResult result) { <FIXE> <FIXS> java.util.Set<org.rapla.facade.Conflict> conflicts = new java.util.HashSet<org.rapla.facade.Conflict>(); <FIXE>
<FIXS> <FIXE>
<FIXS> moviePlayerPeer = 0; <FIXE> <FIXS> if (isVideo) { com.codename1.impl.ios.IOSImplementation.nativeInstance.releasePeer(moviePlayerPeer); moviePlayerPeer = 0; } <FIXE>
<FIXS> <FIXE>
<FIXS> explainationTextArea = new org.ednovo.gooru.client.ui.TinyMCE(500); <FIXE> <FIXS> explainationTextArea.setCharacterLimit(500); <FIXE>
<FIXS> if (((mLastMathElementModified) != null) && (contains(mLastMathElementModified))) { <FIXE>
<FIXS> getLayoutParams().height = java.lang.Integer.parseInt(animator.getAnimatedValue().toString()); <FIXE> <FIXS> getLayoutParams().width = java.lang.Integer.parseInt(animator.getAnimatedValue().toString()); <FIXE>
<FIXS> <FIXE>
<FIXS> java.math.BigDecimal amount = moneyMajorToBigDecimal(moneyContext.moneyMajor()).add(moneyMinorToBigDecimal(moneyContext.moneyMinor())); return org.joda.money.Money.of(currencyUnit, amount); }else { return null; <FIXE> <FIXS> <FIXE>
<FIXS> if (relPath.isEmpty()) { return node; <FIXE> <FIXS> if (node.hasNode(relPath)) { return node.getNode(relPath); }else if (node.hasProperty(relPath)) { return node.getProperty(relPath); }else { return null; } <FIXE>
<FIXS> public java.util.List<fi.helsinki.cs.mobiilitiedekerho.backend.models.Like> describeAnswerLikes(int answerId) { <FIXE> <FIXS> java.util.List<fi.helsinki.cs.mobiilitiedekerho.backend.models.Like> likes = con.createQuery(sql).addParameter("aid", answerId).executeAndFetch(fi.helsinki.cs.mobiilitiedekerho.backend.models.Like.class); <FIXE>
<FIXS> <FIXE>
<FIXS> new org.fhaes.tools.FHOperations(parent, inputFileArray, outputFile, startYear, endYear, fireFilterValue, filter, false, true, false, minNumberSamples, null, null); <FIXE>
<FIXS> if (temp != 0) vec = far.math.vec.Vec3f.div(vec, temp); <FIXE>
<FIXS> return runnable; <FIXE>
<FIXS> } while (subnode != null ); <FIXE>
<FIXS> return service.update(records); <FIXE>
<FIXS> int m = (calendario.get(java.util.Calendar.MONTH)) + 1; <FIXE>
<FIXS> table.addStringFilter(filter.getColumn(), filter.getValue(), filter.getType()); <FIXE>
<FIXS> if ((pointer) == (((bytestream.length) * 8) - 1)) { <FIXE>
<FIXS> <FIXE>
<FIXS> net.minecraft.client.settings.KeyBinding mcK = new net.minecraft.client.settings.KeyBinding(k.keyName, k.defaultKeyCode, moze_intel.projecte.PECore.MODID); <FIXE>
<FIXS> }else { a.setGroups(null); <FIXE>
<FIXS> final java.util.Map<java.lang.String, com.vaadin.spring.access.ViewAccessControl> accessDelegates = this.applicationContext.getBeansOfType(com.vaadin.spring.access.ViewAccessControl.class); <FIXE>
<FIXS> mAdapter.notifyItemChanged(((com.example.illum.criminalintent.CrimeFragment.getLastModifiedCrimePosition()) - 1)); <FIXE>
<FIXS> return defaultStrategies; <FIXE>
<FIXS> <FIXE> <FIXS> this.getItems().add(index, item); item.setQuestion(this); <FIXE>
<FIXS> fichiers.add(utils.MongoAccess.request("fichier", new org.bson.types.ObjectId(fichiers_id.get(s))).as(models.Fichier.class)); <FIXE>
<FIXS> setTag("TrackingEnabled", java.lang.String.valueOf(trackingEnabled)); <FIXE>
<FIXS> select(curSetting); <FIXE>
<FIXS> startCrop(activity, data.getData()); <FIXE>
<FIXS> partialIntegral = new double[nNodes][nPoints]; <FIXE>
<FIXS> genome.addStrand(strand); <FIXE>
<FIXS> switch (input) { case "1" : managerScore.setCurrentStatus(Status.wait_add_student_info); break; case "2" : <FIXE> <FIXS> break; case "3" : managerScore.setCurrentStatus(Status.exit); break; } <FIXE>
<FIXS> <FIXE>
<FIXS> public java.math.BigDecimal getContractBudgetDetailPrice(com.ersoft.web.domain.business.budget.contract.ContractBudgetDetail detail, java.lang.String category) { <FIXE> <FIXS> java.util.List<com.ersoft.web.domain.business.cost.batch.sec.ActualCostBatchSec> costs = findActiveAll(com.ersoft.web.service.business.ActualCostBatchSecPredicates.contractBudgetDetailAndItemCategoryPredicate(detail, category), new org.springframework.data.domain.Sort(org.springframework.data.domain.Sort.Direction.ASC, "operateDate")); <FIXE> <FIXS> price = price.add(getDetailPrice(detail, actualCostBatch)); <FIXE>
<FIXS> <FIXE>
<FIXS> verify(container.factory).createWebDriver(captor.capture()); org.junit.Assert.assertThat(captor.getValue().getHttpProxy(), is(notNullValue())); org.junit.Assert.assertThat(captor.getValue().getSslProxy(), is(notNullValue())); <FIXE>
<FIXS> externalStorageDirectory = new java.io.File(android.os.Environment.getExternalStorageDirectory(), getPackageName()); <FIXE>
<FIXS> if (routes != null) for (org.onebusaway.gtfs.model.AgencyAndId route : routes) if (route != null) patchesByRoute.remove(route, alertPatch); <FIXE>
<FIXS> for (int i = 0, n = entities.size; i < n; i++) <FIXE>
<FIXS> nodes.get(cursor).addChild(new_entry); <FIXE>
<FIXS> updateItem.setPartId(java.lang.Integer.parseInt(stringArray[0])); updateItem.setQuantity(stringArray[1]); updateItem.setLocation(stringArray[2]); <FIXE>
<FIXS> assertTrue(main.utils.DataFormatValidator.validateDestinationID(idLegal)); assertFalse(main.utils.DataFormatValidator.validateDestinationID(idZero)); assertFalse(main.utils.DataFormatValidator.validateDestinationID(idNegative)); <FIXE>
<FIXS> protected static void addCascadeDeleteField(final java.lang.Class<?> currentClass, final java.lang.String fieldName) { final com.orientechnologies.orient.object.enhancement.OObjectEntitySerializer.OObjectEntitySerializedSchema serializedSchema = com.orientechnologies.orient.object.enhancement.OObjectEntitySerializer.getCurrentSerializedSchema(); if (serializedSchema == null) return ; <FIXE>
<FIXS> if (billRegion.isEmpty()) { <FIXE>
<FIXS> if (s == null) return false; else while (itr.hasNext()) if (((java.lang.String) (s)).equalsIgnoreCase(itr.next())) <FIXE> <FIXS> <FIXE>
<FIXS> auto = new org.usfirst.frc.team5985.routines.Auto(org.usfirst.frc.team5985.routines.Auto.autoPositions.DEFAULT, driveTrain, shooter); <FIXE>
<FIXS> if ((request == null) || (!(request.error))) { mapView.tileDownloaded(request); } <FIXE>
<FIXS> mKeyboardSwitcher.setVoiceMode(((mEnableVoice) && (mEnableVoiceButton)), mVoiceOnPrimary, null); <FIXE>
<FIXS> return org.dungeon.creatures.Hero.SECONDS_TO_PICK_UP_AN_ITEM; <FIXE> <FIXS> return 0; <FIXE>
<FIXS> entity.exceptions.ErrorMessage err = new entity.exceptions.ErrorMessage(e, 404, true); <FIXE>
<FIXS> java.lang.System.exit(0); <FIXE>
<FIXS> pos += 2; <FIXE>
<FIXS> visit(node.getCondition()); <FIXE> <FIXS> <FIXE>
<FIXS> executor.fireAdEvent("admob.banner.events.LOAD"); <FIXE>
<FIXS> bookDao.store(book); <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> return true; <FIXE>
<FIXS> <FIXE> <FIXS> ca.ualberta.cs.team1travelexpenseapp.ExpenseListController.getCurrentExpenseList().setExpenseList(expenseArray); <FIXE>
<FIXS> public java.util.List<by.dzmitry.model.entities.Word> getUnstudiedWordsForUser(java.lang.String login) { <FIXE> <FIXS> return wordsRepository.read(params); <FIXE>
<FIXS> org.osgp.adapter.protocol.dlms.application.threads.RecoverKeyProcess.LOGGER.error("Unexpected exception: {}", e); <FIXE>
<FIXS> askButton.click(); <FIXE> <FIXS> <FIXE>
<FIXS> android.widget.Toast.makeText(context, "No internet connection", Toast.LENGTH_SHORT).show(); <FIXE>
<FIXS> public static Vector3D getForce(Particle3D p1, Particle3D p2, double grav) { <FIXE> <FIXS> <FIXE> <FIXS> return r.mult(((((-grav) * m1) * m2) / ((r.magSq()) * (r.mag())))); <FIXE>
<FIXS> com.reply.pedo.Holder.ParamHolder.steps3.add(2); <FIXE> <FIXS> <FIXE> <FIXS> com.reply.pedo.Holder.ParamHolder.direction3.add(30); com.reply.pedo.Holder.ParamHolder.steps3.add(2); com.reply.pedo.Holder.ParamHolder.direction3.add(30); com.reply.pedo.Holder.ParamHolder.steps3.add(1); <FIXE>
<FIXS> name = name.trim().replaceAll(" ", "_").toLowerCase(); <FIXE>
<FIXS> java.util.ArrayList<org.usfirst.frc4579.Robot2017.subsystems.MatOfPoint> contourList = new java.util.ArrayList<>(); <FIXE>
<FIXS> int yyyy = realStart.get(java.util.Calendar.YEAR); int mm = realStart.get(java.util.Calendar.MONTH); int dd = java.lang.Math.min(30, realStart.get(java.util.Calendar.DAY_OF_MONTH)); if ((!method) && (org.apache.poi.ss.formula.functions.Days360.isLastDayOfMonth(realStart))) <FIXE>
<FIXS> return repository.isAnnotationFinished(state.getDocument(), state.getUser()); <FIXE>
<FIXS> userRoot = getFilePreferences(path); <FIXE> <FIXS> return userRoot; <FIXE>
<FIXS> if (res == null) { res = org.obeonetwork.m2doc.util.PictureType.JPG; } return res; <FIXE>
<FIXS> <FIXE>
<FIXS> imm.hideSoftInputFromWindow(view.getWindowToken(), 0); <FIXE>
<FIXS> <FIXE>
<FIXS> java.util.ArrayList<java.lang.Integer> c = new java.util.ArrayList<java.lang.Integer>(); <FIXE>
<FIXS> getSupportFragmentManager().beginTransaction().replace(R.id.weather_detail_container, fragment, com.example.android.sunshine2.MainActivity.DETAILFRAGMENT_TAG).commit(); <FIXE>
<FIXS> return new com.stratio.crossdata.common.logicalplan.Filter(com.stratio.connector.deep.LogicalWorkflowBuilder.retrieveFilterOperation(operator, indexed), relation); <FIXE>
<FIXS> if (((feedTypeDalFilter.getIdList()) != null) && ((feedTypeDalFilter.getIdList().size()) > 0)) { <FIXE>
<FIXS> if (true) { <FIXE>
<FIXS> krzych.Model model = gd.solve(data); <FIXE>
<FIXS> public static void writeDOMXML(org.jdom2.Document document, java.io.FileOutputStream w) throws java.io.IOException { <FIXE>
<FIXS> gson = new com.google.gson.GsonBuilder().serializeNulls().create(); <FIXE>
<FIXS> throw new java.lang.IllegalArgumentException("DataSource can't be null"); <FIXE> <FIXS> throw new java.lang.IllegalArgumentException("TransactionIsolationLevel can't be null"); <FIXE>
<FIXS> return (((((this.coefficiente) * (this.deltaT)) * (this.superficie)) * t) / (this.spessore)) + (((((this.coeffInfissi) * (this.deltaT)) * (this.superficieInfissi)) * t) / (this.spessoreInfissi)); <FIXE>
<FIXS> java.util.Set<java.lang.Long> ids = new java.util.HashSet<>(); <FIXE>
<FIXS> return (("GET".equals(request.getMethod())) || (!("true".equals(java.lang.System.getenv("enable.permission.control"))))) || (request.getPathInfo().contains("User/v1/login")); <FIXE>
<FIXS> public java.util.List<Message> readJSON() throws java.io.IOException { java.util.List<Message> messages; <FIXE>
<FIXS> if (!(validSite(row, col))) { <FIXE>
<FIXS> fi.muikku.plugins.forum.model.ForumAreaGroup group = (groupId != null) ? findForumAreaGroup(groupId) : null; <FIXE>
<FIXS> if ((!(m_CameraCentered)) && ((m_Maps) != null)) { <FIXE>
<FIXS> return java.lang.Integer.parseInt(value); <FIXE>
<FIXS> return true; <FIXE>
<FIXS> timerHandler.removeCallbacks(timerRunnable); <FIXE>
<FIXS> if ((getAdapterPosition()) == (-1)) { return ; } <FIXE>
<FIXS> super.cleanup(); <FIXE>
<FIXS> public static eu.davidea.examples.models.SimpleItem newSimpleItem(int i, eu.davidea.examples.models.HeaderItem header) { <FIXE> <FIXS> if (header != null) { <FIXE>
<FIXS> <FIXE>
<FIXS> if ((input.stackSize) < 1) { <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> java.lang.String browserInfo = ((core.Platform.getBrowserName(instance)) + " ") + (core.Platform.getBrowserVersion(instance)); java.lang.System.out.println(((description + ":	") + (browserInfo.replace(" ", " ")))); <FIXE>
<FIXS> if ((links) != null) { <FIXE>
<FIXS> <FIXE> <FIXS> adjList.put(source, new java.util.ArrayList<>()); <FIXE>
<FIXS> <FIXE>
<FIXS> asu.reach.DialogBuilder.ddActivity = null; <FIXE>
<FIXS> <FIXE>
<FIXS> assertEquals("0", period); <FIXE>
<FIXS> mouseXPos = (mouseXPos) + (eu.asterics.component.actuator.mouse.ConversionUtils.doubleFromBytes(data)); <FIXE>
<FIXS> return on(event, new me.mneri.eloop.Callback() { <FIXE> <FIXS> public void run(java.lang.Object data) { <FIXE>
<FIXS> public java.lang.String getMemberId() { <FIXE> <FIXS> java.lang.System.out.println(id); return id; <FIXE>
<FIXS> http.authorizeRequests().antMatchers("/register").permitAll().antMatchers("/resources/**").permitAll().anyRequest().authenticated().and().formLogin().loginPage("/").permitAll().and().logout().permitAll().and().exceptionHandling().accessDeniedPage("/"); <FIXE>
<FIXS> return logica.ControladoraCaso.desasociarUsuarioACaso(usuarioActual, usuario, iUE); <FIXE> <FIXS> <FIXE>
<FIXS> java.lang.String key; <FIXE>
<FIXS> if (((br.edu.ifsp.util.Config.getInstance()) != null) && ((br.edu.ifsp.util.Config.getInstance().getDirectory()) != null)) { <FIXE>
<FIXS> assertEquals(test.countNumbersWithUniqueDigitsConstantTime(0), 1); assertEquals(test.countNumbersWithUniqueDigitsConstantTime(2), 91); assertEquals(test.countNumbersWithUniqueDigitsConstantTime(12), 8877691); <FIXE>
<FIXS> callIntent.putExtra(AppContants.DataBase.KEY_TYPE, AppContants.DataBase.Type.DB_STANDARD.getType()); <FIXE>
<FIXS> <FIXE> <FIXS> output.registerListener(this); <FIXE>
<FIXS> <FIXE>
<FIXS> transport.finishStream(id(), status, null); <FIXE>
<FIXS> }else if (score == 21) { return score; } <FIXE>
<FIXS> if (shiftsTimetable != null) { if ((bookings != null) && ((bookings.length) > 0)) { for (model.period.Booking b : bookings) { shiftsTimetable.removePeriod(b); } } <FIXE> <FIXS> } <FIXE>
<FIXS> mBookmarkManager.importBookmarksFromBrowser(this); <FIXE>
<FIXS> currentDate = java.lang.String.valueOf(java.lang.Integer.valueOf(info.getDate())); <FIXE>
<FIXS> count = 0; <FIXE> <FIXS> count = 0; <FIXE>
<FIXS> for (int i = 0; i < (yPoints.length); i++) { yPoints[i] = (yPoints[i]) + 20; } <FIXE>
<FIXS> return org.myrobotlab.service.NeoPixel.NEOPIXEL_ANIMATION_STOP; <FIXE>
<FIXS> if ((currentTutorialIndex) == (tutorialMessages.length)) { <FIXE> <FIXS> if ((currentTutorialIndex) == (tutorialMessages.length)) { <FIXE>
<FIXS> java.lang.Integer length = header.getCompressedSize(); <FIXE>
<FIXS> <FIXE> <FIXS> mw.start(primaryStage); <FIXE>
<FIXS> deleteRows(); test01_addRowPass(); test01_addRowPass(); com.jayway.restassured.module.mockmvc.RestAssuredMockMvc.given().header(getHeaderOtherAccount()).contentType("application/json").when().get("/api/restricted/session").then().statusCode(200).body("size()", org.hamcrest.core.IsEqual.equalTo(0)); <FIXE>
<FIXS> return java.lang.Long.parseLong(this.snapshotId); <FIXE>
<FIXS> if (alerts == null) { <FIXE>
<FIXS> java.lang.String packageName = javaWrapper.getTestObjectsPackageName().replace("_", "_1"); packageName = packageName.replace(".", "_"); java.lang.String className = testObjectName.replace("_", "_1"); return ((("Java_" + packageName) + "_") + className) + "_call"; <FIXE>
<FIXS> myData.put(myHandle.name(), myHandle.data()); <FIXE>
<FIXS> org.jboss.shrinkwrap.api.spec.JavaArchive archive = org.jboss.shrinkwrap.api.ShrinkWrap.create(org.jboss.shrinkwrap.api.spec.JavaArchive.class, "arquillian-junit.jar").addPackages(true, "junit", "org.junit", org.jboss.arquillian.junit.Arquillian.class.getPackage().getName()).addAsServiceProvider(org.jboss.arquillian.container.test.spi.TestRunner.class, org.jboss.arquillian.junit.container.JUnitTestRunner.class); <FIXE>
<FIXS> for (int i = 0; i < 4; i++) { <FIXE>
<FIXS> <FIXE>
<FIXS> return (((((((("SELECT " + target) + " FROM ") + (MediaLibrary.VIEW_SONGS_ALBUMS_ARTISTS)) + " WHERE ") + (MediaLibrary.SongColumns._ID)) + " IN (") + genreSelect) + ") GROUP BY ") + target; <FIXE>
<FIXS> } finally { em.close(); <FIXE>
<FIXS> return new com.kodilla.good.patterns.challenges.challenge2.orders.ProductOrderDto(orderRequest.getUser(), orderRequest.getProduct(), false); <FIXE>
<FIXS> <FIXE> <FIXS> comics.addAll(results); this.totalItems = totalItems; <FIXE>
<FIXS> states.pop(); <FIXE>
<FIXS> <FIXE>
<FIXS> public static java.lang.String getLanguageDisplayName(java.lang.String isoCode) { <FIXE>
<FIXS> break; <FIXE>
<FIXS> if ((args.length) < 2) { <FIXE> <FIXS> int[] choices = new int[args.length]; <FIXE> <FIXS> choices[i] = i; <FIXE>
<FIXS> <FIXE> <FIXS> if (!(restoring)) { udfIdCnt = 0; idsInFlight = new java.util.HashMap<>(poolSize); } <FIXE>
<FIXS> <FIXE>
<FIXS> public static <T extends org.roda.core.data.v2.index.IsIndexed> void delete(final org.roda.core.data.v2.user.RodaUser user, final java.lang.Class<T> classToReturn, final org.roda.core.data.v2.index.SelectedItems<T> ids) throws org.roda.core.data.exceptions.AuthorizationDeniedException, org.roda.core.data.exceptions.GenericException, org.roda.core.data.exceptions.NotFoundException, org.roda.core.data.exceptions.RequestNotValidException { final org.roda.wui.common.ControllerAssistant controllerAssistant = new org.roda.wui.common.ControllerAssistant() { }; controllerAssistant.checkRoles(user, classToReturn); <FIXE>
<FIXS> com.google.inject.Key<?> key = com.google.inject.Key.get(io.datakernel.jmx.StandardMBeansRegistrationTest.ServiceStub.class); jmxRegistry.registerSingleton(key, service); <FIXE>
<FIXS> public java.lang.String closeAlertAndGetItsText() { <FIXE>
<FIXS> if (((!(entity instanceof net.minecraft.entity.item.EntityItem)) && (entity != (riddenByEntity))) && ((protectionTime) <= 0)) { <FIXE> <FIXS> setExplode(); <FIXE>
<FIXS> <FIXE> <FIXS> members.add(player); <FIXE>
<FIXS> if (status.isValid()) <FIXE> <FIXS> else { <FIXE> <FIXS> <FIXE>
<FIXS> private void ensureCapacity(int capacity) { <FIXE> <FIXS> java.lang.Object[] newElements = new java.lang.Object[2 * (elements.length)]; <FIXE>
<FIXS> final java.util.Comparator<java.net.SocketAddress> c = limit.socketAddressComparator(); org.junit.Assert.assertEquals(expected, c.compare(compareFirst, compareSecond)); org.junit.Assert.assertEquals((-(expected)), c.compare(compareSecond, compareFirst)); <FIXE>
<FIXS> final java.lang.String predicateToString() { <FIXE>
<FIXS> broadcastUpdate(gatt, tw.edu.ntust.jojllman.wearableapplication.BLE.BluetoothLeService.ACTION_DATA_AVAILABLE, characteristic); <FIXE>
<FIXS> <FIXE>
<FIXS> if ((remoteMessage.getNotification()) != null) { sendNotification(remoteMessage.getNotification().getTitle(), remoteMessage.getNotification().getBody(), projectID); } <FIXE>
<FIXS> helixImgGen.setZoomLevel(this.getZoomLevel()); this.updateImage(); <FIXE>
<FIXS> for (int i = 1; i < ((requests.size()) + 1); i++) { <FIXE>
<FIXS> view.CourierSystem s = new view.CourierSystem(null); <FIXE>
<FIXS> public boolean setFile(java.lang.String file) { <FIXE> <FIXS> return true; <FIXE> <FIXS> return false; <FIXE>
<FIXS> if (includeScopes) { <FIXE>
<FIXS> com.bumptech.glide.Glide.with(getApplicationContext()).load(data).bitmapTransform(new com.example.mjokic.quizapp.utils.GlideCircleTransformation(this)).into(((android.widget.ImageView) (findViewById(R.id.navDrawerAvatar)))); <FIXE>
<FIXS> }else { currentGameActivity.update(model); <FIXE> <FIXS> <FIXE>
<FIXS> for (int i = 0; i < ((craftSize) * (craftSize)); ++i) { net.minecraft.item.ItemStack itemstack = this.craftMatrix.getStackInSlotOnClosing(i); if (itemstack != null) { playerIn.dropPlayerItemWithRandomChoice(itemstack, false); <FIXE> <FIXS> } <FIXE>
<FIXS> if (((piece == null) && ((java.lang.Math.abs((x - (selectedPieceX)))) == 1)) && ((y - (selectedPieceY)) == (1 * direction))) { <FIXE>
<FIXS> <FIXE>
<FIXS> when(mockTableManagerSupport.startTableProcessing(tableId)).thenThrow(new org.sagebionetworks.repo.web.NotFoundException("This table does not exist")); <FIXE>
<FIXS> <FIXE>
<FIXS> if (status == (android.bluetooth.BluetoothGatt.GATT_FAILURE)) { <FIXE>
<FIXS> public int getCustomerID(java.util.Scanner console) { <FIXE>
<FIXS> <FIXE>
<FIXS> onImageSearch(0, true, s); <FIXE>
<FIXS> session.sendMessage(channel, formatMessage(message, origin, channel), null); <FIXE>
<FIXS> org.sugarj.cleardep.PersistableEntity e; <FIXE> <FIXS> e = org.sugarj.cleardep.PersistableEntity.inMemory.get(p); <FIXE> <FIXS> if (e == null) <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE> <FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> this.currentSpaceReference = null; this.currentLegacySpace = null; <FIXE>
<FIXS> if (targetElement >= 0) { <FIXE>
<FIXS> java.lang.System.out.println(mp.size()); <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> if ((y) == (that.y)) return 0; return ((that.y) - (y)) / ((double) ((that.x) - (x))); <FIXE>
<FIXS> <FIXE> <FIXS> diallingSymbol = dest.address.getAddress()[diallingProgress]; <FIXE>
<FIXS> <FIXE>
<FIXS> public java.awt.image.BufferedImage getImage() { <FIXE> <FIXS> if (((count) >= 0) && ((count) < 5)) <FIXE> <FIXS> if (((count) >= 0) && ((count) < 5)) <FIXE>
<FIXS> android.util.Log.v(eu.davidea.flexibleadapter.helpers.StickyHeaderHelper.TAG, ("swapHeader newPosition=" + (mHeaderPosition))); <FIXE>
<FIXS> private static java.lang.String getMethodName() { <FIXE>
<FIXS> if (handler != null) { mTouchHandlerMap.put(touchType, handler); } <FIXE>
<FIXS> if ((((username != null) && (password != null)) && (username.equals("potatis"))) && (password.equals("kakor"))) { softproject.services.PortCDMRequest req = new softproject.services.PortCDMRequest(); req.subscribe(); return "index"; }else return "login"; <FIXE> <FIXS> <FIXE>
<FIXS> } while (!(a.equals(a.normalize())) ); <FIXE>
<FIXS> if (hitBottom()) { <FIXE>
<FIXS> final android.os.Bundle btype = new android.os.Bundle(); <FIXE>
<FIXS> if (display.isEmpty()) <FIXE>
<FIXS> private static void ensureCapacity(ArrayQueueADT arrayQueueADT, int capacity) { <FIXE> <FIXS> java.lang.Object[] newElements = new java.lang.Object[2 * (arrayQueueADT.elements.length)]; <FIXE>
<FIXS> super.onLeftClick(x, y); <FIXE>
<FIXS> java.lang.String[] test = new java.lang.String[]{ "this" }; for (java.lang.String str : test) { <FIXE> <FIXS> java.util.ArrayList<java.lang.String> output = requireWords.CheckRequireWords(lines); <FIXE>
<FIXS> if (((i % 13) == 0) && (i != 0)) { <FIXE>
<FIXS> return true; <FIXE>
<FIXS> assertTrue(pianoActivity.getSymbolContainer().get(0).isMarked()); <FIXE>
<FIXS> (game.vLineupBatter)++; <FIXE> <FIXS> (game.hLineupBatter)++; <FIXE>
<FIXS> grid.onCrafted(player); <FIXE>
<FIXS> private <T extends java.lang.Comparable<T>> boolean checkSorted(T[] array) { <FIXE> <FIXS> if ((array[(i - 1)].compareTo(array[i])) > 0) { return false; } <FIXE> <FIXS> return true; <FIXE>
<FIXS> this.inputStream = socket.getInputStream(); <FIXE> <FIXS> this.inputStream = null; <FIXE>
<FIXS> overall.putAll(coordinateDepDao.findOverallDataCollected("oldprocessedcoord")); <FIXE>
<FIXS> coinmachine.CoinMachine coinMachine = ((coinmachine.CoinMachine) (subject)); if ((coinMachine.getCount()) == (coinMachine.getCapacity())) { messageLabel.setText("This machine is full"); messageLabel.setForeground(java.awt.Color.RED); <FIXE> <FIXS> int numCoins = coinMachine.getCount(); coinsNumTextField.setText(java.lang.String.valueOf(numCoins)); <FIXE>
<FIXS> <FIXE> <FIXS> scrollPane.setPrefViewportHeight((((rowCount * (lineHeight)) + (contentPadding.getTop())) + (contentPadding.getBottom()))); <FIXE>
<FIXS> intent.putExtra("scorePlayer0", scorePlayer0); intent.putExtra("scorePlayer1", scorePlayer1); <FIXE>
<FIXS> myIntent.putExtra("CurrentEvent", events.get(position)); <FIXE>
<FIXS> boa.gui.imageInteraction.ImageWindowManagerFactory.getImageManager().addImage(i.generateRawImage(getStructureIdx(ae.getActionCommand(), openRaw)), i, false, true); <FIXE>
<FIXS> int data = com.prabhash.java.interview.ch2.FindNthToLastNode.findKthToLast(head, 0); <FIXE>
<FIXS> com.squareup.picasso.Picasso.with(context).load(getURL(cursor)).fit().into(view); <FIXE>
<FIXS> db.insert(DatabaseInfo.SYSTEMS_TABLE, null, values); <FIXE> <FIXS> <FIXE>
<FIXS> return new org.jfree.chart.ChartPanel(barChart); <FIXE>
<FIXS> if ((mCardNumber) != null) { if ((mCardNumber.length()) > 12) { cardNumber.setText(checkCardNumberFormat(addSpaceToCardNumber(mCardNumber))); if ((mType) == (com.vinaygaba.creditcardview.CardType.AUTO)) { type.setBackgroundResource(getLogo(mType)); } <FIXE>
<FIXS> if (((getActivity()) != null) && (Parser.Util.isNetworkAvailable(getActivity()))) { <FIXE>
<FIXS> if (v != null) inputManager.hideSoftInputFromWindow(v.getWindowToken(), 0); <FIXE> <FIXS> <FIXE>
<FIXS> }else if ((currentPlayer.getPlayerNumber()) == (this.numPlayers)) { currentPlayer = allPlayers.get(0); } <FIXE>
<FIXS> android.content.Context newBase = com.limpoxe.fairy.core.PluginIntentResolver.resolveReceiverForClassLoader(msg.obj); if (newBase != null) { <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> boolean removeInternal(java.lang.Class<? extends com.badlogic.ashley.core.Component> componentClass) { <FIXE> <FIXS> return true; <FIXE> <FIXS> return false; <FIXE>
<FIXS> if (sender instanceof org.bukkit.command.ConsoleCommandSender) { <FIXE> <FIXS> return false; } <FIXE>
<FIXS> <FIXE>
<FIXS> java.lang.String cmd = (("python geocoder.py " + fileName) + " ") + outFileName; <FIXE> <FIXS> <FIXE>
<FIXS> if (metaStore.getDetail(extensionName).getStatus().equals(ExtensionStatus.ENABLED)) { <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> handleIdentifiableElement(resource, from, acceptor, constituentMember); <FIXE>
<FIXS> if ((source instanceof org.ietr.dftools.algorithm.model.sdf.esdf.SDFForkVertex) || ((source instanceof org.ietr.dftools.algorithm.model.sdf.esdf.SDFBroadcastVertex) && (!(source instanceof org.ietr.dftools.algorithm.model.sdf.esdf.SDFRoundBufferVertex)))) { <FIXE>
<FIXS> <FIXE>
<FIXS> return new itinerary.main.State(command, new itinerary.main.Command(command.getTask(), CommandType.DELETE, null), getAllTasks(), true); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> public void moveDownPackageableElements(org.eclipse.uml2.uml.PackageableElement packageableElement, java.util.Collection<org.eclipse.uml2.uml.PackageableElement> packageableElementsToMove) { <FIXE>
<FIXS> if (flags == (org.cyanogenmod.platform.internal.display.LiveDisplayService.ALL_CHANGED)) { <FIXE>
<FIXS> <FIXE> <FIXS> if (itr == null) { return neighbours; } <FIXE>
<FIXS> org.springframework.cache.guava.GuavaCache eventsCache = new org.springframework.cache.guava.GuavaCache(lv.tsi.calendar.config.CacheConfiguration.EVENTS_CACHE, com.google.common.cache.CacheBuilder.newBuilder().maximumSize(663).expireAfterWrite(24, java.util.concurrent.TimeUnit.HOURS).build()); <FIXE>
<FIXS> int index = (subHosts.indexOf(subHost)) + 1; <FIXE>
<FIXS> vejstykkeEntity = this.dawaModel.getVejstykke(101, 7064); <FIXE>
<FIXS> mListener.onFragmentInteraction(1); <FIXE> <FIXS> <FIXE>
<FIXS> if ((symbolList) != null) { myAdapter = new com.example.ivanradosavljevic.stockquotes.logic.MyAdapter(symbolList, getApplicationContext()); lv.setAdapter(myAdapter); } <FIXE>
<FIXS> com.google.gwt.emultest.java.lang.MathTest.assertEquals((a * b), java.lang.Math.multiplyExact(a, b)); <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> when(repositoryMock.findById(ru.doccloud.docs.service.RepositoryDocsCrudServiceTest.ID)).thenThrow(new ru.doccloud.common.exception.DocumentNotFoundException("")); <FIXE>
<FIXS> onBindViewHolder(holder, mCursor, position); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> sessionName.setText(realm.where(com.chtv.korsoapp.Models.Scoreboard.class).equalTo("scoreboardId", scoreBoardId).findFirst().getName()); <FIXE>
<FIXS> yellowAlert.setSummary(context.getResources().getQuantityString(R.plurals.plural_day, java.lang.Math.abs(yellowValue), yellowValue)); <FIXE> <FIXS> redAlert.setSummary(context.getResources().getQuantityString(R.plurals.plural_day, java.lang.Math.abs(redValue), redValue)); <FIXE>
<FIXS> <FIXE>
<FIXS> } catch (java.net.URISyntaxException | java.net.MalformedURLException exception) { <FIXE>
<FIXS> return (((startDate.before(d)) && (endDate.after(d))) || (startDate.equals(d))) || (endDate.equals(d)); <FIXE>
<FIXS> java.lang.String aggregationPrefix = (aggregation != null) ? inferPrefixForSingle(aggregation, table, destinationTable) : null; <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE> <FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> ch2 += 256; <FIXE>
<FIXS> javax.persistence.TypedQuery<java.lang.Long> query = em.createQuery(hql, java.lang.Long.class); <FIXE>
<FIXS> progress.setText(calculateProgress(savedPosition, words.length)); <FIXE>
<FIXS> for (int i = 1; i <= len; i++) { max = java.lang.Math.max(max, ((prac2.Tasks.recursiveCutRod(a, (len - i))) + (a[i]))); <FIXE>
<FIXS> }else { ws.write(data, offset, size); } <FIXE>
<FIXS> game.batch.begin(); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> io.fabric.sdk.android.Fabric.with(this, new com.crashlytics.android.Crashlytics()); <FIXE> <FIXS> <FIXE>
<FIXS> public final T parse(org.codehaus.jparsec.Token[] tokens, org.codehaus.jparsec.parameters.Parameters params) { org.codehaus.jparsec.ParserState state = new org.codehaus.jparsec.ParserState(null, null, tokens, 0, null, 0, tokens, params); <FIXE>
<FIXS> term1.append(testTerm.getParent().get()); <FIXE>
<FIXS> public void write() throws java.io.IOException { <FIXE> <FIXS> <FIXE>
<FIXS> return org.geotools.swt.styling.SimpleStyleConfigurator.showDialog(parent, featureSource, style); <FIXE>
<FIXS> ys[0] -= SHIFT; ys[1] -= SHIFT; }else { ys[0] += SHIFT; ys[1] += SHIFT; } <FIXE> <FIXS> xs[0] -= SHIFT; xs[1] -= SHIFT; }else { xs[0] += SHIFT; xs[1] -= SHIFT; } <FIXE>
<FIXS> if (((indexAcum) % 20) > 0) <FIXE> <FIXS> indexAcum -= 20; <FIXE>
<FIXS> values.put("login", queryValues.login); values.put("password", queryValues.password); <FIXE>
<FIXS> checkIdentifier(name, "inner class name"); <FIXE>
<FIXS> arguments.addAll(visitLamTele(arg)); <FIXE>
<FIXS> if ((level == (getCurrentLevel(chapter))) && (level < (sokobug.screens.ChooseLevelScreen.NUMBER_OF_LEVELS))) { <FIXE>
<FIXS> if (config.getString((title + (me.semakon.Utils.CAT))).equalsIgnoreCase(category)) { <FIXE> <FIXS> titles.add(title); } <FIXE>
<FIXS> if (position == 0) { <FIXE> <FIXS> MyData.selectAccountIndex = position - 1; MyData.selectedAccount = MyData.allMyAccounts.get((position - 1)); <FIXE>
<FIXS> if (com.pasapalabra.game.service.PasapalabraService.waitingClients.get(type).contains(session.getToken())) { <FIXE>
<FIXS> mFileManager.downloadFile(attachment.getFilename(), attachment.getFileurl(), "", crux.bphc.cms.fragments.ForumFragment.FOLDER_NAME, true); <FIXE>
<FIXS> no.hist.aitel.team12.app.Email.sendEmail((((((((((("Dear " + (firstName.getText())) + " ") + (lastName.getText())) + ",\nYou have been created as a Centre Manager for ") + (centreName.getText())) + ".\nYour username is: ") + (username.getText())) + "\nYour password is: ") + (password)) + "\n\nPlease change your password at your earliest oppurtunity.\n Regards, System Administrator for the SSS system,\nTeam12"), new no.hist.aitel.team12.app.EmailAddress(email.getText())); <FIXE>
<FIXS> if (fav.isActive) { <FIXE>
<FIXS> mIsLoggingEnabled.set(false); <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> public int add(java.lang.String name) { <FIXE> <FIXS> return idToSet; <FIXE>
<FIXS> actionList.add(action); actions.put(condition, actionList); }else { actionList.add(action); <FIXE> <FIXS> <FIXE>
<FIXS> if (startOffset >= endOffset) { return -1; } <FIXE>
<FIXS> <FIXE>
<FIXS> private boolean isChildOf(build.games.wraithaven.gui.MenuComponentHeirarchy parent, build.games.wraithaven.gui.MenuComponentHeirarchy child) { <FIXE>
<FIXS> return new org.gbif.utils.file.tabular.SuperCsvFileReader(in, quoteChar, delimiterChar, endOfLineSymbols, charset, headerLine); <FIXE>
<FIXS> this.mockMvc.perform(org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get(("/user/follow?id=" + (u2.getId())))); <FIXE>
<FIXS> <FIXE>
<FIXS> maximizingProperty.set(true); <FIXE> <FIXS> if (station.maximize(this)) { maximizingProperty.set(true); } <FIXE> <FIXS> <FIXE>
<FIXS> interactorsManager.drag(interactor, delta.getX(), delta.getY()); <FIXE> <FIXS> <FIXE>
<FIXS> if (!(regex.matcher(input).matches())) <FIXE>
<FIXS> adapter = new a501.itis.kpfu.ru.themoviedbapplication.adapter.SearchedTvShowListAdapter(getActivity(), list); <FIXE>
<FIXS> public static boolean isPlayerOpped(@org.jetbrains.annotations.NotNull final net.minecraft.command.ICommandSender sender) { <FIXE>
<FIXS> if ((((java.lang.Comparable) (item)).compareTo(((java.lang.Comparable) (_data.get(i))))) >= 0) { <FIXE>
<FIXS> protected void end() { <FIXE>
<FIXS> return com.github.yoojia.inputs.ValueSchema.ABTest(new com.github.yoojia.inputs.RangeValueBridge(min, max)).msg((((("输入数值大小必须在[" + min) + ",") + max) + "]之间")); <FIXE>
<FIXS> request.put("descType", descType.toLowerCase()); java.util.List<com.psk.pms.model.DescItemDetail.ItemDetail> itemsDetail = itemService.getBaseItemNames(request); <FIXE>
<FIXS> if ((!(jsonObject.isEmpty())) && ((newJson.charAt(1)) != wrappingQuote)) { <FIXE>
<FIXS> if (!(dataProvider.checkProjectMember(loadProjectName, member, loadAccount))) { <FIXE>
<FIXS> return ((x) == (other.x)) && ((y) == (other.y)); <FIXE>
<FIXS> for (hackbotcore.Unit u : units) if ((u.sectors.size()) == 0) <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> fs.notifyRemoteContinuationCreated(); <FIXE>
<FIXS> private boolean fetchViews() { <FIXE> <FIXS> return false; <FIXE> <FIXS> return true; <FIXE>
<FIXS> break; <FIXE>
<FIXS> <FIXE>
<FIXS> try { int progress = 0; for (com.filemanager.files.FileHolder fh : mFileHolders) { if (mCancel) { break; } recursiveDelete(fh.getFile()); try { dialog.setProgress(progress); } catch (java.lang.Exception e) { } progress++; <FIXE> <FIXS> } catch (java.lang.Exception e) { <FIXE>
<FIXS> this.averageTime = ((this.averageTime) == 0) ? stat.averageTime : ((this.averageTime) + (stat.averageTime)) / 2; <FIXE>
<FIXS> return minIntegerFactor == 0 ? 1.0F : 1.0F / (java.lang.Integer.highestOneBit(minIntegerFactor)); <FIXE>
<FIXS> UsersPanel.add(uv); <FIXE>
<FIXS> break; <FIXE>
<FIXS> assertEquals("tasks.sonarrunner.dependson check", taskSetupItem.getName()); <FIXE> <FIXS> <FIXE>
<FIXS> private int getPlayerForColumn(final int column, final java.lang.String playerFigure) { <FIXE>
<FIXS> private boolean isUsersEmpty() throws by.tr.library.dao.exception.DAOException { <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> if (studentinfo != null) session.setAttribute("sname", studentinfo.getSname()); <FIXE>
<FIXS> ExceptionHandler.handle(info, e, true, derivedClass, baseClass, subClass, true); <FIXE>
<FIXS> up = false; <FIXE> <FIXS> down = false; <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> factory.connectSocket(1000, null, new org.apache.http.HttpHost(sampleTlsEndpoint.getHostName()), sampleTlsEndpoint, null, null); <FIXE>
<FIXS> @net.smartcosmos.dao.things.repository.Test <FIXE> <FIXS> assertFalse(deleteList.isEmpty()); assertEquals(1, deleteList.size()); assertEquals(id, deleteList.get(0).getId()); <FIXE>
<FIXS> <FIXE>
<FIXS> gov.nasa.worldwind.geom.Vec4[] unitAxes = new gov.nasa.worldwind.geom.Vec4[]{ this.ru , this.su , this.tu }; <FIXE>
<FIXS> public java.lang.String displayAddForm(java.security.Principal principal, org.springframework.ui.ModelMap model) { <FIXE> <FIXS> model.addAttribute(tran.example.service.AddPostControllerService.MESSAGE_KEY, tran.example.service.AddPostControllerService.NOT_LOGGED_IN_ERROR_MESSAGE); <FIXE> <FIXS> model.addAttribute(tran.example.service.AddPostControllerService.MESSAGE_KEY, tran.example.service.AddPostControllerService.NOT_LOGGED_IN_ERROR_MESSAGE); <FIXE>
<FIXS> testScriptFile(SCRIPT_TEXT, argList, EXPECTED_PATTERN, true); <FIXE> <FIXS> testScriptFile(SCRIPT_TEXT_DROP, argList, EXPECTED_PATTERN, false); <FIXE>
<FIXS> if (((((x < 0) || (y < 0)) || (x >= (nbHCells))) || (y >= (nbVCells))) || (cellName == null)) <FIXE>
<FIXS> if ((selectedTrack) >= 12) { <FIXE>
<FIXS> resizeComponent(i, temp); <FIXE>
<FIXS> allPaths.addAll(paths); <FIXE>
<FIXS> isFileChosen = true; <FIXE> <FIXS> isFileChosen = false; <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> if (object != null) { object.update(deltaTime); } <FIXE>
<FIXS> com.here.account.oauth2.tutorial.Helper.setTestCreds(tutorial, com.here.account.oauth2.tutorial.Helper.getSystemCredentials()); <FIXE>
<FIXS> long offset = ((getEpisode().offset) > 0) ? getEpisode().offset : 0; setProgressMs(offset); invalidate(); <FIXE>
<FIXS> <FIXE>
<FIXS> private java.io.FileWriter fileforFace(int i) { <FIXE> <FIXS> return back; <FIXE>
<FIXS> private java.util.List<java.util.Map<java.lang.String, java.lang.Object>> getStandards(java.lang.Integer codeId, java.lang.String[] rootNodeId) { <FIXE>
<FIXS> main.pi.pathfinder.GraphConverter.removeTooSmallAreas(map, graph, robotWidth, robotHeight); <FIXE>
<FIXS> java.lang.System.out.println(schedule.classSchedules); <FIXE>
<FIXS> java.lang.String result = frame.AuthorizationPanel.cl.authenticate_user(user, password); <FIXE>
<FIXS> ch.ethz.idsc.tensor.Scalar sum = Norm._2.of(flow.getU()).add(ch.ethz.idsc.tensor.RealScalar.of(0.1)); <FIXE>
<FIXS> if ((halDocID == null) || ((halDocID.length()) == 0)) return ""; <FIXE> <FIXS> if (ind != (-1)) { return halDocID.substring(0, ind); }else return halDocID; <FIXE>
<FIXS> public void loadDrawables(java.lang.Class<?> clz) { <FIXE>
<FIXS> removeAllLineHighlights(); <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> camera.position.x = pos.x; <FIXE>
<FIXS> if ((position != (-1)) && (position < (playList.size()))) { <FIXE>
<FIXS> public boolean renameFileOrDir(java.lang.String currentfolder, java.lang.String oldname, java.lang.String newname) { <FIXE> <FIXS> client.rename(((currentfolder + "/") + oldname), ((currentfolder + "/") + newname)); renamed = true; } catch (java.lang.Exception e) { renamed = false; <FIXE>
<FIXS> if ((cardTest != null) && (handTest != null)) handTest.pushNewCard(1, cardTest); <FIXE>
<FIXS> <FIXE>
<FIXS> androidlab.edu.cn.nucyixue.ui.teachPack.live.TeachLiveFragment mLive = androidlab.edu.cn.nucyixue.ui.teachPack.live.TeachLiveFragment.getInstance(); androidlab.edu.cn.nucyixue.ui.teachPack.map.TeachMapFragment mNear = androidlab.edu.cn.nucyixue.ui.teachPack.map.TeachMapFragment.getInstance(); <FIXE>
<FIXS> public static void wtf(java.lang.String tag, java.lang.String msg, java.lang.Throwable exception, boolean checkLoggable) { <FIXE> <FIXS> android.util.Log.wtf(tag, msg, exception); <FIXE> <FIXS> android.util.Log.wtf(tag, msg, exception); <FIXE> <FIXS> io.sentry.Sentry.capture(msg); io.sentry.Sentry.capture(exception); <FIXE>
<FIXS> return j; <FIXE>
<FIXS> continue; <FIXE>
<FIXS> public java.util.Set<java.lang.String> getUnion(java.util.Set<java.lang.String> s1, java.util.Set<java.lang.String> s2) { <FIXE>
<FIXS> public synchronized int yToPixel(double y, mesquite.lib.MesquiteChart chart) { <FIXE> <FIXS> int value = ((fieldHeight - margin) - (tempNum.setWithinBounds(minY, maxY, (fieldHeight - (2 * margin))))) - (chart.getYPixelBase()); return value; <FIXE>
<FIXS> <FIXE>
<FIXS> if ((file != null) && (file.exists())) { <FIXE>
<FIXS> c.add(java.util.Calendar.MONTH, monthAdjustment); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> if (model == null) { return null; } if ((model.getApplication()) != null) { <FIXE> <FIXS> <FIXE> <FIXS> return ((java.lang.String) (model.getData())); <FIXE>
<FIXS> if ((mVideoUrl) == null) return ; <FIXE>
<FIXS> java.lang.String str = ((device.getAddress()) + "|") + (device.getName()); <FIXE>
<FIXS> java.lang.StringBuilder sb = new java.lang.StringBuilder(); <FIXE>
<FIXS> <FIXE>
<FIXS> } <FIXE>
<FIXS> protected void saveConfiguration(java.util.Properties props) { <FIXE> <FIXS> <FIXE>
<FIXS> if ((((scanner.viewNextToken().getType()) == (Token.TokenType.OPENPAREN_TOKEN)) || ((scanner.viewNextToken().getType()) == (Token.TokenType.NUM_TOKEN))) || ((scanner.viewNextToken().getType()) == (Token.TokenType.ID_TOKEN))) { <FIXE>
<FIXS> }else { optimalNodeAsString = null; <FIXE>
<FIXS> if ((traceDataProvider[index]) != null) { <FIXE>
<FIXS> targetWord.setId(1); <FIXE>
<FIXS> if ((bitPermissionsList == null) || (bitPermissionsList.isEmpty())) { <FIXE>
<FIXS> if (((!(com.kingwaytek.tygo.utility.Utility.isNumeric(parkingLotItem.SURPLUS_SPACE))) || ((parkingLotItem.TOTAL_SPACE) <= 0)) || ((parkingLotItem.TOTAL_SPACE) < (java.lang.Integer.parseInt(parkingLotItem.SURPLUS_SPACE)))) <FIXE>
<FIXS> org.junit.Assert.assertArrayEquals(new double[]{ 0 , 1 , 0 , 0 }, answer.getData(), com.gmail.wysocki.maciej.NeuralNetworkTest.MAX_ERROR); <FIXE>
<FIXS> public static <E> int blockingDrain(java.util.concurrent.BlockingQueue<E> queue, java.util.Collection<? super E> buffer) throws java.lang.InterruptedException { <FIXE> <FIXS> if (added == 0) { buffer.add(queue.take()); added += queue.drainTo(buffer); ++added; <FIXE>
<FIXS> if ((com.github.shynixn.petblocks.bukkit.logic.business.configuration.ConfigPet.getInstance().getPetNameBlackList()) != null) { for (final java.lang.String blackName : com.github.shynixn.petblocks.bukkit.logic.business.configuration.ConfigPet.getInstance().getPetNameBlackList()) { if (name.toUpperCase().contains(blackName.toUpperCase())) { throw new java.lang.RuntimeException("Name is not valid!"); } <FIXE>
<FIXS> private java.util.List<edu.harvard.lib.librarycloud.collections.dao.UserCollection> getUserCollectionsForUser(edu.harvard.lib.librarycloud.collections.dao.User u) { <FIXE>
<FIXS> public void initializeVideoSync(int requestCode, int deleteCode, java.lang.String title) { android.content.Intent intent = new android.content.Intent(this, templar.atakr.sync.VideoSyncIntentService.class); <FIXE> <FIXS> <FIXE> <FIXS> if ((title == null) || (title.isEmpty())) { intent.putExtra(VideoSyncIntentService.INTENT_TITLE, ""); }else { intent.putExtra(VideoSyncIntentService.INTENT_TITLE, title); } startService(intent); <FIXE>
<FIXS> if ((prototype) != null) { @java.lang.SuppressWarnings(value = { "unchecked" , "rawtypes" }) com.quantium.mobile.framework.JsonToObjectIterator iter = new com.quantium.mobile.framework.JsonToObjectIterator(reader, prototype); return iter; } return null; <FIXE>
<FIXS> if ((whiteSpaceStripped.length()) > 0) { <FIXE>
<FIXS> <FIXE>
<FIXS> if (request != null) { final java.util.Enumeration<java.lang.String> attributeNames = request.getAttributeNames(); while (attributeNames.hasMoreElements()) { final java.lang.String name = attributeNames.nextElement(); java.lang.System.out.println(((name + ": ") + (request.getAttribute(name).toString()))); } } <FIXE>
<FIXS> if ((sendingQueue.size()) > 0) { ch.dissem.bitmessage.networking.Connection.LOG.debug(((("Sending " + (sendingQueue.size())) + " messages to node ") + (node))); } <FIXE>
<FIXS> for (datastructures.Attribute obj : attrJoint.getAttributeJoint()) if (obj.equals(this)) <FIXE>
<FIXS> if ((country.length()) > 0) { <FIXE> <FIXS> if ((variant.length()) > 0) { <FIXE>
<FIXS> return ((int) (s2 - s1)); <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> mCurrentImagePath = image.getAbsolutePath(); <FIXE>
<FIXS> java.lang.String value = annotationInfo.get(annotationPropertyName, labelledClass.label()); <FIXE>
<FIXS> <FIXE>
<FIXS> bind(ratpack.zipkin.internal.ZipkinHttpClientImpl.class); <FIXE>
<FIXS> dest.writeString(getStepDescription()); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> square.moveToNumber(numberOfEmpty, square.sideSize); emptySquare.moveToNumber(squareNumber, square.sideSize); <FIXE>
<FIXS> public void hideUserOptions() { <FIXE>
<FIXS> return java.lang.String.class; <FIXE>
<FIXS> ball.setSpeed(new ro.licj.magnus.util.Vector(1.0, 10.0)); <FIXE>
<FIXS> final com.google.common.base.Optional<org.opendaylight.yangtools.yang.data.api.schema.NormalizedNode<?, ?>> maybeClusterList = org.opendaylight.yangtools.yang.data.api.schema.NormalizedNodes.findNode(attributes, this.clusterListPath); <FIXE>
<FIXS> throw new org.ow2.authzforce.core.pdp.api.IndeterminateEvaluationException(missingAttributeMessage, org.ow2.authzforce.core.pdp.api.StatusHelper.STATUS_MISSING_ATTRIBUTE, bag.getReasonWhyEmpty()); <FIXE>
<FIXS> throw new com.acciente.oacc.NotAuthorizedException(accessorResource, (("receive " + (com.acciente.oacc.NotAuthorizedException.toString(domainPermission, domainPermissions))) + " permission(s) after creating a domain")); <FIXE>
<FIXS> public static java.lang.String getPathOfJAR(java.lang.Class any) { java.lang.String jarPath = any.getProtectionDomain().getCodeSource().getLocation().getPath(); <FIXE>
<FIXS> return false; <FIXE>
<FIXS> return lockedItems.containsKey(object); <FIXE>
<FIXS> <FIXE>
<FIXS> new android.os.Handler().postDelayed(this::onRefresh, 500); <FIXE> <FIXS> return true; <FIXE>
<FIXS> if ((items.length) == 0) { items[0] = get(); } <FIXE>
<FIXS> java.lang.System.out.print(user); <FIXE>
<FIXS> android.widget.Toast.makeText(this, "The others has joined", Toast.LENGTH_LONG).show(); <FIXE>
<FIXS> android.content.Intent addEvent = new android.content.Intent(this, com.sourcey.eventure.Events.EventActivity.class); android.os.Bundle extra = new android.os.Bundle(); extra.putBoolean("organizer", organizer); addEvent.putExtras(extra); startActivity(addEvent); <FIXE>
<FIXS> this.links.put(field, flinks); <FIXE>
<FIXS> <FIXE>
<FIXS> getNextKey(); <FIXE>
<FIXS> boolean result = forward(config, org.motechproject.commcare.service.impl.CommcareConfigServiceImpl.FORWARD_SCHEMA_TYPE, getSchemaChangeUrl(config.getName())); config.setForwardSchema(result); <FIXE>
<FIXS> }else { this.confirmed = false; this.flown = true; this.departureTime = departureTime; <FIXE> <FIXS> <FIXE>
<FIXS> (length)--; <FIXE>
<FIXS> <FIXE>
<FIXS> org.assertj.core.api.Assertions.assertThat(message).isEqualTo((((((("\n" + (com.isroot.stash.plugin.errors.YaccErrorBuilder.ERROR_BEARS)) + "\n\n") + "commit error\n") + "\n") + " more info\n") + "\n")); <FIXE>
<FIXS> return false; <FIXE>
<FIXS> <FIXE>
<FIXS> assertEquals(true, f0.equals(f0)); assertEquals(false, f0.equals(null)); <FIXE>
<FIXS> this.adapter.setSelection(new boolean[cursor.getCount()]); <FIXE>
<FIXS> java.util.List<java.lang.String> pimLabels = pimInstanceModel.getLabels(); <FIXE>
<FIXS> <FIXE>
<FIXS> incorrectlyParsedWord = getIncorrectlyParsedWord(group); if ((incorrectlyParsedWord) != null) { <FIXE> <FIXS> <FIXE>
<FIXS> seedu.addressbook.AddressBook.createFileIfMissing(filePath); <FIXE>
<FIXS> services.add(injector.getInstance(co.cask.cdap.logging.service.LogSaverStatusService.class)); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> rsantillanc.sanjoylao.custom.dialog.SJLAlertDialog.showTypeBookAlert(this, title); <FIXE>
<FIXS> currentIndex = ((currentIndex) + value) % (questionList.length); if ((currentIndex) < 0) { <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> break; <FIXE> <FIXS> break; <FIXE>
<FIXS> org.junit.Assert.assertEquals(((org.apache.kylin.metadata.realization.RealizationType.values().length) - 1), realizationTypes.size()); <FIXE>
<FIXS> return new hsyndicate.fs.SyndicateFileSystem(sconf); <FIXE>
<FIXS> <FIXE> <FIXS> target.sendMessage(tag.concat(line)); <FIXE>
<FIXS> final org.eclipse.jgit.lib.ObjectId id = resolveObjectId(origin, branch); <FIXE>
<FIXS> protected java.lang.Object grepl(java.lang.String pattern, com.oracle.truffle.r.runtime.data.model.RAbstractStringVector vector, boolean ignoreCaseLogical, boolean valueLogical, boolean perlLogical, boolean fixedLogical, boolean useBytes, boolean invertLogical) { return doGrep(pattern, vector, ignoreCaseLogical, valueLogical, perlLogical, fixedLogical, useBytes, invertLogical, true); <FIXE>
<FIXS> if (jumped) { <FIXE>
<FIXS> <FIXE> <FIXS> if ((getWatchResultDirectory()) != null) { updateResultThread(); } <FIXE>
<FIXS> private boolean includeDocument(final int doc) { for (int i = 0; i < (this.fieldVals.length); ++i) { <FIXE> <FIXS> this.fieldVals[i] = value; <FIXE>
<FIXS> int iCount = java.lang.Math.abs((i - iSrc)); <FIXE>
<FIXS> if (partRef.getId().equals(xstampp.stpapriv.ui.relation.UnsafeUnsecureEditor.ID)) { <FIXE>
<FIXS> <FIXE> <FIXS> serviceRunner.shutdown(); componentManager.shutdown(); <FIXE>
<FIXS> <FIXE>
<FIXS> retArr = uta(leftUnits, (!(rightUnits.isEmpty()))); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> org.junit.Assert.assertEquals(expected.toString(), actual); <FIXE>
<FIXS> int taskManagerIndex = 1; seedu.address.testutil.TestTask taskToEdit = expectedTaskList[(taskManagerIndex - 1)]; <FIXE>
<FIXS> final long wish = lastUpdate.get(); <FIXE> <FIXS> if (lastUpdate.compareAndSet(wish, 0)) <FIXE>
<FIXS> recommendation = view.SystemHelper.promptUserInt(); <FIXE> <FIXS> finalizeRecommendation(manuscript, (recommendation - 1)); <FIXE>
<FIXS> public java.lang.String call(java.lang.String subGroup, java.lang.String candidateFullname) { <FIXE> <FIXS> <FIXE> <FIXS> return set; <FIXE>
<FIXS> for (int i = 1; i < (contents.length); i++) { <FIXE>
<FIXS> last = i + 1; <FIXE>
<FIXS> mMinutesView.setText(""); <FIXE>
<FIXS> <FIXE>
<FIXS> checkAccount(true, accounts); <FIXE>
<FIXS> } if (org.apache.commons.lang.StringUtils.isEmpty(regex)) { configErrors.add(com.thoughtworks.go.config.TrackingTool.REGEX, "Regex should be populated"); } <FIXE>
<FIXS> <FIXE>
<FIXS> if ((mFooterView) != null) { mFooterView.setOnClickListener(new com.being.base.ui.widget.ptr.loadmore.OnClickListener() { @java.lang.Override public void onClick(android.view.View view) { tryToPerformLoadMore(); } }); } <FIXE>
<FIXS> java.lang.Integer skip) { <FIXE> <FIXS> java.util.List<java.lang.String> topicList = topicRepository.findByAuthorOrderByCreatedDesc(author, (skip == null ? 0 : skip)); <FIXE>
<FIXS> characters = new java.util.ArrayList<java.util.ArrayList<java.lang.Character>>(); <FIXE> <FIXS> characters.add(new java.util.ArrayList<java.lang.Character>()); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> edu.psu.sweng500.team8.coreDataStructures.Cell cell = m_cells[rowIndex][columnIndex] = new edu.psu.sweng500.team8.coreDataStructures.Cell(rowIndex, columnIndex); <FIXE>
<FIXS> if (((((columnNames) != null) && ((columnNames.length) > 0)) && (columnIndex >= 0)) && (columnIndex < (columnNames.length))) { return columnNames[columnIndex]; <FIXE>
<FIXS> if ((decoderThread) != null) { decoderThread.interrupt(); try { decoderThread.join(); } catch (java.lang.InterruptedException e) { e.printStackTrace(); } <FIXE> <FIXS> if ((feedThread) != null) { try { feedThread.join(); } catch (java.lang.InterruptedException e) { e.printStackTrace(); } <FIXE>
<FIXS> logger.info("-> Response: OK"); <FIXE>
<FIXS> net.demilich.metastone.analytics.MetastoneAnalytics.INSTANCE.analyticsTracker.type(GoogleAnalytics.HitType.screenview).applicationVersion(BuildConfig.VERSION).category("navigation").action("show").screenName(screenName).build().send(); <FIXE>
<FIXS> return repository.cloneRepository(clonedRepositoryFile); <FIXE>
<FIXS> if (metaDefinition != null) { metaDefinition.setInitialOperationConfig(null); if ((metaDefinition.getPushNotificationConfig()) != null) { metaDefinition.setPushNotificationConfig(new org.wso2.carbon.device.mgt.common.push.notification.PushNotificationConfig(metaDefinition.getPushNotificationConfig().getType(), false, null)); } deviceType.setDeviceTypeMetaDefinition(metaDefinition); <FIXE> <FIXS> <FIXE>
<FIXS> if (offset == 0) { return ; } <FIXE>
<FIXS> return (item1.stackSize) >= (item2.stackSize); <FIXE>
<FIXS> private void recycle(io.netty.channel.PendingWriteQueue.PendingWrite write, boolean update) { <FIXE> <FIXS> if (update) { if (next == null) { head = tail = null; size = 0; }else { head = next; (size)--; assert (size) > 0; } <FIXE>
<FIXS> org.junit.Assert.assertThat(taxa.size(), is(2)); <FIXE>
<FIXS> <FIXE>
<FIXS> private static java.lang.String getDefaultOperator(java.util.Map schemaNamedList) { <FIXE>
<FIXS> if (m.isValid()) { m.setStatus(status); if ((m.getId()) == messageID) { <FIXE>
<FIXS> break; <FIXE>
<FIXS> protected java.util.Optional<org.nest.codegeneration.helpers.LEMSElements.Unit> handleType(org.nest.units._ast.ASTDatatype _dataType) { <FIXE>
<FIXS> return (intValue != null) && (intValue <= (comparison)); <FIXE>
<FIXS> imdb.database.dao.MovieDAOImpl.conn = null; <FIXE>
<FIXS> if (className != null) { plugin.db.i(((("Remove config " + (player.getUniqueId().toString())) + " : ") + className)); net.slipcor.classranks.core.PlayerClazzList playerClazz = playersClazzList.get(player.getUniqueId().toString()); playerClazz.remove(className); plugin.db.i("Save player section after remove "); playerSectionWrite(); } <FIXE>
<FIXS> link.setId(0); <FIXE>
<FIXS> input = new java.lang.StringBuilder(); <FIXE>
<FIXS> interruptVarSearchStart = 0; <FIXE>
<FIXS> if (((xyz.julianpeters.timedlists.helpers.StaticValues.getCreated()) != null) && ((xyz.julianpeters.timedlists.helpers.StaticValues.getNested()) == 0)) { <FIXE>
<FIXS> <FIXE> <FIXS> lexicon = new cs224n.assignment.Lexicon(trainTrees); <FIXE>
<FIXS> for (final org.dbflute.erflute.editor.model.diagram_contents.element.node.table.column.ERColumn column : columns) { <FIXE>
<FIXS> if ((list.size()) > 0) { int[] allRateScores = new int[list.size()]; int i = 0; for (com.avos.avoscloud.AVObject object : list) { allRateScores[i] = object.getInt("subQues"); i++; } plotBarChart(allRateScores); <FIXE> <FIXS> <FIXE>
<FIXS> if (mIsOnBreak) { <FIXE>
<FIXS> <FIXE>
<FIXS> return name; <FIXE>
<FIXS> <FIXE>
<FIXS> if (position >= 0) { goldengymclub.util.Member member = filteredMemberList.get(position); new goldengymclub.MemberDetailsDialog(member).show(); } <FIXE>
<FIXS> java.lang.Integer buildNumber) { <FIXE>
<FIXS> if (((obj.isDeleted()) != null) && (obj.isDeleted())) { <FIXE>
<FIXS> <FIXE>
<FIXS> if (1 == 1) { return ; } <FIXE>
<FIXS> bundle.putInt("boughtType", ((int) (list.get(position).get("boughtType")))); <FIXE>
<FIXS> logger.info((("Found " + numDocs) + " in old index")); <FIXE>
<FIXS> <FIXE>
<FIXS> java.lang.System.out.println(e.toString()); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> return null; <FIXE> <FIXS> return scaleAndFormatImage(image, width, height); <FIXE>
<FIXS> coll.setTotalCount(m_alarmDao.countMatching(builder.count().toCriteria())); <FIXE>
<FIXS> <FIXE>
<FIXS> if (student.getPassword().equals(passwd)) <FIXE>
<FIXS> <FIXE>
<FIXS> android.util.Log.d("ROUTES insertNewRoute", res); <FIXE> <FIXS> <FIXE>
<FIXS> public android.graphics.Bitmap pickPhotoResult(android.content.Intent data, android.widget.ImageView imageView) { <FIXE> <FIXS> return insertPhoto(photo); <FIXE>
<FIXS> <FIXE>
<FIXS> boolean result = val1 > val2; <FIXE>
<FIXS> <FIXE>
<FIXS> listView.setAdapter(null); <FIXE>
<FIXS> org.opencv.core.Mat mat = new org.opencv.core.Mat(); <FIXE> <FIXS> <FIXE> <FIXS> <FIXE> <FIXS> } finally { mat.release(); <FIXE>
<FIXS> @org.jplus.hyb.database.crud.Test <FIXE> <FIXS> assertTrue(org.jplus.util.ObjectHelper.isNotEmpty(result)); <FIXE> <FIXS> fail("testShowAll faild."); <FIXE>
<FIXS> database.getNewMsg(); <FIXE>
<FIXS> while ((i < (currTupleIndexes.size())) && (currTupleIndexes.get(i).equals(tupleIndexesLimits.get(i)))) { <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> if ((dateTo.getTime()) < (dateFrom.getTime())) <FIXE>
<FIXS> if ((acc) > 20) { java.lang.System.out.println(acc); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> if (bundle != null) { TheUser = ((app.p2.b226.aau.caffeinetrackerfinal.User) (bundle.getSerializable("Auser"))); } <FIXE>
<FIXS> org.junit.Assert.assertEquals((((("Trying to floor " + a) + " and ") + b) + " is not producing the expected value"), ninja.bladh.tools.MathToolTest.floors[(i - 1)], result); <FIXE>
<FIXS> public static double diff(double[] rgb1, double[] rgb2) { <FIXE>
<FIXS> float currentAngle = -(this.getCurrentGyro()); <FIXE>
<FIXS> java.util.ArrayList<app.vrtic.Service.Korisnik> k = dajKorisnike(); <FIXE> <FIXS> if (k.get(i).getKorisnickoIme().equals(username)) { <FIXE>
<FIXS> d = new gui.AddFlashcardDialog(null, project, this); <FIXE>
<FIXS> int[] data = new int[]{ 20 , 15 , 12 , 30 , -5 , 72 , 34 , 9 , 456 , 999 , 1 }; <FIXE>
<FIXS> return actionDao.queryBuilder().where().eq(TABLE_ACTIONTYPE, type).and().between(TABLE_DATE, startDate.toDate(), endDate.toDate()).countOf(); <FIXE>
<FIXS> if (j.isDoorway()) { <FIXE>
<FIXS> setIsProfileVisible(isProfileVisible, false); <FIXE> <FIXS> setIsProfileVisible(true, false); <FIXE>
<FIXS> private boolean eq(double i, double j) { <FIXE>
<FIXS> logcatIO.createSocketConnection(); <FIXE> <FIXS> <FIXE>
<FIXS> sycnAttachedObjectsPosition(objectToAttach); <FIXE>
<FIXS> java.io.InputStream stream = fragment.getActivity().getAssets().open(("photo/" + (photos[randomIndex]))); <FIXE> <FIXS> android.widget.Toast.makeText(fragment.getActivity(), "Failed to create photo", Toast.LENGTH_LONG).show(); <FIXE>
<FIXS> final java.util.List<com.pimpimmobile.librealarm.shareddata.PredictionData> data = mDatabase.getNsSyncData(); <FIXE> <FIXS> java.util.List<com.pimpimmobile.librealarm.shareddata.PredictionData> result = uploader.upload(data); <FIXE>
<FIXS> if ((swap >= 0) && (swap < 53)) { <FIXE>
<FIXS> return result; <FIXE>
<FIXS> testFiltersHelper("11", 188000, 190000, new java.util.ArrayList<>(), cts, null, null, null, null, null, null, 94); <FIXE>
<FIXS> return new edu.mayo.mprc.searchdb.dao.TandemMassSpectrometrySample(new java.io.File(fractionName), new java.util.Date(), 0, 0, 0, "Dummy", new java.util.Date(), 0.0, "", "", "", "", ""); <FIXE>
<FIXS> forumListAdapter = com.ferg.awfulapp.forums.ForumListAdapter.getInstance(context, new java.util.ArrayList<com.ferg.awfulapp.forums.Forum>(), this, mPrefs); <FIXE> <FIXS> <FIXE>
<FIXS> super.init(); <FIXE>
<FIXS> b.setOnMouseEntered(( event) -> { b.setStyle("-fx-background-color: #CCCCCC"); <FIXE> <FIXS> b.setOnMouseExited(( event) -> { b.setStyle("-fx-background-color: transparent"); <FIXE>
<FIXS> <FIXE> <FIXS> final byte[] buffer = new byte[packetSize]; <FIXE>
<FIXS> if (ownerType == null) { return -1; } <FIXE>
<FIXS> openFile(f.getAbsolutePath()); <FIXE>
<FIXS> if (height == (-1)) height = com.otaliastudios.printer.Utils.getEstimatedHeight(child, heightBound); <FIXE> <FIXS> <FIXE>
<FIXS> private void switchToRoomConfig(java.lang.String type, java.lang.String id) { <FIXE> <FIXS> if (type.equals("Lamp")) <FIXE> <FIXS> else if (type.equals("TV")) <FIXE> <FIXS> else if (type.equals("Music")) <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> if ((getCore()) instanceof com.pauljoda.modularsystems.generator.tiles.TileGeneratorCore) { <FIXE>
<FIXS> <FIXE>
<FIXS> return pollUntilExpectedResponse(url, mediaType, delayInMillis, ( response) -> (response.getStatus()) == (status.getStatusCode()), ( value) -> true); <FIXE>
<FIXS> return bos.toByteArray_clear(); <FIXE> <FIXS> <FIXE>
<FIXS> return url.startsWith("www.") ? url.substring(4) : url; <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> if ((panelPrognose) != null) getContentPane().remove(panelPrognose); <FIXE>
<FIXS> java.util.Set<java.lang.Integer> startIndexes = org.hcjf.utils.Strings.allIndexOf(value, org.hcjf.utils.Strings.START_GROUP); <FIXE>
<FIXS> <FIXE>
<FIXS> if ((categoriesInfo.getCategories()) != null) { for (com.nusclimb.live.crimp.common.json.CategoriesResponseBody.Category c : categoriesInfo.getCategories()) { categoryRouteCountList.add(c.getRoutes().size()); } <FIXE>
<FIXS> public void setLineThickness(final int thickness) { <FIXE> <FIXS> if (((geoList) == null) || ((geoList.size()) == 0)) { <FIXE> <FIXS> } <FIXE> <FIXS> final geogebra.common.kernel.geos.GeoElement geo = geoList.get(i); if (!(geo.isLabelSet())) { <FIXE> <FIXS> } <FIXE>
<FIXS> if (data.get(i).getId().equals(courseId)) <FIXE>
<FIXS> alien4cloud.model.deployment.matching.MatchingConfiguration matchingConfiguration = matchingConfigurations.get(candidateType.getElementId()); <FIXE>
<FIXS> if (!(message.equals(""))) { presenter.sendMessage(userCode, message); } <FIXE>
<FIXS> return this.conversionService.convert(messageKey, this.producerMetadata.getKeyClassType()); <FIXE>
<FIXS> this.layout.getChildren().add(this.usersTurn); <FIXE>
<FIXS> public cinema.Film getFilm(java.lang.String title) throws java.lang.ClassNotFoundException, java.sql.SQLException { <FIXE> <FIXS> result = sqlManager.callStoredProcedure((("get_film_by_title(" + title) + ")")); java.util.Map<java.lang.String, java.lang.Object> filmMap = result.get(0); cinema.Film film = new cinema.Film(filmMap); return film; <FIXE>
<FIXS> <FIXE>
<FIXS> listAffBean = affDAO.getCollegesList(); <FIXE>
<FIXS> if (((android.support.v4.app.ActivityCompat.checkSelfPermission(getContext(), Manifest.permission.ACCESS_FINE_LOCATION)) != (android.content.pm.PackageManager.PERMISSION_GRANTED)) && ((android.support.v4.app.ActivityCompat.checkSelfPermission(getContext(), Manifest.permission.ACCESS_COARSE_LOCATION)) != (android.content.pm.PackageManager.PERMISSION_GRANTED))) { <FIXE>
<FIXS> <FIXE> <FIXS> update(); <FIXE>
<FIXS> return config.leaders().stream().filter(java.util.function.Predicate.isEqual(config.localServer().get()).negate()).collect(java.util.stream.Collectors.toSet()); <FIXE>
<FIXS> this.setChange(); <FIXE>
<FIXS> matrix.set(transform.getMatrixForRepeater(i, offset)); <FIXE>
<FIXS> a.setMail(mail); <FIXE>
<FIXS> if ((mLastLocation) != null) { setCameraFocus(mLastLocation); } <FIXE>
<FIXS> if ((tripList.size()) > 0) { com.grp10.codepath.travelmemo.firebase.Trip trip = tripList.get(position); return com.grp10.codepath.travelmemo.fragments.OverlapFragment.newInstance(com.grp10.codepath.travelmemo.data.DemoImages.covers[(position % 6)], trip.getName(), trip.getDescription(), trip.getId()); }else { return new com.grp10.codepath.travelmemo.fragments.OverlapFragment(); } <FIXE>
<FIXS> i.putExtra("frag_index", "1"); <FIXE>
<FIXS> java.util.Set<org.semanticweb.owlapi.model.OWLAxiom> oldAxioms = git.owl.driver.OwlUtil.getAxioms(as, oldOntology); oldAxiomsToProcess.removeAll(oldAxioms); java.util.Set<org.semanticweb.owlapi.model.OWLAxiom> newAxioms = git.owl.driver.OwlUtil.getAxioms(as, newOntology); newAxiomsToProcess.removeAll(newAxioms); <FIXE> <FIXS> compareAxioms(oldAxioms, newAxioms, as); <FIXE>
<FIXS> android.content.Intent dashboard = new android.content.Intent(getActivity(), com.example.abhishek.sharerides.activities.DashboardActivity.class); <FIXE> <FIXS> <FIXE>
<FIXS> if (Tablero[i][j].equals(ship_symbol)) { <FIXE>
<FIXS> <FIXE> <FIXS> current.childrend[chosenIdx].hasVisited = true; current = current.childrend[chosenIdx]; <FIXE>
<FIXS> con = new no.ntnu.osnap.com.BluetoothConnection("00:10:06:29:00:48", this); <FIXE>
<FIXS> if (((this.value) - (o.getValue())) == 0) { return (o.getTime()) - (this.time); <FIXE> <FIXS> return (this.value) - (o.getValue()); <FIXE>
<FIXS> public static java.lang.String text(android.content.Context context, @android.support.annotation.StringRes <FIXE> <FIXS> android.content.res.Resources resources = context.getResources(); <FIXE>
<FIXS> while (iterator.hasNext()) { <FIXE> <FIXS> } <FIXE>
<FIXS> protected java.util.Set<org.yawlfoundation.yawl.engine.interfce.WorkItemRecord> getSuspendableWorkItemsInChain(java.util.Map<java.lang.String, org.yawlfoundation.yawl.worklet.selection.WorkletRunner> runners, java.lang.String caseID) { <FIXE> <FIXS> org.yawlfoundation.yawl.worklet.selection.WorkletRunner worklet = runners.get(caseID); <FIXE> <FIXS> worklet = runners.get(parentCaseID); <FIXE>
<FIXS> if (((Robot.clawArm.armAtBottom()) && ((position) < (Robot.clawArm.armPosition()))) || ((Robot.clawArm.armAtTop()) && ((position) > (Robot.clawArm.armPosition())))) { <FIXE>
<FIXS> java.util.ArrayList<com.app.Area> board_areas = new java.util.ArrayList<com.app.Area>(); <FIXE>
<FIXS> protected org.eclipse.californium.core.network.stack.Block1BlockwiseStatus resetInboundBlock1Status(final org.eclipse.californium.core.network.stack.KeyUri key, final org.eclipse.californium.core.network.Exchange exchange, final org.eclipse.californium.core.coap.Request request) { <FIXE>
<FIXS> if (!(checkTableExists(dbTableName))) { <FIXE>
<FIXS> return sameHost && samePort; <FIXE>
<FIXS> for (int i = 0; i < (costs.length); i += 3) { <FIXE>
<FIXS> if (((canonicalName == null) || (canonicalName.isEmpty())) || (canonicalName.endsWith("."))) { <FIXE>
<FIXS> return value.substring(sIndex, eIndex); <FIXE> <FIXS> return value.substring(sIndex); <FIXE>
<FIXS> DebugUtils.printDebugInfo(("Executing update:\n " + (Utils.wrapString(Utils.replaceEach(stmt, "?", "arg:'%s'", args), 50, "\n "))), getClass(), DBConnector.class, false, DBConnector.DebugFlag.UPDATES); <FIXE>
<FIXS> int index = random.nextInt(nums.length); return java.lang.String.format("vehicle_%s", index); <FIXE>
<FIXS> <FIXE>
<FIXS> if (path != null) { final java.lang.Object pathComponent = path.getLastPathComponent(); if (pathComponent instanceof javax.swing.tree.DefaultMutableTreeNode) { final javax.swing.tree.DefaultMutableTreeNode node = ((javax.swing.tree.DefaultMutableTreeNode) (pathComponent)); final java.lang.Object userObject = node.getUserObject(); return userObject; } <FIXE>
<FIXS> sbuf = new java.lang.StringBuilder((2 + ((((value.length()) + 10) / 10) * 11))); <FIXE>
<FIXS> droplets.get(i).x = ((((frameSizeX) / (cannonCount)) * (cannonIndex)) + (((frameSizeX) / (cannonCount)) / 2)) - 1; <FIXE>
<FIXS> if (!(Driver.isInteger(group_id_str))) { <FIXE>
<FIXS> <FIXE> <FIXS> return "_" + (sdf.format(cldr.getTime())); <FIXE>
<FIXS> existingRegistration = propertyRegistration.get(parameter.getParam()); <FIXE>
<FIXS> <FIXE>
<FIXS> return new android.app.DatePickerDialog(getActivity(), this, year, (month - 1), day); <FIXE>
<FIXS> <FIXE>
<FIXS> if (!(result.equals("valid"))) { edu.arizona.biosemantics.etcsite.client.common.Alerter.inputError(result); <FIXE> <FIXS> placeController.goTo(new edu.arizona.biosemantics.etcsite.client.content.semanticMarkup.SemanticMarkupInputPlace()); <FIXE>
<FIXS> verify(invoiceDAO).create(invoice); <FIXE>
<FIXS> if ((diceButton.buttonDiceControl) == true) { <FIXE>
<FIXS> java.lang.System.out.println(buyerTimes); <FIXE>
<FIXS> popupFrame.fillInForm("CUSTOMER", customerList.get(selectedRow)); popupFrame.setVisible(true); customerOptionsPopup.setVisible(false); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> this.input = input; <FIXE>
<FIXS> <FIXE>
<FIXS> boolean out = (uptodate) || ((minus(indexLast, indexFirst)) >= (margeNecessaire)); if (!out) log.warning((("Replanification partielle nécessaire : " + (minus(indexLast, indexFirst))) + " points d'avance seulement."), Verbose.REPLANIF.masque); return out; <FIXE>
<FIXS> if (((bound.isTagged(JavaType.TYPEVAR)) && (!(org.sonar.java.resolve.Resolve.subtypeOfTypeVar(arg, ((org.sonar.java.resolve.JavaType.TypeVariableJavaType) (bound)))))) || (!(arg.isSubtypeOf(bound)))) { <FIXE> <FIXS> } <FIXE>
<FIXS> } catch (java.lang.Exception e) { <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> return url.toLowerCase(); <FIXE>
<FIXS> sc = ((net.isucon.bench.Scenario) (root.newInstance())); } catch (java.lang.InstantiationException | java.lang.IllegalAccessException | java.lang.reflect.InvocationTargetException e) { <FIXE>
<FIXS> ru.semiot.drivers.regulator.relay.Regulator.logger.info(ru.semiot.drivers.regulator.relay.Regulator.TEMPLATE_MSG.replace("${VAL}", (state ? ru.semiot.drivers.regulator.relay.Regulator.TURN_ON_ACTION : ru.semiot.drivers.regulator.relay.Regulator.TURN_OFF_ACTION))); <FIXE>
<FIXS> error.remove(rows.get(rowNumber)); <FIXE>
<FIXS> ru.qsolution.vodovoz.driver.Services.LocationService.RouteListId = null; <FIXE>
<FIXS> <FIXE> <FIXS> this.mHeader = header; <FIXE>
<FIXS> super.onCreateView(inflater, container, savedInstanceState); if ((view) == null) { view = inflater.inflate(R.layout.fragment_about, container, false); } initGoogleMaps(); initializeViews(view); <FIXE> <FIXS> <FIXE> <FIXS> return view; <FIXE>
<FIXS> org.junit.Assert.assertEquals(((java.lang.Double) (expected)), ((java.lang.Double) (actual)), ((java.lang.Double) (fDelta))); <FIXE> <FIXS> org.junit.Assert.assertEquals(((java.lang.Float) (expected)), ((java.lang.Float) (actual)), ((java.lang.Float) (fDelta))); <FIXE>
<FIXS> ncs[0].addNA(); <FIXE>
<FIXS> private com.navercorp.pinpoint.bootstrap.instrument.matcher.operand.MatcherOperand joinOr(java.util.List<java.lang.String> baseClassNames) { <FIXE> <FIXS> for (java.lang.String baseClassName : baseClassNames) { <FIXE>
<FIXS> org.kohsuke.stapler.Stapler.getCurrentRequest().getSession().setAttribute(hudson.plugins.openid.OpenIdSession.SESSION_NAME, this.toString()); <FIXE>
<FIXS> mClipImageLayout.setClipImage(mBitmap); <FIXE>
<FIXS> java.lang.String nextCommand = getNextCommand(); <FIXE>
<FIXS> buf.append(super.getMessage()); <FIXE>
<FIXS> org.junit.Assert.assertEquals("Times-Roman", config.getFont().getName()); <FIXE>
<FIXS> <FIXE>
<FIXS> org.eclipse.californium.core.network.Exchange.KeyMID idByMID = new org.eclipse.californium.core.network.Exchange.KeyMID(previous.getMID(), null, 0); <FIXE>
<FIXS> this.calculationServers = new java.util.ArrayList<distributor.ServerInterface>(); <FIXE>
<FIXS> this.btns[1] = false; <FIXE> <FIXS> this.btns[2] = false; <FIXE> <FIXS> this.btns[3] = false; <FIXE>
<FIXS> <FIXE>
<FIXS> private boolean isEmptyBody(java.util.Map<java.lang.String, java.lang.Object> transportHeadersMap) { <FIXE> <FIXS> java.lang.Object contentLength = transportHeadersMap.get(HTTPConstants.HEADER_CONTENT_LENGTH); if ((contentLength != null) && ((java.lang.Integer.parseInt(contentLength.toString())) == 0)) { <FIXE>
<FIXS> if ((!(queue.isEmpty())) && ((playing) == false)) { <FIXE>
<FIXS> private void editProcess(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response, int roll) throws com.lftechnology.batch7crud.exception.DataException, java.io.IOException, javax.servlet.ServletException { <FIXE> <FIXS> stdServices.update(s); response.sendRedirect("/Students"); <FIXE>
<FIXS> if ((((mDraggedEntry) != null) && (isIndexInBound(mDragEnteredEntryIndex))) && (isIndexInBound(itemIndex))) { <FIXE>
<FIXS> convertData(conversionFilter, callback); <FIXE>
<FIXS> }else { builder.append(com.ns.greg.library.fancy_logger.Printer.TOP_BORDER).append(com.ns.greg.library.fancy_logger.Printer.NEW_LINE); <FIXE>
<FIXS> org.json.JSONArray name = new org.json.JSONArray(treeViewDialog.getName()); com.vijay.jsonwizard.widgets.TreeViewFactory.changeEditTextValue(editText, array.toString(), name.toString()); <FIXE>
<FIXS> AnimationView.count = -1; <FIXE>
<FIXS> java.lang.Integer start, @javax.ws.rs.QueryParam(value = "size") java.lang.Integer size) { <FIXE> <FIXS> if ((start != null) && (size != null)) <FIXE>
<FIXS> if ((passwort.length()) >= 5) { <FIXE>
<FIXS> this.pmContentContainer.setVisible(false); <FIXE> <FIXS> <FIXE> <FIXS> removed.notifyPanelRemoved(); <FIXE>
<FIXS> for (int i = 0; i < (u.attributes.length); i++) { <FIXE>
<FIXS> sendString(de.hhn.munz.ardrone2.ATCommand.keepAlive()); <FIXE>
<FIXS> setupCalendar(); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> frame.removeMouseListener(this.adapter); frame.removeMouseMotionListener(this.adapter); frame.removeMouseWheelListener(this.adapter); frame.removeKeyListener(this.adapter); <FIXE>
<FIXS> addLocalizedError(firstSentence, firstSentence.getContent().charAt(0)); <FIXE>
<FIXS> if ((getSelectedProfileDataList().get(id).getRecno()) != null) { <FIXE> <FIXS> getProfileDataList().remove(getSelectedProfileDataList().get(id)); <FIXE>
<FIXS> edu.pitt.cs.cs1635.studybuddies.MainActivity.currentUser.c = 3; <FIXE>
<FIXS> <FIXE>
<FIXS> if ((o != null) && (nl.openweb.iot.dashboard.service.script.SandboxFilter.filter(getClass(o)))) { <FIXE>
<FIXS> if ((parameters.get(0).length()) > 0) { <FIXE>
<FIXS> public static void initializeDriveTrain() { <FIXE>
<FIXS> while (!(l.isEmpty())) { if (AEquality.EQUALS.equals(l.head(), o)) { <FIXE>
<FIXS> final java.lang.String userId) { <FIXE>
<FIXS> testFiltersHelper("11", 190000, 191000, studies, new java.util.ArrayList<>(), null, null, null, null, null, null, 14); <FIXE>
<FIXS> <FIXE>
<FIXS> private static java.lang.String computeSignature(java.util.Map<java.lang.String, java.lang.String> allParameters, java.lang.String secret, java.lang.String postUrl) throws java.io.UnsupportedEncodingException, java.security.InvalidKeyException, java.security.NoSuchAlgorithmException { <FIXE>
<FIXS> java.lang.Integer nodeId = mDocument.getIdForObject(element); <FIXE>
<FIXS> <FIXE> <FIXS> mBarChartButton.setVisibility(View.VISIBLE); <FIXE>
<FIXS> com.google.android.gms.maps.MapsInitializer.initialize(com.airbnb.android.react.maps.ActivityManager.getInstance().getActivity()); <FIXE>
<FIXS> ftTree = tree; <FIXE>
<FIXS> }.execute(); <FIXE>
<FIXS> if ((target) == null) return prevdir; <FIXE>
<FIXS> tiles[i] = com.chess.engine.board.Tile.createTile(i, builder.boardConfig.get(i)); <FIXE>
<FIXS> if (needToGetDamage()) <FIXE> <FIXS> defendKnight(); <FIXE>
<FIXS> public java.util.LinkedList<searchclient.Node> findSolution(searchclient.Strategy strategy) { <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> clients[i] = ((java.lang.Integer) (it.next())).intValue(); <FIXE>
<FIXS> mainPanel.setDatumZoekenListener(new opdracht1d.Controllers.ReservationController.MainViewHuisZoekenButton()); mainPanel.setHuisZoekenListener(new opdracht1d.Controllers.ReservationController.MainViewDatumZoekenButton()); <FIXE>
<FIXS> if (!(worldObj.isRemote)) { <FIXE> <FIXS> if ((chunkTicket) == null) { chunkTicket = ticket; chunkTicket.bindEntity(this); chunkTicket.getModData(); <FIXE> <FIXS> net.minecraftforge.common.ForgeChunkManager.forceChunk(chunkTicket, new net.minecraft.world.ChunkCoordIntPair(chunkCoordX, chunkCoordZ)); <FIXE>
<FIXS> <FIXE> <FIXS> java.util.LinkedList<de.uni_hamburg.informatik.swt.se2.mediathek.materialien.Vormerkkarte> Liste = new java.util.LinkedList<de.uni_hamburg.informatik.swt.se2.mediathek.materialien.Vormerkkarte>(); <FIXE>
<FIXS> io.druid.query.QueryRunnerFactory<T, io.druid.query.Query<T>> factory = conglomerate.findFactory(query); <FIXE>
<FIXS> processIntegrationComponentSpec(((org.springframework.integration.dsl.core.IntegrationComponentSpec<?, ?>) (bean))); <FIXE>
<FIXS> onDone(e); <FIXE>
<FIXS> (size)--; <FIXE>
<FIXS> if (!(blocked)) { target = checkTargetSwitch(target); lethalAttack(target, "Serial Killer"); } <FIXE>
<FIXS> } while (!(isRaceDone(racers)) ); <FIXE>
<FIXS> <FIXE>
<FIXS> org.junit.Assert.assertTrue("Test for 'isEmpty()' failed: not empty", avlTree.isEmpty()); <FIXE> <FIXS> org.junit.Assert.assertTrue("Test for 'isEmpty()' failed: not empty after remove", avlTree.isEmpty()); <FIXE>
<FIXS> <FIXE>
<FIXS> this.lastSale = new java.math.BigDecimal(0.0).setScale(2, java.math.RoundingMode.HALF_UP); <FIXE>
<FIXS> fileNameField.setText(selectedFile.getName()); <FIXE> <FIXS> <FIXE>
<FIXS> model.setValues(parcelID, taxMapID, county, state, acreage, township, range, section, PM, description, b_north, b_east, b_south, b_west); <FIXE>
<FIXS> android.widget.Toast.makeText(getApplicationContext(), "Invalid user name or password", Toast.LENGTH_LONG).show(); <FIXE>
<FIXS> private synchronized void startTransaction() { <FIXE>
<FIXS> public static javafx.scene.control.TextField addTextField(final javafx.scene.layout.Pane parentPane, final java.lang.String defaultText) { <FIXE> <FIXS> <FIXE>
<FIXS> if (bitmap == null) return ; <FIXE>
<FIXS> if (this.importedSheets.containsKey(sheetName)) { <FIXE>
<FIXS> <FIXE>
<FIXS> @java.lang.Override <FIXE> <FIXS> if ((listAdapter) != null) listAdapter.notifyDataSetChanged(); <FIXE>
<FIXS> public java.lang.Class<?> findClass(java.lang.String name) throws java.lang.ClassNotFoundException { <FIXE>
<FIXS> org.openstack4j.core.transport.HttpResponse resp = put(java.lang.Void.class, dest.getURI()).header(org.openstack4j.model.storage.object.SwiftHeaders.X_COPY_FROM, source.getURI()).executeWithResponse(); <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> entities.User u = dao.getUserById(id); <FIXE> <FIXS> <FIXE>
<FIXS> return java.lang.Math.sqrt((((2 * (gravity)) * (height)) + ((((gravity) * distance) * distance) / (((2 * (java.lang.Math.cos(targetAngle))) * (java.lang.Math.cos(targetAngle))) * ((height) + (distance * (java.lang.Math.tan(targetAngle)))))))); <FIXE>
<FIXS> try (com.medallia.word2vec.util.ProfilingTimer timer = com.medallia.word2vec.util.ProfilingTimer.create("Loading model")) { <FIXE>
<FIXS> return reason; <FIXE>
<FIXS> java.lang.String token, @com.teamwolf.controller.RequestBody java.lang.Integer gid) { <FIXE>
<FIXS> return new com.tommytony.war.Location(world, location.getX(), location.getY(), location.getZ(), ((float) (location.getYaw())), ((float) (location.getPitch()))); <FIXE>
<FIXS> for (int i = (this.pattern.length()) - 1; i >= 0; i--) { <FIXE>
<FIXS> return java.util.Optional.ofNullable(((T) (this.ctx.get(key)))); <FIXE>
<FIXS> if (supportActionBar != null) { supportActionBar.setHomeAsUpIndicator(R.drawable.ic_keyboard_backspace_black_24dp); supportActionBar.setDisplayHomeAsUpEnabled(true); supportActionBar.setTitle(""); } <FIXE>
<FIXS> android.content.Intent goToRegister = new android.content.Intent(getApplicationContext(), com.example.abhi.saarangbeta.regActivity.class); <FIXE>
<FIXS> java.lang.String temp = s.toLowerCase(); <FIXE> <FIXS> if ((temp.charAt(i)) != (temp.charAt(((n - i) - 1)))) { <FIXE>
<FIXS> mapItems.clear(); <FIXE>
<FIXS> <FIXE>
<FIXS> public void setMetaInformation() { <FIXE>
<FIXS> assertTrue(gameplayTest.CollisionDetectorTest.detector.checkExactCollision(bomberman, b)); <FIXE>
<FIXS> public void setPosition(float x, float y, float z) { <FIXE> <FIXS> this.x = x; this.y = y; this.z = z; <FIXE>
<FIXS> answer.set(finalI, myLazy.get()); <FIXE> <FIXS> assertSame(answer.get(finalI), myLazy.get()); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> this.editElement(); <FIXE>
<FIXS> <FIXE>
<FIXS> if (!(context instanceof android.support.v7.app.ActionBarActivity)) { <FIXE>
<FIXS> <FIXE>
<FIXS> int index = java.util.concurrent.ThreadLocalRandom.current().nextInt(0, countActiveDeck()); <FIXE>
<FIXS> de.tud.plt.r43ples.management.DatasetGenerationManagement.logger.info((((("New branch \"" + branchName) + "\" for <") + graphName) + "> created.")); <FIXE>
<FIXS> jocConfigurationDbItem.setConfigurationItem("myNewConfiguration"); <FIXE> <FIXS> jocConfigurationDBLayer.saveConfiguration(jocConfigurationDbItem); <FIXE>
<FIXS> fragmentTransaction.commitAllowingStateLoss(); <FIXE> <FIXS> <FIXE>
<FIXS> myLibgdx = new com.gruppe4.menschaergerdichnicht.MenschAergerDIchNicht(); <FIXE>
<FIXS> controller.getState(memberId, false); <FIXE> <FIXS> controller.getState(memberId, false); <FIXE>
<FIXS> str += java.lang.String.valueOf(((this.value[0]) + 1)); <FIXE> <FIXS> str += ":" + ((this.value[i]) + 1); <FIXE>
<FIXS> writer.write((("<?xml version='1.0' encoding='" + (encoding.name().toLowerCase())) + "\'?>\n")); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> mIntelliPlugCard = new com.grarak.kerneladiutor.elements.cards.SwitchCardView.DSwitchCard(); mIntelliPlugCard.setTitle(getString(R.string.intelliplug)); mIntelliPlugCard.setDescription(getString(R.string.intelliplug_summary)); mIntelliPlugCard.setChecked(com.grarak.kerneladiutor.utils.kernel.CPUHotplug.isIntelliPlugActive()); mIntelliPlugCard.setOnDSwitchCardListener(this); addView(mIntelliPlugCard); <FIXE>
<FIXS> for (int x = 1; x <= (k); x++) { <FIXE>
<FIXS> public java.util.List<com.gdpost.web.entity.component.TuiBaoModel> getNetTuiBaoWarnningWithPolicyDateAndCsDate(java.lang.String organCode, java.lang.String d1, java.lang.String d2, java.lang.String d3, java.lang.String d4, java.lang.String prdCode, java.lang.String toPerm, java.lang.String staffFlag, java.lang.String bankNaem) { return cmDAO.getNetTuiBaoWarningWithPolicyDateAndCsDate(organCode, d1, d2, d3, d4, prdCode, toPerm, staffFlag, bankNaem); <FIXE>
<FIXS> mOutputStream.writeByte(epcc.ed.ac.uk.gcrf_rear.data.DataStore.VERSION); <FIXE> <FIXS> <FIXE>
<FIXS> if (message != null) { this.messageId = message.getMessageId(); this.messageCode = message.getMessageCode(); this.messageEn = message.getMessageEn(); this.messageTh = message.getMessageTh(); this.messageType = message.getMessageType(); } <FIXE>
<FIXS> if (accountDto.getRole().equals(RoleAccountEnum.Student.toString())) { <FIXE>
<FIXS> }else { return false; <FIXE>
<FIXS> if (manufacturer.equals(item.getProduct().getManufacturer())) { <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> int randomIdx = edu.princeton.cs.algs4.StdRandom.uniform(0, ((numElementsWithNulls) + 1)); while ((stackArray[randomIdx]) == null) { randomIdx = edu.princeton.cs.algs4.StdRandom.uniform(0, ((numElementsWithNulls) + 1)); } <FIXE>
<FIXS> <FIXE> <FIXS> done = (--(currentLoop)) < 1; <FIXE>
<FIXS> if ((texture) != null) texture.push(this); if ((model) != null) model.push(this); <FIXE>
<FIXS> com.google.gwt.emultest.java.lang.MathTest.assertEquals((a + 1), java.lang.Math.incrementExact(a)); <FIXE>
<FIXS> if (cursor == null) return ; <FIXE>
<FIXS> if (isDisposed()) return ; <FIXE>
<FIXS> <FIXE> <FIXS> socket = null; <FIXE> <FIXS> <FIXE>
<FIXS> if (!(edtPasswordReenter.hasFocus())) { return ; } checkPassReenter = getEditTextText(edtPasswordReenter).equals(getEditTextText(edtPassword)); if (!(checkPassReenter)) { edtPasswordReenter.setError(getResources().getString(R.string.PasswordReenterError)); <FIXE>
<FIXS> if ((selection == null) || (selection.isEmpty())) { return ; } <FIXE>
<FIXS> <FIXE>
<FIXS> org.apache.commons.cli.CommandLine commandLine = new org.apache.commons.cli.DefaultParser().parse(options, this.arguments, true); <FIXE>
<FIXS> if (((p1.equals(s.p1)) && (p2.equals(s.p2))) || ((p1.equals(s.p2)) && (p2.equals(s.p1)))) { return true; } <FIXE> <FIXS> return false; <FIXE>
<FIXS> public void start(java.lang.String name, java.lang.String queueHost, int queuePort, com.seveniu.consumer.Consumer consumer) { this.taskQueue = new com.seveniu.crawlClient.TaskQueue(queueHost, queuePort, name); this.dataQueue = new com.seveniu.DataQueue(queueHost, queuePort, name, consumer); this.dataQueue.start(); <FIXE>
<FIXS> if ((commandCenter) == null) commandCenter = com.testcase.emuchat.CommandCenter.getInstance(getContext()); <FIXE>
<FIXS> @java.lang.SuppressWarnings(value = "unchecked") java.lang.String CatContent = ((javax.swing.JComboBox<java.lang.String>) (e.getSource())).getSelectedItem().toString(); <FIXE>
<FIXS> for (index = 0; (index) < (matrix[v].length); (index)++) { if (matrix[v][index]) { return index; <FIXE>
<FIXS> if (input == null) return null; <FIXE>
<FIXS> floors[sourceFloor].addPerson(); java.lang.Thread newPerson = new java.lang.Thread(new com.ru.usty.elevator.Person(sourceFloor, destinationFloor, this)); newPerson.start(); return newPerson; <FIXE>
<FIXS> if ((level.isInfinity()) || (isInfinity())) { <FIXE>
<FIXS> try (net.openhft.chronicle.map.ChronicleMap map = map5()) { <FIXE>
<FIXS> listener.send(); <FIXE>
<FIXS> Book book1 = new Book(null, null, null, 0); <FIXE>
<FIXS> final com.documentum.fc.common.IDfValue dfValue = new com.documentum.fc.common.DfValue(parentFolder.getFolderPath(0)); <FIXE>
<FIXS> java.lang.String result = instance.assembleKwd_IDLexeme(); <FIXE>
<FIXS> java.lang.String error, @org.springframework.web.bind.annotation.RequestParam(value = "logout", required = false) java.lang.String logout, @org.springframework.web.bind.annotation.RequestParam(value = "registered", required = false) java.lang.String registered) { <FIXE> <FIXS> if (error != null) { model.addObject("error", error); <FIXE> <FIXS> if (logout != null) { model.addObject("msg", logout); <FIXE> <FIXS> if (registered != null) { <FIXE>
<FIXS> cz.zcu.kiv.crce.metadata.dao.mongodb.internal.mapper.ResourceMetadataMapper.mapCapability(dest, src.getIdentity(), metadataFactory, metadataService); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> notifyListeners(SWT.Selection, new org.eclipse.swt.widgets.Event()); <FIXE>
<FIXS> if (tutor != null) { tutorRepo.save(tutor); } <FIXE>
<FIXS> return tmp; <FIXE>
<FIXS> if (((getCurrentSum().getMonth()) != (java.util.Calendar.MONTH)) || ((getCurrentSum().getYear()) != (java.util.Calendar.YEAR))) { <FIXE>
<FIXS> frameIndex = ((frameIndex) >= (frames.length)) ? 0 : frameIndex; <FIXE>
<FIXS> if ((rb != null) && (checkedId > (-1))) { android.widget.Toast.makeText(getApplicationContext(), rb.getText().toString(), Toast.LENGTH_SHORT).show(); } <FIXE>
<FIXS> (n)++; <FIXE>
<FIXS> if (null == (_aiList)) { _btnNext.setEnabled(false); _btnPrev.setEnabled(false); } <FIXE>
<FIXS> <FIXE>
<FIXS> UI.Dialogs.QueueMonitorDialog dialog = new UI.Dialogs.QueueMonitorDialog(null, false, queueManager); <FIXE>
<FIXS> private void init(final java.nio.file.Path workingDirectory) { <FIXE>
<FIXS> strippedQuery.setDatabase(this); <FIXE>
<FIXS> java.lang.System.exit(0); <FIXE>
<FIXS> return BaseRestTester.restHelper.put(url, new java.io.ByteArrayInputStream(org.duracloud.integration.durastore.rest.TestContentRest.CONTENT.getBytes()), "text/plain", org.duracloud.integration.durastore.rest.TestContentRest.CONTENT.length(), headers); <FIXE>
<FIXS> newDatabase.create(securityDefinition); <FIXE>
<FIXS> bitmap = null; <FIXE>
<FIXS> <FIXE>
<FIXS> listRowAdapter.add(playlistSimple); <FIXE>
<FIXS> private java.lang.String extractDateAndInputLine(java.lang.String inputLine, java.util.List<parser.DateGroup> groups) { <FIXE>
<FIXS> walk(root, new RBTree.IndexedConsumer<RBTree.RBNode>(( node, index) -> items[index] = node.item)); <FIXE>
<FIXS> } if ((date2) == null) { <FIXE>
<FIXS> if ((de.kantor.alexa.lego.ev3.iot.lambda.Alexa2Ev3IotClient.instance) == null) { de.kantor.alexa.lego.ev3.iot.lambda.Alexa2Ev3IotClient.instance = new de.kantor.alexa.lego.ev3.iot.lambda.Alexa2Ev3IotClient(java.lang.System.getenv("aws_iot_endpoint"), java.lang.System.getenv("aws_iot_client"), java.lang.System.getenv("aws_iot_accessKeyId"), java.lang.System.getenv("aws_iot_secretAccessKey"), ev3Devices); <FIXE> <FIXS> <FIXE>
<FIXS> if ((convo[i]) != null) { if (convo[i].getDriver().getName().equals(otherUser.getName())) { return convo[i]; } <FIXE>
<FIXS> <FIXE> <FIXS> bindAttributes(shader, locations); <FIXE>
<FIXS> if ((packet >= 0) && (packet < (packets.InboundPackets.values().length))) <FIXE>
<FIXS> <FIXE>
<FIXS> assertNotNull(response); <FIXE> <FIXS> assertNotNull(restResponse.getData()); assertFalse(restResponse.getData().isEmpty()); <FIXE>
<FIXS> if (!(muxNotifier.shouldNotifyCompletion(com.devbrackets.android.exomedia.EMListenerMux.COMPLETED_DURATION_LEEWAY))) { <FIXE> <FIXS> if ((completionListener) != null) { completionListener.onCompletion(null); } <FIXE>
<FIXS> <FIXE>
<FIXS> injector = com.google.inject.Guice.createInjector(baseModule); stateMgrAdaptor = createStateMgrAdaptor(); <FIXE> <FIXS> <FIXE>
<FIXS> fail(); <FIXE>
<FIXS> if (((mPreferences.getCustomServer()) == null) || (mPreferences.getCustomServer().isEmpty())) { mJay.setRequestMethod(RequestMethods.Fastest); mJay.setIsTestnet(false); }else { <FIXE> <FIXS> <FIXE>
<FIXS> }else if ((ord) > (other.ord)) { return 1; }else { return 0; } <FIXE>
<FIXS> return menuBuilder(ussdGroupUtil.askForGroupNoInlineNew(user, za.org.grassroot.webapp.controller.ussd.USSDVoteController.thisSection, groupsExistPrompt, groupsDontExistPrompt, "issue", ((groupMenus) + "create"), null, false)); <FIXE>
<FIXS> <FIXE>
<FIXS> com.yahoo.squidb.utility.SquidUtilities.putInto(this.values, property.getName(), getFromValues(property, values, false), true); <FIXE>
<FIXS> private java.lang.String getOutput(com.gtp.dubbo.api.metadata.ApiParamInfo returnParams) { <FIXE>
<FIXS> if ((courseObjG.getThumbnails()) != null) { createOrUpDate.setUrl(courseObjG.getThumbnails().getUrl()); } <FIXE>
<FIXS> java.lang.String newgroup = inputgroup.getText().toString(); java.lang.String newowner = inputowner.getText().toString(); <FIXE>
<FIXS> if ((parent != null) && (!(java.nio.file.Files.exists(parent)))) { <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> java.util.ArrayList<org.digitalcampus.oppia.model.Course> savedCourses = ((java.util.ArrayList<org.digitalcampus.oppia.model.Course>) (savedInstanceState.getSerializable("courses"))); this.courses.addAll(savedCourses); } catch (java.lang.Exception e) { <FIXE>
<FIXS> simplejava.jj_la1_0 = new int[]{ 0 , 536915968 , 541065216 , 0 , 536915968 , 536915968 , 2048 , 4255744 , 4255744 , 262144000 , 1335885824 , 1075183616 , 0 , 1073741824 , -2147483648 , 0 , 0 , 536915968 , 1073741824 , 1441792 , 1335885824 , 0 , 1075183616 , 1335885824 , 1073741824 , 1073741824 , 0 , 0 , 262144000 , -2147483648 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 262144000 }; <FIXE>
<FIXS> <FIXE>
<FIXS> if ((yPos) < ((world.getMap().size()) - 1)) { <FIXE>
<FIXS> try (org.apache.http.impl.client.CloseableHttpClient commandClient = clientFactory.createHttpClient(sessionStore)) { connectGetContent(commandClient, postMethod); } <FIXE>
<FIXS> this.mode = mode; <FIXE>
<FIXS> return org.apache.airavata.credential.store.client.CredentialStoreClientFactory.createAiravataCSClient(credServerHost, credServerPort); <FIXE>
<FIXS> public static void setUpAlarm(android.content.Context context) { <FIXE>
<FIXS> }else { oos.writeObject(new byte[1]); <FIXE>
<FIXS> int k = size; while (k > 0) { <FIXE> <FIXS> k -= 1; <FIXE>
<FIXS> break; <FIXE>
<FIXS> protected javax.servlet.http.HttpServletRequest extractHttpServletRequest(java.lang.Object object) { <FIXE>
<FIXS> Coin c = new Penny(); <FIXE> <FIXS> <FIXE>
<FIXS> long timeTrainGoesTo(java.lang.String target, java.util.Date currentTime) { <FIXE>
<FIXS> int indexNumber = com.gmail.eliterscripts.ConfigManager.addMessage(addingMessage); src.sendMessage(org.spongepowered.api.text.Text.of((("Your message was added to the list, indexed under '" + indexNumber) + "'."))); <FIXE>
<FIXS> <FIXE> <FIXS> speech_listener_.onSpeechRecognized(results_in_arraylist); <FIXE>
<FIXS> return edgesHasWeigth; <FIXE>
<FIXS> com.zjutkz.lib.AgeraBus.eventRepositories().post(new com.zjutkz.app.model.eventbus.LoadEvent(lastAction, beauties.results)); <FIXE>
<FIXS> if (((this.stream) == null) || (!(this.stream.equals(other.stream)))) { <FIXE>
<FIXS> <FIXE>
<FIXS> pigSprite.getBody().getPosition().setY(0); <FIXE>
<FIXS> for (int i = 0; i < (queues.size()); i++) { workers.get(i).join(); queues.get(i).put(stop); } workers.get(((workers.size()) - 1)).join(); <FIXE>
<FIXS> private void init(final boolean daemonize, final boolean quiet, org.elasticsearch.env.Environment env) throws org.elasticsearch.cli.UserException, org.elasticsearch.node.NodeValidationException { <FIXE> <FIXS> org.elasticsearch.bootstrap.BootstrapProxy.init((!daemonize), quiet, env); <FIXE>
<FIXS> tmn.value = null; <FIXE>
<FIXS> <FIXE> <FIXS> android.widget.Toast.makeText(getApplicationContext(), "Basket information saved.", Toast.LENGTH_SHORT).show(); <FIXE> <FIXS> android.widget.Toast.makeText(getApplicationContext(), e.getMessage(), Toast.LENGTH_SHORT).show(); <FIXE>
<FIXS> addSwipeSpecialView(binding.viewPager); <FIXE>
<FIXS> java.lang.String tmp2 = s2.replaceAll("\n", "").replaceAll("\r", ""); <FIXE>
<FIXS> pk.userPermission = 0; <FIXE>
<FIXS> id = id.toUpperCase(); <FIXE>
<FIXS> swapCamera(); <FIXE>
<FIXS> return java.math.BigDecimal.ZERO; <FIXE>
<FIXS> public void game_over(edu.oregonstate.cs361.battleship.BattleshipModel model) { <FIXE>
<FIXS> if ("b".equals(fi[firstNumber][secondNumber])) { <FIXE>
<FIXS> java.lang.System.exit(0); <FIXE> <FIXS> return -1; <FIXE>
<FIXS> if (i <= firstMin) { <FIXE> <FIXS> if (i <= secondMin) { <FIXE>
<FIXS> java.lang.String currentPlan = currentUser.getPlan(); if (currentPlan == "S") { <FIXE> <FIXS> if (currentPlan == "N") { <FIXE>
<FIXS> if ((tipo != null) && (payloadDoEvento != null)) { contextoJms.createProducer().setProperty("tipoEvento", tipo.name()).send(fila, payloadDoEvento); br.org.arquitetura.mensageria.AbstractNotificadorJms.logger.info(("mensagem JMS enviada: " + (br.org.arquitetura.utils.LogSanitizer.sanitize(payloadDoEvento.toString())))); } <FIXE>
<FIXS> for (int i = 0; (i < (blockLength)) && (index < numOfAtoms); i++) { <FIXE> <FIXS> index++; <FIXE>
<FIXS> public static org.eclipse.microprofile.jwt.credential.JWTCredential parse(java.lang.String authorizationHeader) { <FIXE>
<FIXS> MainActivity.mainContext = context; <FIXE> <FIXS> <FIXE>
<FIXS> } catch (java.io.IOException e) { <FIXE>
<FIXS> return editDBModelFile(); <FIXE>
<FIXS> if ((dataModel.getTargetDose()) == null) { return ; } <FIXE>
<FIXS> if ((e) == null) { <FIXE>
<FIXS> if (name == null) { return -1; } <FIXE> <FIXS> if (name.equals(component.getName())) { return component.index(); } <FIXE> <FIXS> return -1; <FIXE>
<FIXS> com.github.nisrulz.sensey.OrientationDetector detector = getDetector(fakeListener, com.github.nisrulz.sensey.OrientationDetector.class); <FIXE>
<FIXS> i++; <FIXE>
<FIXS> checkbox_not_show.setChecked(true); <FIXE>
<FIXS> int result = category; result = (31 * result) + ((name) != null ? name.hashCode() : 0); result = (31 * result) + ((value) != null ? value.hashCode() : 0); <FIXE>
<FIXS> <FIXE> <FIXS> return welcome_in_context; <FIXE> <FIXS> return null; <FIXE>
<FIXS> } catch (org.cote.accountmanager.data.FactoryException | org.cote.accountmanager.data.ArgumentException e) { <FIXE>
<FIXS> if (isTamed()) { getEntityAttribute(SharedMonsterAttributes.MAX_HEALTH).setBaseValue(20.0); <FIXE> <FIXS> getEntityAttribute(SharedMonsterAttributes.MAX_HEALTH).setBaseValue(10.0); <FIXE>
<FIXS> for (int i = 0; i < (itemValues.getChildrenAsJsonArray(fieldParent).size()); i++) { <FIXE>
<FIXS> final cucumber.runtime.RuntimeOptionsFactory factory = new cucumber.runtime.RuntimeOptionsFactory(clazz); <FIXE>
<FIXS> if (amqConn == (connection)) { synchronized(syncLock) { if (amqConn == (connection)) { errorMessage = exception.getMessage(); com.esri.geoevent.transport.activemq.ActiveMQInboundTransport.LOGGER.error(errorMessage, exception); setRunningState(RunningState.STOPPING); cleanup(); setRunningState(RunningState.ERROR); } <FIXE>
<FIXS> dl.addMessageProcessor(new at.pria.osiris.osiris.communication.messageProcessor.StringProcessor(sensorRefreshable)); dl.addMessageProcessor(new at.pria.osiris.osiris.communication.messageProcessor.SensorValueResponseProcessor(sensorRefreshable)); <FIXE>
<FIXS> timeline = new javafx.animation.Timeline(new javafx.animation.KeyFrame(javafx.util.Duration.millis(100), ( ae) -> transitionMove())); <FIXE>
<FIXS> <FIXE>
<FIXS> if ((mAllTracks.size()) > 1) { if ((mCurrentTrackIndex) == ((mAllTracks.size()) - 1)) { mCurrentTrackIndex = -1; } mCurrentTrackIndex = (mCurrentTrackIndex) + 1; mCurrentTrackDetails = ((com.udacity.neerajbholani.spotifystreamer.parcelables.TrackDetails) (mAllTracks.get(mCurrentTrackIndex))); updateViewsWithCurrentTrackDetails(); playTrack(); <FIXE> <FIXS> <FIXE>
<FIXS> userAccess = new codeu.chat.common.UserAccessLevel(userId, accessLevel); <FIXE> <FIXS> <FIXE>
<FIXS> int posOfEnter = this.getText().lastIndexOf("\n"); <FIXE> <FIXS> <FIXE>
<FIXS> edu.arizona.ece.memsim.implementations.core.ProgramSmall.StrideAccess(false, 32); <FIXE>
<FIXS> org.hamcrest.MatcherAssert.assertThat(((java.lang.Integer) (result)), org.hamcrest.CoreMatchers.is(0)); <FIXE>
<FIXS> java.io.File file = downloadStructure(pdbId); <FIXE>
<FIXS> de.tudarmstadt.ukp.dkpro.tc.crfsuite.task.serialization.SaveModelCRFSuiteBatchTask batch = new de.tudarmstadt.ukp.dkpro.tc.crfsuite.task.serialization.SaveModelCRFSuiteBatchTask("TestSaveModel", aModelFolder, de.tudarmstadt.ukp.dkpro.tc.crfsuite.CRFSuiteAdapter.class); <FIXE>
<FIXS> final com.indago.pg.segments.ConflictSet cs = new com.indago.pg.segments.ConflictSet(); <FIXE> <FIXS> <FIXE> <FIXS> cs.add(node); return cs; <FIXE>
<FIXS> lpr = new uk.chromis.data.user.ListProviderCreator(m_dlSales.getProductCatQBF(0), jproductfilter); <FIXE>
<FIXS> java.lang.String msg = item.getMessageType(); if (null == msg) { return true; } if ("RO_ACCESS_REPORT".equals(msg.trim())) { <FIXE>
<FIXS> final java.lang.String switchToFragmentResult = net.videgro.ships.fragments.internal.FragmentUtils.switchToFragment(getActivity(), new net.videgro.ships.fragments.ShowMapFragment()); <FIXE>
<FIXS> <FIXE>
<FIXS> if (value == null) { return null; } <FIXE>
<FIXS> return filter(logger, level, marker, msg, new java.lang.Object[]{ p0 , p1 , p2 , p3 , p4 , p5 , p6 , p7 , p8 }); <FIXE>
<FIXS> if ((((javax.swing.JScrollBar) (c)).getValue()) == (displayedSliceIndex_)) { <FIXE>
<FIXS> assert (transferParameters != null) && (!(transferParameters.isEmpty())); <FIXE> <FIXS> <FIXE>
<FIXS> if ((authenticatedScreenname.equals(screenName)) && (!(authenticatedScreenname.equals("")))) <FIXE>
<FIXS> java.lang.String symbol = ((android.widget.TextView) (v.findViewById(R.id.stock_symbol))).getText().toString(); <FIXE>
<FIXS> return getFindPriceStrategy().findBasePrice(entry).equals(new java.lang.Double(0.0)) ? new de.hybris.platform.util.PriceValue(entry.getOrder().getCurrency().toString(), 0.0, true) : getFindPriceStrategy().findBasePrice(entry); <FIXE>
<FIXS> if ((!(url.startsWith("http"))) && (!(url.startsWith("https")))) { <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> public boolean createProject(java.lang.Long submissionType, java.lang.String workflowStatus, java.lang.String submissionStatus, java.lang.Long creationDate, java.lang.Long amendmentDate, java.lang.String projectReadinessElements, java.lang.String projectSelectionInformation, java.lang.String tbpApproval, java.lang.String stateApproval, java.lang.String federalApproval) { <FIXE>
<FIXS> (size)++; <FIXE>
<FIXS> <FIXE>
<FIXS> if (((ModelCreator.currentProject.SelectedAnimation) != null) && (row >= 0)) { <FIXE>
<FIXS> if (data != null) { java.lang.String error = data.getStringExtra(ZBarConstants.ERROR_INFO); android.widget.Toast.makeText(getActivity(), error, Toast.LENGTH_SHORT).show(); } <FIXE>
<FIXS> for (int i = 1; i < (idComponents.length); i++) { sb.append(":").append(idComponents[i]); <FIXE>
<FIXS> force[i] = java.lang.Math.abs(data[i]); <FIXE>
<FIXS> addItem(aValue); <FIXE>
<FIXS> host.onElementRemoved(toRemove, touchIndex); <FIXE>
<FIXS> if (mouse != null) { if (handler instanceof BaseActor) { handler.onMouseIn(mouse); handler.onMouseOut(mouse); } handler.onMouseDown(mouse); handler.onMouseUp(mouse); handler.onMouseClicked(mouse); handler.onMouseMoved(mouse); handler.onMouseDragged(mouse); handler.onMouseDragging(mouse); <FIXE> <FIXS> <FIXE>
<FIXS> public nu.xom.Element getTaskElementByID(java.lang.String id) { <FIXE> <FIXS> if (temp.getAttributeValue("id").equals(id)) { <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> assertEquals("correctly-assigned", my.getMyProperty()); <FIXE>
<FIXS> int i; <FIXE>
<FIXS> if (!(isOnFire)) { isOnFire = true; setFireAnimation(); new com.mayying.tileMapGame.entities.powerups.DelayedThread(10000L) { @java.lang.Override public void run() { super.run(); if ((com.mayying.tileMapGame.GameWorld.getInstance()) != null) { if (isOnFire) { isOnFire = false; die(); } <FIXE> <FIXS> }.start(); } <FIXE>
<FIXS> for (int i = 0; i < (toConvert.length); i++) primative[i] = toConvert[i]; <FIXE>
<FIXS> com.trcx.ita.Common.Item.Swapper.putLastStack(swapper, is.getItem().onItemRightClick(is, world, player)); <FIXE>
<FIXS> thread.start(); <FIXE>
<FIXS> if (month > 12) { <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> if ((realizations.size()) > 0) { if (olapContext.isWeekMatch.containsKey(realizations.get(0))) { com.kylinolap.cube.CubeInstance cube = ((com.kylinolap.cube.CubeInstance) (realizations.get(0))); com.kylinolap.query.routing.RoutingRules.AdjustForWeeklyMatchCubeRule.adjustOLAPContext(cube, olapContext); } <FIXE>
<FIXS> }else { player.play(); playPauseButton.setText("Pause"); pausedByButton = false; } <FIXE>
<FIXS> return new itinerary.main.State(command, new itinerary.main.Command(originalTask, CommandType.EDIT, null), getAllTasks(), true); <FIXE>
<FIXS> public int ping(java.lang.String name) throws java.rmi.RemoteException, java.rmi.server.ServerNotActiveException { <FIXE> <FIXS> throw e; <FIXE> <FIXS> <FIXE>
<FIXS> int middlePosX = ((tileX * (main.java.Game.tileSize)) - 1) + ((main.java.Game.tileSize) / 2); int middlePosY = ((tileY * (main.java.Game.tileSize)) - 1) + ((main.java.Game.tileSize) / 2); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> view.disableButtons(); view.modelUpdated(); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> private static net.minecraft.util.ResourceLocation nameToLocation(java.lang.String name) { <FIXE>
<FIXS> <FIXE>
<FIXS> LRUCache l = new LRUCache(2); <FIXE> <FIXS> l.set(2, 2); java.lang.System.out.println(((((("l: " + l) + ", capacity: ") + (l.capacity)) + ", filled: ") + (l.filled))); <FIXE>
<FIXS> if ((line) != null) { unreadLines.add(line); } <FIXE>
<FIXS> <FIXE>
<FIXS> com.google.gwt.emultest.java.lang.MathTest.assertEquals((a - 1), java.lang.Math.decrementExact(a)); <FIXE>
<FIXS> org.junit.Assert.assertThat(doubleRegistry.getSpies(), containsInAnyOrder(allOf(doubleWithName(com.pchudzik.springmock.infrastructure.definition.registry.DoubleRegistryParserTest.ANY_SERVICE1_NAME), doubleForClass(com.pchudzik.springmock.infrastructure.definition.registry.DoubleRegistryParserTest.AnyService1.class)), allOf(doubleWithName(com.pchudzik.springmock.infrastructure.definition.registry.DoubleRegistryParserTest.ANY_SERVICE2_NAME), doubleForClass(com.pchudzik.springmock.infrastructure.definition.registry.DoubleRegistryParserTest.AnyService2.class)))); <FIXE>
<FIXS> startWebServer(); <FIXE>
<FIXS> int sum = 0; while (n < 1000) { if (((n % 3) == 0) || ((n % 5) == 0)) { sum += n; } <FIXE> <FIXS> java.lang.System.out.println(sum); <FIXE>
<FIXS> mockMvc.perform(org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get("/signup2")).andExpect(status().isOk()).andExpect(view().name("signup2")).andExpect(model().attributeExists("signUpMergedForm")); <FIXE>
<FIXS> if ((amai.org.conventions.events.activities.ProgrammeActivity.floorHour(event.getEvent().getStartTime())) >= hour) { <FIXE> <FIXS> return i - 1; <FIXE>
<FIXS> <FIXE>
<FIXS> java.lang.String words = entry.getValue().substring(entry.getValue().indexOf(" ")).replaceAll(" ", ScrabbleTeam3.ScrabbleWordSuggester.WORDS_SEPERATOR); <FIXE>
<FIXS> _displayController.initDisplay(state.getAllTasks(), createDisplayHeader(state), state.getDetailedIndexes(), state.getDisplayPosition(), true); <FIXE>
<FIXS> for (java.lang.String line : fileLines) { <FIXE> <FIXS> } <FIXE>
<FIXS> return ; <FIXE> <FIXS> java.lang.System.exit(0); <FIXE>
<FIXS> org.cloudish.borg.model.Host h = new org.cloudish.borg.model.Host(0, 0.5, 0.5, null, new java.util.HashMap<>()); <FIXE>
<FIXS> try (org.osc.sdk.manager.api.ManagerDeviceApi deviceApi = this.apiFactoryService.createManagerDeviceApi(vs)) { java.util.Map<java.lang.String, java.lang.String> bootstrapProperties = vs.getApplianceSoftwareVersion().getConfigProperties(); return deviceApi.getBootstrapinfo(new org.osc.core.broker.service.tasks.conformance.openstack.deploymentspec.OsSvaServerCreateTask.ApplianceBootStrap(applianceName, com.google.common.collect.ImmutableMap.copyOf(bootstrapProperties))); } <FIXE>
<FIXS> public static java.util.List<Project466.IncomePerson> findKNN(Project466.IncomePerson key, int k, double kNNRatio) { <FIXE> <FIXS> return ipsWithDist.subList(0, k); <FIXE>
<FIXS> if (gasMode > 0) { if (gasMode == 1) { mGasModeSummary.setText(R.string.gas_mode_one); <FIXE> <FIXS> if (gasMode == 2) { mGasModeSummary.setText(R.string.gas_mode_two); }else if (gasMode == 3) { mGasModeSummary.setText(R.string.gas_mode_three); } <FIXE> <FIXS> } <FIXE>
<FIXS> boolean isEmpty; <FIXE> <FIXS> isEmpty = factories.isEmpty(); } if ((!(clusterConnection)) && isEmpty) { synchronized(topologyArrayGuard) { receivedTopology = false; topologyArray = null; <FIXE>
<FIXS> return (parameters.length) == 1 ? matchTo(parameters, new java.lang.String[]{ "add" , "remove" }) : (parameters.length) == 2 ? parameters[0].equals("remove") ? matchTo(parameters, net.canarymod.Canary.reservelist().getReservations()) : parameters[0].equals("add") ? matchToKnownPlayer(parameters) : null : null; <FIXE>
<FIXS> character.addPurchasedEquipment(equip, 1, true, false); <FIXE>
<FIXS> return ; <FIXE>
<FIXS> public void parseRequest(java.lang.String receivedMessage) throws java.io.IOException, request.IllegalRequestException { <FIXE> <FIXS> request.Request req = request.RequestParser.parse(this.converter, receivedMessage); <FIXE>
<FIXS> int size = ((int) (fullMessageBody.stream().mapToInt(( byteBuffer) -> byteBuffer.limit()).sum())); <FIXE>
<FIXS> if (timeout > 0) { return terminatedCondition.await(timeout, unit); }else { terminatedCondition.await(); return true; } <FIXE>
<FIXS> if (name != null) { for (java.lang.Class<?> intf : proxy.getClass().getInterfaces()) { if (name.equals(org.alljoyn.bus.InterfaceDescription.getName(intf))) { org.alljoyn.bus.InterfaceDescription desc = new org.alljoyn.bus.InterfaceDescription(); org.alljoyn.bus.Status status = desc.create(bus, intf); return status.getErrorCode(); } <FIXE>
<FIXS> for (int index = (getNbObjects()) - 1; index <= 1; index--) <FIXE>
<FIXS> java.lang.System.err.println(ex); <FIXE>
<FIXS> if (num != 0) { java.lang.String str = ""; for (int i = 0; i < num; i++) { str += (param[i]) + " "; } parsedTask.setDetails(str.trim()); <FIXE> <FIXS> <FIXE>
<FIXS> do { <FIXE> <FIXS> } while (previousAnswers.contains(exerciseResult) ); <FIXE>
<FIXS> <FIXE>
<FIXS> com.greenfox.poker.model.PokerUser pokerUserFromDatabase = pokerUserRepo.findByUsername(loginRequest.getUsername()).get(0); <FIXE>
<FIXS> pool.execute(fetchData()); <FIXE>
<FIXS> dbConn = null; <FIXE>
<FIXS> <FIXE>
<FIXS> caught += (species.getSpeciesName()) + "\n"; <FIXE>
<FIXS> this.renameTo(tempFile, resultFile); <FIXE>
<FIXS> io.datakernel.stream.AbstractStreamProducer.logger.error("StreamProducer {} closed with error {}", this, error.toString()); <FIXE>
<FIXS> ((javafx.scene.canvas.Canvas) (n)).getGraphicsContext2D().clearRect(0, 0, this.getWidth(), this.getHeight()); <FIXE>
<FIXS> return new FeedbackMessage(java.lang.String.format(Logic.MESSAGE_SEARCH, "successfully"), searchList); <FIXE> <FIXS> return new FeedbackMessage(java.lang.String.format(Logic.MESSAGE_SEARCH, "successfully"), myTaskList); <FIXE>
<FIXS> if ((solveAlgoName) != null) solveFlag = true; <FIXE>
<FIXS> if (!(drawSelection)) world.clearPopUps(); <FIXE> <FIXS> touchX = screenX; touchY = (Gdx.graphics.getHeight()) - screenY; lastX = touchX; lastY = touchY; <FIXE> <FIXS> return true; <FIXE>
<FIXS> de.ingrid.admin.Config.log.error("Error when getting config.override.properties", e); <FIXE>
<FIXS> if ((values == null) || (values.isEmpty())) { <FIXE>
<FIXS> if ((key == null) || (key.equals(""))) { <FIXE>
<FIXS> addPlayerReadyListener(player, provider); <FIXE>
<FIXS> @java.lang.Override <FIXE> <FIXS> if (bbms.GlobalFuncs.RotateHull) { <FIXE> <FIXS> }else { <FIXE> <FIXS> } <FIXE>
<FIXS> if ((app.getGeneralConfigurationId()) != null) app.setGeneralConfiguration(generalConfigurationService.GetById(app.getGeneralConfigurationId())); <FIXE>
<FIXS> if ("SUCCESS".equals(response.getStatus())) { <FIXE>
<FIXS> assertEquals(accessType, ex.getAccessType()); assertEquals(operationType, ex.getOperationType()); assertEquals(taskId, ex.getTaskId()); <FIXE>
<FIXS> long expectedKey = -1; <FIXE> <FIXS> if (key > expectedKey) { <FIXE>
<FIXS> synchronized(node) { assert count == (node.reads) : java.lang.String.format("node = %1$s, reads = %2$d, actual = %3$d", org.avidj.util.Strings.join(org.avidj.zuul.core.DefaultLockManager.pathTo(node)), node.reads, count); } <FIXE>
<FIXS> private me.ramswaroop.jbot.core.slack.models.RichMessage getTerm(java.lang.String title) { <FIXE>
<FIXS> <FIXE>
<FIXS> if ((item != null) && (item.equals(net.minecraft.item.ItemBlock.class))) <FIXE>
<FIXS> <FIXE>
<FIXS> java.lang.Process p = java.lang.Runtime.getRuntime().exec(command); <FIXE>
<FIXS> return com.intellij.openapi.application.ApplicationManager.getApplication().runReadAction(((com.intellij.openapi.util.Computable<java.lang.Boolean>) (() -> (!(p.isCheckInheritance())) || (candidate.isInheritor(vmQName, false))))); <FIXE>
<FIXS> while (!(java.lang.Thread.currentThread().isInterrupted())) { while (!(pool.isQueueEmpty(id))) { pool.fetchTask(id).handle(this); } steal(); <FIXE> <FIXS> <FIXE>
<FIXS> if (((articleAdType) == (com.novel.reader.util.Setting.InterstitialAd)) && ((com.novel.reader.util.Setting.getSettingInt(Setting.keyYearSubscription, this)) == 0)) { <FIXE>
<FIXS> for (int i = 0; i < (users.get(chatId).size()); i++) { if (users.get(chatId).get(i).getName().equals(name)) <FIXE>
<FIXS> android.util.Log.i(com.givenhansco.keystonenavigation.Activities.KODUserFunctions.LoginActivity.TAG, "onDestroy called."); <FIXE>
<FIXS> int asciiCodeOfCharacter = ((character - firstSymbolInASCII) + key) % alphabetSize; <FIXE>
<FIXS> this.getChunk((x >> 4), (z >> 4), true).setBlockSkyLight((x & 15), y, (z & 15), (level & 15)); <FIXE>
<FIXS> boolean hasRecord = (index) < (block.getBlockRecordCount()); <FIXE>
<FIXS> loader.load(graph); <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> for (java.lang.String match : matches) { if (com.alibaba.dubbo.common.utils.UrlUtils.isMatchGlobPattern(match, value, param)) { return true; } } return matches.isEmpty(); <FIXE>
<FIXS> if (bean != null) { field.setBean(bean); field.setValueAccessor(new net.abstractfactory.plum.interaction.rich.field.BeanFieldValueAccessor(bean, field.getName())); } <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> com.webwemser.letsmeetapp.MainActivity.meets = temp; <FIXE>
<FIXS> public static void drawButton(int x, int y, java.lang.String text, java.awt.Font font, java.awt.Graphics g) { <FIXE>
<FIXS> java.util.Date calculatedRunTime = nextRunTimeCalculator.calculateNextRuntime(allPlayers); <FIXE>
<FIXS> if (intent == null) { return ; } <FIXE>
<FIXS> upgrade(1); <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> if (!(isCommented)) { if ((event.getAction()) == (android.view.MotionEvent.ACTION_DOWN)) { respeaker.pauseOriginal(); respeaker.recordRespeaking(); } if ((event.getAction()) == (android.view.MotionEvent.ACTION_UP)) { try { respeaker.pauseRespeaking(); isCommented = true; } catch (org.lp20.aikuma.audio.record.Microphone.MicException e) { this.getActivity().finish(); } <FIXE>
<FIXS> public DeterminizationTree.TreeNode copyIntoList(DeterminizationTree.TreeNode parent, java.util.List<DeterminizationTree.TreeNode> nodelist) { <FIXE> <FIXS> toRet.children.add(child.copyIntoList(toRet, nodelist)); <FIXE> <FIXS> return toRet; <FIXE>
<FIXS> if ((((value.length()) > 1) && ((value.charAt(0)) == '0')) && ((value.charAt(1)) != '.')) return value.substring(1); return value; <FIXE>
<FIXS> im.webuzz.pilet.HttpWorkerUtils.pipeOutBytes(request, cookies, response, type, encoding, content, eTag, (-1), (eTag != null ? 0 : -1)); <FIXE>
<FIXS> return true; }else { <FIXE> <FIXS> <FIXE>
<FIXS> public static swen.adventure.engine.datastorage.EventConnectionParser.EventConnection parseLine(java.lang.String line) { <FIXE>
<FIXS> public static void openIfNecessary(java.lang.String url) { <FIXE>
<FIXS> <FIXE>
<FIXS> ch.epfl.tkvs.yarn.appmaster.AppMaster.log2.info(((("graph_size = " + (ch.epfl.tkvs.yarn.appmaster.centralized_decision.DeadlockCentralizedDecider.graphs.size())) + " - total_expected=") + totalTMCount), ch.epfl.tkvs.yarn.appmaster.centralized_decision.DeadlockCentralizedDecider.class); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> uk.ac.ebi.phenotype.solr.indexer.StatisticalResultIndexer.logger.info("Populating statistical-results solr core"); populateStatisticalResultsSolrCore(); <FIXE>
<FIXS> if ((pillClassifier) == null) pillClassifier = new msu.ece.xiaozeng.mpf3.classifier.PillClassifier(this); <FIXE>
<FIXS> if (((this.list) != null) && ((getItemCount()) > 0)) { <FIXE>
<FIXS> <FIXE>
<FIXS> public synchronized byte[] read(java.lang.String filename, int offset) throws java.io.FileNotFoundException, java.io.IOException { <FIXE> <FIXS> java.io.BufferedInputStream reader = new java.io.BufferedInputStream(new java.io.FileInputStream(filename)); <FIXE>
<FIXS> java.lang.String s = getUserObject().getOntologyID().getOntologyIRI().get().toString(); <FIXE>
<FIXS> fragmentManager.beginTransaction().replace(R.id.container, nextFragment).commit(); <FIXE>
<FIXS> <FIXE>
<FIXS> java.lang.String message = msgJson.toJSONString(); <FIXE>
<FIXS> } catch (ro.msg.edu.business.common.exception.TechnicalException e) { <FIXE>
<FIXS> <FIXE>
<FIXS> if (((cursorPosition) >= 0) && ((cursorPosition) < (lineLength))) { <FIXE>
<FIXS> for (java.lang.String key : keys) { <FIXE> <FIXS> header.appendChild(doc.createTextNode(key)); <FIXE>
<FIXS> <FIXE>
<FIXS> }, pageSize); <FIXE>
<FIXS> @ua.nc.controller.RequestMapping(value = { "/students/list/{itemsPerPage}/{pageNumber}" }, method = RequestMethod.GET, produces = "application/json") <FIXE> <FIXS> java.lang.Integer pageNumber) { <FIXE> <FIXS> studentData = studentService.getStudents(itemsPerPage, pageNumber); if (studentData == null) { <FIXE>
<FIXS> <FIXE>
<FIXS> int min = minIndex + ((partition2.getLength()) == 0 ? 1 : partition2.getLength()); return findNextOffSetInPartition(doc, partitionOffSet, min); <FIXE>
<FIXS> if ((pageNumber <= 0) || (pageNumber > (this.pages.length))) { <FIXE>
<FIXS> private static int calculScore(int lgTab, int nbrVies) { <FIXE>
<FIXS> rsaConfigured.decrypt(input); <FIXE>
<FIXS> contextMapper.keep(token, role); <FIXE>
<FIXS> java.lang.String body = exchange.getIn().getBody().toString(); com.telapp.auro.camel.MqttProcessor.log.info(((("Executing the method process : " + body) + " header :") + (exchange.getIn().getHeaders()))); <FIXE>
<FIXS> <FIXE>
<FIXS> public void generateLightShafts() { <FIXE>
<FIXS> if (gs.getNextSubGame().isFreeField(new tttx9.Move(gs.getNextSubGame().getId(), j))) return new tttx9.Move(gs.getNextSubGame().getId(), j); <FIXE>
<FIXS> android.util.Log.d(com.stocktracker.util.Utils.TAG, (("Error parsing change " + quantityStr) + " to float."), e); <FIXE>
<FIXS> if (!(isInEditMode())) { android.graphics.Typeface tf = android.graphics.Typeface.createFromAsset(getContext().getAssets(), "afsaneh.ttf"); setTypeface(tf); } <FIXE> <FIXS> <FIXE>
<FIXS> if ((anss == null) || ((anss.size()) == 0)) return ; <FIXE>
<FIXS> when(mockTableManagerSupport.isIndexWorkRequired(tableId)).thenReturn(false); <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> return -1; <FIXE> <FIXS> return 1; <FIXE>
<FIXS> <FIXE>
<FIXS> sdc.insert(ServerDatabaseConnection.LECTURES, new java.lang.String[]{ date , start , end , PID , room , CID }); <FIXE>
<FIXS> <FIXE>
<FIXS> checkLinks(element); <FIXE>
<FIXS> <FIXE> <FIXS> responderDatabase.execSQL(com.gr.responder.MainActivity.CREATE_CALL_HISTORY); <FIXE>
<FIXS> com.google.common.base.Preconditions.checkState((!(map.containsKey(entry.getKey()))), "Duplicate key %s", new java.lang.Object[]{ entry.getKey() }); <FIXE>
<FIXS> org.testng.Assert.assertEquals(usersPage.countAllElementsInTable(), 1); <FIXE>
<FIXS> quicknote.storage.QuickNote myNote = new quicknote.storage.QuickNote(); <FIXE>
<FIXS> if (jsonChatRoom != null) { activeRoomsList.add(new com.larvalabs.redditchat.dataobj.JsonActiveChatRoom(0, roomName, jsonChatRoom.displayName, jsonChatRoom.iconUrl, 1, rank)); rank++; } <FIXE>
<FIXS> if (parentId != null) { <FIXE>
<FIXS> return new com.example.victor.lfm.HomeTab(context); <FIXE> <FIXS> return new com.example.victor.lfm.Tab2(); <FIXE> <FIXS> return new com.example.victor.lfm.CreateTab(context); <FIXE>
<FIXS> org.hamcrest.MatcherAssert.assertThat(new net.bytebuddy.dynamic.loading.MultipleParentClassLoader.Builder().append(getClass().getClassLoader(), null).filter(net.bytebuddy.matcher.ElementMatchers.not(net.bytebuddy.matcher.ElementMatchers.isBootstrapClassLoader())).build(), org.hamcrest.CoreMatchers.is(getClass().getClassLoader())); <FIXE>
<FIXS> return super.getLightValue(state, world, pos); <FIXE>
<FIXS> <FIXE> <FIXS> getGameObject().transform.translateForward(velocity); updateWallSegments(); <FIXE>
<FIXS> adapter = new com.dmchoull.daybreak.ui.AlarmListAdapter(this, alarmHelper.getAll()); <FIXE>
<FIXS> java.util.Iterator<com.ontotext.ehri.georecon.place.Place> lineage = lineage().iterator(); <FIXE>
<FIXS> removeCity(mAdapter.getItem(position).first); <FIXE>
<FIXS> <FIXE>
<FIXS> assertEquals("POST_WITHOUT_ACCESSOR_METHODS", reader.relationshipType()); <FIXE>
<FIXS> if (((preInactive != null) && preInactive) && ((curInactive == null) || (!curInactive))) { <FIXE>
<FIXS> if ((getDiagram()) != null) { firePropertyChange(IndexSet.PROPERTY_CHANGE_INDEXES, null, null); getDiagram().getDiagramContents().getIndexSet().update(); <FIXE>
<FIXS> return InitData.airLimitationList.contains(searchKey) ? false : true; <FIXE>
<FIXS> if (!(org.apache.commons.lang.StringUtils.isEmpty(org.wordpress.android.ui.prefs.AppPrefs.getStatsWidgetsKeys()))) { return ; } <FIXE> <FIXS> int counter = org.wordpress.android.ui.prefs.AppPrefs.getAnalyticsForStatsWidgetPromo(); if (((counter == 3) || (counter == 1000)) || (counter == 10000)) { android.app.DialogFragment newFragment = org.wordpress.android.ui.stats.StatsActivity.StatsWidgetPromoDialogFragment.newInstance(); newFragment.show(getFragmentManager(), "promote_widget_dialog"); <FIXE>
<FIXS> return new com.teamagam.gimelgimel.domain.alerts.entity.Alert(content.source, content.time, content.text, content.severity, id, entity); <FIXE>
<FIXS> db.execSQL((((((((((("create table " + (com.example.rishabh.friday.MyDBHandler.TABLE_NAME)) + "(") + (com.example.rishabh.friday.MyDBHandler.COLUMN_ID)) + " integer primary key autoincrement, ") + (com.example.rishabh.friday.MyDBHandler.COLUMN_TYPE)) + " text, ") + (com.example.rishabh.friday.MyDBHandler.COLUMN_DESCRIPTION)) + " text, ") + (com.example.rishabh.friday.MyDBHandler.COLUMN_LABEL)) + " text);")); <FIXE>
<FIXS> public boolean isCatalogServer(final java.net.URL url) { <FIXE>
<FIXS> f.setExecutable(true, true); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> public void mouseClick(java.awt.Point p) throws java.lang.NullPointerException { int x = ((int) (p.getX())); int y = ((int) (p.getY())); robot.mouseMove(x, y); <FIXE> <FIXS> <FIXE>
<FIXS> } while ((choix != 1) && (choix != 2) ); <FIXE>
<FIXS> <FIXE>
<FIXS> sendGroupStateChangedEvent(item.getName(), this.state, oldGroupState); sendGroupStateUpdatedEvent(item.getName(), this.state); <FIXE>
<FIXS> if (key == null) return ; <FIXE>
<FIXS> mBtConnectorHelper.ReStart(peerId); <FIXE>
<FIXS> notifyItemChanged(index); <FIXE>
<FIXS> <FIXE>
<FIXS> if (this.isNewPage((oldPc + 1), ((this.programCounter) + 1))) { <FIXE>
<FIXS> return charCount + 1; <FIXE>
<FIXS> return ((worldIn.getBlockState(pos.offset(side.getOpposite())).getBlock()) == (net.minecraft.init.Blocks.LOG)) || ((worldIn.getBlockState(pos.offset(side.getOpposite())).getBlock()) == (net.minecraft.init.Blocks.LOG2)); <FIXE>
<FIXS> android.database.sqlite.SQLiteStatement statement = null; <FIXE> <FIXS> statement = db.compileStatement(query); <FIXE> <FIXS> if (statement != null) { statement.close(); } <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> java.lang.System.out.println(((("close connect:" + (id)) + " failed, ") + e)); <FIXE>
<FIXS> average += (data[((index * (mNumberDataForAverage)) + j)]) / ((float) (java.lang.Short.MAX_VALUE)); <FIXE>
<FIXS> zoneServiceProviders.put(zone, serviceProviders); <FIXE>
<FIXS> if (row < 0) { return 0; } if (col < 0) { return 0; } <FIXE>
<FIXS> <FIXE>
<FIXS> public static java.lang.String getCharAfterOffset(java.lang.CharSequence str, int offset) { if (((str.length()) < (offset + 2)) || (offset == 0)) <FIXE> <FIXS> return str.subSequence((offset + 1), (offset + 2)).toString(); <FIXE>
<FIXS> return ((((point.row) >= 0) && ((point.row) < (mSize))) && ((point.column) >= 0)) && ((point.column) < (mSize)); <FIXE>
<FIXS> public com.cvte.util.http.Response<java.lang.String> parseNetworkResponse(com.cvte.util.http.NetworkResponse response) { <FIXE>
<FIXS> long time = mediaPlayerComponent.getTime(); <FIXE> <FIXS> mediaPlayerComponent.setTime(time); <FIXE>
<FIXS> if (gameId == null) { return ; } <FIXE> <FIXS> if (toReplace == null) { gameList.add(new games.strategy.util.Tuple<games.strategy.net.GUID, games.strategy.engine.lobby.server.GameDescription>(gameId, description)); }else { int replaceIndex = gameList.indexOf(toReplace); gameList.set(replaceIndex, new games.strategy.util.Tuple<games.strategy.net.GUID, games.strategy.engine.lobby.server.GameDescription>(gameId, description)); fireTableRowsUpdated(replaceIndex, replaceIndex); } <FIXE>
<FIXS> <FIXE>
<FIXS> openSessions.put(identity, peer.currentSession); return peer.currentSession; <FIXE>
<FIXS> return new org.mule.config.ConfigResource(componentId.getServiceModelFileName(), bis); <FIXE>
<FIXS> iView.onViewCreate(rawView); iView.onViewCreate(rawView, uiParam); <FIXE>
<FIXS> if (torchService != null) { try { if (inUse) { torchService.onCameraOpened(mTorchToken, mCameraId); }else { torchService.onCameraClosed(mTorchToken, mCameraId); } } catch (android.os.RemoteException e) { <FIXE> <FIXS> <FIXE>
<FIXS> for (int runner = begin + 1; runner < (end + 1); runner++) { <FIXE>
<FIXS> <FIXE>
<FIXS> fv.addEntries(createLabeledArcFeatures(inst, head, mod, type)); <FIXE>
<FIXS> final de.longor.talecraft.client.ClientRenderer.VisualMode mode = de.longor.talecraft.client.ClientRenderer.VisualMode.valueOf(args[0]); <FIXE>
<FIXS> java.lang.String wikiPathwaysResponse = excuteRequest(getPathwaysUrlByXref(id, code), null, this.GET); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> java.util.List<java.lang.String> callStatementTR = call.accept(this, new java.util.LinkedList<java.lang.String>()); <FIXE>
<FIXS> br.edu.ifsp.dsw.model.Tarefa tarefa = tarefaService.buscarPorId(id); <FIXE> <FIXS> tarefaService.removerTarefa(id); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> private static java.util.List<co.sepulveda.pongee.servlet.resources.ResourceEntity> parseObjects(java.util.List<java.lang.Object> controllers) { <FIXE>
<FIXS> else break; <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> rand = java.util.UUID.randomUUID().toString(); <FIXE>
<FIXS> <FIXE>
<FIXS> if (attribute.getName().equals(name)) { <FIXE>
<FIXS> if (aux != null) { if (aux.clave.equals(clave)) { <FIXE> <FIXS> priClave = aux; }else { while (!(aux.sig.clave.equals(clave))) { aux = aux.sig; } if (aux != null) { aux.sig = aux.sig.sig; } } <FIXE>
<FIXS> <FIXE>
<FIXS> } if ((mMap) != null) { setUpMap(); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> if (!(osName.contains("mac"))) { <FIXE>
<FIXS> pt.uminho.sysbio.biosynthframework.kbase.KBaseSbmlImporter sbmlTools = new pt.uminho.sysbio.biosynthframework.kbase.KBaseSbmlImporter(null, null, null); <FIXE>
<FIXS> if (base != null) { base.accept(new org.unidal.dal.jdbc.test.DatabaseDumper.DeltaRemoval(model, ds)); } <FIXE>
<FIXS> return true; <FIXE>
<FIXS> public boolean IsConnected(mck.MatlabEngine eng, java.lang.String printOption) throws java.lang.Exception { <FIXE>
<FIXS> return new uk.co.senab.photoview.PhotoMarker(edu.fiu.mpact.reuproject.Utils.createNewMarker(context, wrapper, resId), x, y, context.getResources().getInteger(R.integer.map_marker_size)); <FIXE>
<FIXS> private static org.epsg.openconfigurator.model.PowerlinkRootNode getNodelist() { <FIXE>
<FIXS> private void unregister(java.lang.Object object) { <FIXE>
<FIXS> verify(container).isBrowserStillOpen(any()); <FIXE>
<FIXS> apelsinas.setD(reader.nextDouble()); java.lang.System.out.println("Įveskite apelsino žievelės storį: "); <FIXE> <FIXS> <FIXE>
<FIXS> java.lang.String o = null; <FIXE> <FIXS> }else if (war.Objective.objectives.isEmpty()) { break; } <FIXE>
<FIXS> java.lang.String accessKey, org.springframework.validation.BindingResult result, org.springframework.ui.Model model, javax.servlet.http.HttpServletResponse response) { super.populateModelWithHeatmapData(((uk.ac.ebi.atlas.model.differential.microarray.MicroarrayExperiment) (experimentTrader.getExperiment(experimentAccession, accessKey))), preferences, result, model); <FIXE>
<FIXS> java.lang.String url = (form.isUseRequestURI()) ? getActionURL(context) : super.getActionURL(context, viewId); <FIXE>
<FIXS> integral += error; <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> e.world.profiler.startSection("network node ticking"); <FIXE> <FIXS> e.world.profiler.endSection(); <FIXE> <FIXS> <FIXE>
<FIXS> if ((((getState()) != (State.CLOSED)) && (amount > 0.0F)) && ((balance) >= 0)) { <FIXE> <FIXS> setState(State.OPEN); <FIXE> <FIXS> }else { return false; <FIXE> <FIXS> <FIXE>
<FIXS> oneGame(); <FIXE> <FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> if ((args.length) > 2) { <FIXE>
<FIXS> super.processWindowEvent(e); <FIXE>
<FIXS> } <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> notAuthorized(authenticatedPartner); <FIXE> <FIXS> notAuthorized(authenticatedPartner); <FIXE>
<FIXS> draw.addPMoveToBoard(player.getY(), player.getX()); <FIXE>
<FIXS> return (((((((((((((addCheckEight) + (addCheckTwo)) + (addCheckSeven)) + (addCheckSix)) + (addCheckFive)) + (addCheckTen)) + (addCheckThree)) + (addCheckNine)) + (addRadioEight)) + (addRadioSeventyTwo)) + (addRadioSeven)) + (addRadioEighteen)) + (addNumberOne)) + (addNumberTwo); <FIXE>
<FIXS> if (!(myCycleCountIsIndefinite)) { player.setOnEndOfMedia(() -> displayReplayOption(player, button)); } <FIXE>
<FIXS> <FIXE>
<FIXS> printAllAyahs(); <FIXE>
<FIXS> <FIXE>
<FIXS> private static com.itextpdf.layout.property.UnitValue[] normalizeColumnWidths(int numberOfColumns) { <FIXE> <FIXS> normalized[i] = com.itextpdf.layout.property.UnitValue.createPercentValue((((float) (100)) / numberOfColumns)); <FIXE>
<FIXS> if (queryType == null) { return new byte[]{ 0 , 0 , 0 , 1 }; } <FIXE>
<FIXS> <FIXE>
<FIXS> break; <FIXE>
<FIXS> timeList.add((((((" " + (hour < 10 ? '0' : "")) + hour) + ":") + (min < 10 ? '0' : "")) + min)); <FIXE>
<FIXS> net.contextfw.web.application.scope.DefaultWebApplicationStorage.Holder holder; synchronized(this) { holder = pages.get(handle); } <FIXE>
<FIXS> protected java.lang.Boolean execute(java.lang.Object... args) throws java.lang.Exception { <FIXE> <FIXS> throw new java.lang.Exception("Cannot save query", e); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> public java.util.HashMap<java.lang.String, java.lang.Double> getNameAndPriceByGoodsID(java.lang.Integer goodsID) { java.util.HashMap<java.lang.String, java.lang.Double> hashMap = new java.util.HashMap<>(); <FIXE>
<FIXS> org.junit.Assert.assertFalse(wireFormat.isHeaderValid(nonSaslHeader, false)); <FIXE> <FIXS> org.junit.Assert.assertTrue(wireFormat.isHeaderValid(saslHeader, false)); <FIXE>
<FIXS> customMarker = marker; <FIXE>
<FIXS> userService.modifyUser(new myddl.entity.UserPassword(userId, null, password), new myddl.entity.UserInfo(userId, userName, userImage, userPhone, userEmail, mainScreenImage)); <FIXE>
<FIXS> if ((musicFinder.getPosition()) > 1) { <FIXE> <FIXS> <FIXE>
<FIXS> return pathname.substring(1); <FIXE>
<FIXS> java.lang.System.err.println(e.getMessage()); <FIXE>
<FIXS> if (pMe != oldMe) { com.dreamdigitizers.mysound.Share.bundle.putSerializable(com.dreamdigitizers.mysound.Share.SHARE_KEY__MY_DATA, pMe); for (com.dreamdigitizers.mysound.Share.IOnDataChanged listener : com.dreamdigitizers.mysound.Share.listeners) { listener.onMeChanged(pMe, oldMe); } <FIXE>
<FIXS> <FIXE>
<FIXS> if ((velocity) != null) { com.badlogic.gdx.math.Vector3 coordinates = manager.getScreen().getCamera().unproject(new com.badlogic.gdx.math.Vector3(screenX, screenY, 0)); stone.getBody().setLinearVelocity(velocity.x, velocity.y); } <FIXE>
<FIXS> <FIXE>
<FIXS> public nu.nerd.tpcontrol.User getUser(org.bukkit.entity.Player p) { <FIXE>
<FIXS> <FIXE>
<FIXS> for (int j = 0; j < 50; j++) { <FIXE>
<FIXS> org.eyeseetea.malariacare.network.PushClient pushClient = new org.eyeseetea.malariacare.network.PushClient(null, context); <FIXE>
<FIXS> private org.ricts.abstractmachine.components.compute.isa.OperandInfo getOperandInfo(android.widget.RadioGroup instrGroup, int index) { <FIXE> <FIXS> return index < (operandInfoArray.length) ? operandInfoArray[index] : null; <FIXE>
<FIXS> java.lang.String csdTemplate = ((((((("<csd:careServicesRequest xmlns=\'urn:ihe:iti:csd:2013\' xmlns:csd=\'urn:ihe:iti:csd:2013\'>\n" + (("\t<function urn=\'urn:ihe:iti:csd:2014:stored-function:provider-search\'>\n" + "\t\t<requestParams>\n") + "			<otherID code='")) + (msg.getIdentifier().getIdentifier())) + "' assigningAuthorityName='") + (msg.getIdentifier().getAssigningAuthority().getAssigningAuthorityId())) + "\'/>\n") + "\t\t</requestParams>\n") + "\t</function>\n") + "</csd:careServicesRequest>"; <FIXE>
<FIXS> addNativeExpressAds(); <FIXE> <FIXS> <FIXE>
<FIXS> registry = java.rmi.registry.LocateRegistry.createRegistry(port); } catch (java.lang.InterruptedException | java.rmi.RemoteException e1) { <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> this.throwSequence.add(capstat.utils.Throw.createMiss()); <FIXE>
<FIXS> arrived(); <FIXE> <FIXS> <FIXE>
<FIXS> transaction.replace(R.id.new_game_settings_relativelayout, fragment, "newgamesettingsfragment"); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> public static void main(java.lang.String[] args) { <FIXE> <FIXS> java.lang.System.out.println(translation); <FIXE>
<FIXS> java.util.List<com.webcohesion.enunciate.javac.javadoc.JavaDoc.JavaDocTagList> ignoreTags = com.webcohesion.enunciate.util.AnnotationUtils.getJavaDocTags("ignore", element); return (!(ignoreTags.isEmpty())) || ((element.getAnnotation(com.webcohesion.enunciate.metadata.Ignore.class)) != null); <FIXE>
<FIXS> size_dp = new android.util.Size((((int) (java.lang.Math.ceil(((size.getWidth()) * (scale_dp))))) + 1), (((int) (java.lang.Math.ceil(((size.getHeight()) * (scale_dp))))) + 1)); <FIXE>
<FIXS> drawImageToGrid(level.map.animator.getCurrentPhaseTexture().textureFile, ((animatedSquare.col) * (SquintMainWindow.MAP_DIM)), ((animatedSquare.row) * (SquintMainWindow.MAP_DIM)), g, false, false); <FIXE>
<FIXS> return (tmp.getQuantityColors()) < (minimalAmountOfColors); <FIXE>
<FIXS> result = null; <FIXE> <FIXS> statement = null; <FIXE> <FIXS> conn = null; <FIXE>
<FIXS> com.espirit.moddev.moduleuninstaller.ModuleUninstaller.uninstallProjectWebApps(moduleDescriptor, moduleAdminAgent); <FIXE>
<FIXS> if ((entity) != null) { <FIXE>
<FIXS> if ((day >= (java.util.Calendar.SATURDAY)) || (day == (java.util.Calendar.SUNDAY))) <FIXE>
<FIXS> for (org.forestguardian.DataAccess.Location.LocationController.SimpleLocationListener listener : mListeners) { listener.onUnavailable(); } <FIXE>
<FIXS> javafx.fxml.FXMLLoader fXMLLoader = new javafx.fxml.FXMLLoader(getClass().getResource("/view/Employe.fxml")); fXMLLoader.load(); <FIXE>
<FIXS> item = createContentView(parent, viewType); <FIXE>
<FIXS> if (zoomLevel >= (this.minZoomLevel)) { <FIXE> <FIXS> android.location.Location.distanceBetween(lat, lon, this.lastDrewLatitude, this.lastDrewLongitude, d); <FIXE> <FIXS> this.lastDrewLatitude = lat; this.lastDrewLongitude = lon; <FIXE>
<FIXS> <FIXE> <FIXS> com.termux.terminal.JNI.setPtyWindowSize(mTerminalFileDescriptor, rows, columns); <FIXE>
<FIXS> if (!(currTale.isEmpty())) { de.uni_hannover.igem.model.Tale taleEnum = de.uni_hannover.igem.model.Tale.valueOf(currTale.toUpperCase()); de.uni_hannover.igem.model.Base base = de.uni_hannover.igem.model.Base2Tale.getBase2Tale(taleEnum); sb.append(base.name()); } <FIXE>
<FIXS> buffer.append("<charseq START=\"").append(mByteOffset.start()).append("\" END=\"").append(mByteOffset.end()).append("\">"); buffer.append(mText).append("</charseq>"); <FIXE>
<FIXS> if (!(com.bitbucket.lonelydeveloper97.wifiproxysettingslibrary.proxy_change_realisation.wifi_network.CurrentProxyChangerGetter.chooseProxyChangerForCurrentApi(context).isProxySetted())) { <FIXE>
<FIXS> public double makePayment(Loan loan) { <FIXE> <FIXS> loan.makePayment(getPaymentAmount()); return loan.getPrincipalBalance(); <FIXE> <FIXS> loan.makePayment(getPaymentAmount()); return 0.0; <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> org.linagora.linshare.core.domain.constants.FileSizeUnit unit = org.linagora.linshare.core.domain.constants.FileSizeUnit.getMaxExactPlainSizeUnit(value); <FIXE>
<FIXS> for (int x = 0; x < (field.getSize()); x++) { countFigure += countFiguresInTheRow(field, x); <FIXE> <FIXS> if (countFigure == ((field.getSize()) * (field.getSize()))) <FIXE> <FIXS> if ((countFigure % 2) == 0) <FIXE> <FIXS> <FIXE>
<FIXS> thisTrip.id = key.toString(); <FIXE>
<FIXS> <FIXE>
<FIXS> this.before = raw.substring(0, startIndex).trim(); <FIXE> <FIXS> this.content = content.substring(1, ((content.length()) - 1)).trim(); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> assertEquals(cusRes.getCustomerByIndex(2).getDeliveryDistance(), loc, 0); <FIXE>
<FIXS> java.math.BigDecimal scale = big(10).pow(((n + digits) - 1)); <FIXE>
<FIXS> if ((readsReturned) > (((readThreadsCounter) / 2) + 1)) synchronized(readsWaitOnMe) { readsWaitOnMe.notify(); } <FIXE>
<FIXS> if (!(alive.get())) { <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> if (job.showPrintDialog(null)) { noBG(); job.printPage(workspace); hideGrid(); } <FIXE>
<FIXS> int affected = com.teamSmash.Main.createEvent(conn, "event", "place", java.time.LocalTime.now(), java.time.LocalDate.now(), "image", "descrip", 1); <FIXE>
<FIXS> holder.progressBar.setVisibility(View.GONE); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> loadFinished = true; <FIXE> <FIXS> <FIXE>
<FIXS> final org.egov.wtms.masters.entity.PipeSize pipeSize, final org.springframework.validation.BindingResult errors, final org.springframework.web.servlet.mvc.support.RedirectAttributes redirectAttrs, final org.springframework.ui.Model model, @org.springframework.web.bind.annotation.PathVariable final long pipeSizeId) { if (errors.hasErrors()) <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> subFolder = playerId.getName(); <FIXE>
<FIXS> if ((user.getActivityRecords().size()) == 0) return java.math.BigDecimal.ZERO; <FIXE>
<FIXS> idle.setOnFinished(( endIdleEvent) -> { laugh(); }); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> if (((jsonChannel) != null) && (jsonChannel.isAudioOnly())) { <FIXE>
<FIXS> assertInventorySize(2, ch.dissem.bitmessage.networking.NetworkHandlerTest.nodeInventory); <FIXE>
<FIXS> if ((mSensorManager) != null) { mSensorManager.unregisterListener(mSensorEventListener); } <FIXE>
<FIXS> if (!(p.getConfig().contains(path))) { p.getConfig().addDefault(path, type); p.getConfig().options().copyDefaults(true); <FIXE> <FIXS> p.saveConfig(); <FIXE>
<FIXS> onFileUploadSuccess(response.body(), uri); <FIXE> <FIXS> handleUploadFileError(uri, getErrorType(response)); <FIXE> <FIXS> <FIXE>
<FIXS> com.marc.collections.SkipList<java.lang.Integer> mySkipList = new com.marc.collections.SkipList(4); <FIXE>
<FIXS> case 0 : <FIXE> <FIXS> return "LANDSCAPE-RIGHT"; <FIXE> <FIXS> return "LANDSCAPE-LEFT"; <FIXE>
<FIXS> model.Tariff tariff = new model.Tariff(0); <FIXE>
<FIXS> qString = qString.replace(java.lang.String.format(queryFormat, i), map.get((i + 1)).toString()); <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE> <FIXS> if ("}".equals(s)) <FIXE>
<FIXS> <FIXE>
<FIXS> cachedMimeType = "*/*"; <FIXE> <FIXS> <FIXE>
<FIXS> if (((soft.swenggroup5.DecoderUtils.getQRCodeIndex(input)) == (TOTAL_QR_CODES)) && ((CURRENT_INDEX) == (TOTAL_QR_CODES))) { <FIXE>
<FIXS> if ((anzahlField.getText().length()) == 0) { return ; } <FIXE> <FIXS> java.lang.Integer stueck = java.lang.Integer.parseInt(anzahlField.getText()); <FIXE>
<FIXS> while (this.foundDataToProcess(oldestDate)) { <FIXE> <FIXS> oldestDate = getOldestProcessedDay(); } <FIXE>
<FIXS> new lt.dualpair.android.data.manager.MatchDataManager(context).match(matchId, true).subscribeOn(rx.schedulers.Schedulers.newThread()).observeOn(rx.android.schedulers.AndroidSchedulers.mainThread()).subscribe(new lt.dualpair.android.data.EmptySubscriber<lt.dualpair.android.data.resource.Match>() { <FIXE>
<FIXS> public int indexOf(java.lang.String ip) { synchronized(ipList) { for (int i = 0; i < (ipList.size()); i++) if (ipList.get(i).getIp().equals(ip)) return i; <FIXE> <FIXS> return -1; } <FIXE>
<FIXS> return ((myRectangle.y) < ((otherRectangle.y) + (otherRectangle.getHeight()))) && ((myRectangle.y) > (otherRectangle.y)); <FIXE>
<FIXS> if ((mUnit) == null) { return ; } <FIXE>
<FIXS> iw.onChange(name, val, update); <FIXE>
<FIXS> if ((fieldIsInArrayLength(position)) && (position < (size()))) { <FIXE>
<FIXS> private boolean isTenaliPresent(int[] hand) { <FIXE> <FIXS> for (int idx = 1; idx < (hand.length); idx++) { <FIXE>
<FIXS> public void maximize() { if (maximized) { return ; } <FIXE>
<FIXS> private java.awt.image.BufferedImage resizeArtwork(java.awt.image.BufferedImage originalImage, int type, int imgSize) { <FIXE>
<FIXS> <FIXE> <FIXS> finish(); <FIXE>
<FIXS> if ((unread_entries.size()) != (unread_entriesMap.size())) { for (java.lang.Long unreadEntry : unread_entries) { unread_entriesMap.put(unreadEntry, true); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> isLogin = !(isLogin); <FIXE> <FIXS> <FIXE> <FIXS> tv_switch.setText("Don't have an account yet?"); }else { btn_login_register.setImageResource(R.drawable.register); <FIXE> <FIXS> <FIXE>
<FIXS> if (!(fta.checkModel(modelFile))) { <FIXE>
<FIXS> while (first < second) { <FIXE>
<FIXS> pipelineConfigurer.getStageConfigurer().setOutputSchema(parseJson(config.schema)); <FIXE>
<FIXS> return new com.dotmarketing.portlets.structure.model.Structure(); <FIXE>
<FIXS> java.lang.String[][] rows = new java.lang.String[(sheet.getLastRowNum()) + 1][]; <FIXE>
<FIXS> for (int i = 0; i > expDiff; i--) { if ((ep.experienceLevel) > 0) { (ep.experienceLevel)--; ep.experienceTotal -= ep.xpBarCap(); } <FIXE>
<FIXS> if ((pword != null) && (!(pword.isEmpty()))) { <FIXE>
<FIXS> }else { com.google.gson.Gson gson = new com.google.gson.Gson(); models = gson.fromJson(strJson, new com.google.gson.reflect.TypeToken<java.util.List<com.example.ckrao.myapplication.Model.MoreCityModel>>() { }.getType()); return models; <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> assertEquals(ValidationResult.Result.ERROR, props.getValidationResult().getStatus()); <FIXE>
<FIXS> ilpProblem = createIlpProblemFromGraphs(sourceGraph, targetGraph, protocol); <FIXE>
<FIXS> return ; <FIXE>
<FIXS> return cat == (prediction.length) ? logSumExp : logSumExp - (prediction[row.getCategory()]); <FIXE>
<FIXS> (sizeNum)++; <FIXE>
<FIXS> private int incrementUpdatedNodes_MT(calculation_john_pack.Observations o, boolean[] hidden, calculation_john_pack.ReducedConfiguration stats, int[] phenoOnSlice, int[] phenoOffSlice) { int counter = 0; <FIXE> <FIXS> counter++; <FIXE> <FIXS> counter++; <FIXE> <FIXS> return counter; <FIXE>
<FIXS> if (geoPointInfo != null) { if ((this.edit) == null) { this.edit = new de.k3b.android.locationMapViewer.geobmp.GeoBmpEditDialog(this.context, this, R.layout.geobmp_edit_name); this.edit.setTitle(context.getString(R.string.title_bookmark_edit)); } if (!(de.k3b.android.locationMapViewer.geobmp.BookmarkUtil.isBookmark(geoPointInfo))) { geoPointInfo = de.k3b.android.locationMapViewer.geobmp.BookmarkUtil.createBookmark(geoPointInfo); } this.edit.onGeoInfo(geoPointInfo); this.context.showDialog(de.k3b.android.locationMapViewer.geobmp.BookmarkListOverlay.EDIT_MENU_ID); <FIXE> <FIXS> <FIXE>
<FIXS> if ((data.strCity.length()) == 0) { if (field.startsWith("PD-")) data.strCity = "CASPER"; else if (field.startsWith("NC")) data.strCity = "NATRONA COUNTY"; else { java.lang.String city = net.anei.cadpage.parsers.WY.WYNatronaCountyParser.CITY_CODES.getProperty(field); if (city != null) data.strCity = city; } } <FIXE>
<FIXS> this.subItems = subItems; <FIXE>
<FIXS> if (startComparison != 0) { return startComparison; }else { <FIXE> <FIXS> <FIXE>
<FIXS> pause(); <FIXE>
<FIXS> double[] playArray = new double[1]; <FIXE>
<FIXS> if ((photos) != null) { for (im.bernier.petfinder.model.Photo photo : photos) { if (photo.getSize().equalsIgnoreCase("x")) { hiRes.add(photo); } <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> if ((timeFrequency) > 0) { <FIXE>
<FIXS> if ((com.geekeclectic.android.stashcache.SelectFabricDialogFragment.mSelectedIndex) != (-1)) { com.geekeclectic.android.stashcache.SelectFabricDialogFragment.mSelectFabricDialogCallback.onSelectedFabric(com.geekeclectic.android.stashcache.SelectFabricDialogFragment.mFabrics.get(com.geekeclectic.android.stashcache.SelectFabricDialogFragment.mSelectedIndex)); } <FIXE>
<FIXS> java.lang.String removePath = getProductProcessUrl(peerProductDataDto.getProductId()); <FIXE>
<FIXS> bookService.createBook(book.getTitle(), book.getAuthor(), book.getEdition(), isbn, book.getYearOfPublication(), null); <FIXE>
<FIXS> public java.lang.String getTaskTag(long id) { <FIXE> <FIXS> if (id == (test.getId())) { <FIXE>
<FIXS> de.dj_steam.bot.engine.RobotEngine robotEngine = new de.dj_steam.bot.engine.RobotEngine(); <FIXE> <FIXS> <FIXE>
<FIXS> return (mLower.equals(other.mLower)) && (mUpper.equals(other.mUpper)); <FIXE>
<FIXS> protected void loadIssueArticles(int position) { <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> for (java.util.Map.Entry<java.lang.String, org.corfudb.runtime.collections.SMRMultiIndex.IndexSpecification> entry : indexSpecifications.entrySet()) { <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> for (int i = 1; i < (args.length); i++) { <FIXE>
<FIXS> byte[] letter = ink.aquar.scp.v1.SecureDelivery.LetterWrapper.wrap(sessionKey); <FIXE>
<FIXS> return ((((boundingBoxWorld.left) <= (Prototype.stage.width)) || ((boundingBoxWorld.top) <= (Prototype.stage.height))) || ((boundingBoxWorld.right) >= 0)) || ((boundingBoxWorld.bottom) >= 0); <FIXE>
<FIXS> java.util.Iterator<com.hawky.jhttpload.Task> itr = tasks.values().iterator(); <FIXE>
<FIXS> if (allowEnd) { return textLength; }else { return textLength - 1; } <FIXE>
<FIXS> com.rahmanbari.discountopia.fragments.FeaturedDealsFragment featuredDealsTab = new com.rahmanbari.discountopia.fragments.FeaturedDealsFragment(); return featuredDealsTab; <FIXE> <FIXS> com.rahmanbari.discountopia.fragments.DepartmentsFragment departmentsTab = new com.rahmanbari.discountopia.fragments.DepartmentsFragment(); return departmentsTab; <FIXE>
<FIXS> org.junit.Assert.assertTrue(java.lang.String.format("The poster does not contains %s but has text: %s", keyword.toLowerCase(), posterText.toLowerCase()), keyword.toLowerCase().contains(posterText.toLowerCase())); <FIXE>
<FIXS> org.apache.commons.io.FileUtils.writeStringToFile(new java.io.File(getExternalFilesDir(null), "test.txt"), getAllSbn(sbn), java.nio.charset.Charset.forName("utf-8"), true); <FIXE>
<FIXS> mIsScanning = false; <FIXE> <FIXS> <FIXE>
<FIXS> if (locationService.checkLocationServiceSettingsEnabled(this)) { <FIXE> <FIXS> locationService.startTrackingLocation(this); <FIXE>
<FIXS> <FIXE>
<FIXS> com.coursera.forum.model.Usuario usuario = this.criaUsuario("user", "User", 0); <FIXE>
<FIXS> this.layer = new gov.nasa.worldwind.layers.RenderableLayer(); this.worldWindPanel.getModel().getLayers().add(this.layer); <FIXE>
<FIXS> public static boolean isBlank(java.lang.CharSequence str) { <FIXE>
<FIXS> java.lang.String path = "/swbadmin/jsp/process/documentation/userDocumentationView.jsp"; <FIXE>
<FIXS> if (offlinePlayer != null) { try { org.bukkit.inventory.meta.SkullMeta im = ((org.bukkit.inventory.meta.SkullMeta) (is.getItemMeta())); im.setOwningPlayer(offlinePlayer); is.setItemMeta(im); } catch (java.lang.ClassCastException expected) { } <FIXE>
<FIXS> return client != null; <FIXE>
<FIXS> java.util.Map<java.lang.reflect.Type, java.util.List<java.lang.Class<?>>> providers = activator.findProviders(classesInBundle); <FIXE> <FIXS> assertEquals(no.steria.osgi.jsr330activator.testbundle.implementation.HelloServiceProvider2.class, providers.get(no.steria.osgi.jsr330activator.testbundle.HelloService.class).get(0)); <FIXE>
<FIXS> out.add(java.util.Arrays.asList(s.split(" "))); <FIXE>
<FIXS> <FIXE>
<FIXS> throw new me.nlighten.backend.db.dao.exception.DAOException(e, me.nlighten.backend.db.dao.exception.DAOMessageException.OBJECT_COULD_NOT_BE_MERGED); <FIXE>
<FIXS> <FIXE>
<FIXS> int[] A = new int[]{ 1 , 2 , 4 , 3 , 4 , 2 , 1 }; <FIXE>
<FIXS> for (int i = 0; i < (inputColumnAsNumbers.length); i++) { <FIXE>
<FIXS> com.nabto.api.NabtoStatus ret = com.nabto.api.NabtoCApiWrapper.nabtoGetFingerprint(certId, byteFingerprint); <FIXE>
<FIXS> <FIXE> <FIXS> initView(); allarticlePresenter = new com.otb.designerassist.mvp.presenter.impl.AllarticlePresenter(this); qryMeijus(); <FIXE>
<FIXS> java.lang.System.out.println("*******STARTING THE OVERALL TRANSFORMATION*******"); <FIXE> <FIXS> <FIXE>
<FIXS> clojure.lang.IFn targetFn = ((clojure.lang.IFn) (methodCache.get(dispatchVal))); <FIXE>
<FIXS> final boolean useMatch = ((fileNamePattern) != null) || (match); <FIXE>
<FIXS> public void addLineItem() { <FIXE>
<FIXS> <FIXE>
<FIXS> handCards[i] = new com.example.ryan.cards.Card(0, 0); <FIXE> <FIXS> selected[i] = new com.example.ryan.cards.Card(0, 0); <FIXE>
<FIXS> if (hexManager.validTileHexes(h1, h2, h3)) { <FIXE>
<FIXS> java.lang.Object value = partition.getValue(edge, graph); <FIXE>
<FIXS> for (int i = 0; i < ((optionValues.length) - 1); i += 2) { <FIXE>
<FIXS> return ; <FIXE>
<FIXS> importsToRemove.addAll(fix.getImportsToRemove()); <FIXE>
<FIXS> ((com.example.shopply.shopplynewapp.adapters.MyRecyclerViewItemListAdapter) (mAdapterItem)).addItem(item); <FIXE>
<FIXS> return new de.beuth.cg1.dogeraytracer.vecmatlib.Normal3(((at.x) - (center.x)), ((at.y) - (center.y)), ((at.z) - (center.z))); <FIXE>
<FIXS> <FIXE>
<FIXS> if ((checkSelfPermission(Manifest.permission.CAMERA)) != (android.content.pm.PackageManager.PERMISSION_GRANTED)) { requestPermissions(new java.lang.String[]{ Manifest.permission.CAMERA , Manifest.permission.WRITE_EXTERNAL_STORAGE }, 1); <FIXE>
<FIXS> cruise.umple.compiler.State state = uClass.getStateMachine(0).findState("Final"); <FIXE> <FIXS> <FIXE>
<FIXS> java.lang.String sql = ((((((((("INSERT INTO \"" + (schemaName)) + "\".useraccount(username, password, email, date)\tVALUES (\'") + (account.getUserName())) + "\', \'") + (account.getPassword())) + "\', \'") + (account.getEmail())) + "\', \'") + (account.getDate())) + "\');"; <FIXE>
<FIXS> <FIXE>
<FIXS> helpersSpy.featureSetUp(false); <FIXE>
<FIXS> java.lang.String result = main.knnAlg(main.trainingSet, i, 1); <FIXE> <FIXS> java.lang.System.out.println((("The algorithm is " + accuracy) + "% accurate")); <FIXE>
<FIXS> final java.lang.String accessSecret = accountJson.optString(com.vaguehope.onosendai.config.Account.KEY_PASSWORD); <FIXE>
<FIXS> this.last = power; <FIXE>
<FIXS> if (counter == n) return true; <FIXE> <FIXS> return false; <FIXE>
<FIXS> try { this.shownItems = ((java.util.ArrayList<com.einzig.ipst2.portal.PortalSubmission>) (results.values)); java.lang.System.out.println(("PUBLISHED: " + (this.shownItems.size()))); notifyDataSetChanged(); } catch (java.lang.Exception e) { e.printStackTrace(); <FIXE>
<FIXS> if ((item != null) && ((item.getCheckBox()) != null)) { <FIXE>
<FIXS> offset = translation.normal.cpy(); <FIXE>
<FIXS> service.validateFeedResults(processor, new java.util.ArrayList<io.delimeat.core.feed.FeedResult>(), show); <FIXE>
<FIXS> if (curentSquare.isAlive()) { isCellAliveStatus = true; } break; <FIXE> <FIXS> }else { <FIXE>
<FIXS> <FIXE>
<FIXS> return ((double) (a)) % ((double) (b)); <FIXE>
<FIXS> <FIXE>
<FIXS> playBadSound(); <FIXE> <FIXS> playGoodSound(); <FIXE>
<FIXS> java.sql.PreparedStatement ps = null; try { ps = de.lordvader.Punisher.Util.MySql.getConnection().prepareStatement("DELETE FROM bans WHERE uuid = ?"); ps.setString(1, uuid); ps.execute(); } catch (java.sql.SQLException e) { e.printStackTrace(); <FIXE>
<FIXS> public void deleteItem(int position) { <FIXE>
<FIXS> producer = new com.example.service.PointProducer(this, this, manager); <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> ftldb.SQLTypeHelper.encoder.put(typeName, ret); <FIXE>
<FIXS> <FIXE>
<FIXS> m_rect.top = (m_y) - (m_h); m_rect.bottom = m_y; <FIXE>
<FIXS> s.showSplashScreen(false); <FIXE>
<FIXS> <FIXE>
<FIXS> if ((vertices2D.size()) > 0) { float dist = 0; tracer.Point a = vertices2D.get(0); for (int i = 1; i < (vertices2D.size()); i++) { tracer.Point b = vertices2D.get(i); dist += tracer.paths.Line.dist(a, b); a = b; } return dist; }else { return 0; <FIXE> <FIXS> <FIXE>
<FIXS> android.appwidget.AppWidgetManager appWidgetManager = android.appwidget.AppWidgetManager.getInstance(context); int[] appWidgetIds = appWidgetManager.getAppWidgetIds(new android.content.ComponentName(context, getClass())); appWidgetManager.notifyAppWidgetViewDataChanged(appWidgetIds, R.id.widget_list); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> if ((realm) != null) { io.realm.RealmResults<com.simopuve.model.PDVRow> all = realm.where(com.simopuve.model.PDVRow.class).equalTo("rowNumber", position).findAll(); if (!(all.isEmpty())) { survey.getRows().clear(); io.realm.RealmList rows = survey.getRows(); rows.addAll(all); survey.setRows(rows); } adapter.notifyDataSetChanged(); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> waitServerReady(); <FIXE>
<FIXS> java.lang.System.out.print("Employee ID chosen does not exist. Enter a new employee id to delete: "); <FIXE>
<FIXS> returnValue = this.urls.remove(url); <FIXE>
<FIXS> if ((cache) != null) { cache.setChangeNotificationHandler(cacheChangeNotificationHandler); } <FIXE> <FIXS> <FIXE>
<FIXS> java.lang.String status; <FIXE>
<FIXS> private static java.util.Date getDateTime(java.lang.Object d, java.lang.String pattern) { <FIXE> <FIXS> java.text.SimpleDateFormat df = new java.text.SimpleDateFormat(pattern); <FIXE>
<FIXS> sbuf = new java.lang.StringBuilder(((((value.length()) + 10) / 10) * 11)); <FIXE>
<FIXS> public static float getTotalHours(javafx.collections.ObservableList<plainsimple.Session> data) { float total = 0.0F; <FIXE> <FIXS> total += ((float) (data.get(i).getTimePracticed().getMinute())) / 60; <FIXE>
<FIXS> if (rasterizeToFile(content, out, width, height)) { return new org.xwiki.resource.temporary.TemporaryResourceReference(org.xwiki.platform.svg.internal.BatikSVGRasterizer.TEMP_DIR_NAME, out.getName(), targetContext); } return null; <FIXE>
<FIXS> DebugThree4.tuitionBill(yourCredits, rate); <FIXE>
<FIXS> int endIndex = (startIndex == (-1)) ? -1 : errorMessage.indexOf(',', startIndex); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> int swapIndex = edu.princeton.cs.algs4.StdRandom.uniform((i + 1)); <FIXE>
<FIXS> i++; <FIXE>
<FIXS> double[] output = new double[input.length]; <FIXE> <FIXS> output[i] = io.github.guiritter.wavelet.Math.softThreshold(input[i], threshold); <FIXE> <FIXS> return output; <FIXE>
<FIXS> if ((pingInterval) != (-1)) { org.kurento.jsonrpc.internal.server.PingWatchdogManager.log.info(("Setting new transportId={} for sessionId={}. " + ("Restarting timer to consider disconnected client if pings are not received in {}" + " millis")), transportId, sessionId, ((org.kurento.jsonrpc.internal.server.PingWatchdogManager.NUM_NO_PINGS_TO_CLOSE) * (pingInterval))); activateSessionCloser(); } <FIXE>
<FIXS> org.mix.common.BaseActivity.NativeCode.handleFrontendEvent(org.mix.common.BaseActivity.NativeFrontendEvent.Resized.ordinal(), 0, ((float) (width)), ((float) (height))); <FIXE>
<FIXS> if (((left) != null) && ((right) != null)) { if ((left.getSolve()) != null) vars.addAll(left.getSolve()); if ((right.getSolve()) != null) vars.addAll(right.getSolve()); } <FIXE>
<FIXS> if ((null != (parser)) && ((parser) instanceof com.gj.web.crawler.lifecycle.Lifecycle)) { ((com.gj.web.crawler.lifecycle.Lifecycle) (parser)).shutdown(); } <FIXE> <FIXS> <FIXE>
<FIXS> if ((columns) != null) { for (int i = 0, n = columns.size(); i < n; i++) { com.questdb.cairo.AppendMemory m = columns.getQuick(i); if (m != null) { m.close(truncate); } <FIXE>
<FIXS> getCurrentUser(new net.moddity.droidnubekit.requests.DNKCallback<net.moddity.droidnubekit.responsemodels.DNKUser>() { <FIXE> <FIXS> if ((cloudKitAuthHandler) != null) cloudKitAuthHandler.onAuthSucceed(); <FIXE>
<FIXS> if (inventoryIcon == null) { _inventoryIconFileName = null; setInventoryIconFile(null); <FIXE> <FIXS> java.io.File file = getFile(); if (file != null) { if (!(file.isDirectory())) file = file.getParentFile(); setInventoryIconFile(new java.io.File(file, inventoryIcon)); }else { _inventoryIconFileName = inventoryIcon; } <FIXE>
<FIXS> default : break; <FIXE>
<FIXS> } finally { em.close(); <FIXE>
<FIXS> <FIXE>
<FIXS> private void saveKader() { <FIXE>
<FIXS> config.set((((id.toLowerCase()) + ".") + path), o); <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> org.openhab.binding.zwave.internal.protocol.commandclass.ZWaveUserCodeCommandClass.logger.debug("NODE {}: Creating new message for application command USER_CODE_GET({})", getNode().getNodeId(), id); <FIXE>
<FIXS> <FIXE> <FIXS> break; <FIXE>
<FIXS> final org.adempiere.ad.dao.ICompositeQueryUpdater<de.metas.handlingunits.model.I_M_Picking_Candidate> updater = queryBL.createCompositeQueryUpdater(de.metas.handlingunits.model.I_M_Picking_Candidate.class).addSetColumnValue(I_M_Picking_Candidate.COLUMNNAME_Status, X_M_Picking_Candidate.STATUS_PR); return queryBL.createQueryBuilder(de.metas.handlingunits.model.I_M_Picking_Candidate.class).addOnlyActiveRecordsFilter().addEqualsFilter(I_M_Picking_Candidate.COLUMNNAME_Status, X_M_Picking_Candidate.STATUS_IP).addInArrayFilter(I_M_Picking_Candidate.COLUMNNAME_M_HU_ID, huIds).create().updateDirectly(updater); <FIXE>
<FIXS> addSourceView = new edu.wpi.grip.ui.pipeline.AddSourceView(eventBus, null, null, mockCameraSourceFactory, null); <FIXE>
<FIXS> public boolean saveProjectAs() { <FIXE> <FIXS> return new de.uni_hannover.sra.minimax_simulator.ui.actions.ProjectSaveTo().save(file); <FIXE>
<FIXS> }else { java.lang.System.out.println(text); <FIXE>
<FIXS> samsung.labo.pl.locateyourtask.activities.MainActivity.DrawerFragmentItem drawerFragmentItem = samsung.labo.pl.locateyourtask.activities.MainActivity.findDrawerItemFragmentWithId(item.getItemId()); <FIXE>
<FIXS> if ((grid[(row - 1)][(col - 1)]) == (open)) { <FIXE>
<FIXS> when(userFileHelper.getUserFile(org.mockito.Matchers.anyInt(), org.mockito.Matchers.any(javax.servlet.http.HttpServletRequest.class))).thenReturn(userFile); <FIXE>
<FIXS> <FIXE>
<FIXS> assertEquals("Post method not called with correct resource string", resource, java.lang.String.format(AzureLoadBalancerSupport.RESOURCE_DEFINITIONS, LOAD_BALANCER_ID)); assertEquals("Server not removed from the policy definition", ((org.dasein.cloud.azure.network.model.DefinitionModel) (definitionResponseModel)).getPolicy().getEndPoints().size(), 1); assertEquals("A server with the wrong id has been removed", ((org.dasein.cloud.azure.network.model.DefinitionModel) (definitionResponseModel)).getPolicy().getEndPoints().get(0).getDomainName(), "endpoint1.cloudapp.net"); <FIXE>
<FIXS> <FIXE>
<FIXS> return new com.drewhannay.chesscrafter.models.PieceType("Queen", movements, null); <FIXE>
<FIXS> if (board.hasDrawnLineFor(CellValue.X)) { state = GameState.X_WON; <FIXE> <FIXS> if (board.hasDrawnLineFor(CellValue.O)) { state = GameState.O_WON; }else if (isGameDraw()) { state = GameState.DRAW; }else if (state.equals(GameState.X_TURN)) { state = GameState.O_TURN; }else { state = GameState.X_TURN; } <FIXE>
<FIXS> <FIXE> <FIXS> parent.getChildren().remove(child); <FIXE>
<FIXS> startTime.setText(startTimeStr); <FIXE> <FIXS> endTime.setText(endTimeStr); <FIXE>
<FIXS> assertEquals(1, out.size()); <FIXE>
<FIXS> model.addAttribute("appointment", new com.medman.controllers.AppointmentTime()); <FIXE>
<FIXS> android.widget.Toast.makeText(this, getString(R.string.notify_sync_start), Toast.LENGTH_SHORT).show(); workerThread = new java.lang.Thread(new java.lang.Runnable() { @java.lang.Override public void run() { onHandleIntent(intent); } }); workerThread.start(); <FIXE>
<FIXS> outState.putParcelableArrayList(com.bli.spotifystreamer.ArtistSearchActivity.KEY_PARCELABLE_ARTIST_LIST, artists); int position = artistsListView.getFirstVisiblePosition(); outState.putInt("listViewPosition", position); android.view.View v = artistsListView.getChildAt(0); int offset = (v == null) ? 0 : (v.getTop()) - (artistsListView.getPaddingTop()); outState.putInt("listViewPositionOffset", offset); <FIXE>
<FIXS> com.example.kamil.astroweather.MainActivity.currentPages.put("sunFragment", getSupportFragmentManager().getFragment(savedInstanceState, "sunFragment")); <FIXE>
<FIXS> private void setTimer(long seqNo) { com.rdt.TimeoutTimerTask ttt = new com.rdt.TimeoutTimerTask(seqNo, java.lang.System.currentTimeMillis(), timeoutInterval); <FIXE>
<FIXS> courseOrder.setMachine(cn.edu.buaa.tricloud.mooc.utils.MachineUtil.create(account.getSchool()).toJSONString()); <FIXE>
<FIXS> markDangerAreas(row, col, (-1)); <FIXE>
<FIXS> java.lang.String content_file(java.lang.String pth) { java.lang.String thisLine; <FIXE> <FIXS> <FIXE>
<FIXS> return new android.app.TimePickerDialog(getActivity(), this, hour, minute, true); <FIXE>
<FIXS> if (((this.profile) != null) && ((profileNameOld) != null)) { <FIXE> <FIXS> super.cancelPressed(); <FIXE>
<FIXS> if (target instanceof android.widget.Button) { <FIXE>
<FIXS> <FIXE>
<FIXS> this.transcriberEnabled = true; <FIXE>
<FIXS> public java.lang.String getApplicationVersionName() { <FIXE>
<FIXS> <FIXE>
<FIXS> public static com.intellij.codeInspection.streamMigration.ReduceHandling.ReductionData getReduceVar(com.intellij.codeInspection.streamMigration.StreamApiMigrationInspection.TerminalBlock tb, java.util.List<com.intellij.codeInspection.streamMigration.PsiVariable> variables) { <FIXE>
<FIXS> if ((saveBtn) != null) { saveBtn.setEnabled((!(synopticViewModel.getHasDuplicatedName()))); } <FIXE>
<FIXS> return bos.toByteArray_clear(); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> selectByValue(value, select); <FIXE>
<FIXS> return ; <FIXE>
<FIXS> org.apache.lucene.index.IndexReader reader = org.apache.lucene.index.IndexReader.open(indexer, false); <FIXE>
<FIXS> this.controller.deleteRegisteredService(1200); <FIXE>
<FIXS> private void setIpAssignment(java.lang.String assign, android.net.wifi.WifiConfiguration wifiConf) throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException, java.lang.NoSuchFieldException, java.lang.NoSuchMethodException, java.lang.SecurityException, java.lang.reflect.InvocationTargetException { <FIXE>
<FIXS> super.execute(); <FIXE>
<FIXS> <FIXE> <FIXS> main.Main.grids.remove((i + 1)); <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE> <FIXS> (size)++; <FIXE>
<FIXS> if (obj == null) { return false; } <FIXE>
<FIXS> double avgSpread = 0; double sumSpread = 0; <FIXE>
<FIXS> mApp.mCurrentTrackSubject.onNext(track); <FIXE>
<FIXS> assert column instanceof org.apache.sqoop.schema.type.FixedPoint; <FIXE>
<FIXS> neighbors.remove(this); <FIXE>
<FIXS> <FIXE>
<FIXS> }else { this.confirmed = false; this.newState = true; this.bookingTime = cancellationTime; <FIXE> <FIXS> <FIXE>
<FIXS> centerOuterPane.toggleActiveMode(4); <FIXE> <FIXS> centerOuterPane.toggleActiveMode(6); <FIXE>
<FIXS> break; <FIXE>
<FIXS> new com.ashwinpilgaonkar.popularmovies.Backend.Favorite(getActivity(), movies, item, 1); <FIXE>
<FIXS> if (!result) { <FIXE>
<FIXS> <FIXE>
<FIXS> adapter.notifyDataSetChanged(); <FIXE>
<FIXS> positioner.reset(getOrientation(), findFirstVisibleItemPosition()); <FIXE>
<FIXS> JoystickTest.pressLstJSRedCorRB = true; <FIXE> <FIXS> JoystickTest.pressLstJSRedCorRB = true; <FIXE>
<FIXS> @java.lang.SuppressWarnings(value = { "rawtypes" , "unchecked" }) private java.util.HashMap createComponentMap(java.awt.Container container) { java.util.HashMap componentMap = new java.util.HashMap<java.lang.String, java.awt.Component>(); <FIXE> <FIXS> return componentMap; <FIXE>
<FIXS> }else { challenge.getPlayer().setChallenge(null); challenge.getOpponent().removeChallenge(challenge); if (notify) { java.lang.String challengeNumberString = nl.hanze.gameserver.util.StringUtils.toStringAsMap("CHALLENGENUMBER", challenge.getChallengeNumber()); java.lang.String format = "CHALLENGE CANCELLED %s"; challenge.getOpponent().writeResponse(new nl.hanze.gameserver.server.message.GameResponse(java.lang.String.format(format, challengeNumberString))); } <FIXE>
<FIXS> return (name) != null ? name.equals(authority.name) : (authority.name) == null; <FIXE>
<FIXS> private static void initializeOthers() { <FIXE>
<FIXS> java.lang.String result = null; <FIXE> <FIXS> result = globalTags; <FIXE> <FIXS> if (((tags) != null) && (!(tags.isEmpty()))) { result = (result + ",") + (tags); } return result; <FIXE>
<FIXS> for (int i = (referencesList.size()) - 1; i >= 0; i--) { <FIXE>
<FIXS> generator.generateSeed(seed); <FIXE>
<FIXS> if ((this.resultModel) == null) { <FIXE>
<FIXS> <FIXE> <FIXS> javax.faces.context.FacesContext.getCurrentInstance().getExternalContext().invalidateSession(); <FIXE>
<FIXS> if (((maxRows) != (-1)) && ((maxRows) != 0)) { <FIXE>
<FIXS> if (bubbleMaster.Start.previous.get(0).equals("chooseLevel")) <FIXE> <FIXS> if (bubbleMaster.Start.previous.get(0).equals("startGame")) <FIXE> <FIXS> if (bubbleMaster.Start.previous.get(0).equals("editGame")) <FIXE> <FIXS> if (bubbleMaster.Start.previous.get(0).equals("endGame")) <FIXE> <FIXS> bubbleMaster.Start.previous.remove(0); <FIXE>
<FIXS> if (((permissionCoarseLocationCheck) != (android.content.pm.PackageManager.PERMISSION_GRANTED)) || ((permissionFineLocationCheck) != (android.content.pm.PackageManager.PERMISSION_GRANTED))) { <FIXE>
<FIXS> return board[newY][newX]; <FIXE>
<FIXS> java.util.Set<org.molgenis.data.Entity> resultSet = newHashSet(person2); <FIXE>
<FIXS> if (!(isChunkInBounds(chunkPointer.x, chunkPointer.y))) { <FIXE>
<FIXS> refreshModule(language, true); <FIXE>
<FIXS> <FIXE>
<FIXS> craps.model.GameHistory.rollHistory.add(sum); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> static void injectBaseContext(android.content.Context context) { <FIXE> <FIXS> android.content.Context base = ((android.content.Context) (com.plugin.util.RefInvoker.getFieldObject(context, android.content.ContextWrapper.class.getName(), com.plugin.core.PluginInjector.android_content_ContextWrapper_mBase))); <FIXE> <FIXS> com.plugin.util.RefInvoker.setFieldObject(context, android.content.ContextWrapper.class.getName(), com.plugin.core.PluginInjector.android_content_ContextWrapper_mBase, newBase); <FIXE>
<FIXS> return java.lang.Integer.compare(combo2.getDepartureTimeInMin(), combo1.getDepartureTimeInMin()); }else { <FIXE> <FIXS> <FIXE>
<FIXS> return (randoToUpdate == null) || ((randoToUpdate.rating) == 0); <FIXE>
<FIXS> <FIXE> <FIXS> client.model.Beetle beetle = tile.beetles.get(0); <FIXE>
<FIXS> <FIXE>
<FIXS> if (!(contact_list.isEmpty())) { contact_list.removeAll(myProfile.getBlacklist().getList()); } <FIXE>
<FIXS> <FIXE>
<FIXS> int_counter = ((java.lang.Number) (jSpinnerInterval.getValue())).intValue(); if ((int_counter) > 0) { status = aggregator.Start(); if (status == 0) { jButton_Start.setText("Stop"); jSpinnerInterval.setEnabled(false); } <FIXE>
<FIXS> android.animation.ObjectAnimator animator = android.animation.ObjectAnimator.ofPropertyValuesHolder(mFAB, holder1, holder2).setDuration(1); <FIXE>
<FIXS> dataset.clear(); if ((releasedToday) != null) { dataset.addAll(releasedToday); } if ((recentlyWatched) != null) { dataset.addAll(recentlyWatched); } if ((friendsRecently) != null) { dataset.addAll(friendsRecently); <FIXE>
<FIXS> adapter = new com.example.vlad.licenta.CustomAdapterBooks(favouriteBooks, getContext()); lv.setAdapter(adapter); <FIXE>
<FIXS> vm.changeCurrentList(pos, 1); <FIXE>
<FIXS> if (company == null) FUSEKI_SPARQL_ENDPOINT_URL = this.FUSEKI_SPARQL_ENDPOINT_DEFAULT; <FIXE> <FIXS> if (company.equals(this.FUSEKI_DATASET_HELLA)) FUSEKI_SPARQL_ENDPOINT_URL = this.FUSEKI_SPARQL_ENDPOINT_HELLA; <FIXE> <FIXS> if (company.equals(this.FUSEKI_DATASET_MHWIRTH)) FUSEKI_SPARQL_ENDPOINT_URL = this.FUSEKI_SPARQL_ENDPOINT_MHWIRTH; else FUSEKI_SPARQL_ENDPOINT_URL = this.FUSEKI_SPARQL_ENDPOINT_DEFAULT; <FIXE>
<FIXS> comboTT.setEnabled(true); <FIXE>
<FIXS> swatch.put(i18n.getString(("Generic_COLOR_" + (color.name().toLowerCase()))), color.name().toLowerCase()); <FIXE>
<FIXS> if (((!(isLoading)) && ((totalItemCount) > 0)) && ((totalItemCount) <= ((lastVisibleItem) + (visibleThreshold)))) { <FIXE>
<FIXS> copy = ((thoth_lib_m.guiclass.TableCopiesModel) (model)).getIArray(this.rows[row].index); <FIXE>
<FIXS> double percentage = ((-1) * elUsage) / possibleProduction; <FIXE>
<FIXS> quickfix.Responder responder = this.responder; if (null == responder) { this.getLog().onEvent(("No responder, not sending message: " + messageString)); return false; }else { try { return responder.send(messageString); } finally { getLog().onOutgoing(messageString); } <FIXE> <FIXS> <FIXE>
<FIXS> domain.addService(new com.catify.initializr.domain.MicroService("service-a")); domain.addService(new com.catify.initializr.domain.MicroService("service-b")); <FIXE>
<FIXS> miniJava.SyntacticAnalyzer.StatementList stlAst = parseStatementList(new miniJava.SyntacticAnalyzer.StatementList()); if ((stlAst.size()) == 1) stAst = stlAst.get(0); else <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> meeting.setLocation(ee.juhan.meetingorganizer.server.core.util.LocationGeneratorUtil.findOptimalLocation(meeting, participants)); <FIXE>
<FIXS> return ((((((((("Meal{" + "id=") + (getId())) + ", dateTime=") + (dateTime)) + ", description='") + (description)) + '\'') + ", calories=") + (calories)) + '}'; <FIXE>
<FIXS> out.println(); <FIXE>
<FIXS> <FIXE>
<FIXS> result = 1 - (java.lang.Math.pow((1 - probability), (10.0 / 4.0))); <FIXE>
<FIXS> org.bukkit.Bukkit.getScheduler().runTaskLaterAsynchronously(plugin, () -> { gvlfm78.plugin.OldCombatMechanics.OCMUpdateChecker updateChecker = new gvlfm78.plugin.OldCombatMechanics.OCMUpdateChecker(plugin, pluginFile); updateChecker.sendUpdateMessages(p); <FIXE>
<FIXS> if (((fayePG) != null) && ((fayePG.getSubscribeCallbackContext()) != null)) { <FIXE>
<FIXS> environment.getObjectMapper().setPropertyNamingStrategy(PropertyNamingStrategy.CAMEL_CASE_TO_LOWER_CASE_WITH_UNDERSCORES); <FIXE>
<FIXS> java.lang.Integer areaadded = null; <FIXE>
<FIXS> if (module != null) { setModule(module.getNamespaceURI(), module); declareModuleVars(module); } <FIXE>
<FIXS> <FIXE>
<FIXS> public void getHomeTimeline(long since_id, long max_id, com.loopj.android.http.AsyncHttpResponseHandler handler) { <FIXE>
<FIXS> <FIXE>
<FIXS> com.fuse.ui.PVector tmp = n.getSize(); tmp.add(new com.fuse.ui.PVector(10, 0, 0)); <FIXE>
<FIXS> if (savedInstanceState == null) { onNavigationItemSelected(getNavigationView().getMenu().findItem(org.hisp.dhis.android.eventcapture.views.activities.HomeActivity.DRAWER_ITEM_EVENTS_ID)); } <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> finish(); <FIXE>
<FIXS> <FIXE>
<FIXS> mMainActivity.noteFocused(2, v); <FIXE>
<FIXS> private void crashedXPos() { <FIXE> <FIXS> setxVelocity((1 * (getxVelocity()))); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> builder.setPositiveButton("明白", new android.view.View.OnClickListener() { <FIXE> <FIXS> builder.setNegativeButton("取消", new android.view.View.OnClickListener() { <FIXE>
<FIXS> assert index < (steps.length); <FIXE>
<FIXS> if (((extensionList.getValue()) != null) && ((extensionList.getValue().size()) > 0)) { <FIXE>
<FIXS> <FIXE> <FIXS> channelManager.drainChannelAndOffer(channel, future); channel.pipeline().remove(org.asynchttpclient.netty.handler.StreamedResponsePublisher.class); <FIXE>
<FIXS> protected void updateTable(javax.swing.table.DefaultTableModel tableModel, java.util.Vector<java.util.Vector<java.lang.String>> rowData) { <FIXE>
<FIXS> return new com.google.gson.Gson().toJson(customerBo.getDailyContentForMeal(order.getMeal(), order.getMealType(), null)); <FIXE>
<FIXS> if ((index >= (udo.storage.Storage.taskList.size())) || ((udo.storage.Storage.taskList.size()) == 0)) { <FIXE>
<FIXS> setUniforms(0); setUniforms(1); <FIXE>
<FIXS> if ((siftable.getMeshLevel()) == meshLevel) { <FIXE>
<FIXS> java.lang.String nonterminalName = rule.getLocalName(); int nonterminalId = convertNonterminalName(nonterminalName); <FIXE> <FIXS> <FIXE>
<FIXS> newProfile.setFriends(new cwa115.trongame.FriendList(result.getString("friends"), true)); <FIXE>
<FIXS> jsettlers.graphics.localization.Labels.LocaleSuffix[] locales = new jsettlers.graphics.localization.Labels.LocaleSuffix[]{ new jsettlers.graphics.localization.Labels.LocaleSuffix(jsettlers.graphics.localization.Labels.preferredLocale, true) , new jsettlers.graphics.localization.Labels.LocaleSuffix(jsettlers.graphics.localization.Labels.preferredLocale, false) , new jsettlers.graphics.localization.Labels.LocaleSuffix(new java.util.Locale("en"), false) }; <FIXE>
<FIXS> android.widget.Toast.makeText(this, R.string.max_preferiti, Toast.LENGTH_SHORT).show(); <FIXE>
<FIXS> currentBuffer.get(dest, (offset + moved), toRead); <FIXE>
<FIXS> final java.util.List<org.eclipse.hawkbit.mgmt.json.model.target.MgmtTargetRequestBody> bodyList = new java.util.ArrayList<>(); <FIXE>
<FIXS> java.util.Set<java.lang.String> names = geneMaps.get(name.toUpperCase()); <FIXE>
<FIXS> public foo.CollectionFieldsBuilder strings(java.util.Iterator<? extends java.lang.String> strings) { <FIXE>
<FIXS> row = inflater.inflate(LayResId, viewGroup, false); com.lab3.domain.Photo currMeet = getPhoto(i); android.widget.ImageView meetName = ((android.widget.ImageView) (row.findViewById(R.id.bmp))); meetName.setImageBitmap(currMeet.getImage()); <FIXE>
<FIXS> x = 1; <FIXE> <FIXS> x = -1; <FIXE> <FIXS> y = -1; <FIXE> <FIXS> y = 1; <FIXE>
<FIXS> <FIXE>
<FIXS> assertTrue(teilnehmerenlisteService.teilnehmerHinzufuegen("Testteilnehmer")); <FIXE>
<FIXS> result = null; <FIXE>
<FIXS> return (currentCell == null) || ((currentCell.getTile()) == null); <FIXE>
<FIXS> if ((null == (getSupportFragmentManager().findFragmentByTag(getString(R.string.generation_fragment_tag)))) || (!(getSupportFragmentManager().findFragmentByTag(getString(R.string.generation_fragment_tag)).isVisible()))) { <FIXE>
<FIXS> (count)++; <FIXE>
<FIXS> pstmt.setString(1, lastName); pstmt.setString(2, firstName); <FIXE>
<FIXS> <FIXE>
<FIXS> if ((isRuledOutBool()) && ((ruledOut) <= (learnerscript.getStage()))) <FIXE>
<FIXS> while (((fromNode.getParent()) != null) && ((fromNode.getParent().getComputers().size()) < desiredSize)) { <FIXE>
<FIXS> setServiceEnabled(enable); <FIXE>
<FIXS> return null; <FIXE>
<FIXS> <FIXE>
<FIXS> if ((dots.size()) > 0) { try { dots.get(this.selectedDotIndex).setInactive(animate); dots.get(index).setActive(animate); } catch (java.lang.IndexOutOfBoundsException e) { throw new java.lang.IndexOutOfBoundsException(); } this.selectedDotIndex = index; <FIXE> <FIXS> <FIXE>
<FIXS> public void exists(java.lang.String filePath, com.facebook.react.bridge.Promise promise) { <FIXE> <FIXS> java.io.File file = new java.io.File(filePath); <FIXE> <FIXS> reject(promise, filePath, ex); <FIXE>
<FIXS> int row = edu.princeton.cs.algs4.StdRandom.uniform(1, n); int col = edu.princeton.cs.algs4.StdRandom.uniform(1, n); <FIXE>
<FIXS> <FIXE>
<FIXS> cullAndRender(renderTarget.getNative(), scene.getNative(), mRenderBundle.getMaterialShaderManager().getNative(), mRenderBundle.getPostEffectShaderManager().getNative(), mRenderBundle.getPostEffectRenderTextureA().getNative(), mRenderBundle.getPostEffectRenderTextureB().getNative()); <FIXE>
<FIXS> if (((guide != null) && (guide.isActivated())) && (guide.isCreated())) { <FIXE>
<FIXS> <FIXE>
<FIXS> epmc.value.ValueObject.asObject(result).set(((java.lang.Object) (epmc.value.ValueObject.asObject(operands[0]).getObject()))); <FIXE>
<FIXS> if (((action instanceof ru.runa.wfe.lang.jpdl.CreateTimerAction) || (action instanceof ru.runa.wfe.lang.jpdl.CancelTimerAction)) || (((action.getName()) != null) && (action.getName().contains(TimerJob.ESCALATION_NAME)))) { <FIXE>
<FIXS> <FIXE>
<FIXS> adapter = new com.example.proxymeister.antonsskafferi.MenuAdapter(this, menu, editMenu, this); <FIXE>
<FIXS> static boolean check(java.lang.String line) { <FIXE> <FIXS> return counter > 5; <FIXE>
<FIXS> if (!(ips.isEmpty())) { return ips.get(0); } return null; <FIXE>
<FIXS> assertEquals("class X {\n}\n", cu.toString()); <FIXE>
<FIXS> ((com.android1.homework3.ui.UiFragment) (fragment)).setUiEnabled(enabled); <FIXE>
<FIXS> if (freundschaft == null) { freundschaft = com.fhaachen.swe.freespace.main.Freundschaft.findByCompositeKeys(benutzer2, benutzer1); } <FIXE> <FIXS> result = com.fhaachen.swe.freespace.main.Freundschaft.completeFreundschaft(result, benutzer1); <FIXE> <FIXS> <FIXE>
<FIXS> view.setTag(holder); <FIXE>
<FIXS> for (int k = 0; k < (uuid.length); k++) { if (entry.uuid.equals(uuid[k])) { completeUsers.remove(i); UpdateClients(); break; } <FIXE>
<FIXS> if ((mCameraID) != null) { mCameraManager.setTorchMode(mCameraID, enable); return true; }else { return false; } <FIXE>
<FIXS> if (string == null) { normalized.add(null); }else { normalized.add(string.trim().toLowerCase()); } <FIXE>
<FIXS> <FIXE>
<FIXS> new models.GridObserver(controllers.Application.controller, out, gameUUID); <FIXE> <FIXS> new models.GridObserver(controllers.Application.gameInstances.get(java.util.UUID.fromString(gameUUID)).getController(), out, gameUUID); <FIXE>
<FIXS> intent.putExtra(context.getString(R.string.deck_data_key), dataHelper.getSingleDeck((position + 1))); <FIXE>
<FIXS> if ((strandedness == (Library.Strandedness.FF_UNSTRANDED)) || (strandedness == (Library.Strandedness.FR_UNSTRANDED))) { return null; <FIXE> <FIXS> if (strandedness == (Library.Strandedness.FR_FIRST_STRAND)) { return uk.ac.tgac.conan.process.rnaasm.TrinityV2.Args.SSLibType.RF; <FIXE> <FIXS> if (strandedness == (Library.Strandedness.FR_SECOND_STRAND)) { return uk.ac.tgac.conan.process.rnaasm.TrinityV2.Args.SSLibType.FR; }else { throw new java.lang.UnsupportedOperationException("Not sure how to translate this type of strandeded RNAseq library into format suitable for Trinity"); } <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> if (failed) { Draw.level[CURRENT_LEVEL].resetGoal(); <FIXE> <FIXS> }else <FIXE>
<FIXS> return new logic.Tournament(ID); <FIXE>
<FIXS> <FIXE>
<FIXS> if (savedInstanceState == null) { android.app.FragmentManager fragmentManager = getFragmentManager(); android.app.FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction(); com.example.vincent.lab1.fragment.ListeFragment listeFragment = new com.example.vincent.lab1.fragment.ListeFragment(); com.example.vincent.lab1.fragment.PlaceHolderFragment mapFragment = new com.example.vincent.lab1.fragment.PlaceHolderFragment(); fragmentTransaction.add(R.id.liste_fragment_container, listeFragment); fragmentTransaction.add(R.id.map_fragment_container, mapFragment); fragmentTransaction.commit(); } <FIXE>
<FIXS> if (user == null) { return new com.eniacdevelopment.EniacHome.Repositories.Shared.Objects.UserAuthenticationResult() { { Authenticated = false; user.Id = null; } }; } <FIXE>
<FIXS> org.onebusaway.android.report.ui.ReportTripProblemFragment.show(this, obaArrivalInfo, R.id.ri_report_stop_problem, false); <FIXE>
<FIXS> net.automatalib.util.automata.Automata.cover(automaton, inputs, null, all); <FIXE>
<FIXS> if (!(idleConnections.contains(conn))) { idleConnections.offer(conn); } <FIXE>
<FIXS> writeAlarm(); <FIXE> <FIXS> writeAlarm(); <FIXE>
<FIXS> if ((content.size()) == 1) { objectMessage.setObject(((java.io.Serializable) (content.get(0).getValue()))); <FIXE>
<FIXS> if (android.support.v13.app.FragmentCompat.shouldShowRequestPermissionRationale(this, Manifest.permission.CAMERA)) { <FIXE> <FIXS> android.support.v13.app.FragmentCompat.requestPermissions(this, new java.lang.String[]{ Manifest.permission.CAMERA }, com.tapifolti.emotiondetection.EmotionDetectionFragment.REQUEST_APP_PERMISSION); <FIXE>
<FIXS> if (((org.kurento.test.services.KurentoServicesTestHelper.testName) != null) && ((out.indexOf(":")) != (-1))) { <FIXE>
<FIXS> org.junit.Assert.assertEquals(1, configs.size()); <FIXE>
<FIXS> io.wabm.TacFactory tac = null; io.wabm.TicFacotry tic = null; io.wabm.TocFactory toc = null; <FIXE>
<FIXS> if ((java.lang.System.getenv("ENV_SYSTEM")) == null) { <FIXE>
<FIXS> c = java.lang.Integer.compare(o2.getPriority(), o1.getPriority()); <FIXE>
<FIXS> private static java.lang.String removeSymbol(java.lang.String value) { int len = value.length(); <FIXE> <FIXS> if ((value.charAt(0)) == (com.google.blockly.android.ui.fieldview.BasicFieldAngleView.DEGREE_SYMBOL)) { value = value.substring(1); <FIXE> <FIXS> if ((value.charAt((len - 1))) == (com.google.blockly.android.ui.fieldview.BasicFieldAngleView.DEGREE_SYMBOL)) { value = value.substring(0, (len - 1)); <FIXE> <FIXS> return value; <FIXE>
<FIXS> <FIXE> <FIXS> throw new java.lang.RuntimeException("No regEx match"); <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> org.junit.Assert.assertTrue(((java.io.File) (org.openflexo.foundation.view.TestBasicOntologyEditorView.viewFolder.getSerializationArtefact())).exists()); <FIXE>
<FIXS> @android.support.annotation.VisibleForTesting public android.content.Intent build(android.content.Context context) { <FIXE>
<FIXS> public static java.lang.String createDeleteSqlForHelper(java.lang.String table, java.lang.String idColumn, java.lang.Object objectId) { <FIXE> <FIXS> sb.append(table).append(" where ").append(idColumn).append(" = ").append(objectId).append(";"); <FIXE>
<FIXS> this.getConfig(); <FIXE> <FIXS> <FIXE>
<FIXS> tabletop.domain.user.User user, org.springframework.validation.Errors errors) { <FIXE> <FIXS> return tabletop.controllers.utils.ResponseUtils.created(userService.editMail(user)); <FIXE>
<FIXS> output.write(input); <FIXE>
<FIXS> if ((pPlayer.getSettingsWorth(1)) == 0) { <FIXE>
<FIXS> private static ffk27.mapviewer2.GeoDataSource parentDataSource(ffk27.mapviewer2.RenderRule renderRule) { <FIXE> <FIXS> return ffk27.mapviewer2.RenderRule.parentDataSource(renderRule.getParent()); <FIXE>
<FIXS> if (biome.biomeName.equalsIgnoreCase(tmp)) { <FIXE>
<FIXS> java.lang.String id = bm.getBillItemByName(productName.getText()); if (id != null) { productID.getSelectionModel().select(id); <FIXE>
<FIXS> if ((groups.size()) <= 0) { <FIXE>
<FIXS> cancelCountdown(); <FIXE>
<FIXS> if ((imageView != null) && (result != null)) { <FIXE>
<FIXS> reportComboBox = fillTemplateComboBox(reportComboBox); <FIXE>
<FIXS> logger.addHandler(core.utils.Log.fh); logger.setUseParentHandlers(false); <FIXE> <FIXS> <FIXE>
<FIXS> java.io.Serializable dataType = intent.getSerializableExtra(GerritService.DATA_TYPE_KEY); if (dataType == (GerritService.DataType.Comment)) { <FIXE>
<FIXS> <FIXE>
<FIXS> scoresPresenter = new mvp.view.scores.ScoresPresenter(this, scoresLoader, getLoaderManager()); <FIXE>
<FIXS> chore.setLastTimeDone(parcel.readLong()); <FIXE>
<FIXS> }else { currentLocation = locationManager.getLastKnownLocation(LocationManager.NETWORK_PROVIDER); locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 0, 0, this); updateControlSetLocation(currentLocation); <FIXE> <FIXS> <FIXE>
<FIXS> return monthEvents; <FIXE>
<FIXS> java.io.File generatedSourceDir = new java.io.File(outputDir, packageNameToPath(generatedSource.getPackageName())); <FIXE>
<FIXS> <FIXE>
<FIXS> menu.findItem(R.id.action_pin).setVisible((!(isEditing))); <FIXE>
<FIXS> if ((user.getUsername().equals(u.getUsername())) && (user.getPassword().equals(u.getPassword()))) { <FIXE>
<FIXS> org.spongepowered.api.entity.living.Living thisEntity = this; <FIXE>
<FIXS> throw new com.gengo.client.exceptions.GengoException(e.getMessage(), e); <FIXE>
<FIXS> <FIXE>
<FIXS> if ((!(line.equals("h"))) && (!(line.equals("a")))) { <FIXE>
<FIXS> if ((getActivity()) != null) { getActivity().getContentResolver().update(GitWatchContract.RepoEntry.buildRepoUri(repoId), contentValues, null, null); } <FIXE>
<FIXS> <FIXE>
<FIXS> if ((playOnce) != null) { } <FIXE>
<FIXS> <FIXE>
<FIXS> para.STOP_CONDITION = 0.01F; <FIXE>
<FIXS> <FIXE>
<FIXS> for (long number : favorites) { <FIXE>
<FIXS> path.append(node.getId()); <FIXE>
<FIXS> urlString = (urlString.contains("?")) ? (urlString) + appendParams : java.lang.String.format("%s%s", urlString, ("?" + appendParams)); <FIXE>
<FIXS> <FIXE>
<FIXS> return ((float) (animationProgress *= pullingSpeedMult)) > 1.0F ? 1.0F : animationProgress; <FIXE>
<FIXS> private void addEntity(java.lang.String permission, int requestCode, boolean add) { <FIXE> <FIXS> if (add) { com.joker.api.wrapper.AbstractWrapper.Key key = new com.joker.api.wrapper.AbstractWrapper.Key(getContext(), getRequestCode()); com.joker.api.wrapper.AbstractWrapper.wrapperMap.put(key, new java.lang.ref.WeakReference<com.joker.api.wrapper.PermissionWrapper>(this)); } <FIXE>
<FIXS> if (globalEvaluationEnum == null) { return false; } <FIXE>
<FIXS> details.setText(itemView.getContext().getResources().getQuantityString(R.plurals.tag_number, item.getTags().size(), item.getTags().size())); <FIXE>
<FIXS> if ((message.length()) <= 5) { return ; } <FIXE>
<FIXS> if (n == 0) { return 0; } <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> this.episode = episode; <FIXE>
<FIXS> if ((creditChecks != null) && (!(creditChecks.isEmpty()))) { <FIXE>
<FIXS> if ((size) > 0) { if ((end) == ((data.length) - 1)) { end = 0; }else { (end)++; } <FIXE> <FIXS> data[end] = value; <FIXE>
<FIXS> public static synchronized java.lang.String encode(java.lang.String value) { <FIXE>
<FIXS> <FIXE>
<FIXS> monasca.api.domain.model.alarm.Alarm alarm = repo.findById(tenantId, alarmId); <FIXE>
<FIXS> return ((("000" + length) + " ") + str) + "\n"; <FIXE> <FIXS> return ((("00" + length) + " ") + str) + "\n"; <FIXE> <FIXS> return ((("0" + length) + " ") + str) + "\n"; <FIXE>
<FIXS> <FIXE>
<FIXS> l1 = solution.reverseKGroup(l1, 2); <FIXE>
<FIXS> return result; <FIXE>
<FIXS> if ((album) != null) { if ((album.wiki) != null) { album.wiki.setSummary(trimString(album.wiki.getSummary(), 0, "<a")); } parser.appendToAlbumList(album); } <FIXE>
<FIXS> android.support.design.widget.Snackbar.make(getView(), R.string.cached_content, Snackbar.LENGTH_SHORT).show(); <FIXE>
<FIXS> <FIXE>
<FIXS> void DrawField(int[][] field) { for (int[] x : field) { <FIXE>
<FIXS> imp3 = ic.run("Subtract create", m_Stack.get(i), imp3); <FIXE>
<FIXS> if (chess.ChessIO.checkForNewGame(history, primaryStage)) { <FIXE>
<FIXS> if ((controls.get(cloudServiceId)) != null) { controls.get(cloudServiceId).stop(); controls.remove(cloudServiceId); } <FIXE>
<FIXS> assertEquals(label, this.getFixture().getLabel(label.getNamespace(), label.getName())); <FIXE>
<FIXS> android.os.Bundle extras = this.getIntent().getExtras(); java.util.ArrayList<teammemes.tritonbudget.db.TranHistory> trans = ((java.util.ArrayList<teammemes.tritonbudget.db.TranHistory>) (extras.getSerializable("Transactions"))); <FIXE>
<FIXS> cstr = new java.lang.StringBuilder(); cstr.append(aOtherValue.getUc_cell()); <FIXE>
<FIXS> torque = ((-1) * (rpm)) / 10; break; <FIXE>
<FIXS> com.flectosystems.extspark.model.Item savedItem = com.flectosystems.extspark.test.PersistenceTest.itemDao.getItem("ItemTest"); <FIXE>
<FIXS> if (trackId == null) { return ; } <FIXE>
<FIXS> int size = this.pointVisited.size(); for (int i = 0; i < size; i++) { <FIXE>
<FIXS> <FIXE>
<FIXS> com.asml.innovationteam.rover.RoverProperties.saveScheduled = true; <FIXE>
<FIXS> if ((clazz) instanceof java.lang.Class) if (m.getClass().isAssignableFrom(((java.lang.Class<?>) (clazz)))) return ((T) (m)); <FIXE> <FIXS> return ((T) (converter.convert(m).to(clazz))); <FIXE>
<FIXS> edu.sjsu.cs157bproject3.App.input.nextLine(); <FIXE> <FIXS> edu.sjsu.cs157bproject3.App.input.nextLine(); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> if ((enterContinueOrExit.equals("e")) || (enterContinueOrExit.equals("c"))) { this.enterContinueOrExit = enterContinueOrExit; <FIXE> <FIXS> java.lang.System.out.println("Please, press (c) or (e) key!"); setEnterContinueOrExit(br.readLine()); <FIXE>
<FIXS> <FIXE>
<FIXS> if ((movies) != null) { gridView.setAdapter(null); adapter = new data.MoviesGridAdapter(getActivity(), movies); gridView.setClickable(true); gridView.setAdapter(adapter); <FIXE> <FIXS> adapter.notifyDataSetChanged(); <FIXE>
<FIXS> return ((((((((((("0 " + (identification)) + " ") + (xPos)) + " ") + (yPos)) + " ") + (zPos)) + " ") + (horizRot)) + " ") + (vertRot)) + " "; <FIXE>
<FIXS> if (((evt.getOldValue()) == null) && ((t - (focuslosttime)) > 3)) { <FIXE>
<FIXS> edu.brandeis.cs.nlp.mae.view.TablePanelView.TogglingTabTitle allTab = getTagTabTitle(0); <FIXE> <FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> public void refreshUserList(java.util.ArrayList<client.User> users) { <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> return (rand.nextInt((max - min))) + min; <FIXE>
<FIXS> public <T extends br.org.cesar.knot.lib.model.AbstractThingDevice> void socketIOGetDeviceList(final java.util.List<T> typeThing, org.json.JSONObject query, final br.org.cesar.knot.lib.event.Event<java.util.List<T>> callbackResult) throws br.org.cesar.knot.lib.exception.InvalidParametersException, br.org.cesar.knot.lib.exception.KnotException, br.org.cesar.knot.lib.exception.SocketNotConnected { <FIXE>
<FIXS> for (int i = 0; i < ((didio.configurator.panels.SensorPanel.NUM_SENSORS) - 1); i++) { for (int k = 0; k <= ((didio.configurator.panels.SensorPanel.NUM_VALUES) - 1); k++) { <FIXE>
<FIXS> io.reactivex.subscribers.TestSubscriber<java.lang.Integer> ts = new io.reactivex.subscribers.TestSubscriber<java.lang.Integer>(); <FIXE>
<FIXS> if ((rounds.size()) >= rNumber) { rounds.remove((rNumber - 1)); } <FIXE>
<FIXS> t2.setText(java.lang.String.valueOf(CtoF(i))); <FIXE> <FIXS> t2.setText(java.lang.String.valueOf(FtoC(i))); <FIXE>
<FIXS> if (idTrans == null) for (int i = 0; i < (mapHeight); ++i) { for (int j = 0; j < (mapWidth); ++j) { tiles[i][j] = idTrans.getTileFromId(idTable[i][j]); } <FIXE> <FIXS> <FIXE>
<FIXS> public static byte[] encodeLong(long value) { <FIXE>
<FIXS> foundNonMaxMatch = storeNonMaxMatchState(); <FIXE>
<FIXS> int position = (underlyingList.size()) - 1; <FIXE>
<FIXS> }else { displatchDisconnected(); <FIXE> <FIXS> <FIXE>
<FIXS> if ((s != null) && (!(s.equals("")))) { <FIXE>
<FIXS> processors.add(new org.thymeleaf.standard.processor.StandardXmlNsTagProcessor(org.thymeleaf.templatemode.TemplateMode.HTML, dialectPrefix)); processors.add(new com.github.dtrunk90.thymeleaf.jawr.processor.element.impl.JawrBinaryAttributeTagProcessor("img")); processors.add(new com.github.dtrunk90.thymeleaf.jawr.processor.element.impl.JawrBinaryAttributeTagProcessor("input")); processors.add(new com.github.dtrunk90.thymeleaf.jawr.processor.element.impl.JawrCssAttributeTagProcessor()); processors.add(new com.github.dtrunk90.thymeleaf.jawr.processor.element.impl.JawrJsAttributeTagProcessor()); <FIXE>
<FIXS> rulesFile.append("Agreement Term"); <FIXE>
<FIXS> <FIXE>
<FIXS> return cache.read(this, position, size, order); <FIXE>
<FIXS> java.lang.System.out.println(e.toString()); <FIXE>
<FIXS> message.add(((("Message " + num) + ": ") + (text.getText()))); <FIXE>
<FIXS> if (o == null) { if ((current.element) == null) return index; }else if (o.equals(current.element)) return index; <FIXE>
<FIXS> int position = getAdapterPosition(); com.neuron64.ftp.domain.model.UserConnection connection = at(position); <FIXE> <FIXS> onItemClickListener.onChangeConnection(connection, position); return true; <FIXE> <FIXS> onItemClickListener.onDeleteConnection(connection, position); return true; <FIXE> <FIXS> onItemClickListener.onTestConnection(connection, position); return true; <FIXE>
<FIXS> return ((T) (iCloneMethod.invoke(iPrototype, ((java.lang.Object) (null))))); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> if (cursor.moveToFirst()) { int i = 0; do { int mID = cursor.getInt(0); if (mID == accountID) { position = i; break; } i++; } while (cursor.moveToNext() ); <FIXE>
<FIXS> <FIXE>
<FIXS> java.util.LinkedList<diag.stn.STN.Vertex> adjacent = new java.util.LinkedList<>(); <FIXE> <FIXS> return adjacent; <FIXE> <FIXS> <FIXE>
<FIXS> if ((((Reader.currentPage) + i) < 0) || (((Reader.currentPage) + i) > (Reader.pages))) { <FIXE>
<FIXS> for (final java.util.Map.Entry<java.lang.String, org.bonitasoft.web.toolkit.client.ui.component.form.entry.ValuedFormEntry> entry : entriesIndex.entrySet()) { <FIXE>
<FIXS> if ((storage.dbDir()) == null) { return ; } if (!(storage.isTmpDir())) { return ; } if (!(de.flapdoodle.embed.process.io.file.Files.forceDelete(storage.dbDir()))) { <FIXE>
<FIXS> board.get(row).set(column, currentPlayer.getName()); <FIXE>
<FIXS> java.lang.String log = (((((((AUT + ",") + cnt) + ",") + sumCost) + ",") + sumDelay) + ",") + sumRunTime; <FIXE>
<FIXS> if (((this.currentSpeed) > 0) && ((this.currentRpm) > 1)) { <FIXE> <FIXS> }else if (((this.currentSpeed) > 0) && ((this.currentRpm) == 1)) { (this.currentSpeed)--; (this.currentMileage)++; } <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> logError(x, "Cannot call property accessor %s via super.", getMemberDescription(target)); <FIXE>
<FIXS> net.d80harri.wr.ui.viewmodel.TaskViewModel model = new net.d80harri.wr.ui.viewmodel.TaskViewModel(root, null, true); <FIXE>
<FIXS> return processBinding(moduleNode, openl, moduleContext, moduleOpenClass, bindingContext); <FIXE>
<FIXS> com.andreadec.musicplayer.Bitmap image; <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> for (java.lang.Object module : this.orderedModules) { <FIXE> <FIXS> if (!(this.serverWorkingCopy.getArtefactOrder().equals(artefactOrder))) { this.updating = true; execute(new org.eclipse.virgo.ide.runtime.internal.core.actions.ModifyArtefactOrderCommand(this.serverWorkingCopy, artefactOrder)); this.updating = false; <FIXE>
<FIXS> initModel(); <FIXE> <FIXS> <FIXE>
<FIXS> populateMarkerLabels(markers); <FIXE> <FIXS> <FIXE>
<FIXS> public org.ednovo.gooru.core.api.model.CollectionItem getCollectionItemByResource(final java.lang.String resourceId) { final org.hibernate.Query query = getSession().createQuery(org.ednovo.gooru.infrastructure.persistence.hibernate.CollectionRepositoryHibernate.COLLECTION_ITEM_BY_RESOURCE); <FIXE>
<FIXS> if ((node.left) == null) { <FIXE> <FIXS> }else { node.left = removeMin(node.left); } <FIXE>
<FIXS> assert !(mEnded); if (!(mHasWritten)) initFirstWrite(); <FIXE> <FIXS> if ((mSink) == null) <FIXE> <FIXS> <FIXE>
<FIXS> try { handleRequest(request); } catch (java.io.IOException e) { e.printStackTrace(); } finally { clientSocket.close(); } <FIXE>
<FIXS> android.content.Intent intent = vandy.mooc.services.DownloadImagesBoundService.makeIntent(mActivity.get()); <FIXE>
<FIXS> public java.util.HashMap<java.lang.String, java.util.ArrayList<java.lang.String>> get(@javax.ws.rs.QueryParam(value = "member") <FIXE> <FIXS> java.util.HashMap<java.lang.String, java.util.ArrayList<java.lang.String>> returnSet; returnSet = ((java.util.HashMap<java.lang.String, java.util.ArrayList<java.lang.String>>) (operation.perform())); return returnSet; <FIXE>
<FIXS> cv = ((fr.wildcodeschool.haa.waxym.CalendarView) (findViewById(R.id.calendar_view))); <FIXE>
<FIXS> <FIXE>
<FIXS> recyclerView.setAdapter(new nl.group11.planplan.EventfulAdapter(getContext(), new nl.group11.planplan.EventfulDynamicSearch("Eindhoven", 100))); <FIXE>
<FIXS> if (url == null) { return ; } <FIXE>
<FIXS> return 0; <FIXE>
<FIXS> if ((prefix != null) && (!(prefix.isEmpty()))) { prefix = prefix + "-"; } java.lang.String id = prefix + counter; <FIXE>
<FIXS> <FIXE>
<FIXS> for (java.lang.String p : com.github.arsenalfcgunners.gappleperms.RankManager.getPermissionsFromDB(r)) { perms.add(new org.bukkit.permissions.Permission(p)); <FIXE>
<FIXS> if ((mCovers.isEmpty()) && (!(items.isEmpty()))) { <FIXE>
<FIXS> int position = (mListView.getLastVisiblePosition()) - (mListView.getHeaderViewsCount()); <FIXE>
<FIXS> <FIXE> <FIXS> return 0; <FIXE>
<FIXS> org.junit.Assert.assertEquals(false, JTSMain.usedFunctionClass.isIn(tag1, tag2)); org.junit.Assert.assertEquals(true, JTSMain.usedFunctionClass.isIn(tag2, tag1)); <FIXE>
<FIXS> java.lang.System.out.println("No tx ack after 500ms"); <FIXE>
<FIXS> createMan10Score(name, uuid, nameTo, uuidTo, (-value), reason, "Take"); return 0; <FIXE>
<FIXS> if ((tmp.getNext().getNodeB()) == adjacent) { <FIXE> <FIXS> break; } <FIXE>
<FIXS> return getMethod(new palisades.lakes.dynafun.java.signature.Signature3(x0.getClass(), x1.getClass(), x2.getClass())).invoke(x0, x1, x2); <FIXE>
<FIXS> if ((line.size()) != (this._matrix.size())) { return false; } <FIXE>
<FIXS> ingredientList = new java.util.ArrayList<java.lang.String>(); <FIXE>
<FIXS> if ((dataSnapshot.getValue()) != null) { for (com.google.firebase.database.DataSnapshot snapshot : dataSnapshot.getChildren()) { T model = snapshot.getValue(this.type); model.setKey(snapshot.getKey()); models.add(model); } <FIXE>
<FIXS> synchronized(handlers) { for (int i = 0; i < (handlers.size()); i++) { net.openhft.chronicle.threads.api.EventHandler handler = handlers.get(i); try { busy |= handler.action(); } catch (net.openhft.chronicle.threads.api.InvalidEventHandlerException e) { handlers.remove((i--)); } catch (java.lang.Exception e) { e.printStackTrace(); } <FIXE>
<FIXS> this.adminService.delAdmin(id); <FIXE>
<FIXS> <FIXE> <FIXS> } catch (java.io.IOException ex) { ex.printStackTrace(); errorLabel.setText(ServerGUIMessages.ERROR_SAVING_CHANGES.getMessage()); errorLabel.setVisible(true); <FIXE>
<FIXS> if ((m.u.update) == true) { <FIXE> <FIXS> }else { e.getPlayer().sendMessage("�6[�2Updater�6] �3There isn't update for HeadGetter!"); } <FIXE>
<FIXS> insertionSort(arr, low, high); <FIXE>
<FIXS> assertEquals(0L, getBitField(db)); <FIXE>
<FIXS> if (!(gameOverFlag)) { <FIXE> <FIXS> if (!((players[1]) instanceof com.example.systemadministrator.myapplication.AIPlayer)) players[1].stopTimer(); <FIXE> <FIXS> if (!((players[1]) instanceof com.example.systemadministrator.myapplication.AIPlayer)) players[1].startTimer(p2Status, false); <FIXE>
<FIXS> gololang.FunctionReference overloaded = gololang.Predefined.fun(null, "overloaded", gololang.PredefinedTest.MyCallable.class, 1); <FIXE>
<FIXS> int currentTime = ((int) (mediaPlayerComponent.getTime())); <FIXE>
<FIXS> com.stacksync.syncservice.rpc.messages.APICommitResponse response = com.stacksync.syncservice.test.handler.UpdateMetadataTest.handler.updateMetadata(com.stacksync.syncservice.test.handler.UpdateMetadataTest.user1, file, false); <FIXE>
<FIXS> AppSeizaUranai_EF.randomfortune(ef.rankArray.get(i), (i + 1)); <FIXE>
<FIXS> response = response.substring(((response.indexOf(prefix)) + (prefix.length()))); <FIXE>
<FIXS> post.setRemotePostId(java.lang.Long.valueOf(((java.lang.String) (response)))); <FIXE>
<FIXS> return true; <FIXE>
<FIXS> return javax.ws.rs.core.Response.status(Response.Status.CREATED).entity(createFormResponseId.toString()).header("Location", java.lang.String.valueOf(createFormResponseId)).header("ObjectId", java.lang.String.valueOf(createFormResponseId)).build(); <FIXE>
<FIXS> <FIXE> <FIXS> assertEquals(2, it.peekNext().getKey()[0]); <FIXE>
<FIXS> if (com.mapswithme.maps.routing.ResultCodesHelper.isDownloadable(mResultCode, mMissingMaps.size())) <FIXE>
<FIXS> io.crate.metadata.UsersPrivilegesMetaData usersPrivilegesMetaData2 = new io.crate.metadata.UsersPrivilegesMetaData(in); <FIXE>
<FIXS> <FIXE> <FIXS> handleRV(result); <FIXE>
<FIXS> if (read > 0) dst.put(buffer, 0, read); <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> final java.util.Map<java.lang.String, com.vaadin.spring.access.ViewInstanceAccessControl> accessDelegates = this.applicationContext.getBeansOfType(com.vaadin.spring.access.ViewInstanceAccessControl.class); <FIXE>
<FIXS> } return new es.socib.netcdftokml.DeploymentInfo(time, longitude, latitude); <FIXE>
<FIXS> <FIXE>
<FIXS> int moveCounter = 1; <FIXE> <FIXS> <FIXE>
<FIXS> synchronized(node) { assert count == (node.writes) : java.lang.String.format("node = %1$s, writes = %2$d, actual = %3$d", org.avidj.util.Strings.join(org.avidj.zuul.core.DefaultLockManager.pathTo(node)), node.writes, count); } <FIXE>
<FIXS> <FIXE>
<FIXS> if (((this.animation) != null) && (frames != null)) { <FIXE>
<FIXS> curr = getNodeAt((index - 1)); <FIXE>
<FIXS> <FIXE>
<FIXS> return new java.io.File(outputDir, (((className + "-") + methodName) + fileExtension)); <FIXE>
<FIXS> <FIXE> <FIXS> com.massivecraft.factions.Board board = net.redstoneore.legacyfactions.entity.Board.get(); <FIXE>
<FIXS> return true; <FIXE> <FIXS> return true; <FIXE>
<FIXS> errorAttributesMap.put(com.grndctl.controllers.CustomErrorController.MESSAGE, ((errorAttributes.getError(requestAttributes)) != null ? errorAttributes.getError(requestAttributes).getLocalizedMessage() : null)); <FIXE>
<FIXS> <FIXE> <FIXS> java.sql.Connection con = Utilities.DBService.connect(); <FIXE>
<FIXS> if (result != (javax.swing.JOptionPane.YES_OPTION)) { <FIXE> <FIXS> return ; <FIXE>
<FIXS> vp = ((android.support.v4.view.ViewPager) (findViewById(R.id.vp_most_complex_touch))); <FIXE>
<FIXS> if ((directory) != null) { directory.close(false); directory = null; } <FIXE>
<FIXS> if ((((!(isPlayerTurn())) || (hasPlayedDevCard)) || (!(getState().equals("Playing")))) || (!(game.getPlayer().getOldDevCards().hasDevCard(devCard)))) <FIXE>
<FIXS> protected void initChannel(final io.netty.channel.socket.SocketChannel ch) throws java.lang.Exception { <FIXE> <FIXS> pipeline.addLast("decoder", new io.netty.handler.codec.http.HttpRequestDecoder()).addLast("aggregator", new io.netty.handler.codec.http.HttpObjectAggregator(1048576)).addLast("processor", new ru.shishmakov.server.HttpServerProcessorHandler()).addLast("encoder", new io.netty.handler.codec.http.HttpResponseEncoder()); <FIXE>
<FIXS> functionary.setIsactive(true); <FIXE>
<FIXS> <FIXE> <FIXS> com.game.obj.Blackhole.setAttraction(com.game.GameSettings.LevelLoader.Blackhole_Attraction); <FIXE>
<FIXS> if ((getParentContainer()) != null) { <FIXE>
<FIXS> for (int i = 0; i < (list.size()); i++) { if ((list.get(i)) == (entryChangedEvent.getBibEntry())) { list.set(i, entryChangedEvent.getBibEntry()); break; } <FIXE>
<FIXS> if ((mDeckInformation) != null) { mDeckInformation.setVisibility(View.INVISIBLE); if (fade) { mDeckInformation.setAnimation(com.ichi2.anim.ViewAnimation.fade(ViewAnimation.FADE_OUT, 500, 0)); } <FIXE>
<FIXS> this.pageConainer.getChildren().add(pages.get((pageNr - 1))); <FIXE>
<FIXS> return !((account == null) || (passwd == null)); <FIXE>
<FIXS> <FIXE>
<FIXS> if (n == null) return 0; else { return ((SplayTree.findSize(n.getLeft())) + 1) + (SplayTree.findSize(n.getRight())); <FIXE> <FIXS> <FIXE>
<FIXS> int delay = getIntRangeConfigurationValue(influencingMasterDataQuality, node, key, false); <FIXE>
<FIXS> if ((net.minecraft.server.MinecraftServer.getServer().getConfigurationManager().func_152606_n().length) > 0) { <FIXE>
<FIXS> <FIXE> <FIXS> messageArea.scrollToPosition(((adapter.getItemCount()) - 1)); <FIXE>
<FIXS> public void remove(java.lang.Object o) { <FIXE> <FIXS> drawables.remove(o); <FIXE> <FIXS> movables.remove(o); <FIXE> <FIXS> entities.remove(o); <FIXE> <FIXS> collidables.remove(o); <FIXE>
<FIXS> <FIXE>
<FIXS> assertEquals(testUserId, place.getUserId()); assertEquals(Synapse.ProfileArea.PROJECTS, place.getArea()); assertEquals(testToken, tokenizer.getToken(place)); <FIXE>
<FIXS> textView.setText(text); <FIXE> <FIXS> <FIXE>
<FIXS> if (mOnGoingCall) { resumeMedia(); mOnGoingCall = false; } <FIXE>
<FIXS> <FIXE> <FIXS> (mapPoint)++; <FIXE>
<FIXS> <FIXE>
<FIXS> connection = connect(); <FIXE>
<FIXS> btnInstall.setVisibility(View.INVISIBLE); <FIXE>
<FIXS> return new android.database.MergeCursor(new android.database.Cursor[]{ uidCursor , data }); <FIXE>
<FIXS> l1 = solution.reverseKGroup(l1, 5); <FIXE>
<FIXS> com.valuados.tickets.main.App.readFile(schedule, bookingList); <FIXE>
<FIXS> for (int a = 0; a < (EDTlisteners.size()); a++) { EDTlisteners.get(a).actionPerformed(event); <FIXE>
<FIXS> if (((registeredUsers) != null) && ((loggedUser.ownedVehicles.size()) <= 1)) { <FIXE>
<FIXS> getSupportActionBar().setTitle(user.screenName); populateUserHeadline(user); <FIXE> <FIXS> <FIXE>
<FIXS> if (((schema) == null) || (schema.isEmpty())) { return -1; } <FIXE> <FIXS> if (colName.equals(schema.get(i).getName())) <FIXE>
<FIXS> int[] arr = new int[]{ 1 , 4 , 4 }; <FIXE>
<FIXS> if (addr == null) return ; <FIXE>
<FIXS> <FIXE> <FIXS> final java.lang.String s = net.anfoya.mail.gmail.model.GmailThread.findHeader(thread, "Date"); <FIXE> <FIXS> } catch (final java.lang.Exception e) { <FIXE>
<FIXS> if (editor != null) { oos = new java.io.ObjectOutputStream(new java.io.BufferedOutputStream(editor.newOutputStream(com.anupcowkur.reservoir.SimpleDiskCache.METADATA_IDX))); oos.writeObject(metadata); } <FIXE>
<FIXS> reopen(issue, today); <FIXE>
<FIXS> return sendImage(image[0], image[0].length); <FIXE>
<FIXS> private void collectValuesInorder(RBTree.RBNode node, RBTree.List keysList) { <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> if ((intent.getIntExtra("position", 0)) >= 0) { mOnChangeItemListener.onChangeItem(intent.getIntExtra("position", 0)); } <FIXE>
<FIXS> if ((result == null) || (result.isEmpty())) <FIXE>
<FIXS> default : break; <FIXE>
<FIXS> if (t == (this)) { return throwable; } <FIXE>
<FIXS> if (tivoId == null) { return null; } <FIXE>
<FIXS> if (((edu.gemini.p2checker.rules.gmos.GmosRule.getFPU(config, elems).isIFU()) && (!(edu.gemini.p2checker.rules.gmos.GmosRule.getDisperser(config).isMirror()))) && ((edu.gemini.p2checker.rules.gmos.GmosRule.getYBinning(config)) != (edu.gemini.spModel.gemini.gmos.GmosCommonType.Binning.ONE))) { <FIXE>
<FIXS> if ((path.split("\\.").length) > 1) { <FIXE>
<FIXS> wandUser.getSprite().setVisible(false); <FIXE> <FIXS> <FIXE>
<FIXS> java.lang.String endPoint; <FIXE>
<FIXS> } if (input < 0) { return 0; }else { return high - 1; } <FIXE>
<FIXS> return java.lang.Integer.parseInt(i.trim().replace(',', '.')); <FIXE>
<FIXS> android.support.test.espresso.Espresso.onView(withId(R.id.settings_btn)).check(matches(isDisplayed())).perform(click()); <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> if ((transactions.get(position)) != null) { transactions.get(position).delete(); transactions.remove(position); <FIXE>
<FIXS> orcidSecurityManager.checkPermissions(ScopePathType.ORCID_BIO_READ_LIMITED); <FIXE>
<FIXS> if (dtString != null) { if (dtString.equalsIgnoreCase("verbose")) <FIXE> <FIXS> if (dtString.equalsIgnoreCase("terse")) <FIXE> <FIXS> else if (dtString.equalsIgnoreCase("off")) isValid = true; <FIXE> <FIXS> } <FIXE>
<FIXS> mCurAction = null; <FIXE>
<FIXS> <FIXE>
<FIXS> if (tree == null) { return ; } <FIXE>
<FIXS> leftBarGrid.getChildren().remove(earthViewer.getMiniEarth()); <FIXE>
<FIXS> identity.checkPermission(getProjectIteration(), "copy-trans"); <FIXE>
<FIXS> <FIXE> <FIXS> view.clearFocus(); <FIXE>
<FIXS> return org.bukkit.ChatColor.translateAlternateColorCodes('&', (((((("&8&l[&" + Color) + (net.zabszk.terrain.Main.getInstance().config.getString("PluginDisplayName"))) + "&8&l] ") + "&") + Color) + Msg)); <FIXE>
<FIXS> if (!(jTabbedPane1.getTitleAt(i).equals("Activity"))) { <FIXE>
<FIXS> presenter.getData(movie); <FIXE>
<FIXS> <FIXE>
<FIXS> if ((selectedTimes == null) || ((selectedTimes.length) == 0)) { return ; } <FIXE>
<FIXS> em.setPackagesToScan("com.github.gokolo.personaldashboard.data.entities"); <FIXE>
<FIXS> org.junit.Assert.assertEquals(3, toDoItems.size()); <FIXE>
<FIXS> android.util.Log.i(com.flymarco.appmanager.module.DownLoader.TAG, ("read: " + (totalBytes))); <FIXE>
<FIXS> return false; <FIXE>
<FIXS> if (!(project.tddd80.keval992.liu.ida.se.navigationbase.main.ResultsReceiver.results.containsKey(clazz))) { <FIXE>
<FIXS> com.rapid.develop.core.dal.transaction.TransactionManager.commit(); <FIXE> <FIXS> <FIXE>
<FIXS> sensor.latest_battery_level = ((sensor.latest_battery_level) != 0) ? java.lang.Math.min(sensor.latest_battery_level, transmitterData.sensor_battery_level) : transmitterData.sensor_battery_level; <FIXE>
<FIXS> } catch (java.lang.Exception e) { <FIXE> <FIXS> } finally { infoLabel.setText(information.GUIText.DATA_SAVED); classifyButton.setEnabled(true); saveButton.setEnabled(true); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> initialize(new com.watabou.pixeldungeon.PixelDungeon(new com.watabou.utils.PDPlatformSupport<com.watabou.pixeldungeon.input.GameAction>(version, "Documents/pixeldungeon.cn/saves/", new com.watabou.pd.android.AndroidInputProcessor(this))), config); <FIXE>
<FIXS> if ((getLockCollection().count()) == 0) { } <FIXE>
<FIXS> com.pgcraft.spectatorplus.SpectatorPlus.get().getSpectatorsManager().getInventoryManager().updateNewbieTips(((org.bukkit.entity.Player) (ev.getPlayer())), false); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> if ((commanutil.utl.LogManager.mIsOutLog) && ((commanutil.utl.LogManager.logLevel) <= (android.util.Log.DEBUG))) { <FIXE>
<FIXS> java.io.FileOutputStream fos = new java.io.FileOutputStream(highscoreFile, false); <FIXE>
<FIXS> private void undoOpt(com.exemple.android.cookbook.entity.CategoryRecipes item) { <FIXE>
<FIXS> org.testng.Assert.assertEquals(maxFileSize, 10L); org.testng.Assert.assertEquals(managedArtifact, "default"); org.testng.Assert.assertEquals(sessionCount, 10); <FIXE>
<FIXS> public org.apache.commons.math3.util.Pair<java.lang.Integer, java.lang.Double> calculateLargestContour(java.util.List<org.weasis.dicom.rt.Contour> planeContours) { <FIXE>
<FIXS> controlState = 1; <FIXE>
<FIXS> if (((mSettings.categories) != null) && ((mSettings.categories.length) > 0)) { <FIXE>
<FIXS> storeDataInAttributeList(1, 2, textureCoords); <FIXE>
<FIXS> org.acsool.dto.APICode<org.acsool.dto.SL0001> reqCode = new org.acsool.dto.APICode<org.acsool.dto.SL0001>(); <FIXE>
<FIXS> if ((jobPostingsList.size()) == 0) return null; <FIXE>
<FIXS> com.sitewhere.rest.model.device.Site site = com.sitewhere.core.SiteWherePersistence.siteCreateLogic(request); <FIXE>
<FIXS> <FIXE>
<FIXS> if (((m_quickMenus.length) < index) || ((m_quickMenus[index]) == null)) { return ; } <FIXE>
<FIXS> partial[1] = hivemall.utils.hadoop.WritableUtils.toWritableList(buf._posteriori); <FIXE>
<FIXS> if (msg != null) { for (int i = 0; i < (model.Messenger.VALID_RESPONSES.length); i++) { if ((msg.indexOf(model.Messenger.VALID_RESPONSES[i])) != (-1)) { return model.Messenger.VALID_RESPONSES[i]; } <FIXE>
<FIXS> return new nl.esciencecenter.xenon.filesystems.Path(baseDir).resolve(new nl.esciencecenter.xenon.filesystems.Path(path)); <FIXE>
<FIXS> public boolean equalStruct(Expression o, java.util.HashMap<java.lang.String, java.lang.String> d) { <FIXE> <FIXS> return (((op) == (other.op)) && (lhs.equalStruct(other.lhs, d))) && (rhs.equalStruct(other.rhs, d)); <FIXE>
<FIXS> users.remove(email); <FIXE>
<FIXS> return true; <FIXE>
<FIXS> this.state = com.nekretnine.dto.AdvertisementDTO.State.OPEN; <FIXE> <FIXS> this.state = com.nekretnine.dto.AdvertisementDTO.State.EXPIRED; <FIXE> <FIXS> this.state = com.nekretnine.dto.AdvertisementDTO.State.REPORTED; <FIXE> <FIXS> this.state = com.nekretnine.dto.AdvertisementDTO.State.REMOVED; <FIXE> <FIXS> this.state = com.nekretnine.dto.AdvertisementDTO.State.SOLD; <FIXE>
<FIXS> for (util.serialization.Serializable item : this.serializer.getItems(this)) { <FIXE>
<FIXS> <FIXE>
<FIXS> mViewPager.setAdapter(new br.com.inmypocket.adapter.AccountViewPagerAdapter(this, getFragmentManager())); <FIXE>
<FIXS> _checkSum += java.lang.Integer.parseInt(hold[x]); <FIXE>
<FIXS> public java.util.Set<redis.clients.jedis.Tuple> zrevrangeByScoreWithScores(final byte[] key, final byte[] max, final byte[] min, final int offset, final int count) { <FIXE> <FIXS> client.zrevrangeByScoreWithScores(key, max, min, offset, count); return getBinaryTupledSet(); <FIXE>
<FIXS> if ((room.getOwner()) != null) { if (room.getOwner().equals(sender)) { java.lang.String roomID = room.getRoomID(); account.addRoomOwnership(roomID); } <FIXE>
<FIXS> final java.lang.String cssText; <FIXE>
<FIXS> private void save() { <FIXE>
<FIXS> org.junit.Assert.assertThat(new hudson.plugins.cigame.GamePublisher().perform(build, createRuleBook(5.0), true, null, null, null), org.hamcrest.CoreMatchers.is(true)); <FIXE>
<FIXS> <FIXE>
<FIXS> query.filter = org.locationtech.geomesa.api.GeoMesaQuery.GeoMesaQueryBuilder.ff.and(org.locationtech.geomesa.api.GeoMesaQuery.GeoMesaQueryBuilder.ff.bbox("geom", minx, miny, maxx, maxy, "EPSG:4326"), org.locationtech.geomesa.api.GeoMesaQuery.GeoMesaQueryBuilder.ff.between(org.locationtech.geomesa.api.GeoMesaQuery.GeoMesaQueryBuilder.ff.property("dtg"), org.locationtech.geomesa.api.GeoMesaQuery.GeoMesaQueryBuilder.ff.literal(start), org.locationtech.geomesa.api.GeoMesaQuery.GeoMesaQueryBuilder.ff.literal(end))); <FIXE>
<FIXS> while ((parentLevel < currentLevel) && (tabNo > 0)) { <FIXE>
<FIXS> for (int i = 0; i < (getPieces().size()); i++) { android.widget.ListAdapter piece = getPieces().get(i); <FIXE>
<FIXS> if ((((java.lang.Number) (neighboursOfAllVetexesAsTupleArray[java.lang.Integer.parseInt(srcId.toString())]._2()[i]._1())).longValue()) == destId) { <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> for (int i = 0; i < (size); i++) { java.lang.System.out.print((("Id: " + (ids[i])) + ", ")); java.lang.System.out.println(("Name: " + (names[i]))); <FIXE>
<FIXS> this.numDecks = numDecks; <FIXE>
<FIXS> if (textArea_message.getText().equals("")) { <FIXE> <FIXS> mo.info.text2 = textArea_message.getText(); <FIXE>
<FIXS> footprintWKT = "POLYGON" + (polyCoords.replace(" ", "").replace(",", " ").replace(") (", ",")); <FIXE>
<FIXS> return $.eq(name, that.name); <FIXE>
<FIXS> if (mapValue == null) { return com.liferay.mobile.screens.ddl.model.Field.EditorType.UNSUPPORTED; } <FIXE> <FIXS> return com.liferay.mobile.screens.ddl.model.Field.EditorType.valueOfString(mapValue.toString()); <FIXE>
<FIXS> public void storeSettingsIntoConfigFile() { <FIXE>
<FIXS> com.github.pagehelper.PageHelper.startPage(pagenum, 1); <FIXE>
<FIXS> builder.setSmallIcon(android.R.drawable.stat_sys_warning); <FIXE>
<FIXS> ldapEntry.setEntry(entry); <FIXE> <FIXS> <FIXE>
<FIXS> if ((getProblematicKanjiNumber()) == 0) { problematicCheckbox.setEnabled(false); } <FIXE>
<FIXS> a.setTelephone(telephone); <FIXE>
<FIXS> <FIXE> <FIXS> redirectAttributes.addFlashAttribute(user); <FIXE>
<FIXS> public void setItemClick(final android.view.View view, final int position, final com.codbking.calendar.CalendarBean bean) { <FIXE> <FIXS> getChildAt(position).setSelected(true); <FIXE> <FIXS> mSelectedPosition = position; <FIXE> <FIXS> onItemClickListener.onItemClick(view, position, bean); <FIXE>
<FIXS> discoverGeoRepDataInCluster(cluster, volume); <FIXE>
<FIXS> public boolean isAddonAvailableFromProdName(final java.lang.String baseProductName, final org.killbill.billing.catalog.api.Plan targetAddOnPlan, final org.joda.time.DateTime requestedDate, final org.killbill.billing.callcontext.InternalTenantContext context) { <FIXE>
<FIXS> indexes.put(node.getId(), ((nodes.size()) - 1)); <FIXE>
<FIXS> return super.getName(us.getMetaMetadataURI()); <FIXE>
<FIXS> <FIXE>
<FIXS> public void copy() { <FIXE>
<FIXS> final java.util.Map map = jdbcTemplate.queryForMap(passwordManagementProperties.getJdbc().getSqlSecurityQuestions(), username); <FIXE>
<FIXS> public static java.util.Date getDate(java.util.Date date, int hr, int min) { <FIXE>
<FIXS> if (user != null) { int user_id = user.getId(); items = getFacade().findNotesByUserId(user_id); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> target.sendMessage(tag.concat(line)); <FIXE>
<FIXS> } catch (java.lang.Exception e) { <FIXE>
<FIXS> com.vaadin.tests.elements.PolymerTemplateViewElement view = $(com.vaadin.tests.elements.PolymerTemplateViewElement.class).first(); <FIXE>
<FIXS> if ((null != (latitude)) && (null != (longitude))) { intent.putExtra("latitude", latitude); intent.putExtra("longitude", longitude); } <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> compatibility = (compatibility * 100) / (neighbors.size()); <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> boolean containerCanEnd = (((items.size()) == 0) || ((items.peekLast().getEnd()) == (-1))) || ((items.peekLast().getEnd()) <= time); <FIXE>
<FIXS> <FIXE>
<FIXS> if (((input.getNewFilePath()) != null) && ((input.getNewLineNumber()) != null)) { <FIXE>
<FIXS> com.badlogic.gdx.math.Vector2 center = new com.badlogic.gdx.math.Vector2(); rectangle.getCenter(center); <FIXE> <FIXS> rectangle2.getCenter(center); assertEquals("Wrong X value", 1.5, center.x, 0); assertEquals("Wrong Y value", 1.5, center.y, 0); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> size = pres.length; <FIXE>
<FIXS> static boolean compileFromSqlTextAndUpdateCatalog(org.voltdb.compiler.VoltCompiler compiler, org.hsqldb_voltpatches.HSQLInterface hsql, org.voltdb.catalog.Catalog catalog, org.voltdb.catalog.Database db, org.voltdb.compiler.DatabaseEstimates estimates, org.voltdb.catalog.Statement catalogStmt, java.lang.String sqlText, java.lang.String joinOrder, org.voltdb.compiler.DeterminismMode detMode, org.voltdb.planner.StatementPartitioning partitioning) throws org.voltdb.compiler.VoltCompiler.VoltCompilerException { return org.voltdb.compiler.StatementCompiler.compileStatementAndUpdateCatalog(compiler, hsql, catalog, db, estimates, catalogStmt, null, sqlText, joinOrder, detMode, partitioning); <FIXE>
<FIXS> java.lang.System.out.println("registered JavaScript-to-Java bridge"); <FIXE>
<FIXS> com.mojang.mojam.screen.Bitmap image = bitmapData[(c % 30)][(c / 30)]; <FIXE>
<FIXS> this.t.add(t); <FIXE>
<FIXS> if ((key.compareTo(endKey)) <= 0) { <FIXE> <FIXS> final org.mrgeo.utils.TMSUtils.Tile t = org.mrgeo.utils.TMSUtils.tileid(key.get(), zoom); <FIXE>
<FIXS> <FIXE>
<FIXS> if (currentFragment == null) { <FIXE>
<FIXS> <FIXE>
<FIXS> if (((text.equalsIgnoreCase(s.getLabel())) || (text.equalsIgnoreCase(s.name()))) || (text.replaceAll("-", "_").equalsIgnoreCase(s.name()))) { <FIXE>
<FIXS> public void composeMessage(java.lang.String name, java.lang.String address) { <FIXE> <FIXS> <FIXE>
<FIXS> if (org.springframework.util.CollectionUtils.isEmpty(eventHandlerMap)) { <FIXE>
<FIXS> if (((event.getKeyCode()) == (java.awt.event.KeyEvent.VK_LEFT)) || ((event.getKeyCode()) == (java.awt.event.KeyEvent.VK_RIGHT))) <FIXE> <FIXS> textEntry.keyPressed(event); <FIXE>
<FIXS> if ((frameWriter) != null) { frameWriter.goAway(0, ErrorCode.NO_ERROR, new byte[0]); } <FIXE>
<FIXS> int playerMin = 2; int playerMax = 2; <FIXE>
<FIXS> if (((first) == null) || ((first) == (last))) return ; <FIXE>
<FIXS> if (sprint != null) { for (com.scrumiverse.model.scrumCore.UserStory forUserstory : sprint.getUserStories()) { for (com.scrumiverse.model.scrumCore.Task forTask : forUserstory.getTasks()) { if (forTask.equals(task)) { result = true; } <FIXE>
<FIXS> java.lang.System.out.println("Action Performed"); <FIXE>
<FIXS> if (check.equals(z)) { <FIXE> <FIXS> return -1; <FIXE>
<FIXS> dbActive = ParseQuery.executeQuery(pieces, dbActive); <FIXE>
<FIXS> view.GuiView view = new view.GuiView(project.getName()); <FIXE>
<FIXS> return super.dispatchTouchEvent(ev); }else { return false; <FIXE> <FIXS> <FIXE>
<FIXS> if ((players.get(i)) != null) { if (!(checkForMoves(players.get(i).getPlayer(), board).equals("No options left"))) { turn = ((turn) + 1) % (numberOfPlayers); nextPlayer = true; return true; } <FIXE>
<FIXS> }else { messageHandlingScheduler.submit(link, obj, messageHandler); <FIXE>
<FIXS> ((com.fasterxml.jackson.databind.node.ObjectNode) (items.get(i))).put("type", typeName); <FIXE>
<FIXS> <FIXE>
<FIXS> }else { } <FIXE>
<FIXS> Show show = new Show(showName, 0, null, null, null); <FIXE>
<FIXS> }else { if ((babyfon.view.activity.MainActivity.mAudioRecorder) == null) { babyfon.view.activity.MainActivity.mAudioRecorder = new babyfon.audio.AudioRecorder(mContext, babyfon.view.activity.MainActivity.mBoundService); <FIXE> <FIXS> MainActivity.mAudioRecorder.startRecording(); } <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> for (int i = 0; i < (tasks.length); i++) { <FIXE>
<FIXS> if ((activity) instanceof com.engstuff.coloriphornia.interfaces.HideInfoListener) { ((com.engstuff.coloriphornia.interfaces.HideInfoListener) (activity)).onHideInfoInvoked(true); } <FIXE>
<FIXS> <FIXE>
<FIXS> if (palette != null) { int backgroundColor = com.stonevire.wallup.utils.ColorModifier.getNonDarkColor(palette, mContext); holder.authorLayout.setBackgroundColor(backgroundColor); holder.firstName.setTextColor(com.stonevire.wallup.utils.ColorModifier.getBlackOrWhiteInt(backgroundColor, mContext)); holder.lastName.setTextColor(com.stonevire.wallup.utils.ColorModifier.getBlackOrWhiteInt(backgroundColor, mContext)); } <FIXE>
<FIXS> filter.addAndParam("tenant", org.sentilo.web.catalog.utils.TenantUtils.getCurrentTenant()); <FIXE>
<FIXS> if (branchName == null) { branchName = ""; } <FIXE>
<FIXS> this.mView.add(com.alesarcode.whatwatch.presentation.converters.DomainToPresentationConverter.convertToModelList(wrapper.getResultsList()), startRow, wrapper.getTotalCount()); <FIXE>
<FIXS> return resultList; <FIXE>
<FIXS> com.infiniteloop.mytasks.data.TaskLab.get(getActivity()).setComplete(task, getActivity()); <FIXE>
<FIXS> if (!((tenantId > 0) || ((busId != null) && (!(busId.isEmpty()))))) { <FIXE>
<FIXS> java.lang.Object[] guard = new java.lang.Object[]{ this , scaffold }; <FIXE> <FIXS> <FIXE>
<FIXS> int money = com.loocha.dao.LoochaDAOFactory.getInstance().getSettingDAO().queryPayMoney(count, economy_option, flag, 0); <FIXE>
<FIXS> if ((mTransactionns.size()) != 0) { android.content.Intent updateIntent = new android.content.Intent("android.appwidget.action.APPWIDGET_UPDATE_SERVICE"); updateIntent.putExtra("transaction", mTransactionns.get(com.oyyx.weektag.WidgetService.position)); mContext.sendBroadcast(updateIntent); (com.oyyx.weektag.WidgetService.position)++; if ((com.oyyx.weektag.WidgetService.position) == (mTransactionns.size())) { com.oyyx.weektag.WidgetService.position = 0; } <FIXE>
<FIXS> <FIXE>
<FIXS> private boolean isXML(java.lang.String value) { <FIXE> <FIXS> return true; <FIXE>
<FIXS> return ((((ExperimentType.ERec.equalsOrContainsType(eType)) || (ExperimentType.ETyping.equalsOrContainsType(eType))) || (ExperimentType.OKE_Task1.equalsOrContainsType(eType))) || (ExperimentType.OKE_Task2.equalsOrContainsType(eType))) || (org.apache.commons.lang.StringUtils.isEmpty(filterName)); <FIXE>
<FIXS> beaconServer.accept(reader, new org.bart452.asyncbeaconserver.ClientConnHandler(beaconServer)); <FIXE>
<FIXS> fabOptions.setButtonsMenu(R.menu.menu_faboptions); <FIXE>
<FIXS> if ((config.getGeneralConfigurationId()) != null) config.setGeneralConfiguration(generalConfigurationService.GetById(config.getGeneralConfigurationId())); <FIXE>
<FIXS> break; <FIXE> <FIXS> break; <FIXE> <FIXS> break; <FIXE>
<FIXS> }else { student = null; <FIXE>
<FIXS> private void registerAndSaveRegistrationAddresses(org.iish.hsn.invoer.service.akte.BevolkingsregisterFlowState bevolkingsregisterFlow) { <FIXE> <FIXS> <FIXE>
<FIXS> hasWeight = true; <FIXE> <FIXS> if ((weight.get(i, 0)) == (us.ihmc.commonWalkingControlModules.controllerCore.command.SolverWeightLevels.HARD_CONSTRAINT)) hasWeight = false; <FIXE>
<FIXS> if (((inputValue.indexOf(".")) == (-1)) || (!(buttonName.equals(".")))) <FIXE>
<FIXS> private boolean isParent(org.eclipse.xtext.resource.IEObjectDescription desc, org.eclipse.emf.ecore.EObject o) { <FIXE>
<FIXS> <FIXE> <FIXS> mBinding.nextStep.setEnabled(false); <FIXE>
<FIXS> <FIXE>
<FIXS> generatedStrings.add(generate(expressions)); <FIXE>
<FIXS> mSwipeRefreshLayout.setEnabled(true); mSwipeRefreshLayout.setRefreshing(false); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> if (((FierySouls.MODID.equals(event.getModID())) && (event.getConfigID().equals(com.yooksi.fierysouls.common.FSConfiguration.TORCH_CATEGORY))) && (!(event.isRequiresMcRestart()))) { com.yooksi.fierysouls.common.FSConfiguration.syncConfig(false, true); <FIXE>
<FIXS> <FIXE>
<FIXS> if ((this.ruleMap.put(ruleExpr.getRuleName(), ruleExpr)) != null) { <FIXE>
<FIXS> stringBuilder.append(s); <FIXE> <FIXS> return stringBuilder.toString(); <FIXE>
<FIXS> com.uwsoft.editor.renderer.data.ResolutionEntryVO resolutionEntryVO = dataManager.getCurrentProjectInfoVO().resolutions.remove(index); <FIXE>
<FIXS> <FIXE>
<FIXS> broadcast(((com.yahoo.tracebachi.FloorIsLava.FloorArena.BAD) + "Too few players to start."), null); <FIXE>
<FIXS> private void setErrorHandler() { <FIXE>
<FIXS> setCurrentLinkQueueStatusFinished(); <FIXE> <FIXS> <FIXE>
<FIXS> openFile(fileInfo); <FIXE>
<FIXS> MockSingleton.INSTANCE.userChangeState = stateOptionStates; <FIXE>
<FIXS> long processDeliveryTag = org.apache.airavata.gfac.core.GFacUtils.getProcessDeliveryTag(processContext.getCuratorClient(), processContext.getExperimentId(), processId); <FIXE>
<FIXS> if ((Build.VERSION.SDK_INT) > 16) { <FIXE>
<FIXS> if (((measure.attempts) - (measure.successes)) > 0) <FIXE>
<FIXS> while ((cur.getNextNode()) != null) { <FIXE>
<FIXS> assertEquals(useTestCaseClass.getLabelTextParagraph(), com.example.fw.ApplicationManager.driver.findElement(org.openqa.selenium.By.cssSelector(useTestCaseClass.getLabelTestSelector())).getText()); <FIXE>
<FIXS> java.util.LinkedHashMap<java.lang.String, java.lang.Object> map = new java.util.LinkedHashMap<>(); <FIXE>
<FIXS> napakalaki.Treasure salida = unusedTreasures.get(((unusedTreasures.size()) - 1)); unusedTreasures.remove(((unusedTreasures.size()) - 1)); <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> org.apache.hadoop.hive.ql.io.parquet.HiveParquetSchemaTestUtils.testConversion("structCol", "struct<a:int,b:double>", org.apache.hadoop.hive.ql.io.parquet.read.DataWritableReadSupport.getProjectedSchema(originalMsg, java.util.Arrays.asList("structCol"), java.util.Arrays.asList(0), new java.util.HashSet<>(java.util.Arrays.asList("structCol.a", "structCol.b"))).toString()); <FIXE>
<FIXS> android.widget.Toast.makeText(this, "Your login session has expired.", Toast.LENGTH_SHORT).show(); <FIXE>
<FIXS> <FIXE>
<FIXS> this.sendEmail(timeSheet.getUser(), "Your time sheet has been approved"); <FIXE>
<FIXS> public java.lang.Object getByJsonPath(java.lang.String jsonPath) throws org.nybatis.core.exception.unchecked.JsonPathNotFoundException { java.lang.Object val = null; <FIXE> <FIXS> return val; <FIXE>
<FIXS> public void onAttach(android.content.Context context) { super.onAttach(context); <FIXE> <FIXS> mListener = ((com.ipaulpro.afilechooser.FileListFragment.Callbacks) (context)); <FIXE> <FIXS> throw new java.lang.ClassCastException(((context.toString()) + " must implement FileListFragment.Callbacks")); <FIXE>
<FIXS> return ((lt.compareTo(startTime)) >= 0) && ((lt.compareTo(endTime)) <= 0); <FIXE>
<FIXS> GoogleHashCode2016.HashCode2016.Helpers.outputList.add(((((((("" + (drone.id)) + " L ") + (product.id)) + " ") + (warehouse.id)) + " ") + quantity)); <FIXE>
<FIXS> mWebView.loadData(com.untappedkegg.rally.event.DbEvent.fetchStageResults(eventCode, year, curStage, isFinished), "text/html", "UTF-8"); <FIXE>
<FIXS> <FIXE> <FIXS> if (progress == 100) { setNavArrows(); } <FIXE>
<FIXS> <FIXE>
<FIXS> java.lang.String tmp = new java.lang.String(filename); tmp = tmp.replace('\\', '/'); <FIXE>
<FIXS> java.lang.String s = "test message"; executeQuery(); javax.servlet.RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/all_users_table.jsp"); request.setAttribute("usersList", usersList); request.setAttribute("tm", s); dispatcher.forward(request, response); <FIXE>
<FIXS> org.junit.Assert.assertThat(parametersExtractor.extract(java.util.Arrays.asList(com.thoughtworks.gauge.execution.ParameterTestHelpers.aParameter(), com.thoughtworks.gauge.execution.ParameterTestHelpers.aParameter()), com.thoughtworks.gauge.test.TestHelpers.array(com.thoughtworks.gauge.test.TestValues.ANY_TYPE, com.thoughtworks.gauge.test.TestValues.ANY_TYPE)), java.util.Arrays.asList(com.thoughtworks.gauge.test.Matchers.containsOnly(org.hamcrest.CoreMatchers.sameInstance(com.thoughtworks.gauge.test.TestValues.SPECIFIC_VALUE), org.hamcrest.CoreMatchers.sameInstance(com.thoughtworks.gauge.execution.parameters.ParametersExtractorTest.ANOTHER_SPECIFIC_VALUE)))); <FIXE>
<FIXS> if (managedURL == null) { <FIXE> <FIXS> } if (!(getExcludeUnlistedClasses())) { <FIXE>
<FIXS> <FIXE> <FIXS> doc = appendObjectType(objectType, doc); if (doc != null) { scouter.server.util.XmlUtil.writeXmlFileWithIndent(doc, customFile, 2); xmlCustomContent = scouter.util.FileUtil.readAll(customFile); reloadEngine(); return true; } <FIXE>
<FIXS> <FIXE> <FIXS> render(lf); <FIXE>
<FIXS> com.cordova.plugin.android.fingerprintauth.FingerprintAuth.mCallbackContext = callbackContext; <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> private void nextLevel() { <FIXE>
<FIXS> java.lang.String category = categories.get(i); <FIXE>
<FIXS> throw new java.lang.IllegalArgumentException((("Class not in context [" + (clazz.getName())) + "]")); <FIXE>
<FIXS> return timeElapsed / (nyc.c4q.jonathancolon.inContaq.smsreminder.ContactNotificationService.ONE_DAY); <FIXE>
<FIXS> if (isAtWorkPlace) { android.widget.Toast.makeText(getBaseContext(), "Wyszedłeś z pracy", Toast.LENGTH_LONG).show(); isAtWorkPlace = false; com.example.mierol.worktime_tracker.DataBaseManagment.saveEndEventWorkPlace(getApplicationContext(), login, localizationID); } <FIXE>
<FIXS> student = new model.Student("Jacó Mario Souza", cpf, rg, date, email, address, phone1, phone2, "Milene Souza Medeiros", "Mário Souza Filho", 1); <FIXE>
<FIXS> public void recieveMessage(java.lang.String username, java.lang.Object message, java.util.Calendar time) { <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> assert null != contextInstance; <FIXE>
<FIXS> <FIXE>
<FIXS> java.util.Optional<com.jordan30001.twitch.api.video.Video> ret = java.util.Optional.ofNullable(newVideoInstance(id)); <FIXE>
<FIXS> java.io.File file = new java.io.File(tempPath); <FIXE> <FIXS> } catch (java.io.IOException e) { <FIXE>
<FIXS> <FIXE> <FIXS> if (tempObstacle.getBound().intersects(head)) { <FIXE> <FIXS> } <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> if ((a.getF()) < (b.getF())) return -1; <FIXE> <FIXS> <FIXE>
<FIXS> public static jace.app.SyntacticAnalysis.ParseTreeNode analyze(java.lang.String code) { <FIXE>
<FIXS> if ((siteIds.size()) == 0) return new java.util.ArrayList<com.museum.db.model.Activity>(); <FIXE>
<FIXS> me.prettyprint.hector.api.mutation.Mutator<java.lang.String> m = createMutator(keyspace, serializer); <FIXE>
<FIXS> return org.apache.avro.Schema.createUnion(com.google.common.collect.ImmutableList.of(org.schedoscope.export.kafka.avro.HCatToAvroSchemaConverter.nullSchema, schema)); <FIXE>
<FIXS> if ((collection.getId()) == 0) { <FIXE> <FIXS> }else if ((collection.getId()) != id) { return javax.ws.rs.core.Response.status(Response.Status.BAD_REQUEST).build(); } <FIXE>
<FIXS> int count = c.getCount(); <FIXE> <FIXS> return count; <FIXE>
<FIXS> <FIXE> <FIXS> return com.google.common.primitives.Bytes.concat(com.google.common.primitives.Ints.toByteArray(1), lastByteOfConvertedMessageType); <FIXE>
<FIXS> walk(root, new RBTree.IndexedConsumer<RBTree.RBNode>(( node, index) -> keys[index] = node.key)); <FIXE>
<FIXS> if ((i) >= 1) { (i)--; java.lang.String price = (" قیمت : " + ((i) * 15)) + " تومان "; <FIXE> <FIXS> textViewQuantity.setText(((i) + " پرس ")); <FIXE>
<FIXS> node.setTime(0.0); }else { <FIXE> <FIXS> <FIXE>
<FIXS> super.setEnabled(enabled); if (!enabled) { <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> UpdateBoardBasedOnAnswer(); <FIXE> <FIXS> UpdateBoardBasedOnAnswer(); <FIXE>
<FIXS> fontRendererObj.drawString((invPlayer.player.capabilities.isCreativeMode ? net.minecraft.client.resources.I18n.format("container.lootChest.editing") : net.minecraft.client.resources.I18n.format(invLootChest.getInventoryName())), 8, 6, 4210752); <FIXE>
<FIXS> if (currentShutdownCron.getExpressionSummary().equals(cronExpression.getExpressionSummary())) { <FIXE> <FIXS> org.rl.scheduled.turnoff.QuartzController.reschedulePowerOffJob(cronExpression); <FIXE> <FIXS> <FIXE>
<FIXS> corh = corh.toUpperCase(); <FIXE>
<FIXS> javax.naming.InitialContext context = new javax.naming.InitialContext(); <FIXE> <FIXS> <FIXE>
<FIXS> this.setName(resultsArray[3].trim()); <FIXE>
<FIXS> statOutput.append(stat.formatOutput(detailed)); <FIXE>
<FIXS> <FIXE>
<FIXS> queryModel.makeQuery(queryModel.lastSeen, ref[0], adapter, refreshLayout); <FIXE>
<FIXS> if (state.equals(State.RIGHT)) { <FIXE> <FIXS> if (state.equals(State.LEFT)) { <FIXE>
<FIXS> mChangeDimension = 0; <FIXE>
<FIXS> if ((folderList != null) && ((folderList.size()) != 0)) { for (com.aimluck.eip.cayenne.om.portlet.EipTMailFolder folder : folderList) { com.aimluck.eip.webmail.WebMailFolderResultData data = new com.aimluck.eip.webmail.WebMailFolderResultData(folder); list.add(data); } <FIXE>
<FIXS> super.createContents(parent); <FIXE> <FIXS> <FIXE>
<FIXS> driver.quit(); <FIXE> <FIXS> <FIXE>
<FIXS> return ((float) (java.lang.Math.toDegrees(java.lang.Math.atan2(((this.pos_y) - (object.pos_y)), ((this.pos_x) - (object.pos_x)))))) + 90; <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> if ((enteredInductanceValue.getText().toString().equals("")) || (enteredInductancePower.getText().toString().equals(""))) { <FIXE>
<FIXS> public static net.dandielo.core.items.serialize.ItemFlag init(net.dandielo.core.items.dItem item, java.lang.Class<? extends net.dandielo.core.items.serialize.ItemFlag> clazz) { <FIXE> <FIXS> net.dandielo.core.items.serialize.ItemFlag itemflag = clazz.getConstructor(net.dandielo.core.items.dItem.class, java.lang.String.class).newInstance(item, attr.key()); <FIXE>
<FIXS> if (((linearFactory) != null) && (linearFactory.equals(factory))) { <FIXE> <FIXS> if (((radialFactory) != null) && (radialFactory.equals(factory))) { <FIXE>
<FIXS> return removedTask + (Task.TaskHandler.MESSAGE_DELETE_TASK); <FIXE>
<FIXS> return firstInstanceOfWord >= 0; <FIXE>
<FIXS> opr.setResultCallback(new com.google.android.gms.common.api.ResultCallback<com.google.android.gms.auth.api.signin.GoogleSignInResult>() { @java.lang.Override public void onResult(com.google.android.gms.auth.api.signin.GoogleSignInResult googleSignInResult) { handleSignInResult(googleSignInResult); } }); <FIXE>
<FIXS> new husacct.analyse.task.analyse.java.analysing.CompilationUnitAnalyser(compilationUnit, sourceFilePath, javaParser); <FIXE>
<FIXS> <FIXE>
<FIXS> setSupportActionBar(toolbar); mTitle = ((android.widget.TextView) (findViewById(R.id.title))); <FIXE> <FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> float totalAnswers = answers.size(); float correctAnswers = 0; <FIXE> <FIXS> correctAnswers += 1; <FIXE> <FIXS> return java.lang.Math.round(((correctAnswers / totalAnswers) * 100)); <FIXE>
<FIXS> <FIXE>
<FIXS> org.processmining.plugins.fuzzyminer.FuzzyMinerSettings settings = new org.processmining.plugins.fuzzyminer.FuzzyMinerSettings(); <FIXE>
<FIXS> <FIXE>
<FIXS> for (int i = 0; i < (array.length); ++i) { com.kylinolap.common.util.BytesUtil.writeVInt(array[i], out); } <FIXE>
<FIXS> <FIXE> <FIXS> noteUpdate(key, value, oldValue); return oldValue; <FIXE>
<FIXS> mat.setDiffuseColor(new javafx.scene.paint.Color(dif.getRed(), dif.getGreen(), dif.getBlue(), 1.0)); <FIXE>
<FIXS> <FIXE> <FIXS> java.awt.Graphics2D g2 = bfImage.createGraphics(); g2.setColor(activeColor); <FIXE>
<FIXS> eventDispatcher.dispatchEvent(new com.reactnative.photoview.ImageEvent(getId(), ImageEvent.ON_LOAD)); eventDispatcher.dispatchEvent(new com.reactnative.photoview.ImageEvent(getId(), ImageEvent.ON_LOAD_END)); <FIXE>
<FIXS> <FIXE>
<FIXS> public static void write(java.nio.file.Path reportingPath, double value, long ts) throws java.io.IOException { <FIXE> <FIXS> <FIXE>
<FIXS> bytecodes.add(new wyjc.Bytecode.Load(c.operand(0), convertType(c.type()))); <FIXE> <FIXS> bytecodes.add(new wyjc.Bytecode.Store(c.target(), convertType(c.result))); <FIXE>
<FIXS> processPerms(i, collector); <FIXE>
<FIXS> private static boolean isLeafVersionDirectory(java.io.File subDirectory) { <FIXE>
<FIXS> intent.putExtra("position", itemPosition); <FIXE>
<FIXS> recentPhotosObservable = flickrDomainService.getRecentPhotos(this).cache().observeOn(rx.android.schedulers.AndroidSchedulers.mainThread()); <FIXE>
<FIXS> buffer.addAll(java.util.Arrays.asList(toScan.fields()).stream().filter(com.sporniket.libre.javabeans.core.pojo.encapsulator.FieldDocUtils.IS_ACCESSIBLE_FIELD).collect(java.util.stream.Collectors.toList())); <FIXE> <FIXS> <FIXE>
<FIXS> org.cloudish.borg.model.Host h = new org.cloudish.borg.model.Host(0, 0.5, 0.5, null, new java.util.HashMap<>()); <FIXE>
<FIXS> new inscriptions_gui.Modifier.FrameModifierEquipeIG(equipe); <FIXE>
<FIXS> model.markOnlyThis(day, level, storageDonation.getPlayer()); <FIXE>
<FIXS> <FIXE>
<FIXS> org.nd4j.linalg.jcublas.buffer.JCudaBuffer buffer = new org.nd4j.linalg.jcublas.buffer.CudaDoubleDataBuffer(1); curandGenerateUniformDouble(generator, buffer.pointer(), 1); <FIXE>
<FIXS> <FIXE> <FIXS> tabAdaptersCache.reloadAdapters(tabs, null); <FIXE>
<FIXS> while (((current.getLeafs().size()) <= 0) && ((current.getChilds().size()) <= 1)) { <FIXE>
<FIXS> <FIXE>
<FIXS> torm.add(entry); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> for (int i = 0; i < (points.size()); i++) { java.lang.System.out.println(points.get(i)); <FIXE>
<FIXS> <FIXE>
<FIXS> private io.minio.HttpResponse executePut(java.lang.String bucketName, java.lang.String objectName, java.util.Map<java.lang.String, java.lang.String> headerMap, java.util.Map<java.lang.String, java.lang.String> queryParamMap, java.lang.String region, byte[] data, int length) throws io.minio.ErrorResponseException, io.minio.InternalException, io.minio.InvalidBucketNameException, io.minio.NoResponseException, java.io.IOException, org.xmlpull.v1.XmlPullParserException { return execute(Method.PUT, region, bucketName, objectName, headerMap, queryParamMap, data, length); <FIXE>
<FIXS> if ((mOnComboListener) != null) { mView.setOnClickListener(new android.view.View.OnClickListener() { @java.lang.Override public void onClick(android.view.View v) { long thisClickTime = java.lang.System.currentTimeMillis(); if ((thisClickTime - (lastClickTime)) <= (mMaxInterval)) { (mComboCount)++; }else { mComboCount = 0; } lastClickTime = thisClickTime; mOnComboListener.onCombo(v, mComboCount); <FIXE> <FIXS> }); } <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> assert true; <FIXE>
<FIXS> return criteria.setFirstResult(((ee.rs.repository.establishment.HbnEstablishmentRepository.RESULTS_PER_PAGE) * page)).setMaxResults(((ee.rs.repository.establishment.HbnEstablishmentRepository.RESULTS_PER_PAGE) + 1)); <FIXE>
<FIXS> java.lang.System.out.println(message); <FIXE>
<FIXS> public void checkTripLengthDistribution(org.apache.commons.math.stat.Frequency travelTimes, double alpha, double gamma, java.lang.String fileName, double step) { <FIXE>
<FIXS> if (!(buyer.canAfford(cost))) { <FIXE> <FIXS> currentMessage = "Transaction Successful! :D"; <FIXE> <FIXS> <FIXE>
<FIXS> if (maybe == null) { return new java.util.ArrayList<>(); } <FIXE>
<FIXS> <FIXE>
<FIXS> gardenHolders.add(createGardenHolder(gardens.get(i), i)); <FIXE>
<FIXS> } while (((worldBlockAir()) || (doesSchematicBlockEqualWorldBlock())) && (count < (com.minecolonies.configuration.Configurations.maxBlocksCheckedByBuilder)) ); <FIXE>
<FIXS> mCallsFinished = 0; <FIXE>
<FIXS> private boolean saveToFile(java.io.File filename, carelender.model.EventList eventList) { <FIXE>
<FIXS> model.updateFilteredListToShowAll(); <FIXE> <FIXS> <FIXE>
<FIXS> _rf = new chronos.pdc.registry.RegistryFactory(_skedder); <FIXE>
<FIXS> public org.silverpeas.core.contribution.contentcontainer.content.GlobalSilverContent getGlobalSilverContent(org.silverpeas.core.contribution.contentcontainer.content.SilverContentInterface sci) { org.silverpeas.core.contribution.contentcontainer.content.GlobalSilverContent gsc = super.getGlobalSilverContent(sci); <FIXE>
<FIXS> me.jamiethompson.forgeaccount.Files.CurrentManager.updateCurrentAccount(this.account, me.jamiethompson.forgeaccount.TabActivity.GeneratorFragment.context); <FIXE>
<FIXS> public java.util.Map<java.lang.String, bg.registryagency.model.BrraCompany> parseAll() throws javax.xml.bind.JAXBException { <FIXE> <FIXS> <FIXE>
<FIXS> java.lang.System.out.println(ph.kana.csvv.util.Constants.VERSION); java.lang.System.exit(0); <FIXE>
<FIXS> <FIXE>
<FIXS> return net.barik.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(cell.getCachedFormulaResultType()); <FIXE>
<FIXS> protected void obtainTreeLock(long timeout) throws org.opennms.netmgt.poller.pollables.LockUnavailable { <FIXE> <FIXS> obtainTreeLock(); <FIXE>
<FIXS> if (aold[poso].getName().equals(deldir.getName())) <FIXE>
<FIXS> if ((event.getPlayer()) == null) return ; <FIXE> <FIXS> <FIXE>
<FIXS> java.lang.String name = org.wit.android.helpers.ContactHelper.getContact(getActivity(), data); emailAddress = org.wit.android.helpers.ContactHelper.getEmail(getActivity(), data); <FIXE>
<FIXS> if ((mDragView) != null) { ss.dragViewPosition = mDragView.getTop(); } if ((mHeaderView) != null) { ss.headerAlpha = mHeaderView.getAlpha(); ss.headerTranslationY = mHeaderView.getTranslationY(); } <FIXE>
<FIXS> java.util.Collection<org.eclipse.core.resources.IMarkerDelta> markerWithErrors = com.google.common.collect.Collections2.filter(java.util.Arrays.asList(event.findMarkerDeltas(null, true)), Predicates.isVortoModelWithMarkerError); <FIXE>
<FIXS> returningTasks.add(taskToAddReminder); <FIXE>
<FIXS> <FIXE> <FIXS> in.mayurshah.util.EnvVarToFile envVarToFile = new in.mayurshah.util.EnvVarToFile(); <FIXE>
<FIXS> fillPane(); <FIXE>
<FIXS> while (!(current.equals(start))) { <FIXE>
<FIXS> return ((xdist + ydist) / 4) - (1.41421356237 * (java.lang.Math.min(xdist, ydist))); <FIXE>
<FIXS> timber.log.Timber.e((((("Error mapping json to class '" + type) + "' with contents: '") + content) + "'")); <FIXE>
<FIXS> if (com.android.internal.actions.ActionUtils.isCapKeyDevice(ctx)) { <FIXE>
<FIXS> if (data.containsIngoing(next)) { <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> object = webService.GetLead(empcode); <FIXE>
<FIXS> <FIXE> <FIXS> final java.util.List<sample.auth.models.ErrorResponse> errors = new java.util.ArrayList<>(); <FIXE>
<FIXS> <FIXE>
<FIXS> private boolean IncrementArray(int[] current, int[] numDigits) { <FIXE>
<FIXS> if (com.havrylyuk.weather.util.PreferencesHelper.getInstance().isUseCurrentLocation(this)) { <FIXE>
<FIXS> templateDirectoryRoot = new java.io.File(templateDir); <FIXE> <FIXS> org.spdx.tools.RdfToHtml.rdfToHtml(doc, templateDirectoryRoot, docHtmlFile, licenseHtmlFile, docFilesHtmlFile); <FIXE>
<FIXS> startActivity(new android.content.Intent(this, dom133.pl.updater.VersionChecker.class)); <FIXE>
<FIXS> public void moveUpOperations(org.eclipse.uml2.uml.Operation currentOperation, java.util.Collection<org.eclipse.uml2.uml.Operation> operationsToMove) { <FIXE>
<FIXS> return ((("" + (toString(this._resourceSpecification_))) + (toString(this._block_))) + (toString(this._catchClause_))) + (toString(this._finally_)); <FIXE>
<FIXS> private void addAnimationTabPanel(int width, int height, int frames) { <FIXE>
<FIXS> java.lang.String id) throws java.lang.Exception { <FIXE> <FIXS> retVal = invoiceDao.findById(java.lang.Long.parseLong(id)); if (retVal.getSupplierTIN().equals(PIB)) return retVal; <FIXE>
<FIXS> new org.openforis.collect.model.RecordUpdater().initializeRecord(collectRecord); <FIXE>
<FIXS> java.sql.ResultSet rs = db.query((((("SELECT data FROM " + (table)) + " WHERE data='") + (zutil.converters.Converter.toBytes(arg0))) + "' LIMIT 1")); <FIXE>
<FIXS> this.parameters = null; <FIXE>
<FIXS> <FIXE> <FIXS> usedItem.modifyStats(avatar); avatarInventory.removeItem(usedItem); <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> java.lang.String outfile = (('"' + (workPath)) + (fileToRun.isEmpty() ? "runit" : fileToRun)) + '"'; <FIXE>
<FIXS> <FIXE>
<FIXS> if (drawer.isDrawerOpen(GravityCompat.START)) { drawer.closeDrawer(GravityCompat.START); return ; } <FIXE> <FIXS> return ; <FIXE> <FIXS> super.onBackPressed(); <FIXE>
<FIXS> if ((aDropState > 0) && (aDropState <= (GregTech_API.sBlockOresCustom.length))) <FIXE>
<FIXS> solution.score += eval.getGameStateScore(gs, i); <FIXE>
<FIXS> <FIXE>
<FIXS> return size + ((host.getInventorySize().getCollumn()) * (host.getInventorySize().getRow())); <FIXE>
<FIXS> case 0 : <FIXE>
<FIXS> if (((source.length()) >= toRemoveLength) && (toRemove.equals(source.substring(0, toRemoveLength)))) { <FIXE>
<FIXS> <FIXE>
<FIXS> return data + ","; <FIXE>
<FIXS> java.io.InputStream stream; <FIXE>
<FIXS> paramTypes.add(convertType(pt)); <FIXE> <FIXS> wyjc.JvmType rt = convertType(ft.ret()); <FIXE>
<FIXS> if (((mCurrentRatio) == (com.meitu.camerademo.CameraFragment.CAMERA_RATIO_4_3)) || ((mCurrentRatio) == (com.meitu.camerademo.CameraFragment.CAMERA_RATIO_FULL))) { changePreviewSize(); }else { resetCameraPreviewSize(); } <FIXE>
<FIXS> return getClass().getConstructor(clientType, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class, type).newInstance(client, namespace, name, enabled, item); <FIXE>
<FIXS> if ((getSupportFragmentManager().findFragmentByTag(com.whiterabbit.pisabike.screens.main.MainActivity.MAP_TAG)) != null) { if ((getSupportFragmentManager().getBackStackEntryCount()) > 0) { getSupportFragmentManager().popBackStack(); } <FIXE>
<FIXS> if ((screenLocation == null) || ((screenLocation.y) < (mTopPadding))) { <FIXE>
<FIXS> java.util.List<com.rama.eva.pojo.PdfReport002Bean> list = reportService.findForReport002(year, yearSeq, userName); <FIXE>
<FIXS> first = false; <FIXE>
<FIXS> this.availability -= no; this.booked += no; <FIXE>
<FIXS> <FIXE>
<FIXS> excute(testcase.Object_Description, testcase.Operation_ClickWait, "Cities"); <FIXE>
<FIXS> if (get(i).equals(object)) { <FIXE>
<FIXS> t = "1"; else t = "0"; <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> return retval + i; <FIXE> <FIXS> return -1; <FIXE>
<FIXS> void writeArrayToFile(byte[][] state, java.io.PrintWriter p) throws java.io.IOException { <FIXE> <FIXS> p.println("\n"); <FIXE>
<FIXS> public static void deleteUselessImage(java.util.ArrayList<java.lang.String> arrayList) { <FIXE>
<FIXS> if ((this.connect) == true) { <FIXE>
<FIXS> if (stream == null) { throw new org.apache.velocity.exception.ResourceNotFoundException(name); } <FIXE>
<FIXS> command.add(1, "-9"); <FIXE>
<FIXS> for (net.somethingdreadful.MAL.api.MALModels.History history : histories) { historyArrayList.add(history.createBaseModel(username)); } <FIXE>
<FIXS> musiclist.setAdapter(new com.salt.saltmusic.Home.MusicListAdapter()); <FIXE>
<FIXS> if ((otherObj instanceof com.valkryst.VRoguelike.components.PositionComponent) == false) { <FIXE>
<FIXS> private int getFirstPlayerNum(final com.java.laiy.model.Player firstPlayer) { <FIXE>
<FIXS> <FIXE>
<FIXS> if (mFieldType.equals(StringUtils.DOUBLE)) { <FIXE>
<FIXS> return 0; <FIXE>
<FIXS> return new amt.main.levels.Player(x, y, handler); <FIXE>
<FIXS> if (o2 == null) return 1; <FIXE>
<FIXS> <FIXE>
<FIXS> if (!(auth.equals(":"))) { byte[] encodedAuth = org.apache.commons.codec.binary.Base64.encodeBase64(auth.getBytes(java.nio.charset.Charset.forName("US-ASCII"))); java.lang.String authHeader = "Basic " + (new java.lang.String(encodedAuth)); method.setHeader(HttpHeaders.AUTHORIZATION, authHeader); } <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> org.hibernate.Criteria criteria = session.createCriteria(vn.com.hiringviet.model.Account.class).add(org.hibernate.criterion.Restrictions.eq("status", StatusEnum.ACTIVE)).add(org.hibernate.criterion.Restrictions.eq("email", email)).add(org.hibernate.criterion.Restrictions.eq("password", password)); <FIXE>
<FIXS> l = new labellingMachine_2.Sticker(config, 2, false, (((minLSteps) - ((labelDelay) + (config.Lsteps))) - (round(random((-(config.ILLesteps)), config.ILLesteps))))); <FIXE>
<FIXS> break; <FIXE> <FIXS> break; <FIXE> <FIXS> break; <FIXE>
<FIXS> if (file == null) { return new java.util.Date(0L); } <FIXE>
<FIXS> <FIXE>
<FIXS> if (position < 0) return 0; <FIXE>
<FIXS> if (!(recursion_guard_(b, l, "Expression10"))) <FIXE> <FIXS> com.intellij.lang.PsiBuilder.Marker m = enter_section_(b); <FIXE> <FIXS> exit_section_(b, m, null, r); <FIXE>
<FIXS> it.uniud.ailab.dcore.launchers.Launcher.analyzeDir(it.uniud.ailab.dcore.launchers.Launcher.inputPath); <FIXE>
<FIXS> if ((!(this.inventory.contains(armour))) && (armour != null)) { <FIXE>
<FIXS> <FIXE> <FIXS> if (((dataKitHandler) != null) && (dataKitHandler.isConnected())) <FIXE> <FIXS> if ((dataKitHandler) != null) dataKitHandler.close(); <FIXE>
<FIXS> if (vals == null) { <FIXE> <FIXS> }else { return new java.util.ArrayList<>(vals); } <FIXE>
<FIXS> java.util.Set<java.lang.Object> newList = com.google.common.collect.Sets.newHashSet(); <FIXE> <FIXS> <FIXE>
<FIXS> return null; <FIXE>
<FIXS> if ((multiplier <= abs) && (abs < (multiplier * 1000))) <FIXE>
<FIXS> public static void showOptionsDialog(android.content.Context context, java.lang.String title, java.lang.CharSequence[] options, boolean cancelable, android.content.DialogInterface.OnClickListener listener) { <FIXE> <FIXS> if (title != null) builder.setTitle(title); <FIXE>
<FIXS> locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, (1000 * 1), 1, locationListener); <FIXE>
<FIXS> by.vshkl.translate2.util.DialogUtils.showLocationTurnOnDialog(this); <FIXE>
<FIXS> this.oil = new com.spilledmango.spmtech.fluids.SPMFluid(new com.spilledmango.spmtech.fluids.SPMFluidBase("oil", 883, 300, 5000, false), net.minecraft.block.material.MapColor.blackColor); this.sulfuricAcid = new com.spilledmango.spmtech.fluids.SPMFluid(new com.spilledmango.spmtech.fluids.SPMFluidBase("sulfuric_acid", 1840, 300, 2000, false), net.minecraft.block.material.MapColor.snowColor); <FIXE>
<FIXS> else if (speedLimit < ((controller.getReferenceSpeed()) / 2)) user.setAlarmState(true); <FIXE>
<FIXS> public model.Player getWinningPlayer(model.Card winningCard) { <FIXE>
<FIXS> java.lang.System.out.println(sessionManager.checkLogin()); <FIXE>
<FIXS> <FIXE> <FIXS> br.ol.pacman.actor.Pacman.donePath = false; <FIXE>
<FIXS> ca.rmen.android.frcwidget.FRCWidgetScheduler.getInstance(this).schedule(this); <FIXE>
<FIXS> setText(textViewHash, hashString); setText(textViewHashAlgorithm, R.string.hash_algorithm, algorithm); setText(textViewHashProvider, R.string.hash_provider, provider); <FIXE>
<FIXS> try (java.io.PrintWriter writer = new java.io.PrintWriter(new java.io.OutputStreamWriter(new java.io.FileOutputStream(file), charset))) { <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> org.zanata.model.HApplicationConfiguration value = applicationConfigurationDAO.findByKey(property.getKey()); <FIXE> <FIXS> org.zanata.rest.service.ServerConfigurationService.persistApplicationConfig(property.getKey(), value, property.get(), applicationConfigurationDAO); <FIXE>
<FIXS> if (module != null) { com.intellij.openapi.roots.ModuleRootManager _instance = com.intellij.openapi.roots.ModuleRootManager.getInstance(module); final com.intellij.openapi.roots.ModifiableRootModel model = _instance.getModifiableModel(); this.libraryManager.ensureXtendLibAvailable(model, module, file); model.commit(); } <FIXE>
<FIXS> <FIXE>
<FIXS> if ((o == null) || ((getClass()) != (o.getClass()))) { <FIXE> <FIXS> return ((id) != null) && (id.equals(that.id)); <FIXE>
<FIXS> Bazell spawnedBazell = new Bazell(ownedBy.getControlerIndex(), basePosition); <FIXE>
<FIXS> <FIXE>
<FIXS> if (null != midiFileList) { for (java.lang.String aMidiFile : midiFileList) { try { projects.add(midiToProjectConverter.convertMidiFileToProject(new java.io.File(org.catrobat.musicdroid.pocketmusic.note.midi.ProjectToMidiConverter.MIDI_FOLDER, aMidiFile))); } catch (org.catrobat.musicdroid.pocketmusic.note.midi.MidiException | java.io.IOException e) { e.printStackTrace(); } <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> public void checkAttributeValue(cz.metacentrum.perun.core.api.PerunSession sess, cz.metacentrum.perun.core.api.User user, cz.metacentrum.perun.core.api.Attribute attribute) throws cz.metacentrum.perun.core.api.exceptions.InternalErrorException, cz.metacentrum.perun.core.api.exceptions.WrongAttributeValueException, cz.metacentrum.perun.core.api.exceptions.WrongReferenceAttributeValueException { <FIXE> <FIXS> <FIXE>
<FIXS> int i = 0; while (i < (solver.ForwardsChaining.entails.size())) { <FIXE> <FIXS> i = i + 1; } <FIXE>
<FIXS> <FIXE> <FIXS> webSocketService.removeSession(session); com.web.websocket.WebSocketHandler.logger.debug(("Close session, id = " + (session.getId()))); <FIXE>
<FIXS> java.lang.String text = mItemList.get(position).second; <FIXE>
<FIXS> eventSource = new tylerjroach.com.eventsource_android.EventSource(new java.net.URI(targetUrl), new java.net.URI(myApi), new com.streamdataio.android.stockmarket.StockMarketList.SSEHandler(), headers); <FIXE>
<FIXS> if ((dx > 0) && (!(leftAble))) { <FIXE> <FIXS> if ((dx < 0) && (!(rightAble))) { <FIXE>
<FIXS> <FIXE>
<FIXS> response.setPayload((parameter != null ? parameter.getValue() : null)); <FIXE>
<FIXS> public org.springframework.web.servlet.ModelAndView delete(@org.springframework.web.bind.annotation.RequestParam(value = "id") <FIXE>
<FIXS> controllers.RateCriterion rateCs = controllers.RateCriterion.findById(id); if (rateCs != null) { rateCs.delete(); <FIXE>
<FIXS> spoon.reflect.reference.CtTypeReference<T> result = getTypeReference(ref); return result; <FIXE>
<FIXS> <FIXE>
<FIXS> slideOutUpperBodyLayout(); <FIXE>
<FIXS> boolean checkBluetooth() { <FIXE> <FIXS> return true; <FIXE> <FIXS> return false; <FIXE>
<FIXS> <FIXE>
<FIXS> private int boxCheckHelper(int[][] grid, int row, int col) { <FIXE>
<FIXS> }else if (columnType.toLowerCase().equals("integer")) { this.columnType = "INT"; }else { this.columnType = columnType; } <FIXE>
<FIXS> if (!(tag.getName().equals(tag.getName().toLowerCase()))) { <FIXE>
<FIXS> public java.lang.Integer insert(java.util.Random rg, java.util.ArrayList<java.lang.Integer> ind, int noi) { <FIXE>
<FIXS> return a.getOfficialColor(); <FIXE>
<FIXS> java.util.List<java.lang.String> list = com.github.obase.kit.StringKit.split2List(val, sep, ignoreEmptyTokens); return list == null ? null : list.toArray(new java.lang.String[list.size()]); <FIXE>
<FIXS> return unlinkSignWithUsername(sign.getLine(1), (i + 1)); <FIXE>
<FIXS> mMyAdapter = new com.alphabet.alphabetsdk.CommonAdapterActivity.MyAdapter(this, mBeanList, new int[]{ R.layout.common_adpter_item }); <FIXE>
<FIXS> clientSocket.close(); <FIXE> <FIXS> <FIXE>
<FIXS> return "Best: " + "0"; <FIXE>
<FIXS> sort(arr, comparator, (p + 1), to); <FIXE>
<FIXS> java.util.List<org.opendaylight.yang.gen.v1.urn.opendaylight.table.types.rev131026.table.features.table.features.table.properties.TableFeatureProperties> tableFeaturePropertiesList = getTableFeatureProperties(nodeId, table.getId()); <FIXE>
<FIXS> protected void dfTraverse(java.lang.String currentVertex, java.util.Set<java.lang.String> visited) { visited.add(currentVertex); <FIXE> <FIXS> if (!(visited.contains(current.terminal))) <FIXE>
<FIXS> java.util.List<uk.ac.ebi.eva.lib.utils.RepositoryFilter> filters = uk.ac.ebi.eva.lib.utils.RepositoryFilter.getRepositoryFilters(null, ">0.5", null, null, null); <FIXE>
<FIXS> private void setNodeRecursiveSecure(final ca.nrc.cadc.beacon.web.resources.Node newNode) throws java.io.IOException { <FIXE> <FIXS> javax.security.auth.Subject.doAs(generateVOSpaceUser(), new java.security.PrivilegedExceptionAction<java.lang.Void>() { <FIXE> <FIXS> public java.lang.Void run() throws java.lang.Exception { <FIXE> <FIXS> return null; <FIXE>
<FIXS> if ((tab) == 1) { leftNav.setVisibility(View.INVISIBLE); rightNav.setVisibility(View.VISIBLE); <FIXE> <FIXS> if ((tab) > 0) { (tab)--; vpPager.setCurrentItem(tab); }else if ((tab) == 0) { vpPager.setCurrentItem(tab); } <FIXE>
<FIXS> <FIXE>
<FIXS> if (((description) != null) && ((description.trim()) != "")) { return ((((clientName) + " - ") + (Name)) + " - ") + (description); } return ((clientName) + " - ") + (Name); <FIXE>
<FIXS> private void defendBase() { <FIXE> <FIXS> placeDefenceAtBase(2); <FIXE> <FIXS> placeDefenceAtBase(1); <FIXE>
<FIXS> public static com.sdsmdg.bookshareapp.BSA.ui.fragments.TutorialFragment newInstance(java.lang.String title, java.lang.String description, int logoId) { <FIXE> <FIXS> <FIXE>
<FIXS> if (t != null) t.printStackTrace(); <FIXE>
<FIXS> <FIXE>
<FIXS> double ans; <FIXE> <FIXS> return java.lang.Double.toString(ans); <FIXE>
<FIXS> if ((g.getStatus().getLives()) == null) { return maxId; } <FIXE>
<FIXS> result.add(map.get(values.get(i))); <FIXE>
<FIXS> selectChild.setVisible(false); <FIXE>
<FIXS> public void parseListReader() throws java.io.IOException { <FIXE> <FIXS> <FIXE>
<FIXS> java.lang.String path = mTargetFile.getStoragePath(); <FIXE>
<FIXS> <FIXE>
<FIXS> android.os.Message message = new android.os.Message(); message.obj = SerialNumber; message.what = com.xgf.inspection.network.logic.AppLogic.SEND_RECORD_FAIL; handler.sendMessage(message); <FIXE>
<FIXS> fireLifeCycleEvent(LifeCyclePhase.BEFORE_STOP); <FIXE> <FIXS> fireLifeCycleEvent(LifeCyclePhase.AFTER_STOP); <FIXE>
<FIXS> org.mockito.Mockito.verify(a, org.mockito.Mockito.times(1)).publicMethod(); <FIXE>
<FIXS> moveInTheAir(); <FIXE> <FIXS> <FIXE>
<FIXS> resourceStatusMonitor.checkChanges(); org.junit.Assert.assertThat(resourceStatusMonitor.wasUnloaded(), org.hamcrest.core.IsEqual.equalTo(false)); <FIXE>
<FIXS> <FIXE>
<FIXS> world = new com.dive.game.World(newObjects, screen, 0.1F, gameState, font); <FIXE>
<FIXS> org.opencps.util.DLFolderUtil._log.error(e); <FIXE>
<FIXS> if (((mShowEmptyView) == null) || ((mShowEmptyView) != showEmpty)) { <FIXE>
<FIXS> if ((!(oldValue.equals(newValue))) || (!(newValue.equals("")))) finalCost(java.lang.Integer.parseInt(newValue)); <FIXE>
<FIXS> return localDateTime.toDateTime(DateTimeZone.UTC); <FIXE>
<FIXS> getSupportActionBar().setTitle(R.string.manual_entry_button); <FIXE>
<FIXS> <FIXE>
<FIXS> tiles[j][i] = ++value; <FIXE>
<FIXS> org.springframework.test.web.servlet.ResultActions resultActions = mockMvc.perform(putJson(java.lang.String.format("/actions/case/%s/cancel", uk.gov.ons.ctp.response.action.endpoint.ActionEndpointUnitTest.NON_EXISTING_ID), "")); resultActions.andExpect(status().isNotFound()).andExpect(handler().handlerType(uk.gov.ons.ctp.response.action.endpoint.ActionEndpoint.class)).andExpect(handler().methodName("cancelActions")).andExpect(jsonPath("$.error.code", org.hamcrest.CoreMatchers.is(CTPException.Fault.RESOURCE_NOT_FOUND.name()))); <FIXE>
<FIXS> setState(org.apache.kafka.streams.KafkaStreams.State.RUNNING); for (final org.apache.kafka.streams.processor.internals.StreamThread thread : threads) { <FIXE> <FIXS> } <FIXE>
<FIXS> return match.find() ? common.Util.removeHTMLTags(match.group(1)) : ""; <FIXE>
<FIXS> (stepsToDo)--; <FIXE> <FIXS> <FIXE>
<FIXS> if ((!(this.getBaseUnit().equals(retrievedBaseUnit))) && (!(retrievedBaseUnit.getName().equalsIgnoreCase(com.example.unitconverter.Unit.UNKNOWN_UNIT_NAME)))) { <FIXE>
<FIXS> ensureParentsByMerge(datastore, path, writeTransaction, schemaContext); <FIXE>
<FIXS> <FIXE>
<FIXS> if (((MIN_COVER_PERCENTAGE) <= coverPercentage) && (coverPercentage <= (MAX_COVER_PERCENTAGE))) { <FIXE> <FIXS> return 1.0 - (java.lang.Math.sqrt((coverPercentage - (MAX_COVER_PERCENTAGE)))); <FIXE>
<FIXS> public void handle(@android.support.annotation.NonNull de.westnordost.osmapi.map.data.Element element, @android.support.annotation.Nullable de.westnordost.streetcomplete.data.osm.ElementGeometry geometry) { if (geometry == null) return ; <FIXE>
<FIXS> if ((sb.length()) > 0) { sb.append('\n'); } sb.append(s); <FIXE>
<FIXS> <FIXE>
<FIXS> startDateTime = getNextRecurringDateTime(startDateTime); endDateTime = getNextRecurringDateTime(endDateTime); <FIXE> <FIXS> startDateTime = startDateTime.plusDays(days); endDateTime = endDateTime.plusDays(days); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> request = new com.arangodb.velocystream.Request(db, com.arangodb.velocystream.RequestType.HEAD, executor.createPath(ArangoDBConstants.PATH_API_DOCUMENT, executor.createDocumentHandle(name, key))); <FIXE>
<FIXS> <FIXE>
<FIXS> net.mischneider.MSREventBridgeEventReceiver receiver = ((net.mischneider.MSREventBridgeEventReceiver) (view)); <FIXE>
<FIXS> public boolean add(T value) { if ((size) == 0) { start = new LNode(value); end = start; }else { end.setNext(new LNode(value)); end = end.getNext(); <FIXE> <FIXS> (size)++; return true; <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> first = null; size = 0; <FIXE>
<FIXS> java.lang.System.out.println(path); <FIXE>
<FIXS> if (result >= 0) <FIXE>
<FIXS> <FIXE>
<FIXS> assert file != null; <FIXE>
<FIXS> java.util.ArrayList<java.lang.String> parseHyperlinks(java.lang.String url) { <FIXE> <FIXS> java.util.ArrayList<java.lang.String> storedLinks = new java.util.ArrayList<java.lang.String>(); <FIXE> <FIXS> <FIXE> <FIXS> } catch (java.io.IOException e) { <FIXE> <FIXS> return storedLinks; <FIXE>
<FIXS> java.util.List<apex.jorje.semantic.compiler.SourceFile> sourceFiles = sources.stream().map(( s) -> apex.jorje.semantic.compiler.SourceFile.builder().setBody(s).build()).collect(java.util.stream.Collectors.toList()); <FIXE>
<FIXS> <FIXE>
<FIXS> if ((v.getId()) == (R.id.bAddTask)) { explicitIntent.putExtra(com.example.bosanac.ljubica.tasky.MainActivity.KEY, "task"); <FIXE>
<FIXS> private budget.Budget getAmonut(java.time.LocalDate date) { <FIXE> <FIXS> return budget; <FIXE> <FIXS> return null; <FIXE>
<FIXS> return (waterInterval) - (days % (waterInterval)); <FIXE>
<FIXS> boolean result = (code / 100) == 2; <FIXE>
<FIXS> outer = db.newQuery(query, 1); <FIXE>
<FIXS> user = null; <FIXE>
<FIXS> where.ge("created", checkTime); <FIXE>
<FIXS> db.delete(); <FIXE>
<FIXS> return ((java.util.Objects.equals(other.id, id)) && ((other.days.size()) == (days.size()))) && (other.days.equals(days)); <FIXE>
<FIXS> <FIXE>
<FIXS> if ((pref) != null) { pref.put("last_input_link", linkFile.getPath()); } <FIXE>
<FIXS> jenkins.model.Jenkins j = jenkins.model.Jenkins.getInstance(); assert j != null; if (j.hasPermission(Jenkins.READ)) { <FIXE>
<FIXS> break; <FIXE>
<FIXS> java.io.File f = new java.io.File("/tmp", ((topic.getSchema().getName()) + ".avsc")); <FIXE>
<FIXS> net.sf.json.JSONObject json = new net.sf.json.JSONObject(); <FIXE> <FIXS> <FIXE> <FIXS> <FIXE> <FIXS> return json.toString(); <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> return info.connected(((((row - 1) * (count)) + col) - 1), ((count) * (count))); <FIXE>
<FIXS> headers.put(name, values); <FIXE>
<FIXS> name = a.name; <FIXE> <FIXS> name = null; <FIXE>
<FIXS> <FIXE>
<FIXS> if ((accessToken == null) || (accessToken.isExpired())) { <FIXE>
<FIXS> vuap.playVideoForFewSeconds(); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> private soot.jimple.Stmt init_label(final soot.javaToJimple.jj.extension.HigherLevelStructureTags initTag) { <FIXE>
<FIXS> javax.servlet.http.HttpSession session = request.getSession(false); if (session != null) { session.invalidate(); } <FIXE>
<FIXS> render(f5); <FIXE>
<FIXS> playSound("YourFirstWord", yourWordIsCompletion); <FIXE> <FIXS> playSound("YourFirstWord", yourWordIsCompletion); <FIXE>
<FIXS> <FIXE> <FIXS> android.view.View splitZeileView = android.view.View.inflate(getContext(), detailLayout, cardHolder); <FIXE>
<FIXS> synchronized(out) { out.write(me.legrange.swap.tcp.TcpTransport.SETUP_START); out.write(java.lang.String.format("%s=%d,", me.legrange.swap.tcp.TcpTransport.SETUP_DEVICE_ADDRESS, setup.getDeviceAddress())); out.write(java.lang.String.format("%s=%d,", me.legrange.swap.tcp.TcpTransport.SETUP_CHANNEL, setup.getChannel())); out.write(java.lang.String.format("%s=%d", me.legrange.swap.tcp.TcpTransport.SETUP_NETWORK_ID, setup.getNetworkID())); out.write("\n"); out.flush(); } <FIXE>
<FIXS> android.util.Log.i(com.udacity.gradle.builditbigger.EndpointsAsyncTask.class.getSimpleName(), ("" + result)); <FIXE>
<FIXS> (iteratorTable[pointer].count)--; if ((iteratorTable[pointer].count) < 1) if ((entry.next) != null) iteratorTable[pointer] = entry.next; else (pointer)++; <FIXE>
<FIXS> mEditUrl.setText("192.168.0.6"); <FIXE>
<FIXS> <FIXE>
<FIXS> return handleClientMessage(ctx.getServerHandler().playerEntity, message, ctx); <FIXE>
<FIXS> java.util.List<com.arthur_markus.SampleWebsite.models.DisplayData> data = databaseTablesMapper.findAndSortDataToDisplay(searchTerm, getSorting(orderType, orderColumn), offset, limit); <FIXE>
<FIXS> return true; else <FIXE> <FIXS> <FIXE>
<FIXS> performActions(); <FIXE>
<FIXS> <FIXE> <FIXS> if (layoutSetPrototypeId > 0) { <FIXE> <FIXS> originalStrutsPortletAction.processAction(originalStrutsPortletAction, portletConfig, actionRequest, actionResponse); <FIXE>
<FIXS> <FIXE>
<FIXS> return java.util.Arrays.<com.facebook.react.ReactPackage>asList(new com.slowpath.hockeyapp.RNHockeyAppPackage(this), new com.facebook.react.shell.MainReactPackage(), new com.AlexanderZaytsev.RNI18n.RNI18nPackage(), new io.realm.react.RealmReactPackage(), new com.oblador.vectoricons.VectorIconsPackage(), new org.wonday.pdf.RCTPdfView(), new com.RNFetchBlob.RNFetchBlobPackage(), new com.instabug.reactlibrary.RNInstabugReactnativePackage.Builder(Secrets.INSTABUG_ANDROID_ID, this).setInvocationEvent("shake").setPrimaryColor("#1D82DC").setFloatingEdge("left").setFloatingButtonOffsetFromTop(250).build()); <FIXE>
<FIXS> if ((obj == null) || ((this.hostname) == null)) return false; <FIXE>
<FIXS> addFolderToZip("", srcFolder, zip, true); <FIXE>
<FIXS> if (((org.eclipse.rcptt.tesla.core.am.Activator.getDefault()) != null) && (org.eclipse.rcptt.tesla.core.am.Activator.getDefault().LOGGING)) { <FIXE>
<FIXS> l = new Localizer(java.lang.Integer.parseInt(args[0]), java.lang.Integer.parseInt(args[1]), 4); <FIXE> <FIXS> l = new Localizer(4, 4, 4); <FIXE>
<FIXS> return new java.util.ArrayList<>(); <FIXE>
<FIXS> meals = main.inputInt("\n\nEnter your option: "); main.input((("\nYou chose option " + (meals)) + " as your meal. Press <return> to continue")); <FIXE>
<FIXS> modules.addAll(java.util.Arrays.asList(org.isisaddons.module.audit.AuditModule.class, org.isisaddons.module.command.CommandModule.class, org.isisaddons.module.excel.ExcelModule.class, org.isisaddons.module.poly.PolyModule.class, org.isisaddons.module.sessionlogger.SessionLoggerModule.class, org.isisaddons.module.stringinterpolator.StringInterpolatorModule.class)); <FIXE>
<FIXS> pcbuilder.controllers.dto.PricePointData last = priceHistory.get(((priceHistory.size()) - 1)); <FIXE>
<FIXS> public void unstore(lucee.runtime.type.scope.storage.IKStorageScopeSupport storageScope, lucee.runtime.PageContext pc, java.lang.String appName, java.lang.String name, java.lang.String cfid, lucee.commons.io.log.Log log) { <FIXE> <FIXS> synchronized(cache) { cache.remove(key); } <FIXE>
<FIXS> return ""; <FIXE>
<FIXS> private java.util.List<java.lang.Integer> getCheckedList() { java.util.List<java.lang.Integer> result = new java.util.ArrayList<>(); <FIXE> <FIXS> if ((checkedEntry.getValue()) == true) { <FIXE> <FIXS> } <FIXE>
<FIXS> flyCam.setEnabled(true); <FIXE>
<FIXS> protected void construct() { <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> return (((type.is(com.google.common.net.MediaType.ANY_TEXT_TYPE)) || (com.google.common.net.MediaType.APPLICATION_XML_UTF_8.withoutParameters().is(type))) || (com.google.common.net.MediaType.JSON_UTF_8.withoutParameters().is(type))) && (java.lang.String.class.equals(resultType)); <FIXE>
<FIXS> capitalAccountName = fields[0].trim(); <FIXE> <FIXS> distributionAccountName = fields[1].trim(); <FIXE>
<FIXS> if (modelAndView == null) return ; <FIXE>
<FIXS> if (javaFile != null) { for (org.eclipse.etools.ei18n.util.MappingPreference pref : org.eclipse.etools.ei18n.util.MappingPreference.list(javaFile.getProject())) { if (pref.getJavaFile().equals(javaFile)) { hyperlinksCollector.add(new org.eclipse.etools.ei18n.EI18NHyperlink(wordRegion, openAction, element, qualify)); } <FIXE>
<FIXS> protected static Response.ResponseBuilder noCache(final javax.ws.rs.core.Response.ResponseBuilder response) { <FIXE>
<FIXS> <FIXE>
<FIXS> this.activeID = (((currentTrick.getPlayerNumber()) + (activeID)) + 1) % 4; <FIXE> <FIXS> (this.activeID)--; <FIXE>
<FIXS> eu.modernmt.model.Word[] translation = decoder.translate(sentence, suggestions); <FIXE>
<FIXS> private java.util.ArrayList<org.eclipse.core.resources.IMarker> findCandidateToTypeChangingMarkers(final org.eclipse.core.resources.IMarker iMarker) { final java.util.ArrayList<org.eclipse.core.resources.IMarker> candidateToTypeChanging = new java.util.ArrayList<>(); candidateToTypeChanging.add(iMarker); <FIXE> <FIXS> candidateToTypeChanging.add(marker); <FIXE> <FIXS> return candidateToTypeChanging; <FIXE>
<FIXS> for (int z = 0; z < (sideLength); z++) <FIXE>
<FIXS> <FIXE> <FIXS> rankParser.fetchJSON(eventKey, getContext()); while (rankParser.parsingComplete); ranks.clear(); ranks.addAll(rankParser.getRankings()); <FIXE>
<FIXS> test.BoardCell cell = new test.BoardCell(); cell = intBoard.getCell(3, 0); java.util.Set<test.BoardCell> testList = intBoard.getAdjList(cell); <FIXE> <FIXS> assertTrue(testList.contains(intBoard.getCell(3, 1))); <FIXE>
<FIXS> return result; <FIXE>
<FIXS> tempMonthly = java.lang.Double.parseDouble(monthlyDue.getText().toString()); tempIntrest = java.lang.Double.parseDouble(intrestRate.getText().toString()); tempTotal = java.lang.Double.parseDouble(totalDue.getText().toString()); tempBill = billName.getText().toString(); <FIXE>
<FIXS> result = (cz.fidentis.featurepoints.FacialPointType.valueOf(text).ordinal()) + 1; <FIXE>
<FIXS> public void writeOrderTableRow(float count, java.lang.String description, java.lang.String orderID) { <FIXE>
<FIXS> position.x = com.lost.blocks.Animator.BonePose.interpolate(key1.position.x, key2.position.x, interpolation); position.y = com.lost.blocks.Animator.BonePose.interpolate(key1.position.y, key2.position.y, interpolation); position.z = com.lost.blocks.Animator.BonePose.interpolate(key1.position.z, key2.position.z, interpolation); <FIXE>
<FIXS> for (pl.miczeq.objects.Wall wall : walls) { pl.miczeq.objects.AbstractGameObject.handleCollisionBetweenTwoObjects(obj, wall); } for (pl.miczeq.objects.Door door : doors) { if ((door.isClosed()) && (!(roomCleaned))) { pl.miczeq.objects.AbstractGameObject.handleCollisionBetweenTwoObjects(obj, door); <FIXE>
<FIXS> final long parseInt = pl.grzeslowski.jsupla.protocol.decoders.PrimitiveParser.parseUnsignedInt(bytes, 3); org.assertj.core.api.Assertions.assertThat(parseInt).isEqualTo(5); <FIXE>
<FIXS> public void deploy(java.io.File orig) { <FIXE> <FIXS> pushDeploymentModel(orig); <FIXE>
<FIXS> mAuthProgressDialog.dismiss(); <FIXE>
<FIXS> private boolean ValidateTextInput(java.lang.String s) { <FIXE> <FIXS> return false; <FIXE> <FIXS> return false; <FIXE> <FIXS> return true; <FIXE>
<FIXS> <FIXE> <FIXS> java.lang.System.out.println(calculadora.operar(operacion)); <FIXE>
<FIXS> org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(((org.hibernate.boot.spi.MetadataImplementor) (metadata)), serviceRegistry, settings, DelayedDropRegistryNotAvailableImpl.INSTANCE); <FIXE>
<FIXS> if (!(s.contains("/"))) { <FIXE>
<FIXS> fragment.show(getSupportFragmentManager(), activity.reading.ReadingActivity.CHECKING_LEVEL_FRAGMENT_ID); <FIXE>
<FIXS> <FIXE> <FIXS> digCar.setCarStopped(true); <FIXE>
<FIXS> <FIXE>
<FIXS> excute(testcase.Object_Text, testcase.Operation_WaitForExists, "相机", "10000"); <FIXE>
<FIXS> goTo_step4("DWH", rpID.Full(), true, false, false); <FIXE>
<FIXS> return new template.Team.team.Team(resultSet.getString("id"), resultSet.getString("name"), resultSet.getString("logo"), resultSet.getString("topic"), resultSet.getString("brief"), resultSet.getString("assistant_player"), resultSet.getString("goal_player")); <FIXE>
<FIXS> <FIXE> <FIXS> org.springframework.http.ResponseEntity<?> responseEntity = restTemplate.exchange(URI_LIST_DOCUMENTS, HttpMethod.GET, requestEntity, java.lang.String.class, documentType, 25, 0); <FIXE>
<FIXS> copyList(foodList, gq.fokia.eatwhat.RecentFood.recentFoods); <FIXE>
<FIXS> <FIXE>
<FIXS> if ((charSequence != null) && (!(charSequence.equals(mItemInList.getItem().getName())))) { <FIXE>
<FIXS> com.ame.bus3.common.Variables.isServer = true; <FIXE> <FIXS> <FIXE>
<FIXS> java.lang.Integer employeeId = dto.getAssigneeId(); if (employeeId != null) { <FIXE>
<FIXS> throw new java.rmi.RemoteException("No se pudo consultar estado, intente más tarde", e); <FIXE>
<FIXS> super.setIcon(icon); <FIXE>
<FIXS> java.util.Map<java.lang.String, com.gescc.hedwig.vo.User> list = mapper.readValue(file, new com.fasterxml.jackson.core.type.TypeReference<java.util.Map<java.lang.String, com.gescc.hedwig.vo.User>>() { }); this.map = list; <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> draw(); <FIXE> <FIXS> river(); <FIXE> <FIXS> continueGame(); <FIXE> <FIXS> <FIXE>
<FIXS> excute(testcase.Object_TextScroll, testcase.Operation_ClickWait, "电话", "vertical"); <FIXE>
<FIXS> private java.lang.Integer parseNumberOfRecurrence(java.lang.String commandText, java.lang.String numRecurrenceText) throws seedu.address.logic.parser.ParseException { if (numRecurrenceText == null) return null; <FIXE>
<FIXS> java.lang.System.out.println(RMOS); <FIXE> <FIXS> return RMOS.getMachines().get(rcmJList.getSelectedIndex()); <FIXE>
<FIXS> private boolean isKindOfLink(java.util.List<java.lang.String> list, java.lang.String proposition) { <FIXE>
<FIXS> { <FIXE>
<FIXS> if ((wardrobe.getTrousers().size()) == 0) { return null; } <FIXE>
<FIXS> final java.lang.Object[] array = new java.lang.Object[this.size]; int i = 0; for (int value : values) { if (value != (missingValue)) { array[(i++)] = value; <FIXE> <FIXS> return array; <FIXE>
<FIXS> junit.framework.Assert.assertEquals(null, jetbrains.mps.lang.test.matcher.NodesMatcher.matchNodes(jetbrains.mps.internal.collections.runtime.ListSequence.fromListAndArray(new java.util.ArrayList<jetbrains.mps.smodel.SNode>(), it), jetbrains.mps.internal.collections.runtime.ListSequence.fromListAndArray(new java.util.ArrayList<jetbrains.mps.smodel.SNode>(), ((jetbrains.mps.smodel.SNode) (jetbrains.mps.generator.traceInfo.TraceInfoUtil.getNode(jetbrains.mps.generator.traceInfo.TraceInfoUtil.getUnitName(root), ((jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations.getString(root, "name")) + ".java"), line.value)))))); <FIXE>
<FIXS> return new org.apache.airavata.gfac.core.cluster.RawCommandInfo(((((((this.installedPath) + (jobManagerCommands.get(JobManagerCommand.SUBMISSION).trim())) + " ") + workingDirectory) + (java.io.File.separator)) + (org.apache.commons.io.FilenameUtils.getName(forkFilePath)))); <FIXE>
<FIXS> if (date == (-1)) { return null; } <FIXE>
<FIXS> <FIXE> <FIXS> java.lang.String url = ((endpointUrl) + "/projects/") + (urlEncode(repositoryName)); <FIXE>
<FIXS> return sendArp(senderAddress, tpa, null, egressNc); <FIXE>
<FIXS> if (translation_component_vector != null) { number_of_records = translation_component_vector.size(); } <FIXE>
<FIXS> java.lang.System.out.print(action); <FIXE>
<FIXS> return isValidName(a.getName()); <FIXE>
<FIXS> if ((value.toLowerCase().equals("true")) || (value.equals("1"))) { <FIXE> <FIXS> if ((value.toLowerCase().equals("false")) || (value.equals("0"))) { <FIXE>
<FIXS> com.google.jenkins.plugins.persistentmaster.storage.GcloudGcsStorage.logger.info("Last-backup file is empty, no backups available."); <FIXE>
<FIXS> java.lang.Integer id) { <FIXE>
<FIXS> return ((((((((def instanceof org.ballerinalang.plugins.idea.psi.FunctionDefinitionNode) || (def instanceof org.ballerinalang.plugins.idea.psi.ConnectorDefinitionNode)) || (def instanceof org.ballerinalang.plugins.idea.psi.StructDefinitionNode)) || (def instanceof org.ballerinalang.plugins.idea.psi.VariableDefinitionNode)) || (def instanceof org.ballerinalang.plugins.idea.psi.AnnotationDefinitionNode)) || (def instanceof org.ballerinalang.plugins.idea.psi.GlobalVariableDefinitionNode)) || (def instanceof org.ballerinalang.plugins.idea.psi.ConstantDefinitionNode)) || (def instanceof org.ballerinalang.plugins.idea.psi.ParameterNode)) || (def instanceof org.ballerinalang.plugins.idea.psi.FieldDefinitionNode); <FIXE>
<FIXS> protected java.util.Optional<org.nest.codegeneration.helpers.LEMSElements.Unit> handleType(org.nest.symboltable.symbols.TypeSymbol _typeSymbol) { <FIXE>
<FIXS> <FIXE>
<FIXS> identities.add(new io.cattle.platform.api.auth.Identity(io.cattle.platform.core.constants.ProjectConstants.RANCHER_ID, java.lang.String.valueOf(account.getId()), account.getName())); <FIXE>
<FIXS> <FIXE>
<FIXS> @java.lang.Override <FIXE> <FIXS> flow = false; <FIXE>
<FIXS> java.lang.String maxSpeed = java.lang.String.format(java.util.Locale.getDefault(), "%.1f %s", ((pastRunItem.maxSpeed) * (speedUnits.multiplier)), speedUnits.label); <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> mAdapter.notifyDataSetChanged(); lvChat.invalidate(); <FIXE> <FIXS> <FIXE>
<FIXS> if ((((session.getUser().getSettings()) == null) || ((session.getUser().getSettings().get(net.cattweasel.pokebot.task.UserNotificationTask.ARG_GYM_ENABLED)) == null)) || (net.cattweasel.pokebot.tools.Util.otob(session.getUser().getSettings().get(net.cattweasel.pokebot.task.UserNotificationTask.ARG_GYM_ENABLED)))) { <FIXE>
<FIXS> if ((resourcesPath) != null) { renderer.setDocumentFromString(wrapHtml5Document(html), resourcesPath); }else { renderer.setDocumentFromString(wrapHtml5Document(html)); } <FIXE>
<FIXS> @java.lang.Override <FIXE> <FIXS> if ((this.minInstancesSpin.getSelection()) != (nodeTemplate.getMinInstances())) { <FIXE>
<FIXS> <FIXE>
<FIXS> while ((test.getResultat("-")) <= 0) { <FIXE>
<FIXS> int index = info.clientNumberList.indexOf((self_no - 1)); <FIXE>
<FIXS> jsonObject.put("sessionId", db.getUserDetails().get("sessionId")); <FIXE>
<FIXS> net.minecraft.item.Item studentCmdBlock = net.minecraftforge.fml.common.registry.GameRegistry.findItem("dynitems", "student_command_block"); <FIXE>
<FIXS> saveWarpList(true); <FIXE>
<FIXS> heap.add(newElement); <FIXE>
<FIXS> if (actionBar != null) { actionBar.setDisplayHomeAsUpEnabled(true); } <FIXE>
<FIXS> _accuracyStats = new int[3]; <FIXE>
<FIXS> public java.lang.String getPath(java.lang.String extra) { <FIXE>
<FIXS> <FIXE>
<FIXS> rw = new java.io.RandomAccessFile(lockFile, "rw"); <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> mPaint.setStyle(Paint.Style.FILL); <FIXE>
<FIXS> if ((mediator.getCssFilePathExpression()) != null) { <FIXE>
<FIXS> if (t instanceof jmri.jmrix.loconet.LocoNetThrottle) { jmri.jmrix.loconet.LocoNetThrottle lnt = ((jmri.jmrix.loconet.LocoNetThrottle) (t)); jmri.jmrix.loconet.LocoNetSlot tSlot = lnt.getLocoNetSlot(); tc.sendLocoNetMessage(tSlot.writeStatus(LnConstants.LOCO_COMMON)); tc.sendLocoNetMessage(tSlot.dispatchSlot()); } <FIXE>
<FIXS> java.lang.String[] split = split(substringWithPageName, pw.rapit.likes.service.FacebookFetcherService.FORWARD_SLASH, 4); if (sectionNumber < (split.length)) { return split[sectionNumber]; }else { return null; } <FIXE>
<FIXS> <FIXE>
<FIXS> myRobot = new edu.wpi.first.wpilibj.RobotDrive(rearLeft, frontLeft, rearRight, frontRight); <FIXE>
<FIXS> } finally { em.close(); <FIXE>
<FIXS> while (count != 7) { <FIXE>
<FIXS> public void closeAction() { <FIXE>
<FIXS> java.util.Map<java.lang.Integer, java.util.TreeMap<java.lang.Long, java.lang.Long>> partitionToRanges = tableToPartitionsToRanges.get(table.toLowerCase()); <FIXE>
<FIXS> org.greenrobot.eventbus.EventBus.getDefault().register(this); <FIXE> <FIXS> <FIXE>
<FIXS> mPresenter.loadSongCover(mSongPlayer); <FIXE>
<FIXS> testModel1 = new com.raizlabs.android.dbflow.structure.container.ForeignKeyContainer(com.raizlabs.android.dbflow.test.structure.TestModel1.class); <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE> <FIXS> return numberOfBusts / ((double) (this.fullDeck.size())); <FIXE>
<FIXS> if ((fileRecord.getContent()) != null) { com.dreamfactory.sampleapp.activities.ContactViewActivity.ConvertToBitmap convertToBitmapTask = new com.dreamfactory.sampleapp.activities.ContactViewActivity.ConvertToBitmap(); convertToBitmapTask.execute(fileRecord.getContent()); } <FIXE>
<FIXS> mListItems.remove(position); <FIXE>
<FIXS> edu.umn.cs.spatialHadoop.io.TextSerializerHelper.serializeDouble(y, text, (str.isEmpty() ? ' ' : ',')); <FIXE>
<FIXS> public static boolean mergeItemsBetweenStacks(net.minecraft.item.ItemStack takeFrom, net.minecraft.item.ItemStack moveTo) { <FIXE> <FIXS> int moveover = 0; <FIXE> <FIXS> moveover = java.lang.Math.min(takeFrom.stackSize, room); <FIXE> <FIXS> return moveover > 0; <FIXE>
<FIXS> <FIXE>
<FIXS> if (!(result.hasErrors())) { <FIXE> <FIXS> <FIXE> <FIXS> model.addAttribute("inventoryHistoryForm", searchCriteria); model.addAttribute("modeList", modeList); model.addAttribute("locationList", locationList); return "listInventoryHistory"; <FIXE>
<FIXS> <FIXE> <FIXS> java.lang.String url = this.url; <FIXE>
<FIXS> gsm.update(); <FIXE>
<FIXS> datas.put("dd2", "dd2"); <FIXE>
<FIXS> <FIXE>
<FIXS> nnf = this.f.and(this.encoding.formula(this.f)); <FIXE>
<FIXS> for (int i = 1; i < (this.size()); ++i) { str += ", " + (this.get(i).toString()); <FIXE>
<FIXS> public static boolean isValidBet(java.lang.String bet, int maxBet) { <FIXE> <FIXS> return true; <FIXE> <FIXS> return false; <FIXE>
<FIXS> <FIXE>
<FIXS> public edu.ycp.cs.funwithsound.Strike p(double beat, int velocity) { <FIXE>
<FIXS> if (basepath == null) continue; <FIXE>
<FIXS> public void convertInput() { <FIXE>
<FIXS> boolean spaceOpen = true; <FIXE> <FIXS> <FIXE>
<FIXS> showMapPanel(); <FIXE>
<FIXS> character.removePurchasedEquipment(((pcgen.facade.core.EquipmentFacade) (object)), 1, false); <FIXE>
<FIXS> parseChildren(element, object); com.eje_c.meganekko.xml.XmlDocumentParser.ParserChain chain = new com.eje_c.meganekko.xml.XmlDocumentParser.ParserChain(mContext, mAttributeParsers.iterator(), element, object); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> edu.umass.cs.gnsclient.client.integrationtests.ServerIntegrationTest.failWithStackTrace("Exception while checking for ALL_FIELDS in ACLMaybeAddAllFields: ", e); <FIXE>
<FIXS> while (true) { if (playerCanMoveY(1)) { player.moveVertical(1); }else { break; } } <FIXE>
<FIXS> private org.verapdf.pdfa.results.ValidationResult startValidation(org.verapdf.pdfa.validation.ValidationProfile validationProfile, org.verapdf.model.ModelParser parser, org.verapdf.processor.config.Config config) { <FIXE>
<FIXS> synchronized(vis) { java.awt.geom.Rectangle2D bounds = vis.getBounds(Visualization.ALL_ITEMS); prefuse.util.GraphicsLib.expand(bounds, ((int) (1 / (this.getScale())))); prefuse.util.display.DisplayLib.fitViewToBounds(this, bounds, 0); } <FIXE>
<FIXS> <FIXE>
<FIXS> private void enableNfcPayment() { <FIXE>
<FIXS> if (((null != dataSnapshot) && (dataSnapshot.hasChild(user_id))) && ((!(dataSnapshot.child(user_id).hasChild("name"))) || (!(dataSnapshot.child(user_id).hasChild("image"))))) { <FIXE>
<FIXS> if ((sVal == null) || ((sVal.trim().length()) == 0)) <FIXE>
<FIXS> return null; <FIXE>
<FIXS> return true; <FIXE>
<FIXS> <FIXE> <FIXS> org.springframework.validation.ValidationUtils.rejectIfEmptyOrWhitespace(errors, "password", "field.required"); <FIXE> <FIXS> if (((user.getPassword()) != null) && ((user.getPassword().length()) < (project.validators.UserValidator.MINIMUM_PASSWORD_LENGTH))) { errors.rejectValue("password", "field.min.length", new java.lang.Object[]{ project.validators.UserValidator.MINIMUM_PASSWORD_LENGTH }, ""); <FIXE>
<FIXS> if (position >= (mDetailAdapter.getCount())) { <FIXE>
<FIXS> synchronized(org.cobbzilla.wizard.model.entityconfig.ModelSetup.entityCache) { java.util.Map<org.cobbzilla.wizard.model.Identifiable, org.cobbzilla.wizard.model.Identifiable> cache = org.cobbzilla.wizard.model.entityconfig.ModelSetup.entityCache.get(api.hashCode()); if (cache == null) { cache = new java.util.HashMap<>(); org.cobbzilla.wizard.model.entityconfig.ModelSetup.entityCache.put(api.hashCode(), cache); } cache.put(entity, entity); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> if ((correctAnswers.size()) == (word.length())) stanGry = Interfaces.GameStates.WIN; else stanGry = Interfaces.GameStates.IN_PROGRESS; <FIXE>
<FIXS> java.lang.System.out.println(); savvytodo.testutil.TestUtil.printTasks(tasks); <FIXE>
<FIXS> java.lang.String ret = ("__ardublockDigitalRead(" + (translatorBlock.toCode())) + ")"; <FIXE>
<FIXS> if (stock >= (com.bitquest.bitquest.Trade.MAX_STOCK)) { <FIXE>
<FIXS> <FIXE>
<FIXS> c3d.getLockableDatFileReference().getVertexManager().transformSelection(accurateResult, null, org.nschmidt.ldparteditor.shells.editor3d.Editor3DWindow.getWindow().isMovingAdjacentData()); <FIXE>
<FIXS> java.lang.String houseId, ge.edu.freeuni.sdp.iot.router.MacObject macObject) { <FIXE> <FIXS> return addHeaders(javax.ws.rs.core.Response.ok().entity(macObject.toString())); <FIXE>
<FIXS> if (((checkPrefixEndingConsonant(verb.getPrefix())) && (checkifRootBeginsVowel(currentVerb.getRoot()))) && (!(verb.getPrefix().contains("-")))) { <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> curr.left = null; <FIXE> <FIXS> curr = curr.right; <FIXE>
<FIXS> header = new com.nsnv.mlib.RefreshHeader(context, attrs); <FIXE> <FIXS> footer = new com.nsnv.mlib.RefreshFooter(context, attrs); <FIXE>
<FIXS> <FIXE>
<FIXS> if ((list.size()) > 0) <FIXE> <FIXS> <FIXE>
<FIXS> assertTrue(user.equals(user1)); <FIXE>
<FIXS> assertEquals(2, node.getLine()); assertEquals(2, node.getPos()); <FIXE>
<FIXS> java.math.BigDecimal result = yProduct.add(xProduct).subtract(constant); <FIXE>
<FIXS> mCurrentState = STATE_HIDDEN; <FIXE> <FIXS> <FIXE>
<FIXS> public static void post(java.lang.String url, java.io.File file, com.chinamobile.iot.onenet.OneNetApiCallback callback) { <FIXE>
<FIXS> java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> m = validator.performValidation(c, rw, ownersFileName, verbose); <FIXE>
<FIXS> public java.lang.String ingredientsPrinter() { <FIXE> <FIXS> return ingredientsPrinted.toString(); <FIXE>
<FIXS> pages.put(position, ((com.rockthevote.grommet.ui.eventFlow.EventFlowPage) (view))); <FIXE>
<FIXS> if ((AnimeIndex.colorProp.getProperty("Button_color")) != null) { int oldcolor = java.lang.Integer.parseInt(AnimeIndex.colorProp.getProperty("Button_color")); if ((color != 0) && (color != oldcolor)) { btnBottoni.setBackground(new java.awt.Color(color)); AnimeIndex.colorProp.setProperty("Button_color", java.lang.Integer.toString(color)); util.window.ColorDialog.changed = true; } <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> getRoomMembersFromDB(roomName); <FIXE>
<FIXS> com.google.gwt.emultest.java.lang.MathTest.assertEquals((-a), java.lang.Math.negateExact(a)); <FIXE>
<FIXS> <FIXE>
<FIXS> java.io.File file = new java.io.File(_filePathAndName); java.io.FileWriter writer = new java.io.FileWriter(file); <FIXE> <FIXS> return false; <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> return wquf.connected(0, currentSiteIndex); <FIXE>
<FIXS> if ((receivers[i]) == null) { <FIXE>
<FIXS> if ((extjson != null) && (!(extjson.isEmpty()))) <FIXE>
<FIXS> calc = type; name = c; <FIXE>
<FIXS> synchronized(serverURLs) { if (serverURLs.isEmpty()) { parseServerURLs(); if (serverURLs.isEmpty()) throw new com.orientechnologies.orient.core.exception.OStorageException("Cannot create a connection to remote server because url list is empty"); } return ((serverURLs.get(0)) + "/") + (getName()); <FIXE> <FIXS> <FIXE>
<FIXS> ret.add(((org.sosy_lab.solver.api.BooleanFormula) (f))); <FIXE>
<FIXS> com.google.protobuf.Descriptors.FileDescriptor fd = serverReflectionIndex.getFileDescriptorByName(name); <FIXE>
<FIXS> <FIXE> <FIXS> switchToBusyState(Operation.FIRST_OPERATION); <FIXE>
<FIXS> <FIXE>
<FIXS> exarabete.audioapp.AccountHandler.googleApiClient = new com.google.android.gms.common.api.GoogleApiClient.Builder(activity).enableAutoManage(activity, this).addApi(Auth.GOOGLE_SIGN_IN_API, gso).build(); exarabete.audioapp.AccountHandler.googleApiClient.connect(); <FIXE>
<FIXS> ii.next(); <FIXE>
<FIXS> public boolean imprisonPlayer(java.lang.String playerName) { <FIXE> <FIXS> return false; <FIXE> <FIXS> return true; <FIXE>
<FIXS> { <FIXE>
<FIXS> <FIXE>
<FIXS> private java.nio.ByteBuffer expandIfNeeded(int len) { <FIXE> <FIXS> return buffer; <FIXE> <FIXS> return bufferContainer.getBuffer(); <FIXE>
<FIXS> public void onSuccess(@android.support.annotation.NonNull com.google.android.gms.plus.People.LoadPeopleResult loadPeopleResult) { <FIXE> <FIXS> com.google.android.gms.plus.model.people.Person person = loadPeopleResult.getPersonBuffer().get(0); android.util.Log.d("fasfafasfsafasfas", ("onSuccess: " + person)); <FIXE>
<FIXS> PDFContainer.lds.addAllPDF(dbData); <FIXE>
<FIXS> runOnNibble(indexHtml); <FIXE>
<FIXS> BinarySearchTree<K>.BstNode<K> min = node; <FIXE>
<FIXS> changeFontSize(); <FIXE> <FIXS> prefs.edit().putInt(getString(R.string.pref_lesson_text_size), i).apply(); <FIXE>
<FIXS> result.add(o); <FIXE>
<FIXS> @org.springframework.format.annotation.DateTimeFormat(pattern = "yyyy-MM-dd HH:mm") java.util.Date periodStart, @org.springframework.web.bind.annotation.RequestParam(value = "periodEnd") @org.springframework.format.annotation.DateTimeFormat(pattern = "yyyy-MM-dd HH:mm") java.util.Date periodEnd) { <FIXE>
<FIXS> private org.apache.bookkeeper.bookie.BookieStatus readFromFile(java.io.File file) throws java.io.IOException, java.lang.IllegalArgumentException { <FIXE>
<FIXS> com.vsgh.pronounceit.apihelpers.forvo.ForvoApi.downloadMp3Url(context, item, mAdapter, position, myDataset); <FIXE>
<FIXS> if (e.getMessage().equals("Write error")) { setState(pct.droid.base.fragments.BaseStreamLoadingFragment.State.ERROR, getString(R.string.error_files)); }else if (e.getMessage().equals("Torrent error")) { setState(pct.droid.base.fragments.BaseStreamLoadingFragment.State.ERROR, getString(R.string.torrent_failed)); }else { setState(pct.droid.base.fragments.BaseStreamLoadingFragment.State.ERROR, getString(R.string.unknown_error)); <FIXE> <FIXS> <FIXE>
<FIXS> audioBinder.audioPlay(data.leftUri); <FIXE>
<FIXS> <FIXE>
<FIXS> assertEquals("Folders size", 6, result.size()); <FIXE> <FIXS> assertEquals("Items size", 3, folderCommon.getItems().size()); <FIXE>
<FIXS> if (!((org.bukkit.Bukkit.getOnlinePlayers().length) == 0)) { <FIXE>
<FIXS> if (contains(((org.overture.ast.types.PType) (node)), question)) { <FIXE>
<FIXS> result.add(getMessage(entry.getValue().getAlarmType(), 0)); <FIXE>
<FIXS> code = code.trim().replace(".", ""); <FIXE>
<FIXS> <FIXE>
<FIXS> new java.lang.Thread(new java.lang.Runnable() { <FIXE> <FIXS> }).start(); <FIXE>
<FIXS> @org.springframework.web.bind.annotation.RequestMapping(value = "/editArticle", method = org.springframework.web.bind.annotation.RequestMethod.POST) <FIXE> <FIXS> if ((article != null) && (!(org.springframework.util.StringUtils.isEmpty(article.getId())))) { <FIXE>
<FIXS> org.easymock.EasyMock.expect(study.getId()).andStubReturn(1); <FIXE>
<FIXS> if (this.getStartTime().before(moment2.getStartTime())) { <FIXE> <FIXS> if (this.getStartTime().after(moment2.getStartTime())) { <FIXE>
<FIXS> java.lang.String sortOrder = (WeatherContract.WeatherEntry.COLUMN_DATE) + " ASC"; <FIXE> <FIXS> <FIXE>
<FIXS> dimensionsObservable.notifyListeners(new ru.tesei7.textEditor.editor.scroll.bar.DimensionsEvent(ru.tesei7.textEditor.editor.scroll.bar.DimensionType.ONLY_X)); <FIXE> <FIXS> <FIXE>
<FIXS> java.lang.Integer solution = calculateBoardSolution(b); if ((solution != null) && (solution > 0)) data.getSolutions().addAndGet(solution.intValue()); <FIXE>
<FIXS> subscriptions.notifyEvent(net.openhft.chronicle.engine.map.UpdatedEvent.of(asset.fullName(), key, oldValue, value, false, (!(value.equals(oldValue))))); <FIXE>
<FIXS> java.io.File getSelectedPropertyFile() { <FIXE> <FIXS> if (result == (javax.swing.JFileChooser.CANCEL_OPTION)) { return null; } <FIXE>
<FIXS> adapterTodoTasks.clear(); <FIXE> <FIXS> <FIXE>
<FIXS> if (fragment != null) { android.util.Log.i(com.adguard.android.contentblocker.onboarding.OnboardingActivity.TAG, ("Removing fragment " + (fragment.toString()))); transaction.remove(fragment); } <FIXE>
<FIXS> property.setCode(java.lang.Integer.toString(ErrorType.OK.value())); <FIXE>
<FIXS> if (((internalConsumers) != null) && (!(internalConsumers.isEmpty()))) { for (oracle.ateam.sb.transports.kafka.KafkaEndpoint.InternalConsumer consumer : internalConsumers) { consumer.shutdown(); } internalConsumers.clear(); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> return (java.util.Objects.equals(type, content.type)) && (java.util.Objects.equals(getValue(), content.getValue())); <FIXE>
<FIXS> <FIXE>
<FIXS> rea.toyrobot.actions.physicalobjects.GlobalAction globalAction = globalActionsInitialiser.map(action.getClazz()); <FIXE>
<FIXS> this._editTextPhoneNumber.setText(persistence.getLastPhoneNumber()); <FIXE>
<FIXS> java.util.Set<java.lang.String> stocks = new java.util.HashSet(com.udacity.stockhawk.data.PrefUtils.getStocks(context)); <FIXE>
<FIXS> mOptionMenu.findItem(R.id.menu_item_undo).setEnabled(true); <FIXE> <FIXS> mOptionMenu.findItem(R.id.menu_item_redo).setEnabled(false); <FIXE>
<FIXS> <FIXE>
<FIXS> internalAdapter = com.raizlabs.android.dbflow.config.FlowManager.getModelViewAdapter(modelClass); if (internalAdapter == null) { internalAdapter = com.raizlabs.android.dbflow.config.FlowManager.getQueryModelAdapter(modelClass); } <FIXE>
<FIXS> if (((!(com.basilgregory.onam.android.L.error)) || (message == null)) || (message.isEmpty())) <FIXE>
<FIXS> <FIXE>
<FIXS> if ((!(file.isHidden())) && (!(ret.contains(file)))) { ret.add(file); <FIXE>
<FIXS> <FIXE>
<FIXS> myPaper = new model.Manuscript(title, date, reviews, authors, new java.io.File(""), null); <FIXE>
<FIXS> if ((name.equals(target[1].trim())) && ((!("npc".equals(type))) || (!(target[0].startsWith("bad_target_"))))) { <FIXE>
<FIXS> <FIXE> <FIXS> (org.apache.hadoop.hive.metastore.NewObjectStore.count)++; <FIXE> <FIXS> <FIXE>
<FIXS> if (!(lostList.isEmpty())) { for (com.teamcow.wheresmystuff.model.LostItem lostItem : lostList) { com.google.android.gms.maps.model.LatLng current = new com.google.android.gms.maps.model.LatLng(lostItem.getX_Coord(), lostItem.getY_Coord()); mMap.addMarker(new com.google.android.gms.maps.model.MarkerOptions().position(current).title(lostItem.getName()).snippet(lostItem.getDescription())); mMap.moveCamera(com.google.android.gms.maps.CameraUpdateFactory.newLatLng(current)); } <FIXE>
<FIXS> timeout = new java.lang.Runnable() { <FIXE>
<FIXS> org.junit.Assert.assertEquals("El Equipo 2", teams.get(1).getName()); <FIXE>
<FIXS> public static java.lang.String showOldValue(android.content.SharedPreferences exercise_a) { <FIXE> <FIXS> return crw1 + (gymprogram_a.sDateTime); <FIXE>
<FIXS> final java.util.List<azkaban.executor.ExecutableFlow> flows = this.manager.getRunningFlows(); for (final azkaban.utils.Pair<azkaban.executor.ExecutionReference, azkaban.executor.ExecutableFlow> pair : this.activeFlows.values()) { <FIXE>
<FIXS> for (int i = lo + 1; i < hi; i++) <FIXE>
<FIXS> model.addAttribute("societas", true); <FIXE> <FIXS> model.addAttribute("societa", societa); <FIXE>
<FIXS> if ((owner) == null) { if (org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty.LOGGER.isLoggable(java.util.logging.Level.FINE)) { org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty.LOGGER.log(java.util.logging.Level.FINE, "Cannot start triggers. Owner of the JobProperty has not been assigned yet", new java.lang.IllegalStateException("JobProperty owner is null")); } return ; <FIXE>
<FIXS> default : break; <FIXE>
<FIXS> if (isStopAllContainers()) { return true; <FIXE> <FIXS> java.lang.String key = pomLabel.getKey(); java.util.Map<java.lang.String, java.lang.String> labels = container.getLabels(); return (labels.containsKey(key)) && (pomLabel.matches(new org.jolokia.docker.maven.util.PomLabel(labels.get(key)))); <FIXE>
<FIXS> highlightPosition = (memoryData.getNumCells()) - 1; <FIXE>
<FIXS> return new com.trueweather.web.ThreeDaysWeatherController.Result(weatherService.getTrueWeatherOnThreeDays(city.toLowerCase().trim())); <FIXE>
<FIXS> controllerList[i].setInverted((!(controllerList[i].getInverted()))); <FIXE>
<FIXS> <FIXE>
<FIXS> if (!(isEmpty(p))) <FIXE>
<FIXS> java.lang.String date = scheduledDates.get(prevDateIndex); <FIXE>
<FIXS> java.lang.String cityID; <FIXE>
<FIXS> mTextView.setText(pageText); <FIXE>
<FIXS> if ((this.hardwareBack) && (this.themeableBrowser.canGoBack())) { this.themeableBrowser.goBack(); <FIXE> <FIXS> this.themeableBrowser.closeDialog(); <FIXE>
<FIXS> m_gpsDevice = null; <FIXE>
<FIXS> if (!(srcFont.isEmpty())) { <FIXE>
<FIXS> <FIXE>
<FIXS> assertEquals("Modified label", "modified", result.getLabel()); <FIXE> <FIXS> assertEquals("Generated Base Uri is not correct!", baseUriExpected, result.getBaseUri()); <FIXE>
<FIXS> exit.priority -= 16; dungeon.rooms.get(jaredbgreat.dldungeons.planner.astar.DoorChecker.getOtherRoom(exit, room, dungeon)).addToConnections(new jaredbgreat.dldungeons.pieces.Doorway(exit, room.id)); <FIXE>
<FIXS> int result = ((previousOutput) == null) ? 1 : previousOutput.hashCode(); <FIXE>
<FIXS> set.add(((int) ((java.lang.Math.random()) * upperbound))); <FIXE>
<FIXS> throw new java.lang.IllegalArgumentException(e); <FIXE>
<FIXS> if (opStatus == null) { return null; } <FIXE>
<FIXS> if (entry.cancel()) <FIXE>
<FIXS> if ((name.length()) > 2) { name.delete(((name.length()) - 2), name.length()); } <FIXE>
<FIXS> public void initialPostProcessing() { <FIXE>
<FIXS> this.latitude = 51.9032375; this.longitude = 51.9032375; this.range = 0.1; <FIXE>
<FIXS> possibleMovesToDownRight = (((((possibleMovesToDownRight >> 7) | (possibleMovesToDownRight >> 14)) | (possibleMovesToDownRight >> 21)) | (possibleMovesToDownRight >> 28)) | (possibleMovesToDownRight >> 35)) | (possibleMovesToDownRight >> 42); <FIXE>
<FIXS> return org.zkoss.zul.impl.Utils.testAttribute(this, "org.zkoss.zul.nativebar", true, true); <FIXE>
<FIXS> doTask2(f); <FIXE>
<FIXS> <FIXE>
<FIXS> resultExecutor.execute(new java.lang.Runnable() { @java.lang.Override public void run() { java.util.List<java.lang.String> list = new java.util.ArrayList(addingInProcessGeoIds.keySet()); if (status.isSuccess()) { notifyOnGeofenceAddedSuccess(list); }else { notifyOnGeofenceAddedFailed(list); <FIXE> <FIXS> addingInProcessGeoIds.clear(); isAddingGeofencesInProgress = false; } }); <FIXE>
<FIXS> for (java.lang.Thread t : serverListeners.values()) { <FIXE> <FIXS> for (java.net.Socket s : clients.values()) { <FIXE>
<FIXS> marqueeTextView.start(); <FIXE>
<FIXS> if (input.equals(org.arriva.movesample.core.FieldControlInputs.UP.toString())) { <FIXE> <FIXS> if (input.equals(org.arriva.movesample.core.FieldControlInputs.DOWN.toString())) { <FIXE> <FIXS> if (input.equals(org.arriva.movesample.core.FieldControlInputs.RIGHT.toString())) { <FIXE>
<FIXS> private void removeRecord(java.lang.String oldkey, T oldRecord) { <FIXE>
<FIXS> return prop.getProperty(propKey).trim(); <FIXE>
<FIXS> if ((index) >= ((order.size) - 1)) <FIXE> <FIXS> next = order.get((++(index))); <FIXE>
<FIXS> if (address.contains(fromRules[i])) { <FIXE>
<FIXS> if ((((checkRow(row, grid)) || (checkColumn(row, column, grid))) || (checkDiagonal(row, column, grid))) || (checkDiagOfAllGrids(row, column, grid))) { <FIXE>
<FIXS> l1 = solution.reverseKGroup(l1, 6); <FIXE>
<FIXS> public void updatePassStats(int yds, boolean pic, boolean incompletion, boolean td, boolean fum) { <FIXE>
<FIXS> help = new Manager.DBHelper(); <FIXE>
<FIXS> for (int i = 0; i < (inputs.length); i++) { <FIXE>
<FIXS> long randomOffset = 0; <FIXE>
<FIXS> assertEquals(CarAvailability.AVAILABLE, c.getAvailability()); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> if (savedInstanceState == null) { com.example.gabriel.popularmovies.MovieFragment.MovieFragment fragment = new com.example.gabriel.popularmovies.MovieFragment.MovieFragment(); android.app.FragmentManager fragmentManager = getFragmentManager(); android.app.FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction(); fragmentTransaction.replace(R.id.container, fragment); fragmentTransaction.commit(); } <FIXE>
<FIXS> assertEquals(loClass.getAValue(), loClass2.getAValue()); assertEquals(loClass.getBValue(), loClass2.getBValue()); assertEquals(loClass.m_cStringValue, loClass2.m_cStringValue); <FIXE>
<FIXS> java.lang.String sysProp = java.lang.System.getProperties().toString().replaceAll("[,]", "<br>"); <FIXE>
<FIXS> if (artifactUrl != null) explorer.displayCard(artifactUrl, new org.softwareFm.card.dataStore.CardAndCollectionDataStoreAdapter() { @java.lang.Override public void finished(org.softwareFm.card.card.ICardHolder cardHolder, java.lang.String url, org.softwareFm.card.card.ICard card) { explorer.showRandomContent(card); } }); <FIXE>
<FIXS> org.zeroturnaround.stats.model.RunStats stats = plugin.getStatsData().getUnInitializedItem(((int) (li.getId()))); <FIXE>
<FIXS> setSiteSize(siteRef, siteSize, false, true); <FIXE>
<FIXS> <FIXE>
<FIXS> return x.svd(true); <FIXE>
<FIXS> return java.nio.file.Files.list(configuration.getFileStoreDirectoryPath()).map(this::load).collect(java.util.stream.Collectors.toList()); <FIXE>
<FIXS> <FIXE>
<FIXS> setDead(); <FIXE> <FIXS> <FIXE>
<FIXS> fab.hide(); <FIXE> <FIXS> fab.show(); <FIXE>
<FIXS> return net.quetzi.qutilities.helpers.MovePlayer.sendToDimension(playername, 0); <FIXE>
<FIXS> }else if (Program.Skeleton.SkeletonUtility.yesOrNoQuestion("Belel�pett a robot egy ragacsba?")) { dummyRagacsForSkeleton.stepIn(robot); }else if (Program.Skeleton.SkeletonUtility.yesOrNoQuestion("Belel�pett a robot egy olajba?")) { dummyOlajForSkeleton.stepIn(robot); } <FIXE>
<FIXS> while ((node.getNext()) != null) { <FIXE> <FIXS> node = node.getNext(); } <FIXE>
<FIXS> if ((lowerStr.equals(seedu.jimi.logic.commands.RedoCommand.COMMAND_WORD.toLowerCase())) || (lowerStr.equals(seedu.jimi.logic.commands.RedoCommand.SHORT_COMMAND_WORD.toLowerCase()))) { <FIXE>
<FIXS> <FIXE>
<FIXS> message.setBody(org.addhen.smssync.controllers.DebugCallbacks.isServerOKRequest(context)); <FIXE> <FIXS> <FIXE>
<FIXS> orbin.Sender.sendTimeToServer(0, null, context); <FIXE> <FIXS> orbin.Sender.sendTimeToServer(nextAlarm.getAlarmTime().getTimeInMillis(), null, context); <FIXE>
<FIXS> if (value == null) { remove(key); return this; } <FIXE>
<FIXS> if (baths < 0) { baths = 0; } <FIXE>
<FIXS> return toReturn; <FIXE>
<FIXS> return new int[0]; <FIXE>
<FIXS> boolean current = proccessAnalogInput("indexer-bottom", indexerBottom); <FIXE>
<FIXS> java.lang.System.out.println(s); <FIXE>
<FIXS> obj.put("creatorId", java.lang.Long.toString(this.creatorId)); <FIXE>
<FIXS> if (index >= ((getSize()) + 1)) { <FIXE>
<FIXS> friendsRef = firebaseFactory.createFirebase(firebaseUrlFormatter.getUserFriendsUrl()).child(uidPref.get()); friendValueEventListener = new com.citrix.wrekt.activity.ChannelMemberActivity.FriendValueEventListener(); friendsRef.addValueEventListener(friendValueEventListener); <FIXE> <FIXS> <FIXE>
<FIXS> timber.log.Timber.i((((("Downloading " + (application.getPackageName())) + " (version ") + (applicationVersion.getVersionCode())) + ")...")); <FIXE>
<FIXS> if ((main.Main.user.getInventory().size()) > 0) { java.util.ArrayList<grammars.grammars.PrintableObject> names = new java.util.ArrayList<grammars.grammars.PrintableObject>(); names.add(main.Main.user); for (items.Item item : main.Main.user.getInventory()) { names.add(item); } grammars.grammars.GrammarIndividual grammarIndividual = main.Main.grammarUseItem.getRandomGrammar(); main.Main._printMessage(grammarIndividual, names, "DESCITEM"); <FIXE> <FIXS> <FIXE>
<FIXS> update(); <FIXE>
<FIXS> public java.lang.String store(javax.portlet.PortletPreferences prefs) throws java.io.IOException, javax.portlet.ReadOnlyException, javax.portlet.ValidatorException { <FIXE>
<FIXS> setReturnValue(org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDiskDao().getAllAttachableDisksByPoolId(org.ovirt.engine.core.bll.storage.disk.GetAllAttachableDisksForVmQuery.getParameters().getStoragePoolId(), org.ovirt.engine.core.bll.storage.disk.GetAllAttachableDisksForVmQuery.getParameters().getVmId(), org.ovirt.engine.core.bll.storage.disk.GetAllAttachableDisksForVmQuery.getUserID(), org.ovirt.engine.core.bll.storage.disk.GetAllAttachableDisksForVmQuery.getParameters().isFiltered())); <FIXE>
<FIXS> <FIXE>
<FIXS> mainImageBackView.setImageResource(R.drawable.bronze_wreath); <FIXE>
<FIXS> if (!(en.getKey().startsWith("_"))) { <FIXE>
<FIXS> protected boolean MinMaxValuesCheck(javax.swing.JTextField field) { if ((field.getText().matches("\\d+([.]{1})?(\\d+)?(E)?(e)?(-)?(\\d+)?")) == false) { field.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2, java.awt.Color.red)); field.setBackground(bgColor); <FIXE> <FIXS> field.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, java.awt.Color.BLACK)); field.setBackground(java.awt.Color.WHITE); <FIXE>
<FIXS> Loop(); <FIXE>
<FIXS> one.remove("one"); assertFalse(one.contains("one")); assertEquals(0, one.size()); <FIXE>
<FIXS> <FIXE>
<FIXS> deliveriesInTransit.countDown(); <FIXE> <FIXS> deliveriesInTransit.countDown(); <FIXE> <FIXS> <FIXE>
<FIXS> void setTvAngle(float[] ACC, float[] GYR) { <FIXE>
<FIXS> public synchronized java.util.Set<java.lang.Long> deleteTag(long objID, java.lang.Long artifactID, org.sleuthkit.datamodel.Tag tag, boolean tagged) { java.util.Set<java.lang.Long> updatedEventIDs = eventDB.deleteTag(objID, artifactID, tag, tagged); <FIXE>
<FIXS> if ((zDimension) != 0) zFlag = true; <FIXE>
<FIXS> public fish.Matrix diagonalReciprocal(double[] vector) { <FIXE> <FIXS> return diagonalReciprocal(vector, units); <FIXE>
<FIXS> arr[i] = 1.0 / (arr.length); <FIXE>
<FIXS> public void getEventListFeed(rocks.itsnotrocketscience.bejay.managers.RetrofitManager.EventListListener listener) { <FIXE> <FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> java.lang.System.out.println(resp); <FIXE>
<FIXS> if (radius == 1) { return bitmap; } <FIXE>
<FIXS> mRvResults.removeAllViews(); <FIXE> <FIXS> <FIXE>
<FIXS> chronometer.start(); new com.company.Messenger(1, null, chronometer).start(); new com.company.Messenger(1, null, chronometer).start(); new com.company.Messenger(1, "Some message", chronometer).start(); <FIXE>
<FIXS> return ("{\"dataset\":" + (java.util.Arrays.deepToString(result))) + "}"; <FIXE>
<FIXS> <FIXE>
<FIXS> return null; <FIXE>
<FIXS> com.autoherosrpg.heros.hero.Hero hero = hm.getHero(player); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> _peerChoking = true; com.jtorrent.storage.Piece piece = repo.getDownloadingPiece(this); if (piece != null) { repo.setPeerHavePiece(this, piece.getIndex(), false); cancelAllRequests(); <FIXE>
<FIXS> public int add(int col) { <FIXE> <FIXS> return 1; <FIXE> <FIXS> return 1; <FIXE> <FIXS> return 2; <FIXE> <FIXS> return 0; <FIXE>
<FIXS> return (((word.equals(".")) || (word.equals(","))) || (word.contains(" "))) || (stoplist.contains(word)); <FIXE>
<FIXS> final org.dasfoo.delern.models.Deck newDeck = new org.dasfoo.delern.models.Deck(input.getText().toString().trim(), DeckType.BASIC.name(), true); <FIXE>
<FIXS> inventoryManager.printStatus(); horseManager.printStatus(); <FIXE> <FIXS> java.lang.String command = input.nextLine(); inputProcessor.processCommand(command); <FIXE> <FIXS> <FIXE>
<FIXS> preprocessing = preprocessing.andThen(duplicateRemover); <FIXE>
<FIXS> sociam.pybossa.TaskPerformer.logger.error("Error ", e); <FIXE>
<FIXS> <FIXE>
<FIXS> if ((new java.util.HashSet(stmts).size()) > 1) { <FIXE>
<FIXS> return new org.springframework.http.ResponseEntity(org.springframework.http.HttpStatus.BAD_REQUEST); <FIXE>
<FIXS> if (((recurrenceExDate) == null) || (recurrenceExDate.isEmpty())) { <FIXE>
<FIXS> swipeRefreshLayout.setRefreshing(true); <FIXE> <FIXS> <FIXE>
<FIXS> epmc.value.OperatorEvaluator set = epmc.value.ContextValue.get().getEvaluator(OperatorSet.SET, type, epmc.value.TypeReal.get()); <FIXE>
<FIXS> builder = builder.messageConverters(new org.springframework.http.converter.json.MappingJackson2HttpMessageConverter()); <FIXE> <FIXS> builder = builder.basicAuthorization(admin.getUsername(), admin.getPassword()); <FIXE>
<FIXS> if (((!(isBack)) && ((bm) != null)) && ((startX) != (-1))) { <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> android.util.Log.d(com.mtxb2b.maverickai.BackgroundService.TAG, "initializeLocationManager"); <FIXE> <FIXS> android.util.Log.e(com.mtxb2b.maverickai.BackgroundService.TAG, e.getMessage()); <FIXE>
<FIXS> when(metaStoreFactory.getElements()).thenReturn(value); assertEquals(value, namedClusterManager.list(metaStore)); <FIXE>
<FIXS> if ((user.getAdmin()) == null) { <FIXE>
<FIXS> public <S extends T> java.util.List<S> findAll(org.springframework.data.domain.Example<S> example) { return db().find(example.getProbeType()).where(org.springframework.data.ebean.convert.ExampleExpressionBuilder.exampleExpression(db(), example)).findList(); <FIXE>
<FIXS> if (savedInstanceState == null) { maniteja.com.popularmovies.DetailActivityFragment fragment = new maniteja.com.popularmovies.DetailActivityFragment(); android.support.v4.app.FragmentManager manager = getSupportFragmentManager(); android.support.v4.app.FragmentTransaction transaction = manager.beginTransaction().add(R.id.detailFragment_container, fragment); transaction.commit(); } <FIXE>
<FIXS> for (int i = start - 1; i > 0; i--) { <FIXE> <FIXS> return -1; <FIXE>
<FIXS> return null; <FIXE>
<FIXS> <FIXE>
<FIXS> boolean isSubscribed; <FIXE> <FIXS> }else { isSubscribed = (json.has("is_following")) && (json.optBoolean("is_following", false)); } <FIXE>
<FIXS> int trackIndex = org.qstuff.qplayer.util.TrackUtils.trackListContainsTrack(trackList, event.track); if (trackIndex < 0) { <FIXE> <FIXS> <FIXE>
<FIXS> android.database.Cursor c = getContentResolver().query(mUri, null, null, null, null); if ((c != null) && (c.moveToFirst())) { <FIXE> <FIXS> }else { <FIXE>
<FIXS> wrongQuestion = ((int) ((java.lang.Math.random()) * (((wrongAnswers.size()) - 1) + 1))); <FIXE>
<FIXS> java.util.List<models.Score> scores = new java.util.ArrayList<models.Score>(this.scores); <FIXE>
<FIXS> private void checkReferenceTypeVariable(java.lang.String typeVariable, ch.tsphp.tinsphp.common.inference.constraints.TypeVariableConstraint typeVariableConstraint) { <FIXE> <FIXS> addConstraintsToRef(typeVariable, refTypeVariable); <FIXE>
<FIXS> java.lang.Iterable<siena.base.test.model.PersonLongAutoID> people = pm.createQuery(siena.base.test.model.PersonLongAutoID.class).order("n").iter(2); <FIXE>
<FIXS> public java.util.List<it.emarolab.amor.owlInterface.OWLOntologyChange> convertSuperClassesToEquivalentClass(java.lang.String className) { <FIXE> <FIXS> return getManipulator().convertSuperClassesToEquivalentClass(className); <FIXE>
<FIXS> <FIXE>
<FIXS> if (((mAdapter) != null) && ((mAdapter.getCustomHeaderView()) != null)) { <FIXE>
<FIXS> return new java.util.ArrayList<>(java.util.Arrays.asList(restaurantIds.split(","))); <FIXE>
<FIXS> <FIXE>
<FIXS> return new lobstre.chtrie.ConcurrentHashTrieMap.CNode<K, V>(narr, ((this.bitmap) ^ (flagPos.flag))); <FIXE>
<FIXS> return !(checkBatchEnd(batch)); <FIXE>
<FIXS> public static int canBeRecommended(java.lang.String userId) { <FIXE> <FIXS> return trs.size(); <FIXE>
<FIXS> final android.content.Intent shortcutIntent = com.pindroid.action.IntentHelper.ViewBookmarks(tag, username, this); <FIXE>
<FIXS> if (list.isEmpty()) { <FIXE>
<FIXS> currentMsg.set(msg); <FIXE>
<FIXS> <FIXE>
<FIXS> paused = true; <FIXE> <FIXS> <FIXE>
<FIXS> this.text = java.util.UUID.nameUUIDFromBytes(value.getBytes()).toString(); <FIXE>
<FIXS> if ((mNumTextures) > 0) { --(mNumTextures); if (((mNumTextures) == 0) && ((mModel) != null)) { generateLoadEvent(); } <FIXE>
<FIXS> if (userSchema == null) { <FIXE>
<FIXS> javafx.fxml.FXMLLoader loader = new javafx.fxml.FXMLLoader(getClass().getResource("LoginWindow.fxml")); <FIXE>
<FIXS> <FIXE>
<FIXS> if (((object.getStatus().equals(VMStatus.MigratingFrom)) && (vds != null)) && (vds.getId().equals(object.getMigratingToVds()))) { <FIXE>
<FIXS> int i = 0; while (true) { if (i >= size) { break; } PrintingLikeBoss.printWhitespaces((size - (i + 1))); PrintingLikeBoss.printStars((i + 1)); i++; <FIXE>
<FIXS> while ((mRun) && (set)) { <FIXE>
<FIXS> <FIXE>
<FIXS> java.util.Calendar expiresOn = java.util.Calendar.getInstance(); <FIXE>
<FIXS> java.lang.System.out.println(isInsert); <FIXE>
<FIXS> private float clampSeekValues(int progress, zeinhijazi.com.pmeas.effects.EffectsDefaults.EffectDefaults effectParam) { <FIXE> <FIXS> return clampedProgress; <FIXE>
<FIXS> if ((handler) != null) { handler.obtainMessage(DownLoadActivity.DOWNLOAD_FINISH, position, 0).sendToTarget(); } <FIXE> <FIXS> <FIXE>
<FIXS> if (length <= 0) { return null; } if (length == 1) { <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> double probability = java.lang.Math.exp(((newScore - originalScore) / temperature)); <FIXE>
<FIXS> java.util.ArrayList<java.lang.Integer[]> aux = utils.Utils.splitChromossome(bestIndividual.getChromossome(), problem.getNumberOfExames()); <FIXE>
<FIXS> <FIXE>
<FIXS> if (((javafx.scene.layout.GridPane.getRowIndex(node)) == row) && ((javafx.scene.layout.GridPane.getColumnIndex(node)) == column)) { <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> in.close(); <FIXE>
<FIXS> if ((listLatLng != null) && (!(listLatLng.isEmpty()))) { for (com.google.android.gms.maps.model.LatLng latLng : listLatLng) { bounds.include(latLng); } mMap.animateCamera(com.google.android.gms.maps.CameraUpdateFactory.newLatLngBounds(bounds.build(), 200)); <FIXE> <FIXS> <FIXE>
<FIXS> evaluator = new name.cantanima.idealnim.Game_Evaluation_Hashmap(getContext(), playable, null, game_level); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> temp = com.ecleague.parser.ast.util.Util.trimTarget(temp, KeyWord.WHILE); <FIXE>
<FIXS> <FIXE>
<FIXS> if ((newState != null) && (!(newState.equals(oldState)))) { <FIXE>
<FIXS> this.userSession.getSearchResult().setCurrentPage(0); <FIXE>
<FIXS> habit = new com.example.kienhoang.habitapp.Habit(cursor.getInt(0), null, cursor.getString(2), cursor.getInt(4), cursor.getInt(3)); <FIXE>
<FIXS> if ((rate != null) && (isWithin(rate.getValidity(), estimateDate))) <FIXE>
<FIXS> java.util.List<siena.base.test.model.PersonLongAutoIDModel> future = q.fetch(); java.util.List<siena.base.test.model.PersonLongAutoIDModel> persons = future; <FIXE>
<FIXS> if ((t != null) && ((t.resource()) != null)) { <FIXE>
<FIXS> Parent.fireFileEvent(new FileEvent(Parent, file, FileEvent.OPEN_OPTION)); <FIXE>
<FIXS> for (int xI = x; xI < (x + size); xI++) { for (int zI = z; zI < (z + size); zI++) { <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> timeToFirstCollision = timeToParticularCollision; <FIXE>
<FIXS> populateList(activities, ownCloudClient); <FIXE> <FIXS> <FIXE> <FIXS> swipeListRefreshLayout.setVisibility(View.GONE); swipeEmptyListRefreshLayout.setVisibility(View.VISIBLE); <FIXE>
<FIXS> video.VideoCall videoCall = new video.VideoCall(yourAccount.getName(), yourAccount.getMyIP()); <FIXE>
<FIXS> private co.cask.cdap.api.data.schema.Schema readUnion(com.google.gson.stream.JsonReader reader, java.util.Map<java.lang.String, co.cask.cdap.api.data.schema.Schema> knownRecords) throws java.io.IOException { <FIXE>
<FIXS> public static void Logout(final android.content.Context context) { new android.app.AlertDialog.Builder(context).setTitle("Съобщение?").setMessage("Сигурни ли сте, че искате да излезете от профила си?").setPositiveButton(android.R.string.yes, new android.content.DialogInterface.OnClickListener() { <FIXE> <FIXS> context.startActivity(new android.content.Intent(context, com.inst.mobileinstitutions.HomeActivity.class)); <FIXE>
<FIXS> <FIXE>
<FIXS> webView.loadUrl(((((((("javascript:updateTerritory('" + (t.getId())) + "', ") + "{color:'") + (u.getColor())) + "', armies:'") + (t.getArmies())) + "'})")); <FIXE>
<FIXS> return com.badlogic.gdx.graphics.g2d.TextureRegion.split(atlas, ((int) ((atlas.getWidth()) / cols)), ((int) ((atlas.getHeight()) / rows))); <FIXE>
<FIXS> <FIXE>
<FIXS> org.talend.daikon.properties.presentation.Form schemaForm = org.talend.daikon.properties.presentation.Form.create(this, Form.MAIN); <FIXE> <FIXS> org.talend.daikon.properties.presentation.Form schemaRefForm = org.talend.daikon.properties.presentation.Form.create(this, Form.REFERENCE); <FIXE>
<FIXS> if (translation == null) { <FIXE>
<FIXS> <FIXE>
<FIXS> if (currentQueue.finishShutdown(parent.getChannel())) { <FIXE>
<FIXS> if (value == null) { return null; <FIXE> <FIXS> if (value.isArrayValue()) { return visitArray(rootPath, value.asArrayValue()); }else if (value.isMapValue()) { return visitMap(rootPath, value.asMapValue()); }else { return value; } <FIXE>
<FIXS> <FIXE>
<FIXS> public boolean decrementHealth(int value) { <FIXE> <FIXS> return (realHealth) == 0; <FIXE>
<FIXS> <FIXE>
<FIXS> org.deeplearning4j.rl4j.learning.async.nstep.discrete.AsyncNStepQLearningDiscreteDense<org.deeplearning4j.rl4j.mdp.toy.SimpleToyState> dql = new org.deeplearning4j.rl4j.learning.async.nstep.discrete.AsyncNStepQLearningDiscreteDense(mdp, org.deeplearning4j.rl4j.Toy.TOY_NET, org.deeplearning4j.rl4j.Toy.TOY_ASYNC_QL, manager); <FIXE>
<FIXS> if ((keys[i]) != null) aux.add(keys[i]); <FIXE>
<FIXS> <FIXE>
<FIXS> fragmentTransaction.replace(R.id.fragmentContainer, newFragment); <FIXE>
<FIXS> <FIXE> <FIXS> gsm = new com.haxlabs.maxhax.handlers.GameStateManager(this); <FIXE>
<FIXS> <FIXE> <FIXS> mShowTopError = true; <FIXE> <FIXS> mShowTopError = false; <FIXE>
<FIXS> return new org.apache.cassandra.io.util.ReaderCache.Buffer(buffer, key.position); <FIXE>
<FIXS> logger.info("{}: vBridge has been changed: old={{}}, new={{}}", ident, toString(old), toString(vbrc)); <FIXE>
<FIXS> if ((plc.traveled) > ((temp.traveled) + 1)) { plc.traveled = (temp.traveled) + 1; } <FIXE>
<FIXS> setBoard(move[0]); addMarker(move[1]); <FIXE>
<FIXS> private int readWithCharAt(char[] array, int offset, int limitedLength) { <FIXE>
<FIXS> movieList = new java.util.ArrayList(java.util.Arrays.asList(mMovieLists)); <FIXE>
<FIXS> return ((((this.t) != 0.0F) || ((this.b) != 0.0F)) || ((this.l) != 0.0F)) || ((this.r) != 0.0F); <FIXE>
<FIXS> <FIXE>
<FIXS> span = spanPostProcessor.postProcess(span, storage); <FIXE>
<FIXS> org.apache.parquet.schema.MessageType fromParquetSchema(java.util.List<org.apache.parquet.format.SchemaElement> schema) { <FIXE> <FIXS> buildChildren(builder, iterator, root.getNum_children()); <FIXE>
<FIXS> java.lang.String[] script = this.getConfig(settings).generateSchemaCreationScript(getDialectInternal()); <FIXE>
<FIXS> private boolean replaceInternal(int start, int end, java.lang.CharSequence tb, int tbstart, int tbend) { <FIXE> <FIXS> return (start != (info.start)) || (end != (info.end)); <FIXE>
<FIXS> counts.put(keys[i], ptCounts[i].count); <FIXE>
<FIXS> <FIXE> <FIXS> assertNotNull(equal); <FIXE>
<FIXS> mGroupMembersAdapter = new fr.sims.coachingproject.ui.adapter.GroupMembersAdapter(getActivity(), mGroupId); <FIXE>
<FIXS> java.lang.System.out.println(delta); <FIXE> <FIXS> ((com.valarion.gameengine.events.rpgmaker.GameEvent) (event)).getActive().setRendersprite(((((elapsed) / (period)) % 2) == 0)); <FIXE>
<FIXS> Mighty_Cards.Deck expResult = testDeck; <FIXE>
<FIXS> resize(((arr.length) / 2)); <FIXE>
<FIXS> org.opencb.cellbase.core.loader.CellBaseLoader cellBaseLoader = ((org.opencb.cellbase.core.loader.CellBaseLoader) (java.lang.Class.forName(loader).getConstructor(java.util.concurrent.BlockingQueue.class, java.lang.String.class, java.lang.String.class, org.opencb.cellbase.core.CellBaseConfiguration.class).newInstance(blockingQueue, data, database, cellBaseConfiguration))); <FIXE>
<FIXS> if (closeButton.waitForExists(1)) { <FIXE>
<FIXS> drawFlash(canvas, blockRect, contentRect); <FIXE> <FIXS> drawDefaultText(canvas, blockRect, contentRect); <FIXE> <FIXS> drawText(canvas, getText(), blockRect, contentRect, hasBottomLine()); <FIXE>
<FIXS> <FIXE> <FIXS> notifyPostService(context); <FIXE>
<FIXS> if ((values == null) || ((values.get(1)) == 1)) { <FIXE>
<FIXS> private java.util.HashSet<GenImage.CandidateImage> select() { final java.util.HashSet<GenImage.CandidateImage> newCandidateImages = new java.util.HashSet<GenImage.CandidateImage>(this.populationSize); <FIXE>
<FIXS> if ((agarSprite != null) && (!(agarSprite.isActive()))) { <FIXE> <FIXS> if (revealedAgar == 10) { break; } <FIXE>
<FIXS> return org.springframework.http.ResponseEntity.ok(new sample.models.Status(sample.models.Status.ERROR_UNAUTHORIZED, "user not authorized")); <FIXE>
<FIXS> <FIXE> <FIXS> rock.x = com.badlogic.gdx.math.MathUtils.random(0, ((Gdx.graphics.getWidth()) - (rock.width))); rock.y = Gdx.graphics.getHeight(); <FIXE>
<FIXS> if ((cursor == null) || ((mIndices) == null)) throw new java.lang.NullPointerException(); <FIXE>
<FIXS> YAxis : for (int y = x + 1; y < (matrix.length); y++) { <FIXE>
<FIXS> when(this.componentManager.getInstance(DocumentReferenceResolver.TYPE_REFERENCE, "current")).thenReturn(this.resolver); <FIXE> <FIXS> when(this.resolver.resolve(reference)).thenReturn(reference); <FIXE>
<FIXS> return (arguments[0].equals("by")) && (commandList_.getDisplayArgumentList().contains(arguments[1])); <FIXE>
<FIXS> public static java.io.File getXMLTemplate(pcgen.facade.core.CharacterFacade character) { <FIXE>
<FIXS> return Game.instance.nativeManager.toNative(item.factory().makeItem()); <FIXE>
<FIXS> if (totNum == 0) { controller.setAverageDeliveryTime(0); }else { controller.setAverageDeliveryTime((avTime / totNum)); } <FIXE>
<FIXS> super.onSaveInstanceState(outState); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> java.lang.String vk = txtVrstaKnjige.getText(); if (vrstaKnjigeServiceBean.existsVrstaKnjige(vk)) { message = "The entered book type already exists!"; return false; } if ((vk.equals(null)) || (vk.equals(""))) { txtVrstaKnjige.setBackground(java.awt.Color.LIGHT_GRAY); message = "Book type title is missing!"; return false; <FIXE>
<FIXS> if ((checkMethods) && (isClassMethod(ast))) { <FIXE>
<FIXS> com.github.fishio.FishIO.instance = this; <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> return loginAdminToPage(resultsUrl, teammates.test.pageobjects.InstructorFeedbackResultsPage.class); <FIXE>
<FIXS> orcidSecurityManager.checkPermissions(ScopePathType.ORCID_WORKS_READ_LIMITED); <FIXE>
<FIXS> else if ((position) > 1) request = manager.makeRequestMessage(statement, request.pagingState()); <FIXE>
<FIXS> context.addMessage(null, new javax.faces.application.FacesMessage(localeManagerBean.localize(hu.schonherz.project.admin.web.view.CompaniesView.CHANGING_SUCCESS), ((companyVo.isActive() ? localeManagerBean.localize(hu.schonherz.project.admin.web.view.CompaniesView.INACTIVATE_SUCCESS) : localeManagerBean.localize(hu.schonherz.project.admin.web.view.CompaniesView.ACTIVATE_SUCCESS)) + (companyVo.getCompanyName())))); <FIXE>
<FIXS> return new com.google.gson.JsonParser().parse(invokeGET(url).execute().parseAsString()); <FIXE>
<FIXS> <FIXE> <FIXS> commonspec.getLogger().debug("Closing zookeeper connection"); <FIXE>
<FIXS> while ((minDirtyLSN != null) && ((minDirtyLSN.getSegment()) < (segmentId))) { <FIXE>
<FIXS> <FIXE>
<FIXS> void updateNotification(monakhv.samlib.service.AuthorUpdateProgress progress, java.lang.String title) { <FIXE> <FIXS> mProgressNotification = new monakhv.android.samlib.service.ProgressNotification(mSettingsHelper, title); <FIXE>
<FIXS> return (seq.getCounter()) + 1; <FIXE>
<FIXS> java.lang.System.out.println((" with " + (findGameObject(allGameObjects, items.get(1)).getName()))); <FIXE> <FIXS> <FIXE>
<FIXS> public boolean triThreat(int[] s, int n) { return (((s[0]) == 0) && ((s[5]) == 0)) && (((((s[1]) + (s[2])) + (s[3])) + (s[4])) == (3 * n)); <FIXE>
<FIXS> java.lang.String generateDirectory() { <FIXE> <FIXS> return salt.toString(); <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> for (int i = 0; i <= (song.getLength()); i++) { <FIXE>
<FIXS> <FIXE> <FIXS> searchView.clearFocus(); <FIXE>
<FIXS> input = userInput.nextLine(); <FIXE>
<FIXS> java.io.File queries = new java.io.File(db.shared.utils.CommonUtils.getResourceFile("queries.json")); <FIXE>
<FIXS> m_eventBuilder.setSnmpHost(org.opennms.core.utils.InetAddressUtils.str(trapAddress)); <FIXE> <FIXS> long nodeId = m_trapdIpMgr.getNodeId(org.opennms.core.utils.InetAddressUtils.str(trapAddress)); <FIXE>
<FIXS> isActivated = !(isActivated); <FIXE> <FIXS> <FIXE>
<FIXS> this.handlerMappings.add(mapper); <FIXE>
<FIXS> if ((((com.s7design.menu.utils.Settings.getAccessToken(this)) != null) && (!(com.s7design.menu.utils.Settings.getAccessToken(this).isEmpty()))) && (com.s7design.menu.activities.CheckoutActivity.isCheckoutCLicked)) { <FIXE>
<FIXS> void impl_renderNodeToScreen(java.lang.Object implGraphics) { <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> if (file.toFile().isDirectory()) <FIXE>
<FIXS> if ((pad == 0) && ((count) == 0)) return ; <FIXE>
<FIXS> if (!(isLocationEmpty(start))) { return false; } <FIXE>
<FIXS> for (int i = 0; i < (getPieces().size()); i++) { android.widget.ListAdapter piece = getPieces().get(i); <FIXE>
<FIXS> if (campo != null) warning("El campo esta siendo utilizado por otro elemento en la misma pagina", campo, LedPackage.Literals.CAMPO__ATRIBUTOS, 0); <FIXE>
<FIXS> if ((value.length()) > ((CalcView.roundingLengthBeforeDecimal) + (CalcView.roundingLengthAfterDecimal))) { <FIXE>
<FIXS> throw new java.lang.IllegalArgumentException(((("You cannot increment a non-number." + " Key type [") + (oldValue.getClass().toString())) + "]")); <FIXE>
<FIXS> public boolean isLoginOK() throws com.xsoft.android.ebookreader.repository.exceptions.CacheException { <FIXE> <FIXS> dbl = dbhelper.getLoginDao().queryBuilder().queryForFirst(); <FIXE>
<FIXS> if (result != null) { if (result.equals(java.lang.Boolean.TRUE)) sink.write("true"); else if (result.equals(java.lang.Boolean.FALSE)) sink.write("false"); <FIXE> <FIXS> } <FIXE>
<FIXS> float nCurrentSpeed = location.getSpeed(); <FIXE>
<FIXS> if ((downloadTask) != null) return ; <FIXE>
<FIXS> @org.jplus.hyb.database.crud.Test <FIXE> <FIXS> fail("testAddParmeter faild."); <FIXE> <FIXS> assertNotNull(mapList); assertTrue(org.jplus.util.ObjectHelper.isNotEmpty(mapList)); <FIXE>
<FIXS> output.collect(cellId, values.next()); <FIXE>
<FIXS> org.junit.Assert.assertFalse(cluster.getAutoExportEnabled()); cluster.setAutoExportEnabled(false); org.junit.Assert.assertFalse(cluster.getAutoExportEnabled()); <FIXE> <FIXS> <FIXE>
<FIXS> public void hideDelayed(long delay) { <FIXE>
<FIXS> <FIXE>
<FIXS> public void SQLUpdate(Blood.db.pojos.Hospital hospUpdate) throws java.io.IOException, java.sql.SQLException { <FIXE> <FIXS> prep.setInt(4, hospUpdate.getId()); <FIXE>
<FIXS> java.util.Map<java.lang.Long, java.util.Set<java.lang.String>> tags = userQueryDao.getQueryTags(java.util.Arrays.asList(17L)); <FIXE>
<FIXS> type = null; <FIXE>
<FIXS> if ((term == null) || ((term.length()) == 0)) return term; <FIXE>
<FIXS> frontend.AnalizadorSintacticoTiny.jj_la1_2 = new int[]{ 0 , 0 , 0 , 1 , 0 , 0 , 0 , 1 , 103 , 0 , 0 , 103 , 103 , 0 , 0 , 0 , 0 , 103 , 103 , 103 , 102 }; <FIXE>
<FIXS> private java.util.List<java.lang.Thread> createItems(int n) { final java.util.ArrayList<java.lang.Thread> items = new java.util.ArrayList<>(); <FIXE> <FIXS> final java.lang.Thread item = new java.lang.Thread("Morten Salte", "This is a test message. The length of the message is rather long. This is because it is intended to test whether the text abbrevation is working.", 2); <FIXE>
<FIXS> java.util.Map<java.util.UUID, java.util.Set<java.lang.String>> fieldSearches = com.google.common.collect.Maps.newHashMap(); fieldSearches.put(employeeIdPropertyId, com.google.common.collect.Sets.newHashSet("12347")); <FIXE>
<FIXS> extractJson(jsonLongPlot); <FIXE>
<FIXS> notesAdapter = new sw2017.at.adapters.NotesAdapter(this); <FIXE>
<FIXS> logger.info(java.lang.String.format("Application started with WADL available at %sapplication.wadl", getBaseUri())); <FIXE>
<FIXS> <FIXE>
<FIXS> if ((mNotificationsPref) == null) { <FIXE>
<FIXS> mHandler.removeCallbacksAndMessages(null); <FIXE>
<FIXS> if ((attributeSelectedAdapter.getAttributeHolders()) != null) { for (com.example.igiagante.thegarden.creation.plants.presentation.dataHolders.AttributeHolder holder : attributeSelectedAdapter.getAttributeHolders()) { if (holder.isSelected()) { com.example.igiagante.thegarden.core.domain.entity.Attribute attribute = holder.getModel(); attributes.add(attribute); } <FIXE>
<FIXS> final eu.modelwriter.core.alloyinecore.recognizer.AlloyInEcoreParser parser = new eu.modelwriter.core.alloyinecore.recognizer.AlloyInEcoreParser(tokens, uri); <FIXE>
<FIXS> items.add(item); <FIXE> <FIXS> <FIXE>
<FIXS> if (item.hasItemMeta()) { if (item.getItemMeta().hasLore()) { if (item.getItemMeta().getLore().contains("BjornNotice GUI")) { event.setCancelled(true); } } <FIXE>
<FIXS> positions.remove(index); <FIXE>
<FIXS> if (((i.getDepartureLocation()) != (i.getArrivalLocation())) && ((i.getStops().size()) != 2)) { <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> if ((mUri) != null) { return new android.support.v4.content.CursorLoader(getActivity(), mUri, FORECAST_COLUMNS, null, null, null); } return null; <FIXE>
<FIXS> else if ((display.getTextFieldText().matches("[0-9]+")) && ((validateVoter(java.lang.Integer.parseInt(display.getTextFieldText()))) == true)) { ballot.setVoterID(java.lang.Integer.parseInt(display.getTextFieldText())); moveToNextView(); }else display.warn("Incorrect Registration Number."); <FIXE>
<FIXS> <FIXE> <FIXS> drawerManager.closeDrawer(); <FIXE>
<FIXS> cruise.umple.compiler.Assert.assertEquals(1, sm.getFinalStates().size()); <FIXE>
<FIXS> <FIXE> <FIXS> java.util.List<com.aimluck.eip.facilities.FacilityGroupResultData> list = com.aimluck.eip.facilities.util.FacilitiesUtils.getFacilityGroupResultList(query.fetchList()); <FIXE>
<FIXS> public int getDiaSemana(java.lang.String diaSemana) { <FIXE>
<FIXS> mConnection = new android.content.ServiceConnection() { <FIXE>
<FIXS> cz.jskrabal.example.ReentrantLockExample.REENTRANT_LOCK.lock(); <FIXE> <FIXS> <FIXE>
<FIXS> if (list == null) { return defaultValue; } <FIXE>
<FIXS> private static long unacker(long m, long n) { <FIXE>
<FIXS> i -= 1; <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> values.addAll(result.getValues()); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> mOnPlayingListener.onPlayStateChanged(PLAY_STATE); <FIXE>
<FIXS> <FIXE>
<FIXS> container.setBackgroundColor(Color.BLACK); <FIXE> <FIXS> com.bumptech.glide.Glide.with(this).load(mResizer.getUrlForScreen(mUrls[position])).into(photoView); <FIXE>
<FIXS> operationOrderWorkflowService.finish(operationOrder); <FIXE>
<FIXS> return (((((((((("[KExecutor] Name: " + (name)) + "\nmaxThreads: ") + (maxThreads)) + "\nmaxQueueSize: ") + (maxQueueSize)) + "\nmaxBlockTime: ") + (maxBlockTime)) + "\nmaxThreadRunTime: ") + (maxThreadRunTime)) + "\nstate: ") + (state); <FIXE>
<FIXS> if (input.equals(tv)) { <FIXE> <FIXS> if (input.equals(fv)) { <FIXE> <FIXS> if (input.equals("")) { <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> org.team1540.quasarhelios.Rollers.setup(); <FIXE>
<FIXS> private java.util.ArrayList<com.google.android.gms.maps.model.MarkerOptions> fillMarkerList(java.util.ArrayList<com.google.android.gms.maps.model.MarkerOptions> markerList, com.igorko.accesibleif.models.Element element, com.google.android.gms.maps.model.BitmapDescriptor markerIcon) { <FIXE>
<FIXS> while (((owner) != null) && ((owner) != (java.lang.Thread.currentThread()))) { try { condition.await(); } catch (java.lang.InterruptedException e) { throw org.gradle.internal.UncheckedException.throwAsUncheckedException(e); } } owner = java.lang.Thread.currentThread(); operations.pushCacheAction(operationDisplayName); <FIXE>
<FIXS> return new java.util.Date(((java.lang.Integer.valueOf(end[0])) - 1900), ((java.lang.Integer.valueOf(end[1])) - 1), endDay); <FIXE>
<FIXS> <FIXE>
<FIXS> java.util.ArrayList<com.wagner.marcel.shoppinglist.Data.Itemdata.ShoppingItemNew> delete = new java.util.ArrayList<>(); <FIXE> <FIXS> delete.add(s); <FIXE> <FIXS> } for (com.wagner.marcel.shoppinglist.Data.Itemdata.ShoppingItemNew s : delete) { list.remove(s); <FIXE>
<FIXS> java.lang.String profile = response.substring(((response.indexOf(prefix)) + (prefix.length()))); <FIXE>
<FIXS> public java.lang.Double fight(com.example.foes.Fire withFire, java.lang.String foeName, byte byteParam, short shortParam, int intParam, long longParam, float floatParam, double doubleParam, char charParam, boolean booleanParam, java.lang.Byte byteParamWrapper, java.lang.Short shortParamWrapper, java.lang.Integer intParamWrapper, java.lang.Long longParamWrapper, java.lang.Float floatParamWrapper, java.lang.Double doubleParamWrapper, java.lang.Character charParamWrapper, java.lang.Boolean booleanParamWrapper, java.math.BigDecimal bigDecimalParam) { java.lang.System.out.println(fooFighter.fight(withFire)); return doubleParamWrapper; <FIXE>
<FIXS> layout = org.apache.logging.log4j.core.layout.PatternLayout.createLayout(null, null, null, null, null, true, false, null, null); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> cancelPlayer(); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> int junctionSignature = junction1 | (junction2 << 8); <FIXE>
<FIXS> @java.lang.Override <FIXE> <FIXS> org.springframework.mock.web.MockHttpServletRequest request = org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post(this.loginProcessingUrl).accept(this.acceptMediaType).param(this.usernameParam, this.username).param(this.passwordParam, this.password).buildRequest(servletContext); return this.postProcessor.postProcessRequest(request); <FIXE>
<FIXS> if (waterConnectionDetails.getConnectionType().equals(ConnectionType.NON_METERED)) { <FIXE>
<FIXS> if ((hand[i]) != null) { if ((hand[i].isInPlay()) == true) { int rank = hand[i].checkRank(); player.discard(hand[i]); return rank; } <FIXE>
<FIXS> fragmentManager.beginTransaction().add(R.id.play_chord_activity_content, com.example.webprog26.guitarchords.fragments.PlayShapeFragment.newInstance(getPlayableShapePosition()), com.example.webprog26.guitarchords.guitar_chords_engine.commands.LoadShapeFragmentCommand.PLAY_FRAGMENT_TAG).commit(); }else { fragmentManager.beginTransaction().replace(R.id.play_chord_activity_content, com.example.webprog26.guitarchords.fragments.PlayShapeFragment.newInstance(getPlayableShapePosition()), com.example.webprog26.guitarchords.guitar_chords_engine.commands.LoadShapeFragmentCommand.PLAY_FRAGMENT_TAG).commit(); <FIXE>
<FIXS> com.ctrip.platform.dal.dao.KeyHolder keyHolder = new com.ctrip.platform.dal.dao.KeyHolder(); <FIXE>
<FIXS> <FIXE>
<FIXS> intent.putExtra("camera_mode", rb_object_centered.isChecked()); <FIXE> <FIXS> <FIXE>
<FIXS> java.lang.System.out.print("limits in getFollowersIDs: "); <FIXE>
<FIXS> record.setStringValue(AssertFactoryMiddlewareDatabaseConstant.ASSET_FACTORY_IDENTITY_ISSUER_PUBLIC_KEY_COLUMN, publicKey); record.setStringValue(AssertFactoryMiddlewareDatabaseConstant.ASSET_FACTORY_IDENTITY_ISSUER_NAME_COLUMN, name); <FIXE> <FIXS> <FIXE>
<FIXS> guiError.showErrorDialogAndContinue(e); <FIXE>
<FIXS> return (((((masterType) == (org.harctoolbox.girr.Command.MasterType.parameters)) && (!(parameters.containsKey(org.harctoolbox.girr.Command.toggleParameterName)))) && ((protocol) != null)) && (protocol.hasParameter(org.harctoolbox.girr.Command.toggleParameterName))) && (protocol.hasParameterMemory(org.harctoolbox.girr.Command.toggleParameterName)) ? ((int) (protocol.getParameterMax(org.harctoolbox.girr.Command.toggleParameterName))) + 1 : 1; <FIXE>
<FIXS> if (((dir != null) && (!(dir.isInternalDocument()))) && (!(jloda.gui.director.ProjectManager.windowMenusUnderControl.contains(menu)))) { <FIXE>
<FIXS> assertEquals(qResult.size(), 1); assertEquals(indexUsages(db), (idxUsagesBefore + 2)); <FIXE>
<FIXS> if ((horse) == null) { return ; } <FIXE>
<FIXS> chat.log(((eof.toString()) + " Disconnected from host.")); <FIXE>
<FIXS> java.lang.System.out.println(JsonClient); <FIXE>
<FIXS> start_date = start_date2; value = getStartDate(); <FIXE>
<FIXS> generateCombs(allCombs, oneComb, 1, n, k); <FIXE>
<FIXS> <FIXE> <FIXS> super.drawScreen(mouseX, mouseY, partialTicks); <FIXE>
<FIXS> org.cloudish.borg.model.Host h = new org.cloudish.borg.model.Host(0, 1, 0.1, null, new java.util.HashMap<>()); <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> final int taisenBasicHoug = taiSenBasicHoug(attackShip); <FIXE> <FIXS> augmenting *= taisenAugmenting; <FIXE>
<FIXS> startActionMode(); <FIXE>
<FIXS> <FIXE>
<FIXS> mShareCallback = null; <FIXE>
<FIXS> freezeHandler.removeFreeze(sender, targetPlayer, true); <FIXE> <FIXS> freezeHandler.addFreeze(sender, targetPlayer, true); <FIXE>
<FIXS> <FIXE>
<FIXS> bcr = new android.content.BroadcastReceiver() { <FIXE>
<FIXS> for (int j = i; (j > 0) && (com.jaichaudhary.algorithms.sort.InsertionSort.less(a[j], a[(j - 1)])); j--) { com.jaichaudhary.algorithms.sort.InsertionSort.exch(a, j, (j - 1)); <FIXE>
<FIXS> newMocha.setAmtChocolate("a"); <FIXE>
<FIXS> CommandHandler.enabled = 1; <FIXE> <FIXS> <FIXE> <FIXS> org.bukkit.Bukkit.getServer().broadcastMessage(((org.bukkit.ChatColor.RED) + "[RS] RadStorm has been initiated. Take cover!")); <FIXE>
<FIXS> if (((episode.getThumbnail()) == null) || ((episode.getThumbnail().getUrl()) == null)) { episode.setThumbnail(episode.getFeed().getThumbnail()); <FIXE>
<FIXS> if ((image) != null) { int lengthPos = col * (unit); int heightPos = row * (unit); image.setBounds(heightPos, lengthPos, (heightPos + (unit)), (lengthPos + (unit))); return true; }else { return false; } <FIXE>
<FIXS> screenOnTime = getScreenOnTimeLocked(timeNow); <FIXE>
<FIXS> <FIXE>
<FIXS> bw.write(((this.getMenu()) + "\n")); bw.write(((this.getFrequency()) + "\n")); <FIXE>
<FIXS> expectLastCall().andThrow(new com.jasify.schedule.appengine.model.EntityNotFoundException(((java.lang.String) (null)))); <FIXE>
<FIXS> java.lang.Class<?> proxyClass = io.vertx.serviceproxy.ProxyHelper.loadClass(proxyClassName, clazz); <FIXE>
<FIXS> if (fencer1.equals(f)) { pointsFor1 = points; } if (fencer2.equals(f)) { pointsFor2 = points; } <FIXE> <FIXS> <FIXE>
<FIXS> if (s != null) { try { byte[] data = biz.source_code.base64Coder.Base64Coder.decode(s); java.io.ObjectInputStream ois = new java.io.ObjectInputStream(new java.io.ByteArrayInputStream(data)); java.lang.Object o = ois.readObject(); ois.close(); return o; } catch (java.lang.ClassNotFoundException e) { e.printStackTrace(); } catch (java.io.IOException e) { e.printStackTrace(); } <FIXE>
<FIXS> android.app.AlertDialog dialog = new android.app.AlertDialog.Builder(mContext).setMessage(message).setPositiveButton(mContext.getResources().getString(R.string.confirm), null).setCancelable(true).create(); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> return address.util.XmlUtil.getDataFromFile(cloudFile, address.sync.model.CloudAddressBook.class); <FIXE>
<FIXS> if (location != null) { com.firebase.client.Firebase tutorStore = db.child("tutors").child(tutor.getFullName()); tutorStore.setValue(tutor); geoFire.setLocation(tutor.getFullName(), new com.firebase.geofire.GeoLocation(location.getLatitude(), location.getLongitude())); } <FIXE>
<FIXS> if (tool != null) { tool.hide(); getActivity().getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN); } <FIXE>
<FIXS> <FIXE>
<FIXS> return (((com.framgia.wsm.utils.common.StringUtils.isNotBlank(mTextMorning)) && (com.framgia.wsm.utils.common.StringUtils.isNotBlank(mTextAfternoon))) && (!(mTextMorning.equals(mTimeIn)))) && (mTextAfternoon.equals(mTimeOut)); <FIXE>
<FIXS> return new org.springframework.http.ResponseEntity(pin, org.springframework.http.HttpStatus.OK); <FIXE>
<FIXS> <FIXE>
<FIXS> if (url.isEmpty()) { return ; } <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> if (((playerConnection) == null) || ((player.get()) instanceof net.sf.cglib.proxy.Factory)) { <FIXE>
<FIXS> turns = turns % 8; <FIXE> <FIXS> dirInt = (dirInt + 8) % 8; <FIXE>
<FIXS> <FIXE>
<FIXS> this.adapter.unregisterDataSetObserver(adapterObserver); <FIXE>
<FIXS> assertEquals(jsonStr, generator.genWidget(properties, Form.MAIN).toString()); <FIXE>
<FIXS> <FIXE>
<FIXS> if (ua.com.juja.sergiishcherbakov.sqlcmd.model.CorrectParameterChecker.isCorrectFirstParameter(goodParameter, data[0])) { <FIXE>
<FIXS> if ((components) != null) { synchronized(components) { for (org.jzy3d.plot3d.primitives.AbstractDrawable c : components) { if ((c != null) && (c instanceof org.jzy3d.plot3d.primitives.AbstractWireframeable)) ((org.jzy3d.plot3d.primitives.AbstractWireframeable) (c)).setWireframeColor(color); } <FIXE> <FIXS> } <FIXE>
<FIXS> this.save(this.player); <FIXE>
<FIXS> boolean isOpenMessageRoaming = params.getBoolean("isOpenMessageRoaming"); <FIXE>
<FIXS> int x = _ps.pop(); <FIXE> <FIXS> <FIXE>
<FIXS> if ((ar.rulosoft.navegadores.Navigator.navigator) == null) ar.rulosoft.navegadores.Navigator.navigator = new ar.rulosoft.navegadores.Navigator(contexts[0]); <FIXE>
<FIXS> <FIXE>
<FIXS> if (columnIndex != 0) { <FIXE> <FIXS> if (this.valueDefined) { throw new java.lang.IllegalStateException("Attempted to set the list row twice."); } this.valueDefined = true; this.value = value; <FIXE>
<FIXS> post(peerDto, result); <FIXE>
<FIXS> if ((secondaryFragment != null) && ((movieItemArray.size()) != 0)) { <FIXE>
<FIXS> public static void setConfigurationFields(java.lang.Object configurable, org.apache.flume.Context context) throws org.apache.flume.conf.ConfigurationException { <FIXE> <FIXS> org.apache.flume.tools.FlumeBeanConfigurator.setConfigurationFields(configurable, properties); <FIXE>
<FIXS> adowrath.fx.model.Model.addLocaleListener(this::changed); <FIXE> <FIXS> if (isToTranslate()) { initLocalization(); }else { java.lang.System.err.println(((toString()) + " is not to translate? Is this a working matter?")); <FIXE>
<FIXS> <FIXE> <FIXS> android.support.v7.widget.RecyclerView.LayoutManager mLayoutManager = new android.support.v7.widget.LinearLayoutManager(getActivity()); <FIXE>
<FIXS> final java.lang.String relativePath = org.jerkar.tool.builtins.eclipse.JkUtilsFile.getRelativePath(projectFile, file); <FIXE>
<FIXS> return instantiateNewCourse(name, context, count); <FIXE>
<FIXS> com.centurylink.mdw.util.file.ZipHelper.writeZipWith(directory, fos, includes, false); <FIXE>
<FIXS> if ((data != null) && (verboseLevel < 2)) { <FIXE>
<FIXS> for (com.ivxg.game.agent.INetRequestHandler handler : netRequestHandlerList) { try { <FIXE> <FIXS> } catch (java.lang.Throwable e) { com.ivxg.gate.DefaultClientAgent.logger.error("ClientCloseError!", e); <FIXE> <FIXS> <FIXE>
<FIXS> if (dataType != null) { if ((org.apache.kylin.measure.hllc.HLLCMeasureType.DATATYPE_HLLC.equals(dataType.getName())) == false) throw new java.lang.IllegalArgumentException(); if (((dataType.getPrecision()) < 1) || ((dataType.getPrecision()) > 5000)) throw new java.lang.IllegalArgumentException(); } <FIXE>
<FIXS> if ((currentPosition) < (maxDuration)) { currentPosition += 200; seekBar.setProgress(currentPosition); setElapsedTime(currentPosition); }else { currentPosition = 0; isPlaying = false; } <FIXE> <FIXS> seekHandler.postDelayed(this, 200); <FIXE>
<FIXS> if ((((GetMinionCount(Colors.None)) + (GetDemonCount())) + (GetTrollCount())) > 0) { <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> if ((translation.length) > 0) { translationList.add(translation[0].replace("\"", "")); } <FIXE>
<FIXS> image.setImageResource(((pc.getDetails().get(detailID)) != null ? (pc.getDetails().get(detailID).length()) == 10 ? R.drawable.ic_yes_large : value > indicator ? R.drawable.ic_no : R.drawable.abc_list_divider_mtrl_alpha : value > indicator ? R.drawable.ic_no : R.drawable.abc_list_divider_mtrl_alpha)); <FIXE>
<FIXS> if (device.equals(Devices.Keys.PLUGIN)) { <FIXE>
<FIXS> return new com.helpme.app.utils.tuple.Tuple3(saveRoot.loadLevel(), saveRoot.loadPlayer(), saveRoot.loadEnemies()); <FIXE>
<FIXS> buffer.append("\n"); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> startActivity(new android.content.Intent(getApplicationContext(), com.example.johnpham.hcftw.Calender_.class)); <FIXE>
<FIXS> <FIXE>
<FIXS> org.junit.Assert.assertTrue(listOfXAttrNames.contains(attrName1)); org.junit.Assert.assertTrue(listOfXAttrNames.contains(attrName2)); <FIXE>
<FIXS> <FIXE> <FIXS> long start = getStartFieldValue().getTime(); <FIXE>
<FIXS> map.put("patid", argVal); s = reqHan.sendGetRequestParam(ConnVars.URL_FETCH_PAT_RX, map); <FIXE>
<FIXS> return (mean_nkw[k][(wsdn - 1)]) - (gamma[ex_s][ex_d][ex_n][k]); <FIXE>
<FIXS> } if (pencilMoveEnabled) { this.updatePencilCenterByDrag(aPoint); } <FIXE>
<FIXS> org.junit.Assert.assertTrue(field.getDrawables().contains(d)); <FIXE>
<FIXS> if ((u1) != (u2)) { <FIXE>
<FIXS> addresses = backend.addresses(); <FIXE>
<FIXS> location = new Model.Location(x, y); <FIXE>
<FIXS> if (((lhsVal.doubleVal(doc)) == (lhsVal.longVal(doc))) && ((rhsVal.doubleVal(doc)) == (rhsVal.longVal(doc)))) { <FIXE>
<FIXS> <FIXE>
<FIXS> return null; <FIXE>
<FIXS> mYawR = ((float) (java.lang.Math.toRadians((-angle)))); com.lvonasek.openconstructor.TangoJNINative.setView(((mYawM) + (mYawR)), mPitch, mMoveX, mMoveY, mMoveZ, (!(mViewMode))); <FIXE>
<FIXS> in.yousee.theadmin.YouseeCustomActivity.setProgressVisible(this, false); <FIXE>
<FIXS> if (!(myAdvisors.isEmpty())) <FIXE>
<FIXS> return 0; <FIXE>
<FIXS> mAdapter.notifyDataSetChanged(); <FIXE>
<FIXS> firstPoint = board.getPoint(2, 6); secondPoint = board.getPoint(3, 6); <FIXE>
<FIXS> org.wso2.andes.kernel.slot.Slot slotToBeAssigned; <FIXE>
<FIXS> if ((this.weight) != (that.weight)) { return java.lang.Integer.compare(this.weight, that.weight); }else if ((this.from) != (that.from)) { return java.lang.Integer.compare(this.from, that.from); }else { return java.lang.Integer.compare(this.to, that.to); } <FIXE> <FIXS> <FIXE>
<FIXS> skittleMain = ((android.support.design.widget.FloatingActionButton) (skittleContainer.findViewById(R.id.skittle_main))); <FIXE>
<FIXS> net.minecraft.stats.Achievement acheivement = new net.minecraft.stats.Achievement(("achievement." + name), name, column, row, item, parent); <FIXE>
<FIXS> <FIXE> <FIXS> com.pokegoapi.api.gym.Battle.BattlePokemon pokemon = activeAttacker; int duration = action.getDuration(); handler.onDodge(api, this, pokemon, duration, action); <FIXE> <FIXS> <FIXE>
<FIXS> if ((_filter) instanceof com.linkedin.r2.filter.message.rest.StreamResponseFilter) { ((com.linkedin.r2.filter.message.rest.StreamResponseFilter) (_filter)).onError(ex, requestContext, wireAttrs, nextFilter); }else { nextFilter.onError(ex, requestContext, wireAttrs); } <FIXE>
<FIXS> return ((((("[dir=" + (getPath().toString())) + ", size=") + (this.photoFiles.size())) + ", ") + (this.photoFiles.toString())) + "]"; <FIXE>
<FIXS> assertFalse(outViews.isEmpty()); <FIXE>
<FIXS> <FIXE>
<FIXS> if (((pattern.contains("$T")) || (pattern.contains("$E"))) || (pattern.contains("$O"))) { <FIXE>
<FIXS> private void deletePDF(java.lang.String filePath) throws com.at.ac.tuwien.sepm.ss15.edulium.service.ServiceException { <FIXE>
<FIXS> <FIXE>
<FIXS> throw new ddf.services.schematron.SchematronValidationException("Could not setup validator to perform validation.", e); <FIXE>
<FIXS> drawRing(canvas); <FIXE> <FIXS> <FIXE>
<FIXS> (com.example.alex.parkinsonsdiseaseapp.Circle.numCorrect)++; <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> de.mpg.imeji.logic.search.elasticsearch.ElasticIndexer indexer = new de.mpg.imeji.logic.search.elasticsearch.ElasticIndexer(index, de.mpg.imeji.logic.search.elasticsearch.ElasticService.ElasticTypes.folders, de.mpg.imeji.logic.search.elasticsearch.ElasticService.ANALYSER); <FIXE>
<FIXS> if (!(limitCells.contains(previousCell))) { for (ar.fiuba.tdd.template.board.cell.model.Cell limitCell : limitCells) { <FIXE>
<FIXS> startActivity(i); <FIXE>
<FIXS> android.content.Intent intent = new android.content.Intent(activity, com.mountainpeak.climbers.MainActivity.class); <FIXE>
<FIXS> <FIXE>
<FIXS> if (world == null) return ; <FIXE>
<FIXS> java.lang.System.out.println(); <FIXE>
<FIXS> public void searchForTransmission(java.lang.String transmission, User currentUser, java.util.ArrayList<Transmission> mtl) { <FIXE> <FIXS> <FIXE>
<FIXS> update(); <FIXE>
<FIXS> <FIXE>
<FIXS> return new seedu.task.logic.commands.CommandResult(seedu.task.logic.commandlibrary.CommandLibrary.getInstance().getCommandUsage(commandToShowUser.trim().toLowerCase())); <FIXE>
<FIXS> if ((vars.length) == 0) { result.addClause(); <FIXE> <FIXS> } <FIXE>
<FIXS> <FIXE>
<FIXS> if ((f instanceof net.osmand.plus.download.DownloadIndexesThread.DownloadEvents) && (f.isAdded())) { ((net.osmand.plus.download.DownloadIndexesThread.DownloadEvents) (f)).newDownloadIndexes(); <FIXE>
<FIXS> else startActivityWithoutAnimation(info); <FIXE>
<FIXS> this.power = power; <FIXE> <FIXS> <FIXE> <FIXS> RobotConstants.TALON_ARM_MOTOR.set((-0.5)); <FIXE> <FIXS> RobotConstants.TALON_ARM_MOTOR.set(0.5); <FIXE>
<FIXS> imageAdapter = new in.tosc.digitaloceanapp.adapters.ImageAdapter(imageList, getContext()); <FIXE>
<FIXS> return hashed.substring(jetbrick.util.PasswordUtils.SALT_LENGTH).equals(rehashed.substring(jetbrick.util.PasswordUtils.SALT_LENGTH)); <FIXE>
<FIXS> return ca.rmen.nounours.Util.getDistance(featureImage.getX(), featureImage.getY(), x, y); <FIXE>
<FIXS> <FIXE>
<FIXS> se.kth.iv1201.utility.logger.LogInterceptor.LOGGER.log(se.kth.iv1201.utility.logger.LogInterceptor.LEVEL, " Return value: {0}", returnValue.toString()); <FIXE>
<FIXS> <FIXE>
<FIXS> if ((port <= (org.ulme.web.HttpServer.MIN_PORT_NUMBER)) || (port > (org.ulme.web.HttpServer.MAX_PORT_NUMBER))) { <FIXE>
<FIXS> java.io.File index = new java.io.File(((((getAppdata(false)) + "/installed_maps/") + uuid) + "/temp")); <FIXE>
<FIXS> java.lang.String message = (s == null) ? "" : (MQ7PREFIX) + (java.lang.String.format(s, params)); <FIXE>
<FIXS> if (expanded != truth) { <FIXE>
<FIXS> listeners.remove(controlTopic); matchers.remove(controlTopic); <FIXE> <FIXS> <FIXE>
<FIXS> if (first.contains(myTitle.toLowerCase())) { <FIXE>
<FIXS> registerW = registerW - 256; <FIXE>
<FIXS> public static boolean isEncoded(java.lang.String content, java.lang.String charset) { <FIXE>
<FIXS> <FIXE>
<FIXS> howManyNeighborsAlive += 1; <FIXE>
<FIXS> java.lang.String result = ((java.lang.String) (((java.util.concurrent.CompletableFuture) (client.get("123"))).get())); org.junit.Assert.assertEquals(result, java.lang.String.valueOf(123)); <FIXE>
<FIXS> mSelectedCountry = mCountries.get(countryIdx); <FIXE>
<FIXS> if (((context == null) || (mediaFile == null)) || ((mediaFile.getFileURL()) == null)) { return null; } <FIXE>
<FIXS> private java.util.HashMap<java.lang.String, java.util.Optional<java.lang.String>> putVariablesInMap(seedu.address.logic.parser.CommandParserHelper.OptionalStringTask task) { <FIXE>
<FIXS> if ((this.root) == null) return new org.tiralab.particles.Particle[0]; <FIXE>
<FIXS> <FIXE>
<FIXS> value |= patterns.get(i).getPattern()[col]; <FIXE>
<FIXS> synchronized(players) { for (chromage.server.PlayerThread p : players) { if (p.wantsTermination()) { setResult(false); setBreak(); } <FIXE>
<FIXS> <FIXE>
<FIXS> throw new java.lang.IllegalArgumentException(); <FIXE> <FIXS> throw new java.lang.IllegalArgumentException(); <FIXE>
<FIXS> return a; <FIXE>
<FIXS> final resources.KnapsackClientResource knapsackClientResource = new resources.KnapsackClientResource(environment, config); <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> protected void runScriptsIfNeeded(geogebra.common.kernel.geos.GeoElement geo1) { <FIXE>
<FIXS> <FIXE> <FIXS> java.lang.System.exit(1); <FIXE>
<FIXS> public static <T> com.annimon.stream.Stream<T> of(final java.util.List<? extends T> list) { <FIXE> <FIXS> return (index) < (list.size()); <FIXE> <FIXS> return list.get(((index)++)); <FIXE>
<FIXS> public void decreaseValue(int position) { <FIXE>
<FIXS> public void collapsedAppBar() { <FIXE>
<FIXS> <FIXE>
<FIXS> return true; <FIXE>
<FIXS> if ((values[i]) > (values[maior])) <FIXE>
<FIXS> java.util.List<io.vertx.core.json.JsonObject> classes = com.codingchili.core.files.JsonFileStore.readDirectoryObjects(testDirectory("class")); <FIXE>
<FIXS> if ((mProxy) != null) mProxy.notifyChannelMemberTypes(typeMap); <FIXE>
<FIXS> <FIXE>
<FIXS> while (!(clock.decrement())) <FIXE>
<FIXS> assertFalse(_fileSystem.exists(_path)); assertFalse(_fileSystem.exists(_badRowIdsPath)); assertTrue(_fileSystem.exists(_badIndexPath)); <FIXE>
<FIXS> <FIXE>
<FIXS> for (com.jarektoro.responsivelayout.ResponsiveColumn.Rule rule : rules) { <FIXE> <FIXS> } <FIXE>
<FIXS> if (queryString != null) { <FIXE>
<FIXS> if (!(isRangeDone(currentRange))) { doneCount += (currentEntry) - (currentRange.getStart()); } <FIXE>
<FIXS> encoder.init(context, streamListener, remoteDisplay, parameters); encoder.start(); <FIXE>
<FIXS> for (java.util.UUID other : new java.util.HashSet<>(getDenied())) { <FIXE>
<FIXS> <FIXE> <FIXS> if (isClosed()) { com.Ben12345rocks.AdvancedCore.AdvancedCoreHook.getInstance().debug("Connection closed... opening...."); open(); } <FIXE>
<FIXS> title = ((title.substring(0, title.indexOf(" - "))) + " - ") + SaveAsFileName; <FIXE>
<FIXS> ((android.widget.TextView) (view.findViewById(R.id.newsText))).setText(tabTitle); <FIXE>
<FIXS> return fluidTank.drain(resource.amount, (((tier) != (mekanism.common.Tier.FluidTankTier.CREATIVE)) && doDrain)); <FIXE>
<FIXS> validateCacheSizes(loader, 0, 0, 0); <FIXE>
<FIXS> return ((h.cidadeDestino.equals(cidadeDestino)) && (h.nomeHotel.equals(nomeHotel))) && ((h.preco) == (preco)); <FIXE>
<FIXS> to[i] = java.lang.Math.min(from1[i], from2[i]); <FIXE>
<FIXS> java.lang.String str = ("Fitness: " + (this.getFitness())) + " - "; str += java.lang.String.valueOf(this.value[0]); <FIXE>
<FIXS> public void checkMovement6Started() { if (((((dStartToBox) - (((dStartToBackStepBoard) - (dStartToFrontStepBoard)) / (dStartToBox))) + (dTrackMargin)) > (dCompletion)) && ((dCompletion) > ((((dStartToBox) - ((dStartToBackStepBoard) - (dStartToFrontStepBoard))) / (dStartToBox)) - (dTrackMargin)))) { <FIXE>
<FIXS> if ((options) != null) { java.util.Set<java.lang.String> currentOptions = options.keySet(); for (java.lang.String option : currentOptions) { if (userOption.equals(option)) { return options.get(option); } <FIXE>
<FIXS> private java.util.Locale findSupportedLocale(javax.servlet.http.HttpServletRequest request) { <FIXE> <FIXS> return null; <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> private battleship.interfaces.Position getPositionFromHeatMap(int[] heatmap) { <FIXE>
<FIXS> if ((busInfo) == null) { throw new dat255.chalmers.stormystreet.model.bus.BusNotFoundException(); } <FIXE>
<FIXS> checkIndex = false; <FIXE>
<FIXS> int numRows = (rand.nextInt(10)) + 1; <FIXE>
<FIXS> } if (result == null) { return false; }else { return true; <FIXE>
<FIXS> linked_yarn.LinkedYarn.Node nodeToRemoveFrom = findFirstNodeWith(toRemove); <FIXE> <FIXS> (modCount)++; (size)--; <FIXE> <FIXS> <FIXE> <FIXS> destroyNode(nodeToRemoveFrom); <FIXE>
<FIXS> if (!(entry.getKey().equals("test1"))) { com.plugin.core.ui.PluginDispatcher.startFragmentWithSimpleActivity(this, entry.getKey()); <FIXE> <FIXS> com.plugin.core.ui.PluginDispatcher.startFragmentWithBuildInActivity(this, entry.getKey()); <FIXE>
<FIXS> private static java.lang.String slug() { <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> width = mocha.graphics.TextDrawing.constrainWidth((width * screenScale)); <FIXE> <FIXS> return (measuredWidth[0]) / screenScale; <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> e.setNodeArrayPos(((e.getNodeArrayPos()) - 500)); if ((e.getNodeArrayPos()) <= 0) e.setNodeArrayPos(0); <FIXE>
<FIXS> if (!isLocal) { <FIXE>
<FIXS> if (index < 0) { <FIXE>
<FIXS> } finally { em.close(); <FIXE>
<FIXS> if (task.isSuccessful()) { <FIXE> <FIXS> mAuthResultListener.onComplete(true); <FIXE> <FIXS> mAuthResultListener.onComplete(false); <FIXE>
<FIXS> <FIXE>
<FIXS> org.apache.lucene.index.IndexWriterConfig indexWriterConfig = new org.apache.lucene.index.IndexWriterConfig(analyzer); <FIXE>
<FIXS> java.lang.String content) { <FIXE>
<FIXS> if (movies != null) { outState.putParcelableArrayList(com.example.android.popularmovies.MainActivity.LIFECYCLE_CALLBACKS_TEXT_KEY, movies); } <FIXE>
<FIXS> if (((maxValue) != null) && ((term1.compareTo(maxValue)) >= 0)) { <FIXE>
<FIXS> graph.setStrict(true); <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> java.lang.System.out.println(newVals[i]); java.lang.System.out.println(oldVals[i]); <FIXE>
<FIXS> private double internalNextDouble(double origin, double bound) { <FIXE>
<FIXS> this.sagaID = in.readLong(); <FIXE>
<FIXS> values.put(example.codeclan.com.friendshiptracker.DBHandler.KEY_DATE_SET, friend.getDateSet()); <FIXE>
<FIXS> return 1; <FIXE>
<FIXS> <FIXE>
<FIXS> } catch (java.lang.Exception e) { <FIXE>
<FIXS> double saveXa = saveBall.getXa(); double saveYa = saveBall.getYa(); <FIXE>
<FIXS> volNum = ((android.widget.TextView) (findViewById(R.id.input_vol_num))); <FIXE>
<FIXS> @javax.ws.rs.Path(value = "/doupdate") <FIXE> <FIXS> java.lang.System.out.println(urldata); <FIXE>
<FIXS> java.lang.System.err.println(("error while trying to get TTH: " + (e.getMessage()))); <FIXE>
<FIXS> else changeSatisfiedState(false); <FIXE> <FIXS> }else changeSatisfiedState(false); <FIXE>
<FIXS> if ((dataKitAPI) != null) { org.md2k.utilities.Report.Log.d(org.md2k.moodsurfing.ActivityMoodSurfingExercises.TAG, ("onDestroy()... isConnected=" + (dataKitAPI.isConnected()))); if (dataKitAPI.isConnected()) dataKitAPI.disconnect(); dataKitAPI.close(); dataKitAPI = null; } <FIXE>
<FIXS> if (((java.lang.Math.abs(((a1.getX()) - (a2.getX())))) <= (bubble)) && ((java.lang.Math.abs(((a1.getY()) - (a2.getY())))) <= (bubble))) { <FIXE>
<FIXS> double opposite0 = (heightToBottomOfTopTarget) - (cameraHeight); <FIXE>
<FIXS> return putSchemaEntity(namespaceRowId, entityAttributeMap, false); <FIXE>
<FIXS> dm.indexMetadata(((ids[i]) + ""), true); <FIXE>
<FIXS> <FIXE>
<FIXS> void loadConfig(com.b3dgs.lionengine.core.Media media) { <FIXE> <FIXS> <FIXE>
<FIXS> if ((prevModEvent) != null) { <FIXE> <FIXS> if ((prevModFloatingTask) != null) { <FIXE>
<FIXS> private io.minio.HttpResponse executePost(java.lang.String bucketName, java.lang.String objectName, java.util.Map<java.lang.String, java.lang.String> queryParamMap, byte[] data) throws io.minio.ErrorResponseException, io.minio.InternalException, io.minio.InvalidBucketNameException, io.minio.NoResponseException, java.io.IOException, org.xmlpull.v1.XmlPullParserException { <FIXE> <FIXS> return execute(Method.POST, Regions.INSTANCE.region(bucketName), bucketName, objectName, null, queryParamMap, data, data.length); <FIXE>
<FIXS> java.util.Map<de.appsolve.padelcampus.db.model.Participant, java.math.BigDecimal> ranking = rankingUtil.getPlayerRanking(players); <FIXE>
<FIXS> abortBroadcast(); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> } while (!(t.equalsTo(oftype)) ); <FIXE>
<FIXS> winSection(sectionToWin, mainPlayer); <FIXE>
<FIXS> }else tank.setFluid(null); <FIXE>
<FIXS> <FIXE>
<FIXS> type = mealType; <FIXE>
<FIXS> if (bookmarked) { com.thebestory.android.util.CacheStories.getInstance().setBookmarked(story); }else { com.thebestory.android.util.CacheStories.getInstance().updateStory(story); } <FIXE>
<FIXS> while ((this.experience_current) >= (EXPERIENCE_MAX)) { <FIXE> <FIXS> } <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> return v.get(); <FIXE>
<FIXS> row.addElement(""); <FIXE>
<FIXS> <FIXE>
<FIXS> conflicts.add(new java.util.HashSet<BoardPair>(java.util.Arrays.asList(box, box2))); <FIXE>
<FIXS> for (int i = 1; i <= number; i++) { <FIXE>
<FIXS> int maskIdx = (hash / 32) % (filters.length); <FIXE>
<FIXS> while ((buffer > 0) && (power >= 0)) { if (buffer >= (java.lang.Math.pow(2, power))) { <FIXE> <FIXS> binaryValue[power] = false; <FIXE>
<FIXS> canvas.drawRoundRect(new android.graphics.RectF(java.lang.Math.round(left), java.lang.Math.round(top), java.lang.Math.round(right), java.lang.Math.round(bottom)), style.cornerRadius, style.cornerRadius, style.barBackgroundPaint); <FIXE>
<FIXS> double[] controlledPositionAxes = new double[]{ 1.0 , 1.0 , 1.0 }; double[] controlledOrientationAxes = new double[]{ 0.0 , 1.0 , 1.0 }; <FIXE>
<FIXS> if ((head) == null) { return ; } <FIXE> <FIXS> while ((node != null) && ((node.data) != value)) { <FIXE> <FIXS> if (node != null) { nodeBack.next = node.next; (DataStructuresClasses.LinkedList.length)--; } <FIXE>
<FIXS> for (int i = 0; i < (control.size()); i++) { <FIXE>
<FIXS> if ((sp.getString(sortKey, null)) == null) { return false; } <FIXE>
<FIXS> for (int i = 0; i < nb; i++) { getPoint(i).maxSpeed = java.lang.Math.min(getPoint(i).maxSpeed, translationalSpeed); out += (ClothoidesComputer.PRECISION_TRACE_MM) / (getPoint(i).maxSpeed); } <FIXE>
<FIXS> assertEquals(englishAppPerson.getName(), frenchAppPerson.getNom()); assertEquals(englishAppPerson.getNickname(), frenchAppPerson.getSurnom()); assertEquals(englishAppPerson.getAge(), frenchAppPerson.getAge()); <FIXE>
<FIXS> updateBarModel(false); <FIXE>
<FIXS> players[playersCount].setName(name); <FIXE>
<FIXS> if (!((areEventsAtomic()) || (areEventsAsync()))) { <FIXE>
<FIXS> if ((net.whydah.sso.user.helpers.UserTokenXpathHelper.getUserID(userToken).length()) > 2) { <FIXE>
<FIXS> com.cloudant.sync.util.SQLDatabaseTestUtils.assertTablesExist(db, tables); <FIXE>
<FIXS> assert !(_pds._job.isStopped()); <FIXE>
<FIXS> boolean b = directory.mkdirs(); if (!b) { return null; } <FIXE>
<FIXS> <FIXE>
<FIXS> if (headerName.equalsIgnoreCase("content-length")) { <FIXE>
<FIXS> if (isBundleFile(soFile)) { processBundleFiles(soFile, baseSoFile, patchTmpDir); }else { <FIXE> <FIXS> <FIXE>
<FIXS> getLogger().error("There was an issue while saving the arenas!"); <FIXE> <FIXS> } try { } catch (java.lang.Exception e) { <FIXE> <FIXS> e.printStackTrace(); <FIXE>
<FIXS> private void logoutMellon(final javax.servlet.http.HttpServletResponse httpResponse, final java.lang.String username) throws java.io.IOException, javax.servlet.ServletException { <FIXE>
<FIXS> if ((sortedList.size()) == 1) { return new Node(sortedList.poll()); } <FIXE>
<FIXS> samplePoint.get().setTo(obj.sample()); lightNormal.get().setTo(obj.getNormal(samplePoint.get())); wi.get().setTo(samplePoint.get().sub(sr.hitPoint)); wi.get().normalize(); return wi.get(); <FIXE>
<FIXS> remove(source); }else { fire(source, VisualizerCommand.RESET); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> learn.FeatureVector.labelMap.put(labelName, learn.FeatureVector.labelCount); (learn.FeatureVector.labelCount)++; <FIXE>
<FIXS> int numberOfRoles = utilisateur.lesCartesAccesUtilisateur.size(); <FIXE>
<FIXS> <FIXE>
<FIXS> if (Name.isEmpty()) return false; <FIXE>
<FIXS> if (isEmpty(x, y, z)) <FIXE>
<FIXS> boolean startResult2 = producer.start(defaultCameraSettings); <FIXE>
<FIXS> } if (((result == (EngineValues.EMPTY)) && (board == (boardChanged))) && (space == (spaceChanged))) { result = player; <FIXE>
<FIXS> private com.java.laiy.model.Player getCurrentPlayer(final com.java.laiy.model.Player firstPlayer) { <FIXE>
<FIXS> edu.brandeis.cs.nlp.mae.io.AnnotationLoader.catchSAXParseError(e); <FIXE>
<FIXS> pixelColorSeekbar.setEnabled(true); <FIXE>
<FIXS> <FIXE>
<FIXS> game.player1 = new ai.neat.NaiveNeatAI(net, false); <FIXE>
<FIXS> return retval == null ? false : retval; <FIXE>
<FIXS> SOAPProcessStatus.INSTANCE.put(pid, runnable.getErrors()); <FIXE>
<FIXS> public static void statusText(java.lang.String status) { <FIXE>
<FIXS> boolean result = masterClient.createDirectory(path.getPath(), recursive); <FIXE>
<FIXS> <FIXE>
<FIXS> android.support.design.widget.Snackbar snackbar = android.support.design.widget.Snackbar.make(rootview, "Fehler beim laden der Hoster.", Snackbar.LENGTH_SHORT); <FIXE>
<FIXS> this.postThumbnailUrls = new java.util.ArrayList<>(); <FIXE>
<FIXS> protected com.hyena.coretext.blocks.CYTextBlock buildChildBlock(com.hyena.coretext.TextEnv textEnv, android.graphics.Paint paint, com.hyena.coretext.blocks.CYTextBlock.Word word) { <FIXE> <FIXS> <FIXE>
<FIXS> if (v instanceof android.widget.RadioButton) { onRadioButtonItemChecked(((android.widget.RadioButton) (v)), isChecked); <FIXE> <FIXS> if (v instanceof android.widget.Checkable) { onCheckboxItemChecked(v, isChecked); <FIXE>
<FIXS> if (remotePluginPackageRepository != null) { java.util.Properties settings = remotePluginPackageRepository.getSettings(); java.lang.String useDownloadURL = settings.getProperty(RemotePluginPackageRepository.SETTING_USE_DOWNLOAD_URL); if (!(com.liferay.portal.kernel.util.GetterUtil.getBoolean(useDownloadURL, true))) { return getArtifactURL(); } <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> stage.setScene(new javafx.scene.Scene(fxmlLoader.load())); <FIXE>
<FIXS> model.add(new Literal(pop.get(), true)); <FIXE>
<FIXS> il.co.anyway.app.Utility.getMarkersByParameters(bounds, zoomLevel, this, false); <FIXE>
<FIXS> return dmd.getColumns(null, (isSchemaDefined(tableNameParts) ? tableNameParts[0].toUpperCase() : ""), (isSchemaDefined(tableNameParts) ? tableNameParts[1].toUpperCase() : tableNameParts[0].toUpperCase()), null); <FIXE>
<FIXS> if (date.before(t.booking().getDate())) { dayAmount -= t.booking().getAmount(); <FIXE>
<FIXS> <FIXE>
<FIXS> private int calculateTripletScore(java.util.ArrayList<se.umu.dehu0004.greed.Die> dieList) { <FIXE> <FIXS> int points = calculateSingleTripletScore(i, dieList); <FIXE>
<FIXS> <FIXE> <FIXS> super.upgradeDatabaseFormatVersion12345WithoutCommit(); <FIXE>
<FIXS> if (((com.shatteredpixel.shatteredpixeldungeon.Dungeon.visible) != null) && (com.shatteredpixel.shatteredpixeldungeon.Dungeon.visible[pos])) { <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> dispose(); <FIXE>
<FIXS> if (samples == 0) { return -1; }else { return sumAvgOpsSec / samples; } <FIXE>
<FIXS> backupProgressText.textProperty().unbind(); <FIXE> <FIXS> <FIXE>
<FIXS> int studentIndex = getStudentIndex(studentID); <FIXE>
<FIXS> if (level.isGreaterOrEqual(org.apache.log4j.Level.INFO)) { <FIXE>
<FIXS> this.resetLearningImpl(); <FIXE>
<FIXS> if (modalView == null) { return ; } <FIXE>
<FIXS> if (remove(iter.next())) { isChanged = true; } <FIXE>
<FIXS> public static void despawn(net.dzikoysk.funnyguilds.basic.Guild guild, org.bukkit.entity.Player... players) { try { int id = net.dzikoysk.funnyguilds.util.reflect.EntityUtil.entitesMap.get(guild); java.lang.Object o = net.dzikoysk.funnyguilds.util.reflect.EntityUtil.despawnPacket(id); net.dzikoysk.funnyguilds.util.reflect.PacketSender.sendPacket(players, o); } catch (java.lang.Exception e) { e.printStackTrace(); <FIXE>
<FIXS> return java.lang.Math.abs(score); <FIXE>
<FIXS> break; <FIXE> <FIXS> break; <FIXE> <FIXS> break; <FIXE>
<FIXS> org.hamcrest.Matcher<? extends org.apache.maven.artifact.Artifact>[] frmkCfgMatchers = new org.hamcrest.Matcher[]{ groupId(getFrameworkGroupId()) , artifactId("framework") , classifier("configs") , type("zip") }; <FIXE>
<FIXS> t.setVisibility(View.INVISIBLE); <FIXE>
<FIXS> com.adam.app.pattern.flywieght.Pencil pen = ((com.adam.app.pattern.flywieght.Pencil) (com.adam.app.pattern.flywieght.PencilFactory.map.get(style))); <FIXE>
<FIXS> java.lang.String line = com.iyonger.spark.example.NewJavaWordCount.replaceNonLetter(s).trim(); if (line.isEmpty()) { return new java.util.ArrayList<java.lang.String>().iterator(); } <FIXE>
<FIXS> if (((fayePG) != null) && ((fayePG.getDisconnectCallbackContext()) != null)) { <FIXE>
<FIXS> <FIXE> <FIXS> java.security.Security.addProvider(new BouncyCastleProvider()); org.bouncycastle.jce.spec.ECParameterSpec ecSpec = org.bouncycastle.jce.ECNamedCurveTable.getParameterSpec("prime192v1"); java.security.KeyPairGenerator g; <FIXE> <FIXS> g.initialize(ecSpec); <FIXE>
<FIXS> Percolation.utest(pc, N, 2, 2); <FIXE> <FIXS> <FIXE>
<FIXS> java.lang.String salt = passwordEncoder.nextSALT(); <FIXE>
<FIXS> private java.util.ArrayList<com.example.lachlan.myfirstapp.code.Municipality> municipalities() { <FIXE> <FIXS> java.util.ArrayList<com.example.lachlan.myfirstapp.code.Municipality> m = new java.util.ArrayList<com.example.lachlan.myfirstapp.code.Municipality>(); <FIXE>
<FIXS> resetPlayers(java.lang.Integer.parseInt(((java.lang.String) (newMaxNumPlayers)))); <FIXE>
<FIXS> if ((mGeoPoint) != null) { b.putString(tw.edu.ntu.fortour.LocationMap.KEY_LONGITUDE, java.lang.Integer.toString(mGeoPoint.getLongitudeE6())); b.putString(tw.edu.ntu.fortour.LocationMap.KEY_LATITUDE, java.lang.Integer.toString(mGeoPoint.getLatitudeE6())); i.putExtras(b); } <FIXE>
<FIXS> protected void reset() { <FIXE>
<FIXS> public java.lang.String toString() { <FIXE> <FIXS> aString += L.get(i); <FIXE>
<FIXS> <FIXE>
<FIXS> googleApiClient.disconnect(); <FIXE>
<FIXS> <FIXE>
<FIXS> channel = connection.createChannel(); <FIXE>
<FIXS> swissTournamentRunner.Player p1 = new swissTournamentRunner.Player("P1", 3, 0, 0, 0); swissTournamentRunner.Player p2 = new swissTournamentRunner.Player("P2", 3, 1, 0, 0); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> return null; <FIXE>
<FIXS> if ((msg.getText()) != null) { java.lang.String[] args = msg.getText().split(" "); ch.tiim.utils.StringArrays.trimArray(args); try { registry.handle(args, msg, bot); } catch (java.io.IOException e) { ch.tiim.MessageProcessor.LOGGER.warning(e); } <FIXE>
<FIXS> mUsername = mFirebaseUser.getDisplayName(); mUsermail = mFirebaseUser.getEmail(); mPhotoUrl = mFirebaseUser.getPhotoUrl().toString(); <FIXE>
<FIXS> return parseError(key, value, e); <FIXE>
<FIXS> return models.Computer.find.where().ilike("name", (("%" + filter) + "%")).orderBy(((sortBy + " ") + order)).fetch("company").setFirstRow((page * pageSize)).setMaxRows(pageSize).findPagedList(); <FIXE>
<FIXS> feeMatrix.setUniqueNo(feeMatrix.genUniqueNo()); <FIXE>
<FIXS> product.setName(productModel.getName()); product.setDescription(productModel.getDescription()); product.setStock(productModel.getStock()); <FIXE>
<FIXS> public static io.ddf.datasource.DataSourceDescriptor resolve(java.lang.String source, java.util.Map<java.lang.String, java.lang.String> options) throws io.ddf.exception.DDFException, java.net.URISyntaxException { <FIXE>
<FIXS> private boolean importDocumentIDs() { <FIXE> <FIXS> return false; <FIXE> <FIXS> return true; <FIXE>
<FIXS> public gov.nist.hit.erx.core.service.TestContext testContext(java.lang.String path, com.fasterxml.jackson.databind.JsonNode formatObj, gov.nist.hit.erx.core.service.TestingStage stage) throws java.io.IOException { gov.nist.hit.erx.core.service.TestContext res = edirb.testContext(path, formatObj, stage); <FIXE> <FIXS> res = xmlrb.testContext(path, formatObj, stage); <FIXE>
<FIXS> for (int x = 0; x < (editor.ImageEditor.height); x++) { for (int y = 0; y < (editor.ImageEditor.width); y++) { <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> if ((duration == null) && (duration == (this.duration))) <FIXE> <FIXS> else if (duration.equals(this.duration)) return ; <FIXE>
<FIXS> if (buttonName.equals("Edit")) { <FIXE>
<FIXS> if ((ei - si) > 1) { int pivotIndex = Quick.partition(ary, si, ei, ((int) (((java.lang.Math.random()) * ((ei - si) - 1)) + si))); <FIXE>
<FIXS> java.util.Map<java.lang.String, com.googlecode.d2j.node.DexClassNode> readDex(java.io.File path) throws java.io.IOException { com.googlecode.d2j.reader.DexFileReader dexFileReader = new com.googlecode.d2j.reader.DexFileReader(com.googlecode.d2j.reader.zip.ZipUtil.readDex(path)); <FIXE>
<FIXS> tutorialId2 = de.markusressel.android.library.tutorialtooltip.TutorialTooltip.show(new de.markusressel.android.library.tutorialtooltip.builder.TutorialTooltipBuilder(activity).message(new de.markusressel.android.library.tutorialtooltip.builder.MessageBuilder(this).text(getString(R.string.tutorial_message_2)).anchor(buttonDialog).gravity(TutorialTooltipView.Gravity.BOTTOM).build()).anchor(buttonBottom, TutorialTooltipView.Gravity.BOTTOM).onClick(onTutorialTooltipClickedListener).build()); <FIXE>
<FIXS> rightPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(20, 10, 10, 10)); <FIXE>
<FIXS> if ((mHeader) != null) { if (i == 0) { return ; } <FIXE> <FIXS> }else { onBindViewHolderImpl(viewHolder, this, i); } <FIXE>
<FIXS> if (!(o instanceof simpledb.RecordId)) <FIXE>
<FIXS> <FIXE>
<FIXS> instanceDir = "C:\\Users\\yuhuishi\\Desktop\\projects\\TP3S_column_generation\\instance\\large"; outDir = "./logs/large/"; <FIXE> <FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> public static void main(java.lang.String[] args) { <FIXE> <FIXS> java.lang.System.out.println(("adding " + (x + y))); <FIXE> <FIXS> java.lang.System.out.println(("subtracting " + (z - y))); <FIXE>
<FIXS> public void run() { <FIXE>
<FIXS> throw new sk.freemap.gpxAnimator.UserException(("error writing frame to " + outputfile), e); <FIXE>
<FIXS> <FIXE>
<FIXS> int managerId = testManager.getId(); <FIXE> <FIXS> <FIXE>
<FIXS> private void setPaintOptions() { <FIXE> <FIXS> <FIXE>
<FIXS> @java.lang.SuppressWarnings(value = "unchecked") E[] result = ((E[]) (new java.lang.Object[size()])); <FIXE>
<FIXS> <FIXE>
<FIXS> return (sumInflows - sumOutflows) - amountSaved; <FIXE>
<FIXS> private com.jetbrains.jetpad.vclang.typechecking.visitor.CheckTypeVisitor.Result checkResult(com.jetbrains.jetpad.vclang.core.expr.type.ExpectedType expectedType, com.jetbrains.jetpad.vclang.typechecking.visitor.CheckTypeVisitor.Result result, com.jetbrains.jetpad.vclang.term.Abstract.Expression expression) { <FIXE>
<FIXS> <FIXE>
<FIXS> return getObjectMapper().writerWithDefaultPrettyPrinter().writeValueAsString(node()); <FIXE>
<FIXS> return getResources().getIdentifier(file, "xml", getPackageName()); <FIXE>
<FIXS> calc.set(java.util.Calendar.HOUR_OF_DAY, 0); <FIXE>
<FIXS> updatePlayPauseState(); <FIXE>
<FIXS> int location = 1; <FIXE>
<FIXS> <FIXE>
<FIXS> org.apache.tamaya.spi.PropertyValue value = org.apache.tamaya.spi.PropertyValue.of(entry.getKey(), entry.getValue(), getName()); result.put(entry.getKey(), value); <FIXE>
<FIXS> if (cursor != null) { cursor.close(); } <FIXE>
<FIXS> frontView.setLongClickable(false); <FIXE>
<FIXS> <FIXE>
<FIXS> if (((items[i]) != null) && (items[i].getId().equals(id))) { <FIXE>
<FIXS> if ((key.equals("BASE_FONT_SIZE")) && (net.sf.memoranda.util.Configuration.config.get(key).toString().equals(""))) { <FIXE>
<FIXS> private void getHomeTimeline(long maxId, java.lang.String paramName, com.loopj.android.http.AsyncHttpResponseHandler handler) { <FIXE>
<FIXS> certValidationDto.setNif(nif); certValidationDto.setDeviceId(deviceId); <FIXE>
<FIXS> excute(testcase.Object_ResourceId, testcase.Operation_ClickWait, "com.android.camera2:id/three_dots"); <FIXE> <FIXS> excute(testcase.Object_ResourceId, testcase.Operation_ClickWait, "com.android.camera2:id/btn_beauty_button"); <FIXE>
<FIXS> socks = new com.mongodb.MongoClient(config.getVal("mongo-ip"), java.lang.Integer.parseInt(config.getVal("mongo-port"))); <FIXE>
<FIXS> if (SolrConstants.OPERATION_INSERT_STREAMING.equals(operation)) { <FIXE>
<FIXS> } catch (java.lang.Throwable t) { g.printError(t); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> p.getHand().addCard(dealCard(p)); <FIXE>
<FIXS> matrix.addColumns(false, "A", "B", "C", "D", "E").addRowOfNodes("A", "D").addRowOfNodes("B", "C", "D").addRowOfNodes("D", "E").addRowOfNodes("A", "E").addRowOfNodes("B", "C").addRowOfNodes("E"); <FIXE>
<FIXS> @javax.annotation.Nonnull private static argelbargel.jenkins.plugins.gitlab_branch_source.GitLabLinkAction create(@javax.annotation.CheckForNull <FIXE> <FIXS> java.lang.String iconName, @javax.annotation.Nonnull org.gitlab.api.models.GitlabProject project, java.lang.String path) { <FIXE>
<FIXS> <FIXE>
<FIXS> if (!(getBoard().positionWithinBoardBounds(newPosition))) { <FIXE>
<FIXS> nextUnit = new javax.swing.JButton("Next Unit"); nextUnit.setFocusPainted(false); unitBoard.add(nextUnit); <FIXE> <FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> protected java.lang.String getCorrectVariableName(org.talend.core.model.properties.ContextItem contextItem, java.lang.String originalVariableName, java.lang.String noSqlParam) { <FIXE> <FIXS> if (varName.endsWith(noSqlParam)) { <FIXE>
<FIXS> if (!(p.getConfig().contains(path))) { p.getConfig().addDefault(path, type); p.getConfig().options().copyDefaults(true); <FIXE> <FIXS> p.saveConfig(); <FIXE>
<FIXS> <FIXE>
<FIXS> result.putVertex(parentVertex); <FIXE>
<FIXS> play.twirl.api.Content html = views.html.game.render("Let's Play!", new uk.nickbdyer.tictactoe.Board().getCells(), "X is the winner!!", true); <FIXE>
<FIXS> if ((Build.VERSION.SDK_INT) >= 18) { <FIXE>
<FIXS> fileserverHandler.downloadFile(UserPreferences.USERNAME, selectedFile, ((java.lang.System.getProperty("user.dir")) + "\\"), UserPreferences.USERNAME, UserPreferences.PASSWORD); <FIXE>
<FIXS> if (text != "") { items.add(text); myAdapter.notifyDataSetChanged(); textbox.setText(""); }else { } <FIXE>
<FIXS> shared.logic.Player gs = addPlayer(shared.logic.templates.BasicRoles.Gunsmith()); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> public boolean copy() { <FIXE>
<FIXS> if (((com.bathem.vocabpower.Model.DataModel.sWords) == null) || ((com.bathem.vocabpower.Model.DataModel.sWords.size()) <= 0)) { <FIXE>
<FIXS> java.lang.String fileName = unixPath.substring((lastSlash + 1)); int lastDot = fileName.lastIndexOf("."); return fileName.substring((lastDot + 1)); <FIXE>
<FIXS> if ((this.bonusAtk) > 0) { <FIXE>
<FIXS> java.lang.System.out.println(objectEmployeesId); <FIXE>
<FIXS> <FIXE>
<FIXS> break; <FIXE> <FIXS> break; <FIXE> <FIXS> break; <FIXE> <FIXS> break; <FIXE> <FIXS> break; <FIXE> <FIXS> break; <FIXE> <FIXS> break; <FIXE> <FIXS> break; <FIXE>
<FIXS> com.orientechnologies.orient.core.db.document.ODatabaseDocument db = new com.orientechnologies.orient.core.db.document.ODatabaseDocumentTx(dbUrl); <FIXE> <FIXS> <FIXE>
<FIXS> point.setLocation(((stretch) * ((point.getX()) - (origin.getX()))), ((stretch) * ((origin.getY()) - (point.getY())))); <FIXE>
<FIXS> if (savedInstanceState == null) { initConnectionReceiver(); connectionManager = new ch.hsr.zedcontrol.roborio.ConnectionManager(this); } <FIXE>
<FIXS> private void clear() { <FIXE>
<FIXS> com.erudika.para.core.ParaObject second = obj.getDao().read(obj.getAppid(), id2); <FIXE>
<FIXS> this.messagesToClient.put(answer); <FIXE>
<FIXS> assertEquals(dict.getValueBytesFromId(nullId2, null, 0), (-1)); <FIXE>
<FIXS> readerToRemoveFrom.removePreference(projectToMove); readerToAdd.addPreference(projectToMove); return true; <FIXE>
<FIXS> private static java.util.List<com.dabsquared.gitlabjenkins.gitlab.hook.model.State> retrieveAllowedStates(boolean triggerOnMergeRequest, com.dabsquared.gitlabjenkins.trigger.TriggerOpenMergeRequest triggerOpenMergeRequest) { <FIXE>
<FIXS> public com.googlecode.lanterna.terminal.Terminal createWindowsTerminal() throws java.io.IOException { <FIXE>
<FIXS> jmri.jmrix.can.cbus.CbusDccProgrammerManager t = new jmri.jmrix.can.cbus.CbusDccProgrammerManager(new jmri.jmrix.can.cbus.CbusDccProgrammer(tc, memo), memo); <FIXE>
<FIXS> if (headersShown) showAllHeaders(); <FIXE>
<FIXS> listTracks = ((android.widget.TextView) (findViewById(R.id.list_tracks))); <FIXE>
<FIXS> total += (previousLayer.get(i).activation) * (weights.get(i)); <FIXE>
<FIXS> return (((((((("Lesson{" + "id=") + (id)) + ", name='") + (name)) + '\'') + ", description='") + (description)) + '\'') + '}'; <FIXE>
<FIXS> java.lang.String dir = node.hdfsSiteOpts.get("dfs.name.dir"); <FIXE> <FIXS> dir = node.hdfsSiteOpts.get("dfs.namenode.name.dir"); <FIXE> <FIXS> return new java.io.File(dir.split(",")[0]); <FIXE>
<FIXS> <FIXE>
<FIXS> if (((startBox.equals(link.getStartBox())) && (endBox.equals(link.getEndBox()))) && (link.getType().equalsIgnoreCase(type))) { <FIXE>
<FIXS> java.lang.String url = java.lang.String.format(cn.wanru.fund.nav.crawl.eastmoney.EMUtil.url_template, pageable.getCode(), 1, 40000, pageable.getStart(), pageable.getEnd()); <FIXE>
<FIXS> while (currentToken.getLecical().equals(",")) { <FIXE>
<FIXS> grid = new games.bb.myfirstgame.Grid(5, 5, 0); <FIXE>
<FIXS> if (((score.getDate()) != null) && (score.getDate().after(from))) { <FIXE>
<FIXS> com.swn.eapp.om.dto.OrgTypeDTO obj = null; <FIXE> <FIXS> obj = new com.swn.eapp.om.dto.OrgTypeDTO(); <FIXE> <FIXS> <FIXE> <FIXS> return obj; <FIXE>
<FIXS> return (((x < 0) || (y < 0)) || (x >= (this.panel.width))) || (y >= (this.panel.height)); <FIXE>
<FIXS> return java.util.Optional.of(new java.net.URL(java.lang.String.format(de.mediathekview.mserver.crawler.dreisat.tasks.DreisatFilmDetailsTask.XML_SERVICE_URL_PATTERN, id.get()))); <FIXE>
<FIXS> if (null != (migrationEventManager.getEvent(eventId))) { if (null != (migrationEventManager.getEvent(eventId).getMigrationCluster(clusterId))) { migrationEventManager.getEvent(eventId).getMigrationCluster(clusterId).process(); } <FIXE>
<FIXS> public boolean UserExist(java.lang.String username) { <FIXE>
<FIXS> if ((directory != null) && (directory.exists())) { <FIXE>
<FIXS> if (end > start) { start = start ^ end; end = start ^ end; start = start ^ end; } <FIXE>
<FIXS> <FIXE>
<FIXS> net.whydah.token.application.AuthenticatedApplicationTokenRepository.applicationTokenMap.remove(applicationToken.getApplicationTokenId()); <FIXE>
<FIXS> changeTicks(timeBar, 1); <FIXE> <FIXS> changeTicks(timeBar2, 1); <FIXE> <FIXS> item5.setEnabled(true); item1.setEnabled(false); <FIXE>
<FIXS> initActionbar(savedInstanceState); <FIXE>
<FIXS> try (java.sql.ResultSet rs = stmt.executeQuery()) { <FIXE>
<FIXS> org.junit.Assert.assertNotNull(casValue); <FIXE>
<FIXS> for (java.lang.String key : expressions.keySet()) { <FIXE>
<FIXS> return events.size(); <FIXE>
<FIXS> if ((target.width) > (trackedTarget.width)) { <FIXE>
<FIXS> return graphlod.output.JsonOutput.getJsonObject(graph.vertexSet(), graph.edgeSet(), new java.util.HashSet<java.lang.String>(), new java.util.HashSet<org.jgraph.graph.DefaultEdge>(), false, false, null, type); <FIXE>
<FIXS> net.sf.memoranda.DefectList defectList; <FIXE> <FIXS> }else { defectList = new net.sf.memoranda.DefectListImpl(project); <FIXE>
<FIXS> for (org.jasig.portal.groups.IEntityGroup group : member.getParentGroups()) { <FIXE>
<FIXS> <FIXE>
<FIXS> modules.add(new com.homypiandroid.SocketConnection(reactContext, mActivity)); modules.add(new com.homypiandroid.ToastModuleBis(reactContext, mActivity)); <FIXE>
<FIXS> java.lang.String refreshedToken = null; final io.jsonwebtoken.Claims claims = getClaimsFromToken(token); if (claims != null) { <FIXE> <FIXS> <FIXE>
<FIXS> java.lang.System.err.println(ex); <FIXE>
<FIXS> if ((currentState) >= (gameStates.size())) { <FIXE>
<FIXS> params.put(name, value); <FIXE>
<FIXS> normalRenderQueue.add(new info.quadtree.rv.graphics.SGF.QueuedImage(x, (-y), w, h, rot, imgName)); <FIXE>
<FIXS> @org.springframework.web.bind.annotation.RequestMapping(value = "/{id}", method = org.springframework.web.bind.annotation.RequestMethod.PUT) public org.springframework.http.ResponseEntity<java.lang.Void> updateProduct(@org.springframework.web.bind.annotation.PathVariable(value = "id") int id, @org.springframework.web.bind.annotation.RequestBody <FIXE> <FIXS> java.lang.System.out.println(("Updating ProductImageDto " + id)); <FIXE> <FIXS> productImageService.updateProductImage(productImageDto); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> }else if (((this.base) != null) && ((this.base) != base)) { this.base = null; this.distribution = null; } <FIXE>
<FIXS> public foo.NullableCollectionFieldsBuilder strings(java.util.Iterator<? extends java.lang.String> strings) { <FIXE>
<FIXS> default : return null; <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> private static java.lang.StringBuilder getUnderscoredString(java.lang.StringBuilder builder, java.lang.String simpleName) { <FIXE>
<FIXS> protected void addChange(int start1, int start2, int end1, int end2) { <FIXE>
<FIXS> public boolean insertPurchase(java.lang.String name, int amount) { <FIXE>
<FIXS> private void restoreLockingState(android.os.Bundle savedInstanceState) { <FIXE>
<FIXS> } catch (com.google.android.gms.common.GooglePlayServicesRepairableException | com.google.android.gms.common.GooglePlayServicesNotAvailableException e) { <FIXE>
<FIXS> break; <FIXE>
<FIXS> public org.elasticsearch.search.aggregations.InternalAggregation buildAggregation(final long bucket) { if (((this.valuesSources) == null) || (bucket >= (this.samplings.size()))) { <FIXE> <FIXS> return new org.scaleborn.elasticsearch.linreg.aggregation.stats.InternalStats(this.name, ((this.valuesSources.fieldNames().length) - 1), this.samplings.get(bucket), null, pipelineAggregators(), metaData()); <FIXE>
<FIXS> calcInterfacesCrystal(set, cutoff); <FIXE>
<FIXS> if (sps.close()) { <FIXE> <FIXS> this.sps = null; <FIXE> <FIXS> <FIXE>
<FIXS> if (!(openEvothingsIntent(intent))) { <FIXE>
<FIXS> if ((size()) > 1) { while ((current.getNext().getNext()) != null) { current = current.getNext(); } tail = current; tail.setNext(null); }else { current = null; head = null; tail = null; } <FIXE>
<FIXS> if (((phase) != (com.trifice.theunderworldsiege.Phase.ACTIVE)) && ((phase) != (com.trifice.theunderworldsiege.Phase.PASSIVE))) <FIXE>
<FIXS> synchronized(this) { for (com.atlauncher.data.Downloadable dl : this) { executor.execute(new com.atlauncher.collection.DownloadPool.Installer(dl, installer)); } <FIXE>
<FIXS> @java.lang.Override public boolean onOptionsItemSelected(android.view.MenuItem item) { <FIXE>
<FIXS> if (date == null) { return null; } <FIXE>
<FIXS> return (("SELECT " + (cn.dreampie.common.util.Joiner.on(", ").join(columns))) + " FROM ") + table; <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> public void init(int indexNameId, java.lang.String key, byte entityType, java.util.Map<java.lang.String, java.lang.String> config) { <FIXE>
<FIXS> break; <FIXE>
<FIXS> <FIXE>
<FIXS> byte[] buf = new byte[keySize]; raFile.seek(pos); raFile.readFully(buf, 0, keySize); java.io.ObjectInputStream is = new java.io.ObjectInputStream(new java.io.ByteArrayInputStream(buf)); TKey readObject = ((TKey) (is.readObject())); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> android.content.Intent intent = new android.content.Intent(this, com.example.arjun.nhacks.ScanResults.class); startActivity(intent); <FIXE>
<FIXS> java.lang.Integer i = n_column.next(); if (i != null) return i.intValue(); <FIXE>
<FIXS> java.io.FileWriter fileWriter = new java.io.FileWriter("ContactsBook.xml"); <FIXE> <FIXS> <FIXE>
<FIXS> return to_write.substring(0, to_write.length()); <FIXE>
<FIXS> if ((keyDef.href) != null) { keydef.writeAttribute("href", keyDef.href); } <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> com.sandwich.util.Assert.assertEquals(((str.compareToIgnoreCase("I AM a number ONE!")) == 0), com.sandwich.koan.constant.KoanConstants.__); com.sandwich.util.Assert.assertEquals(((str.compareToIgnoreCase("I am a number one!")) == 0), com.sandwich.koan.constant.KoanConstants.__); com.sandwich.util.Assert.assertEquals(((str.compareToIgnoreCase("I AM A NUMBER ONE!")) == 0), com.sandwich.koan.constant.KoanConstants.__); <FIXE>
<FIXS> <FIXE>
<FIXS> }else { repoItemFavImage.setBackground(null); <FIXE>
<FIXS> if ((net.minecraft.server.MinecraftServer.getServer().getConfigurationManager().playerEntityList) == null) <FIXE>
<FIXS> <FIXE> <FIXS> intent.putExtra(EventsActivity.INTENT_EXTRA_RECURRING_ACTION_ID, element.getId()); <FIXE>
<FIXS> return (_yPos) - (c * (java.lang.Math.sin(gamma))); <FIXE>
<FIXS> <FIXE>
<FIXS> if (wrongGuess) { <FIXE> <FIXS> wrongGuess = true; } <FIXE>
<FIXS> <FIXE>
<FIXS> if (!(simple.util.logging.Log.isSet(options, type))) <FIXE>
<FIXS> <FIXE>
<FIXS> org.gestore.move.logger.info(("Releasing lock " + lock)); <FIXE>
<FIXS> this.setState(state); <FIXE> <FIXS> <FIXE>
<FIXS> java.util.List<java.lang.String> expected = java.util.Arrays.asList("divasa", "na"); <FIXE>
<FIXS> Dimension dime = new Dimension(x, y); <FIXE>
<FIXS> final java.lang.String[] actual = tested.getArray("key", input); <FIXE>
<FIXS> if ((item.distanceSquaredTo(p)) < mindist) { <FIXE> <FIXS> mindist = ans.distanceSquaredTo(p); } <FIXE>
<FIXS> private org.dvbviewer.controller.entities.Channel getMatchedChannel(@android.support.annotation.Nullable java.util.List<org.dvbviewer.controller.entities.ChannelRoot> channelRoots, long favId) { if (channelRoots != null) { for (org.dvbviewer.controller.entities.ChannelRoot roots : channelRoots) { for (org.dvbviewer.controller.entities.ChannelGroup group : roots.getGroups()) { for (org.dvbviewer.controller.entities.Channel chan : group.getChannels()) { if ((chan.getChannelID()) == favId) { return chan; } <FIXE>
<FIXS> <FIXE>
<FIXS> private void checkrepeated(Point[] points) { <FIXE>
<FIXS> if ((httpHealthCheckList.size()) == 0) { return false; } <FIXE>
<FIXS> java.util.List<com.webstore.model.Product> pro = new java.util.ArrayList(com.webstore.model.Factory.getProducts().values()); <FIXE>
<FIXS> if ((mysqlStorage) != null) mysqlStorage.removePortaledPlayer(uuid); <FIXE>
<FIXS> IngestKafka.producer.send(new org.apache.kafka.clients.producer.ProducerRecord<java.lang.String, java.lang.String>(IngestKafka.topic, ((df.format(dateobj)) + previousChange), urlContent)); <FIXE>
<FIXS> <FIXE>
<FIXS> private static RtcModel.Stack rtcStack(org.netbeans.modules.cnd.debugger.dbx.rtc.RtcModel model, org.netbeans.modules.cnd.debugger.dbx.rtc.GPDbxStack gstack) { <FIXE>
<FIXS> <FIXE>
<FIXS> adapter = new com.example.sun1.popularmovie.poster_adapter(getContext(), R.layout.poster_item_layout, movieInfoList); <FIXE>
<FIXS> <FIXE> <FIXS> android.content.Intent serviceIntent = new android.content.Intent(this, mapper.mobile.om.mobilemapper.service.MobileNotificationService.class); <FIXE>
<FIXS> <FIXE>
<FIXS> addItemsToMap(); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> static oop.ex6.main.Variable createParameter(java.lang.String type, java.lang.String name, int lineNumber, boolean isFinal) throws oop.ex6.main.IllegalException { oop.ex6.main.Variable.verifyLegalityVariableName(name, lineNumber); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> android.util.Log.i(com.tencent.tinker.loader.shareutil.SharePatchFileUtil.TAG, ("safeDeleteFile, try to delete path: " + (file.getPath()))); <FIXE>
<FIXS> if (((workSkill.getWorker()) == null) || ((workSkillDAO.findWorkSkillWithAllIds(workSkill.getWorker().getId(), workSkill.getEmployer().getId(), workSkill.getJob().getId())) == null)) { <FIXE>
<FIXS> com.gradians.prepwell.dom.Deck current = com.gradians.prepwell.dom.Dealer.getCurrentDeck(); com.gradians.prepwell.gui.PlaypenControls controls = com.gradians.prepwell.dom.Dealer.getContext().getControls(); controls.showFor(current); <FIXE>
<FIXS> if (actionData == null) return ; <FIXE>
<FIXS> if ((otherScore > myScore) && (otherScore <= 21)) { <FIXE>
<FIXS> public java.util.LinkedList<com.example.finalproject.shottestpath.Vertex> drawPath(com.example.finalproject.shottestpath.Vertex Node) { <FIXE> <FIXS> return linePath; <FIXE>
<FIXS> com.gmail.edenthink.tools.Util.printSQLError(e); <FIXE>
<FIXS> java.lang.String query = getIntent().getStringExtra(SearchManager.QUERY); <FIXE> <FIXS> <FIXE>
<FIXS> return java.lang.String.format("%s?id=%s&token=%s&language=%s", pageUrl, userId, temporaryToken, locale.getLanguage()); <FIXE>
<FIXS> synchronized(lock) { if (pendingPause.compareAndSet(true, false)) { <FIXE> <FIXS> }else { <FIXE> <FIXS> <FIXE>
<FIXS> org.reactome.web.diagram.util.MapSet<org.reactome.web.diagram.data.layout.Node, org.reactome.web.diagram.data.interactors.model.InteractorLink> cache = interactionsPerNode.get(resource.toLowerCase()); <FIXE>
<FIXS> this.location = location; <FIXE>
<FIXS> ai.h2o.cascade.stdlib.core.FnLet let = new ai.h2o.cascade.stdlib.core.FnLet(session.globalScope()); <FIXE>
<FIXS> public final java.lang.String getHtml(java.lang.String name, int maxlength, java.lang.String defaultvalue) { <FIXE>
<FIXS> favoriteButton.setText(context.getResources().getString(R.string.favorite)); <FIXE> <FIXS> favoriteButton.setText(context.getResources().getString(R.string.unfavorite)); <FIXE>
<FIXS> return segmentStore.locked(c, lockWaitTime, java.util.concurrent.TimeUnit.SECONDS); <FIXE>
<FIXS> public void clearLoadList() throws com.linkedpipes.etl.executor.api.v1.LpException { <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> int p = ((int) ((1000 * current) / total)); callback.onProgress((p > 1000 ? 1000 : p < 0 ? 0 : p)); <FIXE>
<FIXS> java.lang.String value = org.loklak.data.DAO.config.get(key); <FIXE>
<FIXS> @java.lang.Override public void close() { <FIXE> <FIXS> if ((cancel) != null) <FIXE>
<FIXS> block.setType(de.craften.plugins.educraft.luaapi.functions.PlaceBlockFunction.getMaterial(varargs.checkjstring(1))); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> if ((mmServerSocket) != null) { socket = mmServerSocket.accept(); connectedThread = new com.bluetooth.icollect.bluetooth.MainActivity.ConnectedThread(socket); connectedThread.start(); } <FIXE>
<FIXS> if ((currentTime.equals(nextStartEventTime)) && (!(futureEvents.isEmpty()))) { timer.Event currentEvent = futureEvents.get(0); <FIXE> <FIXS> if (!(futureEvents.isEmpty())) { nextStartEventTime = futureEvents.get(0).getEventStartTime(); } <FIXE>
<FIXS> return edit == null ? null : org.eclipse.jdt.internal.core.util.Util.editedString(source, edit); <FIXE>
<FIXS> android.widget.RadioGroup options = ((android.widget.RadioGroup) (view.findViewById(R.id.campaign_options))); android.widget.RadioButton option = ((android.widget.RadioButton) (view.findViewById(options.getCheckedRadioButtonId()))); <FIXE>
<FIXS> org.junit.Assert.assertTrue((((clusters.length) > 1) && ((clusters.length) <= (gr.ru.gutil.SETUP_POINTS_IN_VIEW)))); <FIXE>
<FIXS> public void RemoveUser(UserProfile user) { <FIXE>
<FIXS> boolean checkOutputFormatWithDescriptionFormat(org.n52.sos.ds.hibernate.entities.Procedure procedure, java.lang.String requested, java.lang.String descriptionFormat) throws org.n52.sos.ogc.ows.OwsExceptionReport { <FIXE> <FIXS> return true; <FIXE>
<FIXS> <FIXE>
<FIXS> if (cbStoppingPose.getSelectedItem().equals("Manual")) { <FIXE>
<FIXS> if (title.equals("")) { <FIXE>
<FIXS> me.sheimi.sgit.repo.tasks.repo.CheckoutTask checkoutTask = new me.sheimi.sgit.repo.tasks.repo.CheckoutTask(mRepo, commitName, false, new me.sheimi.sgit.repo.tasks.SheimiAsyncTask.AsyncTaskPostCallback() { <FIXE>
<FIXS> if ((last) != null) last.next = null; <FIXE>
<FIXS> mAdapter = new com.aspsine.zhihu.daily.ui.adapter.NavigationDrawerAdapter(); <FIXE>
<FIXS> break; <FIXE>
<FIXS> public int escribir(java.lang.String string) { <FIXE> <FIXS> return -1; <FIXE> <FIXS> return buffer.length; <FIXE>
<FIXS> <FIXE>
<FIXS> se.fredsfursten.plugintools.ConfigurableFormat.enable(se.fredsfursten.eithonfixesplugin.EithonFixesPlugin.getPluginConfig()); <FIXE> <FIXS> <FIXE>
<FIXS> if ((MyActivity.canvas.myActivity.level) > 0) { addPassageDoor(2); addExitDoor(4); } <FIXE> <FIXS> <FIXE>
<FIXS> if (!(squares[((playerLocation) + (Board.MOVESPEED))].isOccupied)) { <FIXE>
<FIXS> at.favre.tools.apksigner.SignToolTest.testAndCheck(cmd, null, originalFolder, uApks); <FIXE>
<FIXS> private static org.mapsforge.map.layer.cache.TileCache createTileCache(int index) { <FIXE> <FIXS> java.io.File cacheDirectory = new java.io.File(java.lang.System.getProperty("java.io.tmpdir"), ("mapsforge" + index)); <FIXE>
<FIXS> if ((calendarItems.size()) > position) <FIXE>
<FIXS> return new seedu.malitio.logic.parser.DeleteCommand(taskType, taskNum); <FIXE>
<FIXS> <FIXE>
<FIXS> java.util.Set<org.molgenis.data.Entity> resultSet = newHashSet(person3); <FIXE>
<FIXS> <FIXE>
<FIXS> org.apache.tika.mime.MediaType type = null; <FIXE> <FIXS> type = org.apache.tika.mime.MediaType.parse(ct); } if (type != null) { return type; <FIXE>
<FIXS> c.close(); <FIXE>
<FIXS> if ((contentUrl) == null) { file.createNewFile(); }else { <FIXE> <FIXS> <FIXE>
<FIXS> public void createPlan() { <FIXE> <FIXS> }else { this.message = "Plan could not be created!"; <FIXE> <FIXS> <FIXE>
<FIXS> left = add; right = add; <FIXE>
<FIXS> try { batchFetcher.fetchFollowersBatch(); followersRateLimit.decrement(); } catch (java.lang.Exception e) { org.draff.twitfetch.FollowersFetcher.log.log(java.util.logging.Level.SEVERE, ("Error fetching followers: " + (e.toString())), e); <FIXE>
<FIXS> return (k2 - ((c * (k3 - k1)) / 2)) + (((c * c) * ((k3 - (2 * k2)) + k1)) / 2); <FIXE>
<FIXS> assertNotNull(encounterTransaction); <FIXE>
<FIXS> <FIXE> <FIXS> first = false; <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> if ((value & (1 << (bit))) == 0) { <FIXE>
<FIXS> readLookupLocalCache.put(key, discOsc); <FIXE>
<FIXS> mAdapter = new com.pschuette.android.calendarlibrary.CalendarAdapter(context, cal); <FIXE> <FIXS> <FIXE>
<FIXS> adapter.toggleSelection(position, false); <FIXE>
<FIXS> if (((swipe) != null) && (!(swipe.isRefreshing()))) <FIXE>
<FIXS> if ((oreDic.length()) < 3) return false; <FIXE>
<FIXS> break; <FIXE> <FIXS> <FIXE>
<FIXS> clearInvisibleBlocks(world, x, y, z, meta); <FIXE>
<FIXS> char offset = 'A' - '0'; char base = '0'; return ("" + ((char) (((column) + offset) + base))) + ((char) (((row) + 1) + base)); <FIXE>
<FIXS> protected void processUTXOMessage(org.bitcoinj.core.UTXOsMessage m) { <FIXE>
<FIXS> if ((this.getColor()) == (com.chess_game.elements.Constants.game_board.getBox(c2).getPiece().getColor())) { java.lang.System.out.println("Target is blocked. Try making a different move."); return true; }else <FIXE> <FIXS> <FIXE>
<FIXS> return null; <FIXE>
<FIXS> if ((maxCountOfTags) < 0) { return ; } if ((countOfSubString(getText().toString(), com.github.dotkebi.taginput.TagInputer.SHARP)) >= (maxCountOfTags)) { <FIXE>
<FIXS> java.lang.CharSequence elem = "\n"; <FIXE>
<FIXS> distributedTransaction.commit(xid, onePhase, callback); <FIXE>
<FIXS> searchFragment = edu.uw.fragmentdemo.SearchFragment.newInstance(); <FIXE> <FIXS> <FIXE>
<FIXS> typed = ((long) (input)); <FIXE> <FIXS> typed = (10L * (typed)) + input; <FIXE> <FIXS> update(typed); <FIXE>
<FIXS> <FIXE> <FIXS> deviceInfo.cpu_race = getCpuRace(); deviceInfo.memory_race = getMemoryRace(); deviceInfo.network_race = getNetworkRace(); <FIXE>
<FIXS> de.appplant.cordova.plugin.notification.Notification notification = getNotificationMgr().schedule(options, de.appplant.cordova.plugin.localnotification.TriggerReceiver.class); de.appplant.cordova.plugin.localnotification.LocalNotification.fireEvent("schedule", notification); <FIXE>
<FIXS> edu.berkeley.cs.StatementResult result = tx.run(createLinkStmt, edu.berkeley.cs.LinkStoreNeo4j.linkParams(a)); <FIXE>
<FIXS> wait.until(() -> (Robot.oi.drive.buttons.LB()) || (Robot.oi.drive.buttons.RB())); <FIXE>
<FIXS> <FIXE>
<FIXS> if ((io.get("field").asString().equals("status")) && (io.get("toString").asString().equals(this.reviewState))) { <FIXE>
<FIXS> return new org.nschmidt.csgn.Triangle(df, this.vertices[0].clone(), this.vertices[1].clone(), this.vertices[2].clone(), new org.nschmidt.ldparteditor.data.GColourIndex(colour.getColour(), colour.getIndex())); <FIXE>
<FIXS> private static boolean[] stringToInstrBitArray(java.lang.String s, char magicChar, boolean not) { <FIXE> <FIXS> if (not) { arr[i] = !(arr[i]); } <FIXE>
<FIXS> } catch (java.lang.Exception e) { throw e; } finally { <FIXE> <FIXS> <FIXE>
<FIXS> if ((origBlocks.get(0)) != null) for (int changeToOrig = 0; changeToOrig < (plateXZsTotal); changeToOrig += 2) { origBlocks.get(changeToOrig).setType(origMats.get(changeToOrig)); origBlocks.get((changeToOrig + 1)).setType(origMats.get((changeToOrig + 1))); } <FIXE>
<FIXS> <FIXE> <FIXS> location.add(velocity); <FIXE>
<FIXS> return queryAll(type, query); <FIXE>
<FIXS> if ((isProtected(event.getSource(), true)) || (isProtected(event.getDestination(), true))) { <FIXE>
<FIXS> return ((((((((((("CREATE TABLE IF NOT EXISTS " + (STUDENT)) + " (") + (STD_ID)) + " INTEGER PRIMARY KEY AUTOINCREMENT, ") + (STUDENT_NUM)) + " TEXT NOT NULL, ") + (FNAME)) + " TEXT NOT NULL, ") + (LNAME)) + " TEXT NOT NULL, ") + (PASSWORD)) + " TEXT NOT NULL);"; <FIXE>
<FIXS> java.lang.String[] temp = listModel.getElementAt(i).toString().split(" -> "); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> if (quantity == 0) { items.remove(item); totalAmount = 0; } <FIXE> <FIXS> totalAmount = 0; <FIXE>
<FIXS> if ((pl.name) == null) { continue; } <FIXE>
<FIXS> if (!(checkCollision(x_coord, y_coord))) { <FIXE>
<FIXS> return n; <FIXE>
<FIXS> <FIXE>
<FIXS> interfacer.removeFriend(friend, this); <FIXE>
<FIXS> if (!(¢.getLectures().isEmpty())) $.add(¢.getLectures()); if (!(¢.getTutorials().isEmpty())) $.add(¢.getTutorials()); <FIXE>
<FIXS> roundRobin++; <FIXE>
<FIXS> java.io.File pho = new java.io.File(Target); <FIXE>
<FIXS> try (java.sql.ResultSet rs = this.stmt.executeQuery(sqlstring)) { while (rs.next()) { retString = rs.getString("ProzesseID"); } } <FIXE>
<FIXS> public boolean ValidateDetails(java.lang.String name, java.lang.String username, java.lang.String password, java.lang.String confirmPassword, java.util.Date dob) { if (((((name != "") && (username != "")) && (password != "")) && (confirmPassword != "")) && (validateDate(dob))) { <FIXE>
<FIXS> infoView.setTextColor((myVoteValue <= maxVoteValue ? android.graphics.Color.argb(255, 153, 204, 0) : android.graphics.Color.argb(255, 204, 0, 0))); <FIXE>
<FIXS> if ((list == null) || ((list.size()) == 0)) return -1; <FIXE>
<FIXS> if ((downloadTask1.getProcessTimes()) < (downloadConf.maxRetryCount)) { <FIXE>
<FIXS> <FIXE> <FIXS> log.fine(((("■" + (number)) + "|") + (e.getMessage()))); <FIXE>
<FIXS> mAdapter.clear(); mAdapter.notifyDataSetChanged(); mAdapter.update(data); mAdapter.notifyDataSetChanged(); <FIXE> <FIXS> <FIXE>
<FIXS> private java.util.List<java.lang.String> httpRequest(java.lang.String url) throws java.io.IOException { java.net.HttpURLConnection httpc = ((java.net.HttpURLConnection) (new java.net.URL(url).openConnection())); try (java.io.BufferedReader in = new java.io.BufferedReader(new java.io.InputStreamReader(httpc.getInputStream(), java.nio.charset.StandardCharsets.UTF_8))) { return in.lines().collect(java.util.stream.Collectors.toList()); <FIXE>
<FIXS> s.setString("name", pName); <FIXE>
<FIXS> inputStream.close(); <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> if ((recycleDashes) && ((dash) != (dashes_initial))) { <FIXE>
<FIXS> java.lang.System.out.println(""); <FIXE>
<FIXS> java.sql.ResultSet rs; <FIXE> <FIXS> java.lang.Class.forName(music.Main.JDBC_DRIVER); con = java.sql.DriverManager.getConnection(music.Main.DB_URL, music.Main.USER, music.Main.PASS); stmt = con.createStatement(); rs = stmt.executeQuery(query); <FIXE>
<FIXS> if (cn != null) { if ((null == n) || (cn < n)) { cam = c; n = cn; } <FIXE>
<FIXS> COUNTERS.TEMP expTemp = exp.calcAddress(table, genarator, fileName); <FIXE> <FIXS> <FIXE>
<FIXS> if (Settings.System.canWrite(this)) { realToggleBrightness(); <FIXE> <FIXS> android.content.Intent writeSettingsIntent = new android.content.Intent(this, com.zoromatic.widgets.WriteSettingsActivity.class); writeSettingsIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK); startActivity(writeSettingsIntent); <FIXE>
<FIXS> swap(out, in); <FIXE>
<FIXS> return org.mef.nrp.impl.ForwardingConstructHelper.isTheSameNode(fwdC) ? getTxForNode(a, z, fwdC) : getTxForMultiNode(a, z, fwdC); <FIXE>
<FIXS> if ((p == null) || (!(p.programmerBusy()))) { <FIXE>
<FIXS> newPartyController.create(this, partyName.getText().toString().toLowerCase()); <FIXE>
<FIXS> public org.pathirage.thulitha.StorageVolume getStorageVolumeWithMaxRemainingCapacity() { <FIXE>
<FIXS> <FIXE>
<FIXS> com.google.common.base.Preconditions.checkArgument((hidIndex < ((rgibAlloc.length) + 1)), "hidIndex (%s) out of rgiAlloc size (%s)", hidIndex, rgibAlloc.length); <FIXE>
<FIXS> com.example.whatsmymood.AddMoodController.mPhoto = null; <FIXE>
<FIXS> team_f.domain.entities.MusicalWork musicalWork = convertToMusicalWork(entity); <FIXE>
<FIXS> if (questionWasAnswered) { mCountDownTimer.cancel(); return ; } <FIXE> <FIXS> <FIXE>
<FIXS> if (values == null) { return null; } <FIXE>
<FIXS> <FIXE>
<FIXS> while ((lastIndex) < (states.size())) { if (((states.get(lastIndex).timestamp) - (recordedOffset)) <= (time - (startTime))) (lastIndex)++; } <FIXE> <FIXS> (lastIndex)--; <FIXE>
<FIXS> if (((MainActivity.packageName) == null) || (MainActivity.packageName.equals("com.lgallardo.qbittorrentclient"))) { <FIXE>
<FIXS> ruleManager = new io.druid.metadata.SQLMetadataRuleManager(mapper, new io.druid.metadata.MetadataRuleManagerConfig(), tablesConfig, connector, auditManager); <FIXE>
<FIXS> } catch (com.vip.saturn.job.console.exception.SaturnJobConsoleException e) { <FIXE>
<FIXS> return (((x()) <= (other.x())) && ((y()) <= (other.y()))) && ((z()) <= (other.z())); <FIXE>
<FIXS> <FIXE>
<FIXS> if (c != null) { mTextColor.setText(c.color); mTextYear.setText(c.year); mTextMake.setText(c.make); mTextModel.setText(c.model); mTextLicensePlate.setText(c.plate); } <FIXE>
<FIXS> <FIXE>
<FIXS> assertThat(chksumChannel.getChecksum(), equalTo(expectedChecksum)); assertThat(chksumChannel.getChecksum(), equalTo(expectedChecksum)); <FIXE>
<FIXS> rulesList.add(new wormguides.model.ShapeRule(name, color, optionsArray)); <FIXE>
<FIXS> }else if (yDiff > 0) { direction = 2; } <FIXE> <FIXS> }else if (xDiff > 0) { direction = 1; } <FIXE>
<FIXS> java.text.SimpleDateFormat[] formats = new java.text.SimpleDateFormat[]{ new java.text.SimpleDateFormat("hh:mm a") , new java.text.SimpleDateFormat("HH:mm") }; <FIXE>
<FIXS> <FIXE>
<FIXS> private void syncSecurityGroup(org.opendaylight.neutron.spi.NeutronSecurityRule securityRule, org.opendaylight.neutron.spi.NeutronPort port, boolean write) { <FIXE>
<FIXS> set(data[idx]); <FIXE>
<FIXS> AE.init(1); <FIXE>
<FIXS> return result; <FIXE>
<FIXS> java.lang.System.out.println(arr); java.lang.System.out.println(centers); <FIXE>
<FIXS> public void add(double val, int... keys) throws java.lang.Exception { int index = findIndex(keys); <FIXE> <FIXS> set(val, keys); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> int size = testcases.getSelectedSoftaps().size(); <FIXE>
<FIXS> final java.lang.String asLower = javaArchName.toLowerCase(java.util.Locale.US).trim(); <FIXE>
<FIXS> net.minecraftforge.fml.common.registry.EntityRegistry.registerModEntity(net.thedragonteam.armorplus.entity.entityzombie.EntityEnderDragonZombie.class, "ender_dragon_zombie", net.thedragonteam.armorplus.entity.ARPEntities.ENDER_DRAGON_ZOMBIE, ArmorPlus.instance, 64, 1, true, 8704, 65280); <FIXE>
<FIXS> superstepTimes.add(java.lang.Double.parseDouble(matcher.group(1))); <FIXE>
<FIXS> boolean hypotheses = (n.hypotheses.containsAll(curr.hypotheses)) && (curr.hypotheses.containsAll(n.hypotheses)); <FIXE>
<FIXS> finishActivityAndShowAnimation(); <FIXE> <FIXS> <FIXE>
<FIXS> public void removeStudentFromCourse(java.lang.Integer courseId, java.lang.Integer studentId, boolean force) { <FIXE>
<FIXS> moon.setVelocity(com.ambergleam.android.paperplane.model.Moon.getRandomStartingPosition()); <FIXE>
<FIXS> setAttribute(com.github.ddth.djs.bo.log.TaskLogBo.ATTR_TIMESTAMP_FINISH, timestamp); <FIXE> <FIXS> setAttribute(com.github.ddth.djs.bo.log.TaskLogBo.ATTR_DURATION_FINISH, null); <FIXE> <FIXS> <FIXE>
<FIXS> scheme = ((org.egov.commons.Scheme) (persistenceService.find("from Scheme where id=?", scheme.getId()))); mode = org.egov.web.actions.masters.SchemeAction.VIEW; <FIXE>
<FIXS> if (placehorder != 0) { options.placeholder(placehorder); } options.transform(new com.yc.english.base.helper.GlideCircleTransformation(context, borderwidth, bordercolor)); <FIXE>
<FIXS> <FIXE>
<FIXS> difficulty = board.loadGame(jsonObject); <FIXE>
<FIXS> nuclei3.notifications.NotificationManager.dismiss(getIntent()); <FIXE>
<FIXS> return ; <FIXE>
<FIXS> Demo.ProductoIce productoIce = new Demo.ProductoIce(); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> double cosValue = 0; <FIXE> <FIXS> cosValue = cosValue + ((vector[ii]) * (qVector[ii])); <FIXE>
<FIXS> if (!(_succesfull)) { if (!(_waiting)) renewPanel(); _retry.setVisible(false); _conPanel.setVisible(true); _succesfull = true; _waiting = false; _icon.setImage(org.jivesoftware.resource.SparkRes.getImageIcon(SparkRes.SMALL_CHECK).getImage()); _label.setText(org.jivesoftware.spark.otrplug.util.OTRResources.getString("otr.successfull")); } <FIXE>
<FIXS> elementsRepository.add(col); elementsRepository.add(cd); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> if ((appList) != null) { java.util.ArrayList<ir.rasen.charsoo.controller.object.PackageInfoCustom> temp = new java.util.ArrayList<>(); for (int i = 0; i < (appList.size()); i++) { temp.add(appList.get(i)); } return temp; }else return null; <FIXE>
<FIXS> pf.add(pu); <FIXE>
<FIXS> float offset = (rectangle.getX()) - x; <FIXE> <FIXS> item.setX(((item.getX()) - offset)); <FIXE> <FIXS> rectangle.setX(((rectangle.getX()) - offset)); <FIXE>
<FIXS> if ((i == 0) | (currentMaxSum > finalMaxSum)) { <FIXE>
<FIXS> return triggerList[track].find(globalStep); <FIXE> <FIXS> <FIXE>
<FIXS> subtotal = 0; <FIXE>
<FIXS> return (dist <= (((weaponAgainstThisUnit.maxRange()) / 32) + safetyMargin)) && (dist >= ((weaponAgainstThisUnit.minRange()) / 32)); <FIXE>
<FIXS> final org.springframework.http.ResponseEntity<java.util.List<org.springframework.cloud.netflix.feign.encoding.app.domain.Invoice>> response = this.invoiceClient.saveInvoices(invoices); <FIXE>
<FIXS> selectLevelScreen(1); <FIXE>
<FIXS> viewObjects.add(player); <FIXE>
<FIXS> uk.co.cranfield.core.WaveSimulatorSolver solver = new uk.co.cranfield.core.WaveSimulatorSolver(1, period, waveHeight, depth, dout, gp1, gp2, gp3, gp4); uk.co.cranfield.model.Results results = solver.solve(); <FIXE>
<FIXS> <FIXE>
<FIXS> return ((hPSHandle.GetRepertoryByKeyList(java.util.Arrays.asList("Bar_Code", "po_name", "isEnsure"), java.util.Arrays.asList(curBarcode, "Material_Supply", "1"))) + (hPSHandle.GetRepertoryByKeyList(java.util.Arrays.asList("Bar_Code", "po_name", "isEnsure"), java.util.Arrays.asList(curBarcode, po_name, "1")))) + (GetProductOtherPoNotDepleteRepertory(curBarcode, po_name)); <FIXE>
<FIXS> if ((getValue(x, y)) == (-1)) { <FIXE>
<FIXS> return (java.lang.Math.pow((((marker.getLatitude()) * 2) - ((cluster.getLatitude()) * 2)), 2)) + (java.lang.Math.pow(((marker.getLongitude()) - (cluster.getLongitude())), 2)); <FIXE>
<FIXS> testDate = new java.util.GregorianCalendar(2015, 2, 10); <FIXE>
<FIXS> return true; <FIXE>
<FIXS> <FIXE>
<FIXS> org.simplity.kernel.ApplicationError.logger.error(e.getMessage()); <FIXE>
<FIXS> org.kaazing.gateway.transport.wsr.WsrSession wsrSession = new org.kaazing.gateway.transport.wsr.WsrSession(this, getProcessor(), connectAddress, connectAddress, session, wsrAllocator, null); <FIXE>
<FIXS> if (android.text.TextUtils.equals("false", value.toString())) { <FIXE> <FIXS> if (android.text.TextUtils.equals("true", value.toString())) { <FIXE>
<FIXS> return io.jpress.model.query.UserQuery.me().paginate(pageNumber, pageSize, null); <FIXE>
<FIXS> org.roda.core.RodaCoreFactory.pluginManager = org.roda.core.plugins.PluginManager.instantiatePluginManager(org.roda.core.RodaCoreFactory.getConfigPath(), org.roda.core.RodaCoreFactory.getPluginsPath()); <FIXE>
<FIXS> if ((!(suit.isTrump())) && (other.suit.isTrump())) { return -1; <FIXE> <FIXS> return 1; <FIXE>
<FIXS> luogoCorrente = nuovoLuogoCorrente; <FIXE>
<FIXS> if (((xmpMetadata) != null) && ((xmpMetadata.getAllSchemas()) != null)) { for (org.verapdf.model.xmplayer.XMPSchema pbschema : xmpMetadata.getAllSchemas()) { if (pbschema != null) { org.verapdf.model.xmplayer.XMPSchema schema = org.verapdf.model.factory.xmp.PBSchemaFactory.createSchema(pbschema); resultSchemas.add(schema); } } <FIXE>
<FIXS> if ((editors.size()) == 0) { return null; } <FIXE>
<FIXS> if (rise == (-0)) { return 0; } <FIXE>
<FIXS> java.lang.System.out.println(current.leftParCor()[1]); <FIXE>
<FIXS> final java.util.List<org.eclipse.jface.action.IAction> actionList = new java.util.ArrayList(java.util.Arrays.asList(new org.eclipse.jface.action.IAction[]{ new org.dbflute.erflute.editor.view.action.ermodel.PlaceTableAction(this) , new org.dbflute.erflute.editor.view.action.ermodel.WalkerGroupManageAction(this) })); <FIXE>
<FIXS> node.firmVarNumber = (varCounter)++; <FIXE> <FIXS> construction.setVariable(((parameterCount) + (node.firmVarNumber)), initValue); <FIXE>
<FIXS> <FIXE>
<FIXS> private static void addPacketTypes(java.util.Iterator<com.comphenix.protocol.PacketType> packetTypeIterator, java.lang.String prefix, java.lang.Boolean isServer) { <FIXE>
<FIXS> if (!success) { <FIXE>
<FIXS> tx.commit(); <FIXE>
<FIXS> <FIXE>
<FIXS> if (output != null) { int stop = output.indexOf(","); int start = output.indexOf(":"); java.lang.String result = output.substring(start, stop); mText_distance.setText(((getString(R.string.distance)) + result)); } <FIXE>
<FIXS> <FIXE> <FIXS> this.bigNumerator = bigValue; this.bigDenominator = java.math.BigInteger.ONE; <FIXE>
<FIXS> if (sibling == null) { <FIXE>
<FIXS> return org.xcolab.util.http.dto.DtoUtil.toPojos(proposalRatingResource.list().optionalQueryParam("proposalId", proposalId).optionalQueryParam("contestPhaseId", contestPhaseId).optionalQueryParam("userId", userId).execute(), proposalService); <FIXE>
<FIXS> c.setAlpha(java.lang.Math.round(((c.getAlpha()) * multiplier))); <FIXE>
<FIXS> if (playerlocs == null) { <FIXE>
<FIXS> if (cmd == null) { return null; } <FIXE>
<FIXS> mCommentRv.notifyDataChange(currentPage, comment.count); <FIXE>
<FIXS> textView2.setText(java.lang.String.valueOf((millisUntilFinished / countDownInterval))); <FIXE>
<FIXS> if (bi != null) { org.opencv.core.Mat mat = new org.opencv.core.Mat(bi.getHeight(), bi.getWidth(), org.opencv.core.CvType.CV_8UC3); byte[] data = ((java.awt.image.DataBufferByte) (bi.getRaster().getDataBuffer())).getData(); mat.put(0, 0, data); return mat; } return new org.opencv.core.Mat(); <FIXE>
<FIXS> if (packet.isCompressable()) { <FIXE>
<FIXS> final java.lang.Iterable<org.opendaylight.yangtools.yang.data.api.YangInstanceIdentifier.PathArgument> result = org.opendaylight.restconf.parser.builder.YangInstanceIdentifierDeserializer.create(this.schemaContext, "deserializer-test:contA"); <FIXE>
<FIXS> private void configureMenuInternal(android.view.Menu menu, int count, boolean foreignExchangeTransfer, boolean hasPlan) { <FIXE> <FIXS> menu.findItem(R.id.CREATE_INSTANCE_EDIT_COMMAND).setVisible(((count == 1) && (!hasPlan))); <FIXE>
<FIXS> if (listener == null) { <FIXE>
<FIXS> env.put(entry.getName(), entry.getValue()); <FIXE>
<FIXS> clientInstance.startNewSessionIfNeeded(getCurrentTimeMillis()); <FIXE>
<FIXS> <FIXE> <FIXS> return ((java.lang.Boolean) (bluetoothDevice.getClass().getMethod("removeBond", ((java.lang.Class<?>[]) (null))).invoke(bluetoothDevice, ((java.lang.Object[]) (null))))); <FIXE> <FIXS> return false; <FIXE>
<FIXS> serverThread.start(); <FIXE>
<FIXS> public static java.lang.String addTrailingSeparator(java.lang.String original) { <FIXE>
<FIXS> <FIXE>
<FIXS> if (key == null) { continue; } <FIXE>
<FIXS> sleep(getWaitTime(com.jsl.babytrader.Runnables.PromotionTeam.SLEEP_TIME_MIN, com.jsl.babytrader.Runnables.PromotionTeam.SLEEP_TIME_MAX, com.jsl.babytrader.Controls.Configuration.getLevelPromotion())); <FIXE> <FIXS> <FIXE>
<FIXS> clientportal.Browser.closePopUps(common.DriverManager.getDriver(DriverType.LOOP)); <FIXE>
<FIXS> e.getGridLight().setImage(image); e.getRoadLight().setImage(image); <FIXE>
<FIXS> configRepository.create(config); if (((config.getInputFileURL()) != null) && (!(config.getInputFileURL().isEmpty()))) { <FIXE> <FIXS> } <FIXE>
<FIXS> T t = edu.psu.swe.scim.client.rest.BaseScimClient.handleResponse(response, scimResourceClass, response::readEntity); <FIXE>
<FIXS> return (this.points) == null ? 0 : this.points.size(); <FIXE>
<FIXS> addInvalidMessage(ctx, message); <FIXE>
<FIXS> protected com.freedomotic.reactions.Command findMostSimilarCommand(java.lang.String phrase) throws com.freedomotic.exceptions.NoResultsException { <FIXE>
<FIXS> applicableCharge.setIsPenaltyType(false); <FIXE>
<FIXS> int octave = degree / 7; <FIXE> <FIXS> octave--; <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> return new de.dengot.skyrim.reporting.worker.TemplateMergeWorkload(loadTemplate("frame-category-content.vm"), context, outputFile); <FIXE>
<FIXS> <FIXE>
<FIXS> } catch (java.lang.Exception e) { <FIXE>
<FIXS> <FIXE> <FIXS> lejos.robotics.navigation.Waypoint wp = new lejos.robotics.navigation.Waypoint(0, 0); <FIXE>
<FIXS> <FIXE> <FIXS> return ; <FIXE> <FIXS> org.junit.Assert.fail(); <FIXE>
<FIXS> for (int i = 1; i < Dx; i++) { <FIXE>
<FIXS> query = (("UPDATE " + table) + " SET ihave=1 WHERE id=") + id; }else { <FIXE> <FIXS> <FIXE>
<FIXS> java.lang.String formulaCol = (isColRel) ? ("C[" + (col - cellCol)) + "]" : "C" + (col + 1); java.lang.String formulaRow = (isRowRel) ? ("R[" + (row - cellRow)) + "]" : "R" + (row + 1); <FIXE>
<FIXS> <FIXE>
<FIXS> fr.loria.synalp.jtransxps.XPMInimizeVars.EtatHMM eLost = alignment[t]; globalVar -= eLost.getVar(); eLost.removeOneFrame(frames[t]); globalVar += eLost.getVar(); fr.loria.synalp.jtransxps.XPMInimizeVars.EtatHMM eGain = alignment[(t - 1)]; globalVar -= eGain.getVar(); eGain.updateOneFrame(frames[t]); globalVar += eGain.getVar(); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> public void setActivatedPosition(int position) { <FIXE>
<FIXS> public java.lang.Long getOrCreateAnswerId(java.lang.String answer, long categoryId) { <FIXE> <FIXS> answerId = db.insert(ProductContract.Answer.TABLE_NAME, null, values); <FIXE>
<FIXS> java.lang.String[] elems = com.me.core.service.dao.DbCreationUtility.readProperties(); <FIXE>
<FIXS> return values[0].equals(values[1]) ? java.math.BigDecimal.ZERO : java.math.BigDecimal.ONE; <FIXE>
<FIXS> <FIXE>
<FIXS> public static java.lang.String convertImportCurrency(java.lang.String value) { <FIXE>
<FIXS> requestPermissions(new java.lang.String[]{ Manifest.permission.ACCESS_FINE_LOCATION }, 1); <FIXE>
<FIXS> <FIXE>
<FIXS> java.awt.geom.Ellipse2D.Double cir = new java.awt.geom.Ellipse2D.Double(getCenter().getX(), getCenter().getY(), getRadius(), getRadius()); g2.setColor(getColor()); <FIXE>
<FIXS> if ((projectDescription.length()) > 128) view.disableCreateProjectButton(); if ((projectDescription.length()) >= 128) <FIXE> <FIXS> <FIXE>
<FIXS> context = callbackContext; <FIXE> <FIXS> <FIXE>
<FIXS> public java.util.List<hu.schonherz.administration.serviceapi.dto.UserDTO> getUsers(hu.schonherz.administration.serviceapi.dto.UserRole role) throws hu.schonherz.administration.serviceapi.exeption.NotAllowedRoleException { <FIXE> <FIXS> throw new hu.schonherz.administration.serviceapi.exeption.NotAllowedRoleException("Admin role is not allowed"); <FIXE>
<FIXS> for (int i = 0; i < (pieces.getRawPieces().size()); i++) { com.xingstarx.mergeadapter.adapter.MergeRecyclerAdapter.PieceState piece = pieces.getRawPieces().get(i); <FIXE>
<FIXS> <FIXE>
<FIXS> public studyproject.API.Core.File.Watcher.FileWatcherTreeNode getNodeBySubDirs(java.util.List<java.lang.String> subDirsList) { <FIXE>
<FIXS> public boolean ifConfig() { <FIXE> <FIXS> return false; <FIXE> <FIXS> return true; <FIXE>
<FIXS> eoss.problem.evaluation.ArchitectureEvaluatorParams.instance = new eoss.problem.evaluation.ArchitectureEvaluatorParams(p); return eoss.problem.evaluation.ArchitectureEvaluatorParams.instance; <FIXE>
<FIXS> if ((moreChoices.size()) < 50) { <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> if (java.lang.String.valueOf(t).endsWith(".30")) { timeSlots.add(timeDivide(t)); <FIXE> <FIXS> }else { timeSlots.add(timeDivide(t)); <FIXE> <FIXS> } <FIXE>
<FIXS> if ((userIsLoggedIn) == true) { <FIXE>
<FIXS> no.dkit.android.ludum.core.game.factory.LevelFactory.level = 1; <FIXE>
<FIXS> <FIXE>
<FIXS> public boolean getWaterlooInfoSessions(final com.sixbynine.infosessions.data.ResponseHandler<com.sixbynine.infosessions.model.WaterlooInfoSessionCollection> callback) { <FIXE> <FIXS> return true; <FIXE> <FIXS> return true; <FIXE> <FIXS> return false; <FIXE>
<FIXS> refreshView(); <FIXE> <FIXS> <FIXE>
<FIXS> public CentralPoint.RegisResponeInfo getRegisterRespone() throws java.lang.Exception { <FIXE>
<FIXS> sb.append(this.getLongitude()); sb.append(" "); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> if ((mRequestMap.get(target)) != url) { <FIXE>
<FIXS> if (!(elem.getTagName().equals("select"))) { <FIXE> <FIXS> }else { final org.openqa.selenium.support.ui.Select select = new org.openqa.selenium.support.ui.Select(elem); return select.getFirstSelectedOption().getText(); } <FIXE>
<FIXS> status = stemp.executeUpdate(); <FIXE>
<FIXS> marshaller.writeObject(null); }else { final org.jboss.modules.ModuleIdentifier identifier = module.getIdentifier(); marshaller.writeObject(identifier.getName()); marshaller.writeObject(identifier.getSlot()); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> tBuilder.setTitle("The Title").setViewToSurround(v).setInfoText("This is the explanation about the view.").setBackgroundColor(randomColor()).setTutorialTextColor(Color.WHITE).setTutorialTextSize(30).setAnimationDuration(500); <FIXE>
<FIXS> java.util.Objects.requireNonNull(productCategory); <FIXE>
<FIXS> if (messageNodes == null) return ; <FIXE>
<FIXS> setDice(dice); <FIXE>
<FIXS> if ((mField) == null) return this; <FIXE>
<FIXS> <FIXE> <FIXS> return count > 3; <FIXE>
<FIXS> org.nextprot.api.commons.exception.NPreconditions.checkTrue(((userProteinList.getId()) == 0), "The user protein list should be new"); <FIXE>
<FIXS> if (o instanceof java.lang.CharSequence) return lucee.commons.color.ColorCaster.toColor(o.toString()); <FIXE> <FIXS> return lucee.commons.color.ColorCaster.toColor(java.lang.Integer.toHexString(((java.lang.Number) (o)).intValue())); <FIXE>
<FIXS> cas = aCas; <FIXE> <FIXS> <FIXE>
<FIXS> java.util.List<vo.ReportVO> result = new java.util.ArrayList<vo.ReportVO>(); java.util.List<po.ReportPO> list = new java.util.ArrayList<po.ReportPO>(); <FIXE>
<FIXS> getServer().getPluginManager().registerEvents(new com.sainttx.holograms.HologramListener(this), this); <FIXE> <FIXS> <FIXE>
<FIXS> public java.lang.String home(org.springframework.ui.Model model, java.lang.String category) { <FIXE>
<FIXS> refreshOrder(); <FIXE> <FIXS> <FIXE>
<FIXS> java.util.List<java.lang.String> allPossibleSuggestions = org.openmrs.module.chartsearch.GeneratingJson.chartSearchService.getAllPossibleSearchSuggestions(org.openmrs.module.chartsearch.SearchAPI.getPatientId()); <FIXE>
<FIXS> if ((inpipe) == null) { return ; } <FIXE>
<FIXS> return this.getClickController(); case data.Keys.action_doubleClick : <FIXE> <FIXS> <FIXE>
<FIXS> return waitTillReasonableStop(0); <FIXE>
<FIXS> if (memberToDelete == null) { return ; } <FIXE>
<FIXS> private static double[] getCoords(org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction curve, double[] index) { final double[] coords = new double[((int) (java.lang.Math.round(index[((index.length) - 1)])))]; for (int i = 0; i < (coords.length); i++) { coords[i] = curve.value(i); <FIXE>
<FIXS> synchronized(clientResponses) { java.util.ArrayList<org.xbmc.kore.testutils.tcpserver.handlers.jsonrpc.JsonResponse> responses = clientResponses.get(java.lang.String.valueOf(id)); if (responses == null) { responses = new java.util.ArrayList<>(); clientResponses.put(java.lang.String.valueOf(id), responses); } responses.addAll(jsonResponses); <FIXE> <FIXS> <FIXE>
<FIXS> java.lang.String tileLook = (((((((("\n" + " ") + (getTop())) + "\n") + (getLeft())) + " ") + (getRight())) + "\n ") + (getBottom())) + "\n"; <FIXE>
<FIXS> <FIXE>
<FIXS> partialFeeder = new kon.shol.searchengine.elasticsearch.MultiThreadEsFeederFromHbase.PartialFeeder(min, max, (indexerNumber = ((indexerNumber) + 1) % (kon.shol.searchengine.elasticsearch.MultiThreadEsFeederFromHbase.THREAD_COUNT))); <FIXE>
<FIXS> com.google.gson.JsonElement jsonElement = jsonObject.get(com.sfparks.model.ParksModule.LOCATION_1).getAsJsonObject().get(com.sfparks.model.ParksModule.LATITUDE); <FIXE>
<FIXS> break; <FIXE>
<FIXS> int count = 1; <FIXE> <FIXS> if (gid <= ((range.getLeft()) + count)) { int sid = (gid - count) + (range.getFirst()); <FIXE> <FIXS> count += (range.getLeft()) + 1; <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> return value == 0L ? -1 : (position - 1) - (java.lang.Long.numberOfLeadingZeros(value)); <FIXE>
<FIXS> <FIXE>
<FIXS> private static java.util.HashSet<java.lang.Integer> getPointsToSet(com.ensoftcorp.atlas.core.db.graph.Node node) { <FIXE>
<FIXS> if (((lvBill) != null) && ((arrayItemCart) != null)) { <FIXE>
<FIXS> <FIXE>
<FIXS> private static int codeNameToApi(@com.android.annotations.NonNull <FIXE>
<FIXS> if ((pageSize < (ff.getPageSize())) || (pageSize > (com.questdb.cairo.TableWriter._16M))) { <FIXE>
<FIXS> context = parent.getContext(); <FIXE> <FIXS> inflater = android.view.LayoutInflater.from(context); <FIXE>
<FIXS> manageWallet(wallet); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> orcidSecurityManager.checkPermissions(ScopePathType.AFFILIATIONS_CREATE); <FIXE>
<FIXS> retries++; } while ((retries <= maxRetries) && (!portAvailable) ); <FIXE>
<FIXS> public tasker.model.Space createSpace(@tasker.controller.RequestBody <FIXE> <FIXS> return space; <FIXE>
<FIXS> com.funcxy.oj.controllers.User userFound = userRepository.findById(new org.bson.types.ObjectId(httpSession.getAttribute("userId").toString())); <FIXE>
<FIXS> if ((userEntity.getPassword()) != null) { <FIXE>
<FIXS> if ((app.getClient().getOutputStream()) != null) { try { app.getClient().getOutputStream().writeObject(out); app.getClient().getOutputStream().flush(); app.getClient().getOutputStream().reset(); } catch (java.io.IOException e) { e.printStackTrace(); } <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> this.currentPlayerIndex = index; <FIXE>
<FIXS> java.lang.String[] args = com.massivecraft.massivecore.cmd.arg.ARStringCommand.argAsArgs(arg); java.lang.String alias = args[0]; <FIXE>
<FIXS> <FIXE> <FIXS> playersPoll.setOptions(getPlayerOptionsFor(match)); <FIXE>
<FIXS> try (java.sql.ResultSet resultSet = statement.executeQuery("SELECT * FROM PEEPS")) { while (resultSet.next()) { java.lang.String peepText = resultSet.getString("PEEP_TEXT"); result.add(peepText); } } <FIXE>
<FIXS> java.lang.System.err.println(ex); java.lang.System.exit(1); <FIXE>
<FIXS> if (body == null) { return ""; }else { return org.apache.commons.io.IOUtils.toString(body.getContent()); } <FIXE>
<FIXS> roc.add(new utils.DoubleDoublePair((1 - (getHamRecall())), getSpamRecall())); <FIXE>
<FIXS> com.puppycrawl.tools.checkstyle.api.DetailAST resultNode = rootToken.getFirstChild(); if ((resultNode != null) && ((resultNode.getType()) != tokenType)) { com.puppycrawl.tools.checkstyle.api.DetailAST childNode = com.github.sevntu.checkstyle.checks.coding.DiamondOperatorForVariableDefinitionCheck.getFirstChildTokenOfType(resultNode, tokenType); if (childNode == null) { resultNode = resultNode.getNextSibling(); <FIXE> <FIXS> } <FIXE>
<FIXS> <FIXE>
<FIXS> int count = getChildCount(); int start = (first) ? 0 : count - 1; <FIXE> <FIXS> for (int i = start; (i >= 0) && (i < count); i += inc) { <FIXE>
<FIXS> int result = java.lang.Double.compare(r1.getRatingValue(), r2.getRatingValue()); if (result == 1) { <FIXE> <FIXS> }else if (result == (-1)) { result = 1; }else if (result == 0) { result = r1.getName().compareTo(r2.getName()); } <FIXE>
<FIXS> return parents.iterator(); <FIXE>
<FIXS> auth.inMemoryAuthentication().withUser("user").password("password").roles("USER"); <FIXE> <FIXS> <FIXE>
<FIXS> if ((collaborator.isUserIncluded(user)) && (this.leaderAccessLevel.equals(collaborator.getAccessLevel()))) { return true; } <FIXE>
<FIXS> imageFile = new java.io.File(imagePath); <FIXE>
<FIXS> return "<b>Tính năng</b><br/>" + (((((("&emsp;Tự động gửi yêu cầu tham gia đến Nhóm<br/>" + "&emsp;Nhấn kiểm tra xem BOT đã tham gia chưa<br/>") + "<b>Hướng dẫn sử dụng</b><br/>") + "&emsp;B1. Ấn vào Avatar BOT để kết bạn<br/>") + "&emsp;B2. Tìm kiếm Nhóm bằng Tên<br/>") + "&emsp;B3. Chọn Nhóm muốn Tham gia<br/>") + "&emsp;B4. Chờ cho BOT được Tham gia<br/>"); <FIXE>
<FIXS> <FIXE> <FIXS> if (direction == "STOP") { armExtender.setPower(0.0); } armExtender.setPower(gamepad2.left_stick_y); <FIXE>
<FIXS> assert parameterName != null; assert !(parameterName.isEmpty()); <FIXE>
<FIXS> return ((T) (java.lang.reflect.Proxy.newProxyInstance(com.mgs.pims.proxy.PimsEntityProxyFactory.class.getClassLoader(), new java.lang.Class[]{ actualType }, new com.mgs.pims.proxy.PimsEntityProxy(pimsMethodCaller, actualType, domainMap, valueMap, pimsLinker.link(actualType), mutable, pimsParameters)))); <FIXE>
<FIXS> for (com.flames.organizer.Customer customer : customers) { if ((customer.getCustomerBar().getRect().y) == (room.getRect().y)) { removeRoomMsg = new com.flames.organizer.windows.PopUpMessage(2, "ΠΡΟΣΟΧΗ", "Υπάρχει καταχωρημένη κράτηση σε αυτό το δωμάτιο. Είστε σίγουροι ότι θέλετε να το διαγράψετε;", wm); wm.set(removeRoomMsg); break; <FIXE>
<FIXS> hotelDAO.deleteHotel(hotel); <FIXE>
<FIXS> geogebra.euclidian.Drawable.drawMultilineLaTeX(view.getApplication(), tempGraphics, geo, g2d, font, java.awt.Color.BLACK, java.awt.Color.WHITE, text, 0, 0, false); <FIXE> <FIXS> geogebra.euclidian.Drawable.drawMultiLineIndexedText(view.getApplication(), text, 0, 0, g2d, false); <FIXE>
<FIXS> assertEquals(4.0, p5e610.balance.AccelerationData.covar(x, y), 0.001); <FIXE>
<FIXS> stage.close(); <FIXE> <FIXS> <FIXE>
<FIXS> public void deleteConfig(java.lang.String configName) { <FIXE>
<FIXS> java.lang.String[] outputClass = new java.lang.String[_stream_out.dataclass.length]; <FIXE>
<FIXS> numRows = lines; return numRows; <FIXE>
<FIXS> if (temp == 0) { <FIXE> <FIXS> } } if (n < 2) { isPrime = false; <FIXE>
<FIXS> panel.setLayout(new javax.swing.BoxLayout(panel, javax.swing.BoxLayout.X_AXIS)); outputFilePath.addFocusListener(OUTPUT_FOCUS_LISTENER); <FIXE> <FIXS> <FIXE>
<FIXS> return rv; <FIXE>
<FIXS> if ((entity == null) || (entity.isEmpty())) { <FIXE>
<FIXS> return false; <FIXE>
<FIXS> return org.lopina.tree.binary.Branch.right().apply(((n - (org.lopina.tree.binary.Branch.left().size())) - 1)); <FIXE>
<FIXS> if (bId == null) { return null; }else { int id = java.lang.Integer.parseInt(ser.deserialize(bId)); return getHPModelById(id, connection, ser); } <FIXE>
<FIXS> <FIXE>
<FIXS> public <L, F extends de.factoryfx.factory.FactoryBase<L, V>> void addFactory(java.lang.Class<F> clazz, java.lang.String name, de.factoryfx.factory.builder.Scope scope, java.util.function.Function<de.factoryfx.factory.builder.FactoryContext<V>, F> creator) { factoryContext.addFactoryCreator(new de.factoryfx.factory.builder.FactoryCreator(clazz, name, scope, creator)); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> try (java.io.InputStream i = getClass().getResourceAsStream("/board.txt")) { nl.tudelft.jpacman.board.Board b = parser.parseMap(i).getBoard(); nl.tudelft.jpacman.board.Square s1 = b.squareAt(1, 1); nl.tudelft.jpacman.board.Unit unit = nl.tudelft.jpacman.npc.ghost.Navigation.findNearest(nl.tudelft.jpacman.npc.ghost.Ghost.class, s1); org.junit.Assert.assertNotNull(unit); } <FIXE>
<FIXS> break; <FIXE>
<FIXS> java.util.List<java.lang.String> friendList = com.initianovamc.rysingdragon.landprotect.config.PlayerConfig.getPlayerConfig().getConfigNode().getNode("friends", playerUUID.toString(), "friendlist").getList(com.google.common.reflect.TypeToken.of(java.lang.String.class)); <FIXE>
<FIXS> servingSize = newValue; <FIXE> <FIXS> <FIXE>
<FIXS> if ((usedArray) != null) { java.lang.String sub = usedArray.get(pager.getCurrentItem()); if ((!(sub.equals("frontpage"))) && (!(sub.equals("all")))) { ((android.support.v4.widget.DrawerLayout) (findViewById(R.id.drawer_layout))).openDrawer(Gravity.RIGHT); } <FIXE>
<FIXS> private static java.lang.String join(java.lang.String[] set, java.lang.String medium, int start) { java.lang.String s = set[start]; <FIXE> <FIXS> if (i > start) <FIXE>
<FIXS> if (((id) == (other.id)) && (email.equals(other.email))) <FIXE>
<FIXS> lastLocation = currentLocation; <FIXE>
<FIXS> if (foldTime <= 0) return 0.0F; <FIXE>
<FIXS> if ((devices) != null) { for (android.bluetooth.BluetoothDevice device : devices) { if (device.getAddress().contains(params[0])) { deviceFound = true; targetDevice = device; android.util.Log.d(com.alejandro_castilla.cloudfitforwear.services.bluetooth.BluetoothService.TAG, "The device requested has been found."); } } } return targetDevice; <FIXE> <FIXS> return null; <FIXE>
<FIXS> this.horizontalMovement = java.lang.Math.min(((horizontalMovement) + amount), Server.Creatures.ServerPlayer.MAX_HSPEED); <FIXE>
<FIXS> year.setYear(2000); <FIXE>
<FIXS> assertTrue(((testeNotaFiscal.ValorTotal()) == 40)); <FIXE>
<FIXS> public static void initWrite(java.sql.Connection writeConnection) throws java.sql.SQLException { <FIXE>
<FIXS> <FIXE>
<FIXS> if (context != null) { android.content.pm.PackageInfo pInfo = context.getPackageManager().getPackageInfo(context.getPackageName(), 0); return pInfo.versionCode; } <FIXE>
<FIXS> this.properties = new java.util.HashMap<java.lang.String, java.lang.Double>(material.properties); this.components = new java.util.HashMap<java.lang.String, org.eclipse.ice.datastructures.form.MaterialStack>(material.components); <FIXE>
<FIXS> org.golde.java.scratchforge.helpers.PLog.error(e, (((("Failed to set " + (setting.name())) + " to ") + to) + "!")); <FIXE>
<FIXS> <FIXE>
<FIXS> public java.util.Collection<com.the_bean_quartet.msc_project.entities.BaseData> getAllModelRelatedData(int phoneModel) { <FIXE>
<FIXS> <FIXE>
<FIXS> java.lang.String currentPhrase = allPhrases.get(1); <FIXE>
<FIXS> com.example.juanrubio.fbla_app_final.Item[] searchResults = new com.example.juanrubio.fbla_app_final.Item[items.size()]; <FIXE>
<FIXS> int tries = (retries) + 1; <FIXE>
<FIXS> java.lang.System.out.println(fh); <FIXE>
<FIXS> <FIXE> <FIXS> return stack; <FIXE>
<FIXS> org.assertj.core.api.Assertions.assertThat(parser.getAttributeUnsignedIntValue(0, 0)).as("Getting a negative number as unsigned should return the default value.").isEqualTo(0); <FIXE>
<FIXS> }, 0, tickStep); <FIXE>
<FIXS> <FIXE>
<FIXS> this.capacity = capacity; <FIXE>
<FIXS> public java.lang.String getLearningTimeList(java.lang.Long beginTime, java.lang.Long endTime) { <FIXE> <FIXS> java.util.List<com.era.education.controller.LearningTime> learningTimeList = learningService.getLearningTimeList(userId, new java.util.Date(beginTime), new java.util.Date(endTime)); <FIXE>
<FIXS> <FIXE>
<FIXS> if ((codeInt[x]) < 0) { codeInt[x] = (codeInt[x]) + 26; <FIXE>
<FIXS> return formattedContent; <FIXE>
<FIXS> java.lang.System.out.println(Utility.ExtentManager.filePath); <FIXE>
<FIXS> if (unpacked == item) return false; <FIXE>
<FIXS> if (((org.codehaus.groovy.eclipse.refactoring.formatter.GroovyIndentationService.lastIndenter) != null) && (!(project.equals(org.codehaus.groovy.eclipse.refactoring.formatter.GroovyIndentationService.lastIndenter.project)))) { <FIXE>
<FIXS> tvActivationDate.setText(com.mifos.utils.Utils.getStringOfDate(centerWithAssociations.getActivationDate())); <FIXE>
<FIXS> <FIXE>
<FIXS> if (((response.getContentType()) == null) || (response.getContentType().startsWith("text/"))) { <FIXE>
<FIXS> this.selectedRoles.add(r.getId()); <FIXE>
<FIXS> return (((this.getAnimalId()) == (newSighting.getAnimalId())) && (this.getLocation().equals(newSighting.getLocation()))) && ((this.getRangerId()) == (newSighting.getRangerId())); <FIXE>
<FIXS> if (!(isValidPosition(position))) { <FIXE>
<FIXS> public static boolean isIdExist(final java.lang.String newId) throws org.parse4j.ParseException { <FIXE> <FIXS> <FIXE> <FIXS> return (data.management.DBManager.getObjectFieldsByKey(objectClass, key).isEmpty()) == false; <FIXE>
<FIXS> if ((listImgPath.size()) >= 1) { <FIXE> <FIXS> <FIXE>
<FIXS> try { java.io.BufferedReader br = new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream(pth), "windows-1251")); while ((thisLine = br.readLine()) != null) { str_words += thisLine; } } catch (java.lang.Exception e) { e.printStackTrace(); <FIXE>
<FIXS> private int check(E itemForCheck) { <FIXE> <FIXS> for (int i = 0; i <= (size); i++) { if (itemForCheck.equals(item.value)) { return i; <FIXE> <FIXS> return -1; <FIXE>
<FIXS> if ((linkurl) != null) { websearchholder.onClick(view); android.net.Uri webpage = android.net.Uri.parse(linkurl); android.content.Intent intent = new android.content.Intent(android.content.Intent.ACTION_VIEW, webpage); if ((intent.resolveActivity(currContext.getPackageManager())) != null) { currContext.startActivity(intent); } <FIXE>
<FIXS> public void onClick(android.view.View v) { <FIXE>
<FIXS> private void addMax(int e) { <FIXE>
<FIXS> if ((getUserId(user.getId())) == (-1)) { <FIXE>
<FIXS> while (i <= (s.length)) { <FIXE>
<FIXS> public void onBindViewHolder(final io.github.sdsstudios.ScoreKeeper.PlayerListAdapter.ViewHolder holder, final int position) { <FIXE> <FIXS> removeAt(position); <FIXE>
<FIXS> updates.add(new com.jme3.scene.PartialUpdatedVertexBuffer.Update(iBuffer.position(), length)); <FIXE>
<FIXS> tilEmail.setError(null); <FIXE>
<FIXS> tasknote.logic.ShowInterval timeInterval = tasknote.parser.Parser.parseShow(userCommand, true); int countInterval = tasknote.parser.Parser.getInterval(userCommand, true); <FIXE>
<FIXS> if ((callback) == null) return ; <FIXE>
<FIXS> if ((Referee.checkForWinner(root.children.get(i).getStateTree())) == 0) { <FIXE>
<FIXS> com.sipe.utils.Utils.sendEmail(email, null, (((com.sipe.utils.Constantes.ADRESSE_INFO) + ", ") + (com.sipe.utils.Constantes.ADRESSE_WEBSITE)), "[SIPE] Prise de contact", getContent(), true, null, false); <FIXE>
<FIXS> java.io.PrintWriter stream = new org.sapia.corus.interop.client.TimestampPrintWriter(new java.io.FileOutputStream(target, true)); <FIXE>
<FIXS> return new org.infinispan.commons.util.concurrent.NoOpFuture(((java.util.List<T>) (null))); <FIXE>
<FIXS> <FIXE>
<FIXS> ap.add(curNode.node); <FIXE>
<FIXS> return repo.getPersonalOrdersAsClient(uId, pageCount, new java.sql.Date(calendar.getTime().getTime()), new java.sql.Date(java.util.Calendar.getInstance().getTime().getTime())); <FIXE>
<FIXS> pa.iscde.javadoc.generator.StringTemplateVisitor jDoc = new pa.iscde.javadoc.generator.StringTemplateVisitor(sb, type, name); <FIXE>
<FIXS> asciiboard[x][y] = board[x][y].toString().charAt(0); <FIXE>
<FIXS> <FIXE>
<FIXS> res.setContentType("application/json;\tcharset=utf-8"); res.setCharacterEncoding("utf-8"); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> if (pw.equals(u.getPw())) { <FIXE>
<FIXS> net.dv8tion.jda.core.entities.impl.Message m = net.dv8tion.jda.core.entities.impl.EntityBuilder.get(getJDA()).createMessage(response.getObject(), this, false); <FIXE>
<FIXS> if (activity != null) { activity.setPlant(getDetailFromJson(result)); activity.invalidateOptionsMenu(); } <FIXE>
<FIXS> while (!((this.getCommand().equals(Command.ABORT)) || (this.getCommand().equals(Command.COMMIT)))) <FIXE>
<FIXS> private static java.util.Collection<Piece> calculateActivePieces(final java.util.List<Tile> gameBoard, final Alliance alliance) { <FIXE> <FIXS> for (final Tile tile : gameBoard) { <FIXE>
<FIXS> com.Da_Technomancer.crossroads.API.gui.OutputLogGuiObject log = ((com.Da_Technomancer.crossroads.API.gui.ILogUser) (gui)).getLog(logName); <FIXE>
<FIXS> final cgeo.geocaching.SearchResult searchResult = cgeo.geocaching.models.Geocache.searchByGeocode(geocode, null, true, cgeo.geocaching.connector.gc.WaypointsTest.handler); <FIXE>
<FIXS> synchronized(this) { if ((jobNames) == null) { jobNames = new java.util.TreeSet<java.lang.String>(hudson.util.CaseInsensitiveComparator.INSTANCE); } <FIXE>
<FIXS> public void runSync(config.Config cfg, config.Options option, java.util.Collection<java.lang.String> scenarios) { <FIXE>
<FIXS> <FIXE> <FIXS> drawPlaces(canvas); <FIXE>
<FIXS> setGraphic(null); <FIXE>
<FIXS> if ((players[i].hand.size = 2) && (numberOfEights == 1)) { <FIXE>
<FIXS> server.Database.setUserStanding(targetUsername, UserStanding.NORMAL); <FIXE>
<FIXS> <FIXE>
<FIXS> return (s.equals(other.s)) && (props.equals(other.props)); <FIXE>
<FIXS> com.kaist.lts.ClientActivity.dueDate = (((year + "-") + (monthOfYear + 1)) + "-") + dayOfMonth; <FIXE>
<FIXS> public void incrementProductQuantity(manufacture.entity.cart.CartProduct cartProduct) { <FIXE>
<FIXS> com.youbenzi.mdtool.markdown.filter.SyntaxFilter filter = new com.youbenzi.mdtool.markdown.filter.CodePartFilter(new com.youbenzi.mdtool.markdown.filter.TablePartFilter(new com.youbenzi.mdtool.markdown.filter.HeaderOneLineFilter(new com.youbenzi.mdtool.markdown.filter.ListFilter(new com.youbenzi.mdtool.markdown.filter.CodeListFilter(new com.youbenzi.mdtool.markdown.filter.HeaderNextLineFilter(null)))))); <FIXE>
<FIXS> <FIXE> <FIXS> traceDataProvider[index].setCurrentYDataArray(((double[]) (newValue))); <FIXE>
<FIXS> gestureListener = new com.koroshiya.listeners.GestureListener(jsv, this); <FIXE>
<FIXS> if (!(de.citec.sc.templates.DocumentSimilarityTemplate.isInitialized)) { <FIXE>
<FIXS> if (playerToAdd != null) { <FIXE> <FIXS> }else { <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> com.satra.traveler.utils.Tutility.showMessage(this, getString(R.string.signinerror, e.getMessage()), getString(R.string.app_name)); <FIXE>
<FIXS> push.setEthernetType(org.opendaylight.sfc.util.openflow.SfcOpenflowUtils.ETHERTYPE_MPLS_UCAST); <FIXE>
<FIXS> public se.chalmers.cse.mdsd1617.group18.roomManager.IRoomType removeRoomType(se.chalmers.cse.mdsd1617.group18.roomManager.IRoomType roomType) { <FIXE> <FIXS> return ((se.chalmers.cse.mdsd1617.group18.roomManager.IRoomType) (roomTypes.remove(i))); <FIXE> <FIXS> return null; <FIXE>
<FIXS> this.passcode = digest.digest(passcode.getBytes()); <FIXE>
<FIXS> if ((A3B.empty()) || ((verticesToMove) < 1)) { <FIXE>
<FIXS> removeAgent(matcherEndpoint); <FIXE> <FIXS> <FIXE>
<FIXS> public static java.lang.String URLDecode(java.lang.String str, java.lang.String enc, boolean isQuery) { <FIXE> <FIXS> return org.apache.tomcat.util.buf.UDecoder.URLDecode(str, charset, isQuery); <FIXE>
<FIXS> <FIXE>
<FIXS> if (travelDir != (-1)) { engine.network.packet.PacketTravelForm packet = new engine.network.packet.PacketTravelForm(server, client, travelDir); server.network.sendPacket(packet, client); } <FIXE>
<FIXS> return invokeHandler(); <FIXE>
<FIXS> <FIXE> <FIXS> items.add(item); <FIXE>
<FIXS> if (key >= 0) { <FIXE>
<FIXS> <FIXE>
<FIXS> if ((my > y) && (my < (y + height))) { <FIXE>
<FIXS> org.awesomeapp.messenger.util.Languages.setLanguage(activity, language, true); <FIXE>
<FIXS> notifyFail(new com.wildducktheories.promise.impl.SyncCompletionTasklet<P, F>(com.wildducktheories.tasklet.SchedulerAPI.get().getScheduler(), null, callback), rejection); <FIXE>
<FIXS> java.lang.System.out.println(line); <FIXE>
<FIXS> installClustersOfClass(iDatabase, c); <FIXE>
<FIXS> private void handleBookmarksChange() { <FIXE>
<FIXS> isIdle = false; <FIXE> <FIXS> <FIXE>
<FIXS> for (int i = 0; i < ((str.length()) - 2); i++) { <FIXE>
<FIXS> Devices.braille.get().write(text, ApplicationParameters.BRAILLE_MESSAGE_DURATION); <FIXE>
<FIXS> android.util.Log.d("Geocollection Interval", "in Write function"); <FIXE>
<FIXS> <FIXE>
<FIXS> return readJSON(md5hash, (((((((mDataPath) + "/") + md5hash) + "/") + chapterId) + "/") + frameId)); <FIXE>
<FIXS> java.lang.String[] output = suffixArray.toString().split("\n"); <FIXE>
<FIXS> <FIXE>
<FIXS> if ((userData.get("application_version")) == null) { return null; } <FIXE>
<FIXS> tvCompleted.setText(java.lang.String.format("%s%%", completedActivitiesAverage)); tvIncomplete.setText(java.lang.String.format("%s%%", incompleteActivitiesAverage)); tvNotDone.setText(java.lang.String.format("%s%%", notDoneActivitiesAverage)); <FIXE>
<FIXS> char[] posStr = new char[]{ ((char) (((int) ('a')) + (x))) , ((char) (((int) ('1')) + (((Board.ROWS) - (y)) - 1))) }; <FIXE>
<FIXS> timer = new java.util.Timer(); <FIXE>
<FIXS> if ((idx) == (mKeys.length)) { <FIXE> <FIXS> if ((idx) == (mKeys.length)) { <FIXE>
<FIXS> <FIXE>
<FIXS> java.lang.System.out.println(e.getMessage()); <FIXE>
<FIXS> mCameraSource.setColorsInverted(isShouldInvert()); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> final org.opennms.netmgt.api.sample.Metric metric = new org.opennms.netmgt.api.sample.Metric(attrib.getAlias(), metricType, groupName); <FIXE>
<FIXS> java.lang.String id = moniker.getId(); return id != null ? legacyDataSetParser.parse(id) : null; <FIXE>
<FIXS> pqsq.computeABCoefficients(pqsq.MajoratingFunction, pars); <FIXE>
<FIXS> if ((startTime.size()) != 0) { for (int i = 0; i < (finishTime.size()); i++) { lapTimes.add(getLapTime(i)); } <FIXE>
<FIXS> protected void setFab() { <FIXE>
<FIXS> eigenVectors.add(cvCreateImage(faceImgSize, cosbas.biometric.validators.facial.IPL_DEPTH_32F, 1)); <FIXE>
<FIXS> <FIXE>
<FIXS> if (((items) != null) && ((items.length) == 10)) <FIXE>
<FIXS> return new bufmgr.Pair(returnCandidate); <FIXE>
<FIXS> parentA = ru.kirpech.RandomUtils.nextDouble(); parentB = ru.kirpech.RandomUtils.nextDouble(); <FIXE>
<FIXS> smoothScrollTo(((mode) == (com.handmark.pulltorefresh.library.PullToRefreshBase.MODE_PULL_DOWN_TO_REFRESH) ? -(headerHeight) : headerHeight)); <FIXE>
<FIXS> <FIXE>
<FIXS> if ((balance) < 0.0F) { <FIXE>
<FIXS> getStatusBar().update(); <FIXE>
<FIXS> setMem(mbr, mar); <FIXE>
<FIXS> return null; <FIXE>
<FIXS> eaten += 1 + ((respeff) > 1 ? random.nextInt(((respeff) / 2)) : 0); <FIXE>
<FIXS> assertEquals(expected, at.fhj.swd13.pse.test.service.DocumentServiceIT.documentService.getServerPath(doc)); <FIXE>
<FIXS> java.util.Map<I, java.util.Set<P>> indexMap = indexMaps.get(indexName); <FIXE>
<FIXS> models.Fichier fichier = null; <FIXE> <FIXS> if (fichier_id != null) { fichier = utils.Connexion.getConnetion().request("fichier", new org.bson.types.ObjectId(fichier_id)).as(models.Fichier.class); } <FIXE>
<FIXS> symbol = symbol.toLowerCase(); <FIXE>
<FIXS> java.lang.Integer pathIndex = r.nextInt(java.lang.Math.abs(((this.path.size()) - 1))); <FIXE>
<FIXS> durationButton.setChecked(true); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> return cm.getActiveNetworkInfo(); <FIXE> <FIXS> return null; <FIXE> <FIXS> <FIXE>
<FIXS> if (match.getTeamsInMatch().contains(otherTeam)) <FIXE>
<FIXS> for (int i = 0; i < (strategy.getSize()); i++) { <FIXE>
<FIXS> if ((newIndexReader != (currentIndexReader)) && (null != newIndexReader)) { <FIXE>
<FIXS> if (null == (org.menina.tone.client.source.zookeeper.ZookeeperResourceLoader.client)) { org.menina.tone.client.source.zookeeper.ZookeeperResourceLoader.client = org.apache.curator.framework.CuratorFrameworkFactory.newClient(this.getUrl(), 2000, 2000, new org.apache.curator.retry.ExponentialBackoffRetry(1000, 3)); org.menina.tone.client.source.zookeeper.ZookeeperResourceLoader.client.start(); org.menina.tone.client.source.zookeeper.ZookeeperResourceLoader.client.getCuratorListenable().addListener(new org.menina.tone.client.source.zookeeper.ZookeeperListener()); } <FIXE> <FIXS> <FIXE>
<FIXS> index = i; <FIXE>
<FIXS> final com.google.common.collect.SortedSetMultimap<java.lang.String, java.lang.String> indices = groupByIndexCollection(indexName); <FIXE>
<FIXS> return cmdHandlers.stream().flatMap(( handler) -> java.util.Arrays.asList(handler.getParameterTypes()).stream()).filter(( paramType) -> this.commandType.isAssignableFrom(paramType)).map(( commandType) -> new de.sven_torben.cqrest.CommandInfo(commandType)).collect(java.util.stream.Collectors.toSet()); <FIXE>
<FIXS> org.testng.Assert.assertEquals(results.size(), 1); <FIXE>
<FIXS> org.chromium.ChromeBluetooth bluetoothPlugin = ((org.chromium.ChromeBluetooth) (getPluginManager().getPlugin("ChromeBluetooth"))); <FIXE>
<FIXS> <FIXE>
<FIXS> parent.rect(this.getX(), this.getY(), this.getWidth(), this.getHeight()); <FIXE>
<FIXS> private void subscribe() { <FIXE>
<FIXS> private void placeRangedUnit() { <FIXE>
<FIXS> call.put("posts/3", new com.coveros.selenified.services.Request(request)).assertEquals(201); <FIXE>
<FIXS> io.github.mc_umod.util.URegistryUtils.reg.registerBlock(block, bl, block.getUnlocalizedName().substring(5)); <FIXE>
<FIXS> this.slidingUpPanelLayout.setClipPanel(false); this.slidingUpPanelLayout.setAnchorPoint(0.0F); this.slidingUpPanelLayout.setParalaxOffset(0); <FIXE>
<FIXS> <FIXE>
<FIXS> if (com.spectralogic.ds3autogen.utils.ConverterUtil.isEmpty(spec.getTypes())) <FIXE>
<FIXS> public void remove(at.eischer.model.Team teamToRemove) { <FIXE> <FIXS> teamService.removeTeam(teamToRemove); <FIXE>
<FIXS> code.append(name).append(" ").append(type); <FIXE>
<FIXS> java.util.List<com.teamdev.jxmaps.LatLng> locationsToAvoid = new java.util.ArrayList<com.teamdev.jxmaps.LatLng>(); <FIXE>
<FIXS> return view; <FIXE>
<FIXS> return java.lang.String.format("CREATE INDEX ON %s (%s);", table.getName(), columnStr); <FIXE>
<FIXS> editor.commit(); <FIXE>
<FIXS> if (((null == str) || (null == l)) || (null == r)) <FIXE>
<FIXS> <FIXE> <FIXS> invrelsloaded = true; <FIXE>
<FIXS> queryString.append(((table.getSchema().getSchemaName()) == null ? table.getTableName() : ((table.getSchema().getSchemaName()) + ".") + (table.getTableName()))); <FIXE>
<FIXS> if ((adapter.getSelectedPosition()) != selectedPosition) { this.selectedNewsPosition = selectedPosition; adapter.setSelectedPosition(selectedPosition); adapter.notifySelectedItem(); } <FIXE> <FIXS> showNewsDetail(); <FIXE>
<FIXS> if ((name == null) || (name.trim().isEmpty())) <FIXE> <FIXS> if (selectedAlbum.addSubAlbum(newAlbum)) view.onAlbumAdded(newAlbum); <FIXE> <FIXS> if (root.addSubAlbum(newAlbum)) view.onAlbumAdded(newAlbum); <FIXE> <FIXS> <FIXE>
<FIXS> saveWarpList(true); <FIXE>
<FIXS> public static void sort(int[] data, int start, int end) { for (int index = start; index <= end; index++) { <FIXE> <FIXS> while ((cursor > start) && ((data[(cursor - 1)]) > val)) { <FIXE>
<FIXS> AndroidModle.Parcelable.init(true); callconditiongraph.PreprocessingInnerClass.init(true); <FIXE>
<FIXS> <FIXE>
<FIXS> io.github.pr0methean.betterrandom.prng.RandomTestUtils.checkStream(prng, 42, prng.longs((1 << 40), (1 << 42)), (-1), (1 << 40), (1 << 42), alwaysCheckEntropy()); <FIXE>
<FIXS> if (value == null) return ; <FIXE>
<FIXS> public org.glyptodon.guacamole.net.basic.rest.user.APIUser createUser(@javax.ws.rs.QueryParam(value = "token") <FIXE> <FIXS> return user; <FIXE>
<FIXS> if ((getChildCount()) != 0) { leftBorder = getChildAt(0).getLeft(); rightBorder = getChildAt(((getChildCount()) - 1)).getRight(); } <FIXE>
<FIXS> org.junit.Assert.assertThat(org.jenkinsci.plugins.github.webhook.WebhookManager.forHookUrl(org.jenkinsci.plugins.github.webhook.WebhookManagerTest.HOOK_ENDPOINT).createHookSubscribedTo(com.google.common.collect.Lists.newArrayList(org.kohsuke.github.GHEvent.PUSH), null).apply(new com.cloudbees.jenkins.GitHubRepositoryName("github.com", "name", "repo")), org.hamcrest.Matchers.nullValue()); <FIXE>
<FIXS> org.junit.Assert.assertEquals(globalOperation, compute.deleteSnapshot(com.google.gcloud.compute.ComputeImplTest.SNAPSHOT_ID.snapshot())); <FIXE>
<FIXS> int ip = java.lang.Integer.parseInt(addresses[(3 - i)]); <FIXE>
<FIXS> pars.add(factory.createParam(("$" + (i++)), factory.createExprType(getType(param)))); <FIXE>
<FIXS> <FIXE>
<FIXS> if (m_order.deleteOrder()) { m_order = null; updateOrder(); newOrder(); } <FIXE> <FIXS> <FIXE>
<FIXS> if ((com.dqnt.amber.Debug.functionCounter) == null) return result; <FIXE>
<FIXS> primaryStage.setScene(new javafx.scene.Scene(root)); <FIXE>
<FIXS> if (level == null) return ; <FIXE>
<FIXS> db.getDB("config").set("reason", reason); <FIXE>
<FIXS> list.getItems().add(0, result.get()); <FIXE>
<FIXS> document.replaceString(offsetStart, offsetEnd, com.kstenschke.shifter.models.shiftableTypes.SeparatedList.sortSeparatedList(selectedText, delimiterSplitPattern, delimiterGlue, isUp)); <FIXE> <FIXS> shiftSelectionByPopupInDocument(shiftOptions, isUp, null, delimiterSplitPattern, delimiterGlue); <FIXE>
<FIXS> boolean success = tp.processTables(metadata, options); <FIXE>
<FIXS> scriptExecutor.execute(scene, true, true, p_callerContext, null); <FIXE>
<FIXS> if (searchString.isEmpty()) { return ; } <FIXE>
<FIXS> <FIXE>
<FIXS> if ((producerDoc) == (NO_MORE_DOCS)) <FIXE>
<FIXS> int oldVersion = -1; <FIXE>
<FIXS> drawEntities(); <FIXE> <FIXS> <FIXE>
<FIXS> takeScreenshot(); <FIXE> <FIXS> <FIXE>
<FIXS> producer.send(msg, messageQueueSelector, null, new com.alibaba.rocketmq.client.producer.buffered.SendMessageCallback(this, sendCallback, msg)); } catch (com.alibaba.rocketmq.client.exception.MQClientException | com.alibaba.rocketmq.remoting.exception.RemotingException | java.lang.InterruptedException e) { <FIXE>
<FIXS> int pointerBPV = (valuesAboveTailBPV == 0) ? 0 : org.apache.lucene.util.packed.PackedInts.bitsRequired((valuesAboveTailBPV - 1)); <FIXE>
<FIXS> int sz = n.bytesCount(); if ((collection) != null) { java.util.Iterator<E> itr = collection.iterator(); while (itr.hasNext()) { sz += itr.next().bytesCount(); } } return sz; <FIXE>
<FIXS> <FIXE>
<FIXS> java.lang.String s; <FIXE> <FIXS> java.lang.System.out.println(((i + " ") + s)); <FIXE>
<FIXS> return ((cal1.get(java.util.Calendar.YEAR)) == (cal2.get(java.util.Calendar.YEAR))) && ((cal1.get(java.util.Calendar.DAY_OF_YEAR)) == (cal2.get(java.util.Calendar.DAY_OF_YEAR))); <FIXE>
<FIXS> org.jacorb.orb.CDROutputStream co = new org.jacorb.orb.CDROutputStream(orb, 1000); <FIXE>
<FIXS> java.lang.Long max_id = ((java.lang.Long) (q.uniqueResult())); <FIXE> <FIXS> if (max_id == null) return 1; <FIXE>
<FIXS> int x = xMap.indexOf(cord.toLowerCase().charAt(0)); <FIXE>
<FIXS> com.example.balinator.androidprojekt.MainActivity.updateMyWidgets(com.example.balinator.androidprojekt.MainActivity.context); <FIXE>
<FIXS> return -1; <FIXE>
<FIXS> <FIXE> <FIXS> TicTacToe.NotInGame.set(true); <FIXE>
<FIXS> int randomIdentifier = (TestClass.random.nextInt()) % (TestClass.MAX_VALUE); <FIXE>
<FIXS> if (template != null) { <FIXE>
<FIXS> if (bip38service.getWorker().isInterrupted()) { android.util.Log.d("CreateActivity", "thread was interrupted"); } <FIXE> <FIXS> <FIXE>
<FIXS> throw se; <FIXE>
<FIXS> mBtConnectThread.start(); <FIXE>
<FIXS> group2.sdp.robot.commandreciever.Brain.KICKER.rotate(group2.sdp.robot.commandreciever.Brain.KICKER_ANGLE); <FIXE> <FIXS> group2.sdp.robot.commandreciever.Brain.KICKER.rotate((-(group2.sdp.robot.commandreciever.Brain.KICKER_ANGLE))); <FIXE>
<FIXS> return null; <FIXE>
<FIXS> throw new java.io.IOException(x); <FIXE>
<FIXS> com.net2plan.libraries.WDMUtils.setLightpathRSAAttributes(r, primaryRSA, false); <FIXE>
<FIXS> return new com.intrbiz.bergamot.crypto.util.CertificatePair(this.serverCrtFile(commonName)); <FIXE>
<FIXS> newPlayers.remove(team.getGoalKeeperID()); <FIXE> <FIXS> <FIXE>
<FIXS> brdrive = hardwareMap.get(com.qualcomm.robotcore.hardware.DcMotor.class, "c"); bldrive = hardwareMap.get(com.qualcomm.robotcore.hardware.DcMotor.class, "d"); frdrive = hardwareMap.get(com.qualcomm.robotcore.hardware.DcMotor.class, "a"); fldrive = hardwareMap.get(com.qualcomm.robotcore.hardware.DcMotor.class, "b"); <FIXE>
<FIXS> <FIXE>
<FIXS> akka.actor.ActorRef actor = AllActors.system.actorOf(akka.actor.Props.create(AllActors.ActorRouter.class, groupName), groupName); <FIXE>
<FIXS> protected void hideStatusBar() { <FIXE>
<FIXS> spectatorRegistry.counter(id).increment((curr - prev)); <FIXE>
<FIXS> <FIXE>
<FIXS> if (!(com.mygdx.game.PlayScreen.blocked(X_pos, Y_pos))) { <FIXE> <FIXS> while (com.mygdx.game.PlayScreen.blocked(X_pos, Y_pos)) { <FIXE>
<FIXS> delete(renamed); <FIXE>
<FIXS> private int updateMovieWatched(java.lang.Boolean watched, java.lang.Long dbId, long watchedDate) { <FIXE>
<FIXS> case 0 : moveUp(); break; <FIXE> <FIXS> <FIXE>
<FIXS> count = 1; <FIXE> <FIXS> int resource = getActivity().getResources().getIdentifier(badgeList.get(((count) - 1)).getImgsrc(), "drawable", getActivity().getPackageName()); <FIXE>
<FIXS> if (com.massivecraft.massivecore.util.ReflectionUtil.makeAccessible(coreField)) { <FIXE>
<FIXS> if (!(link.isEmpty())) { <FIXE>
<FIXS> if (obj == null) { <FIXE> <FIXS> if (!(obj instanceof liquibase.diff.output.changelog.DiffToChangeLog.DependencyGraph.Edge)) { <FIXE>
<FIXS> return "aprs_1_" + (java.lang.String.format("%02d", (index - '!'))); <FIXE>
<FIXS> assertEquals(ValidationResult.Result.OK, props.getValidationResult().getStatus()); <FIXE>
<FIXS> for (java.lang.String name : towns.get(t1.getName())) { if (name.equals(t2.getName())) { <FIXE>
<FIXS> }else { com.telegram.app.Message newMessage = new com.telegram.app.Message(name, input, "chat"); int i = 0; while (i < (connectionCount)) { connections[(i++)].sendMessage(newMessage); } <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> public static FreeSpace FindFreeSpace(int jobSize) { <FIXE>
<FIXS> final android.content.Intent intent = new android.content.Intent(mActivity, com.example.android.bluetoothlegatt.DeviceControlActivity.class); <FIXE>
<FIXS> return true; <FIXE> <FIXS> return false; <FIXE>
<FIXS> if ((waitingUpdate) && ((urlServerSource) != (ConnectionService.URLServerSource.IP_REQUESTED))) <FIXE> <FIXS> else if (((waitingUpdate) == false) && ((logInActivity) != null)) { <FIXE>
<FIXS> private static char[] processSpaces(char[] cbuf) { <FIXE>
<FIXS> return com.twitter.heron.scheduler.yarn.HeronMasterDriverProvider.getInstance().restartTopology(); <FIXE> <FIXS> return com.twitter.heron.scheduler.yarn.HeronMasterDriverProvider.getInstance().restartWorker(java.lang.String.valueOf(containerId)); <FIXE> <FIXS> <FIXE>
<FIXS> if (((ean) != null) && (!(ean.getText().equals("")))) { android.content.Intent bookIntent = new android.content.Intent(getActivity(), it.jaschke.alexandria.services.BookService.class); bookIntent.putExtra(BookService.EAN, ean.getText().toString()); bookIntent.setAction(BookService.DELETE_BOOK); getActivity().startService(bookIntent); ean.setText(""); } <FIXE>
<FIXS> int errorsAndWarnings = java.lang.Math.abs(((aspaceErrorCount) - (saveErrorCount))); java.lang.String errorMessage = (((((((((("RECORD CONVERSION ERRORS/WARNINGS ( " + errorsAndWarnings) + " ) ::\n\n") + (errorBuffer.toString())) + "\n\n\nRECORD SAVE ERRORS ( ") + (saveErrorCount)) + " ) ::\n\n") + (aspaceClient.getErrorMessages())) + "\n\nTOTAL COPY TIME: ") + (stopWatch.getPrettyTime())) + "\n\nNUMBER OF RECORDS COPIED: \n") + (getTotalRecordsCopiedMessage()); <FIXE>
<FIXS> updateOffset(0); <FIXE>
<FIXS> if (voltages != null) for (int i = 0; i < (mVoltageCard.length); i++) { mVoltageCard[i].setDescription(((voltages.get(i)) + (getString(R.string.mv)))); mVoltageCard[i].setValue(voltages.get(i)); } <FIXE>
<FIXS> <FIXE>
<FIXS> if (lstring != null) { return lstring.getContent(); <FIXE>
<FIXS> if (size == 0) { return -1; } <FIXE>
<FIXS> break; <FIXE>
<FIXS> <FIXE> <FIXS> }else if (error.isNetworkError()) { dbHandler.UpdateSyncState_JobStatusChangeObj(obj, 0); } <FIXE>
<FIXS> getSupportFragmentManager().beginTransaction().replace(R.id.container, new com.texturelabs.rosera.spotifystreamer.ArtistTopTenFragment()).commit(); <FIXE>
<FIXS> (time)++; <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> if (type.getName().equals(name)) { <FIXE>
<FIXS> value = defaultValue; <FIXE>
<FIXS> private void updateContentUrl(org.alfresco.repo.domain.contentdata.ContentUrlEntity contentUrl) { <FIXE>
<FIXS> if ((gameboard.getSquares()[head.getPosition()[0]][((head.getPosition()[1]) - 1)]) > 0) { <FIXE>
<FIXS> public java.util.List<interfaces.Question> getQuestionList() throws java.rmi.RemoteException { java.util.List<interfaces.Question> questionsDictionary = new java.util.ArrayList<interfaces.Question>(); <FIXE> <FIXS> questionsDictionary.add(current); <FIXE>
<FIXS> public android.graphics.Bitmap ChannelMixer(android.graphics.Bitmap original, float R, float G, float B) { <FIXE>
<FIXS> <FIXE>
<FIXS> return new android.graphics.PointF((((player.GetPosition()) / (Settings.Environment_Width)) * (display.getWidth())), ((display.getHeight()) - (oZone.getHeight()))); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> return java.sql.DriverManager.getConnection((("jdbc:sqlite:" + (de.buxdehuda.archivar.Archivar.FOLDER)) + "bilder.db")); <FIXE> <FIXS> return null; <FIXE>
<FIXS> <FIXE>
<FIXS> if (!(basicgraph.DegreeGrader.printList(result).equals(basicgraph.DegreeGrader.printList(corr)))) { <FIXE>
<FIXS> }else { break; <FIXE>
<FIXS> breakUpFile(inFile); sortSmallFiles(lineComparator); out = mergeSortedFiles(lineComparator); <FIXE>
<FIXS> for (int i = 0; i < (attrN); i++) { rand.add(i); <FIXE>
<FIXS> if (((disconsented.anssrpg.gui.Config.currentPerk) != null) && ((disconsented.anssrpg.gui.Config.currentPerk.getRequirements()) != null)) { java.util.ArrayList<disconsented.anssrpg.perk.Requirement> temp = disconsented.anssrpg.gui.Config.currentPerk.getRequirements(); for (disconsented.anssrpg.perk.Requirement req : temp) { model.addElement(req.name); } <FIXE>
<FIXS> public void initCells() { <FIXE>
<FIXS> java.lang.StringBuilder sb = new java.lang.StringBuilder(); if (s != null) { if (s.isEmpty()) { sb.append(c); sb.append(c); }else { if (api.util.Mathematics.isOdd(s.length())) { sb.append(c); sb.append(s); } } <FIXE> <FIXS> return sb.toString(); <FIXE>
<FIXS> <FIXE>
<FIXS> if ((isVisible()) && ((watchFace) != null)) { <FIXE>
<FIXS> if ((toReturn) == null) { toReturn = inflater.inflate(R.layout.fragment_map, container, false); } <FIXE>
<FIXS> <FIXE> <FIXS> gmit.GameParser parser = new gmit.GameParser(); parser.parse(); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> double[] x = solutionVector; <FIXE> <FIXS> result += java.lang.Math.pow(x[j], 2.0); <FIXE>
<FIXS> doTest(changeInfo, true); <FIXE>
<FIXS> <FIXE>
<FIXS> if ((hasPrimitiveValue()) && ((children) != null)) { <FIXE>
<FIXS> protected java.util.Collection<org.tapchain.editor.IActorTap> searchRoomPieces(org.tapchain.core.IPoint iPoint, org.tapchain.core.IPiece... exclusive) { <FIXE>
<FIXS> com.avaje.ebean.Ebean.execute(update); <FIXE>
<FIXS> if (!(model.equals(dabble.redstonemod.util.ModelLookup.getModel(pos, world)))) { <FIXE>
<FIXS> everythingForTheGame.Main.createAccount(loginInfo[0], loginInfo[1], i); <FIXE>
<FIXS> return messages.getOrDefault(key, "***FAILSAFE MESSAGE*** MESSAGE NOT FOUND!!").replace("%lb%", Message.lineBreak); <FIXE>
<FIXS> public void set(int y, int x, float value) { if ((x <= (m[0].length)) && (y <= (m.length))) m[y][x] = value; <FIXE>
<FIXS> protected static android.app.Fragment findTopmostFragment(android.app.FragmentManager fragmentManager) { <FIXE>
<FIXS> if ((name.length()) == 0) { return false; } <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> gr.demokritos.iit.jinsect.structs.JVertex vTo = gA.getEdgeTarget(e); <FIXE>
<FIXS> <FIXE>
<FIXS> return new org.sosy_lab.cpachecker.cpa.policyiteration.PolicyAbstractedState(node, com.google.common.collect.ImmutableMap.of(), pLocationID, pManager, pSSAMap, pPointerTargetSet, pPredicate, pPredecessor, pSibling.orElse(null), null); <FIXE>
<FIXS> protected void getInfo() { <FIXE>
<FIXS> <FIXE>
<FIXS> time.set(java.util.Calendar.HOUR_OF_DAY, hourOfDay); time.set(java.util.Calendar.MINUTE, minute); textView.setText(android.text.format.DateUtils.formatDateTime(this, time.getTimeInMillis(), tcd.training.com.calendar.AddEventTask.AddEventActivity.TIME_FORMAT_FLAGS)); <FIXE>
<FIXS> if ((searchadapter) != null) { <FIXE>
<FIXS> return fileList.toArray(new java.io.File[fileList.size()]); <FIXE>
<FIXS> clientText = inputFromClient.readLine(); java.lang.System.out.println(clientText); } <FIXE>
<FIXS> boolean backendUp = getUpstreamStatus(appName, ip); <FIXE>
<FIXS> while ((queue != null) && ((ev = queue.poll()) != null)) { <FIXE>
<FIXS> <FIXE> <FIXS> for (int currentPosition = this.getSize(); currentPosition > positionInList; currentPosition--) { if ((current) != null) current = current.getPreviousElement(); } if ((current) != null) { return ((de.hsa.games.fatsquirrel.core.Entity) (current.getData())); } <FIXE>
<FIXS> return url + (url.contains("?") ? (("&" + field) + "=") + value : (("?" + field) + "=") + value); <FIXE>
<FIXS> conditionLock.acquire(); <FIXE> <FIXS> <FIXE>
<FIXS> int temp = 0; if (b) { temp = 1; } output.add(java.math.BigInteger.valueOf((temp * (java.lang.Math.pow(2, power))))); <FIXE>
<FIXS> final int count = size(); <FIXE> <FIXS> return (size()) - count; <FIXE>
<FIXS> <FIXE>
<FIXS> java.io.FileOutputStream file = new java.io.FileOutputStream(url); <FIXE>
<FIXS> private java.lang.StringBuilder buildHtmlHead(final java.lang.String title) { <FIXE> <FIXS> return html; <FIXE>
<FIXS> @java.lang.Override <FIXE> <FIXS> this.smap = innerClassMap.get(innerClass); <FIXE>
<FIXS> if (this.isStockDateSelected(postBody, dateParm, vo.date)) { <FIXE>
<FIXS> int tmpHi = search(hiRef, inputArray, bRef, ((inputArray.length) - 1)); if ((inputArray[tmpHi]) > hiRef) { <FIXE> <FIXS> }else if (((inputArray[tmpHi]) == hiRef) && (tmpHi < ((inputArray.length) - 1))) { tmpHi++; } <FIXE>
<FIXS> node.getTuple().apply(this); <FIXE>
<FIXS> createUserMembership(user, "Online", transactionId, amount); <FIXE>
<FIXS> <FIXE>
<FIXS> public javafx.scene.control.MenuItem toMenuItem(java.lang.String label) { javafx.scene.control.MenuItem item = new javafx.scene.control.MenuItem(label); <FIXE>
<FIXS> <FIXE>
<FIXS> return java.util.Arrays.asList(new java.lang.Object[][]{ new java.lang.Object[]{ 0 , 0 , false , 0 } , new java.lang.Object[]{ 51 , 5 , false , 19 } , new java.lang.Object[]{ 157 , 6 , true , 221 } }); <FIXE>
<FIXS> org.newstand.datamigration.provider.SettingsProvider.init(this); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> return message.substring(0, length); <FIXE> <FIXS> return message.substring(0, java.lang.Math.min(index, length)); <FIXE>
<FIXS> java.lang.StringBuilder myMezmur = new java.lang.StringBuilder(); <FIXE>
<FIXS> Item item = last.item; Deque<Item>.Node oldLast = last; if ((oldLast.prev) == null) { <FIXE> <FIXS> }else { last = oldLast.prev; last.next = null; <FIXE> <FIXS> <FIXE> <FIXS> return item; <FIXE>
<FIXS> if (!(login.equals(""))) { <FIXE>
<FIXS> <FIXE> <FIXS> android.util.Log.d("Path List", ("Path List is:" + (filePathList.toString()))); doMp4Append(filePathList); <FIXE>
<FIXS> public java.util.Vector<cg.LotDataProvider> getHeldLots(int aAccountId, java.lang.String ticker, java.lang.String year) { <FIXE>
<FIXS> if (null != fragment) { this.runOnUiThread(new java.lang.Runnable() { @java.lang.Override public void run() { recreateFragmentView(fragment); } }); } <FIXE>
<FIXS> if ((content == null) || (index < 0)) { <FIXE> <FIXS> <FIXE> <FIXS> while (index < (content.length())) { chars.put((index + 1), new com.companyname.assignment.models.CharAtPosition(content.charAt(index), index)); index += mShift; } <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> public java.util.ArrayList<br.ufc.banco.conta.ContaAbstrata> listar() { java.util.ArrayList<br.ufc.banco.conta.ContaAbstrata> lista = null; <FIXE> <FIXS> lista = new java.util.ArrayList<br.ufc.banco.conta.ContaAbstrata>(this.contas.size()); <FIXE> <FIXS> lista.add(((br.ufc.banco.conta.ContaAbstrata) (this.contas.elementAt(i)))); <FIXE>
<FIXS> callback.onLastIconDownloaded(); <FIXE>
<FIXS> public void loadListShotsByPage(int filterId) { (page)++; <FIXE>
<FIXS> @org.springframework.web.bind.annotation.RequestMapping(value = "/add", method = org.springframework.web.bind.annotation.RequestMethod.POST) <FIXE> <FIXS> <FIXE> <FIXS> <FIXE> <FIXS> return true; <FIXE> <FIXS> <FIXE>
<FIXS> if (processor(req, resp)) { chain.doFilter(request, response); } <FIXE>
<FIXS> loginDialog.setErrorMessage(createNewProjectErrorMsg, null); <FIXE>
<FIXS> io.swagger.models.parameters.Parameter p = readImplicitParam(param); <FIXE>
<FIXS> } catch (java.lang.NoSuchFieldException | java.lang.IllegalAccessException e) { <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> if ((listPopulation.size()) > 0) { br.unifor.iadapter.genetic.GeneWorkLoad.getConfiguration().setPopulationSize(listPopulation.size()); br.unifor.iadapter.genetic.CrossoverOperator cs = new br.unifor.iadapter.genetic.CrossoverOperator(br.unifor.iadapter.genetic.GeneWorkLoad.getConfiguration(), 1); newlist = cs.operateBestIndividuals(listPopulation, list); } <FIXE>
<FIXS> throw new org.lenzi.fstore.repository.exception.DatabaseException(("IllegalArgumentException was thrown. " + (e.getMessage())), e); <FIXE>
<FIXS> return ; <FIXE>
<FIXS> location = gpsTracker.getLocation(); <FIXE>
<FIXS> private boolean hasCourse(final java.util.List<ca.concordia.inse6260.entities.AcademicRecordEntry> records, final long courseEntryId) { boolean existentRecord = false; <FIXE> <FIXS> existentRecord = true; <FIXE>
<FIXS> dataSource.update(sql, new java.lang.Object[]{ user.getUserName() , user.getFullName() }); <FIXE>
<FIXS> if (((mMyApplication.Friends_Cach) != null) && ((mMyApplication.Friends_Cach.size()) > 0)) { <FIXE>
<FIXS> viewHolders = new java.util.ArrayList<>(); <FIXE>
<FIXS> if ((os == null) || (!(os.toLowerCase().contains("windows")))) { <FIXE>
<FIXS> org.easymock.EasyMock.expect(study.getId()).andReturn(1); <FIXE>
<FIXS> kupchinskii.ruslan.gpsup.GPS.lasDate = java.util.Calendar.getInstance().getTimeInMillis(); <FIXE> <FIXS> <FIXE>
<FIXS> java.lang.String coreName = org.sleuthkit.autopsy.keywordsearch.Index.sanitizeCoreName(caseName); <FIXE> <FIXS> return (coreName + "_") + (dateFormat.format(date)); <FIXE>
<FIXS> <FIXE> <FIXS> UserInterface.setGameTextArea(checkSolution(a)); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> if (i > 0) za.co.twinc.everydayhabit.MainActivity.alarmReceiver.setBootReceiver(ctx); <FIXE>
<FIXS> boolean worked; if (this.changeCoins(((-1) * (tower.getCost())))) { worked = board.addTower(tower); <FIXE> <FIXS> <FIXE> <FIXS> <FIXE> <FIXS> <FIXE> <FIXS> return false; <FIXE>
<FIXS> return !((lang.startsWith("en")) || (lang.equals("mul"))); <FIXE> <FIXS> return false; <FIXE> <FIXS> return false; <FIXE>
<FIXS> c.printStats(); <FIXE>
<FIXS> syncedMotorEndpoint = new mindroid.common.ev3.endpoints.SyncedMotorGroupEndpoint(syncedMotorGroup); <FIXE>
<FIXS> else return portal; <FIXE>
<FIXS> return fatalError ? null : makeCatalog(); <FIXE>
<FIXS> if (((!(queryRunning)) && ((citiesDatabaseHandler) != null)) && (citiesDatabaseHandler.isDatabaseOpen())) { <FIXE>
<FIXS> m_lastSafeTruncationHandle = handle; <FIXE> <FIXS> if (((m_lastSafeTruncationHandle) >= (msg.getSpHandle())) || ((m_lastSafeTruncationHandle) == (java.lang.Long.MIN_VALUE))) { <FIXE>
<FIXS> if ((((BundleEvent.STARTED) | (BundleEvent.STOPPED)) & (event.getType())) != 0) { <FIXE>
<FIXS> <FIXE>
<FIXS> if (world.isRemote) <FIXE>
<FIXS> java.util.Map<java.lang.Integer, java.lang.Integer> map = this.createResizedDS(); <FIXE> <FIXS> this.assertEqualstUnordered("The strings are not a permuation of each other", "{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}", values.toString()); <FIXE> <FIXS> this.parameterized(map, values, str); <FIXE>
<FIXS> if ((o == null) || (!(this.getClass().equals(o.getClass())))) <FIXE>
<FIXS> <FIXE>
<FIXS> id = (IndexingConstants.FIELD_ID) + (rawContent.hashCode()); <FIXE>
<FIXS> private org.apache.ignite.internal.processors.odbc.SqlListenerConnectionContext prepareContext(byte clientType) { <FIXE>
<FIXS> bytes.append(((offset) + (net.openhft.chronicle.wire.IntTextReference.VALUE)), value); <FIXE>
<FIXS> while (true) { <FIXE> <FIXS> if (isWon) { return ; } <FIXE>
<FIXS> public java.util.List<java.util.List<java.lang.Integer>> pathSum(TreeNode root, int sum) { java.util.List<java.util.List<java.lang.Integer>> res = new java.util.ArrayList<java.util.List<java.lang.Integer>>(); <FIXE>
<FIXS> public static java.util.HashMap<java.lang.String, java.lang.Integer> getColumnNamesFromSheet(java.lang.String dataSheet) { common.DataDriver.columnNamesHash = new java.util.HashMap<java.lang.String, java.lang.Integer>(); <FIXE>
<FIXS> p(propNet.toString()); <FIXE>
<FIXS> chess.Piece piece = new chess.Piece("P", 'a', 2, true); <FIXE>
<FIXS> <FIXE>
<FIXS> public void read(java.net.URL url, ika.geoimport.DataReceiver mapDataReceiver) throws java.io.IOException { <FIXE> <FIXS> read(); <FIXE>
<FIXS> <FIXE>
<FIXS> return ((!((s == null) || (s.isEmpty()))) && ((s.length()) == (len * 2))) && (s.matches("[0-9A-F]+")); <FIXE>
<FIXS> synchronized(subLaunches) { if ((subLaunches.size()) == 0) { return false; } for (org.eclipse.debug.core.ILaunch launch : subLaunches.keySet()) { if (launch.canTerminate()) { return true; } } <FIXE> <FIXS> <FIXE>
<FIXS> assertThat(generatedRelativeResourcePath).isEqualTo(resourceRelativePath); <FIXE>
<FIXS> <FIXE>
<FIXS> synchronized(currentStation.passengers) { for (Passenger passenger : new java.util.ArrayList(currentStation.passengers)) { if (passenger.destination.equals(getTrainDestination())) { for (Seat seat : seats) { if (!(seat.isOccuped())) { seat.passenger = passenger; currentStation.passengers.remove(passenger); } <FIXE> <FIXS> start = isReadyToDepart(); <FIXE> <FIXS> <FIXE>
<FIXS> if (((ds.getID()) != null) && (ds.getID().startsWith("null"))) <FIXE>
<FIXS> pageContent = pageContent.replace((("src=\"" + s) + "\""), (((("src=\"" + current_path) + "/files/") + (UrlDownloader.getLastPartOfFileName(s))) + "\"")); <FIXE>
<FIXS> <FIXE>
<FIXS> if ((s.length()) < length) return s; <FIXE>
<FIXS> setResult((position + 1), intent); <FIXE>
<FIXS> club.mytree.SQLiteConnection sql = new club.mytree.SQLiteConnection(Main.GROUP_NAME, false); <FIXE>
<FIXS> <FIXE>
<FIXS> m_hasMoreChunks.set(false); <FIXE>
<FIXS> registerBeanDefinition(registry, SpringConstants.HTTPS_TRANSPORT, org.wso2.msf4j.spring.transport.HTTPSTransportConfig.class); <FIXE>
<FIXS> public void drawDebugBoundingBoxes(final java.awt.Graphics g) { if ((((npcToThieve) != null) && (npcToThieve.valid())) && (npcToThieve.inViewport())) { <FIXE>
<FIXS> protected void setResource(@android.support.annotation.Nullable fr.nihilus.music.glide.PaletteBitmap resource) { if (resource != null) { super.view.setImageBitmap(resource.getBitmap()); android.support.v7.graphics.Palette.Swatch swatch = resource.getPalette().getDominantSwatch(); int accentColor = resource.getPalette().getVibrantColor(mDefaultColors[1]); if (swatch != null) { holder.setColors(swatch.getRgb(), accentColor, swatch.getTitleTextColor(), swatch.getBodyTextColor()); } <FIXE>
<FIXS> validateRateLimit(searchView.getQuery().toString(), 1, true); <FIXE>
<FIXS> <FIXE>
<FIXS> dataServiceConnection = new com.playposse.peertopeeroxygen.android.data.DataServiceConnection(new com.playposse.peertopeeroxygen.android.firebase.OxygenFirebaseMessagingService.EmptyDataReceivedCallback(), false, false); <FIXE>
<FIXS> <FIXE>
<FIXS> if ((intent == null) || ((intent.getData()) == null)) <FIXE>
<FIXS> if ((list.size()) < 0) <FIXE>
<FIXS> }else { org.instantplaces.purewidgets.client.application.PublicDisplayApplication.parameters = new java.util.HashMap<java.lang.String, java.lang.String>(); <FIXE>
<FIXS> java.lang.String pluginNameFixed = pluginName.replaceAll("_\\d*$", ""); <FIXE>
<FIXS> <FIXE>
<FIXS> newId = mostRecentId + 1; <FIXE>
<FIXS> if (storeCredit > (com.magestore.app.util.ConfigUtil.convertToPrice(mOrderHistoryListController.getOrder().getMaxStoreCreditRefund()))) { <FIXE>
<FIXS> this.contestants_bench.informReferee(); <FIXE> <FIXS> this.contestants_bench.reviewNotes(); <FIXE>
<FIXS> private void addDiscardedDataPoints() { <FIXE>
<FIXS> return ((bits) >> position) & (~((-1L) << length)); <FIXE>
<FIXS> if ((((maxRunTime) != null) && ((maxRunTime) > 0)) && ((stats.runTime) > (maxRunTime))) { <FIXE>
<FIXS> update(); <FIXE>
<FIXS> public java.util.ArrayList<com.github.aedge90.nmm.MoveNode> addPossibleMovesTo(com.github.aedge90.nmm.MoveNode parent, com.github.aedge90.nmm.Player player, com.github.aedge90.nmm.GameBoard gameBoard) { <FIXE> <FIXS> return parent.getChildren(); <FIXE>
<FIXS> <FIXE>
<FIXS> private void startTimer() { <FIXE>
<FIXS> if (option.isDefault) continue; else strBuild += (option.toString()) + "\n"; <FIXE>
<FIXS> return !((((this.id) == null) && ((other.id) != null)) || (((this.id) != null) && (!(this.id.equals(other.id))))); <FIXE>
<FIXS> squaredDisplacement = squaredDisplacement + ((nodeOneValue - nodeTwoValue) * (nodeOneValue - nodeTwoValue)); <FIXE>
<FIXS> <FIXE>
<FIXS> status = 1; <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE> <FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> block.accept(driver, driver.run(new less.stupid.flights.impl.FlightCommand.AddFlight(less.stupid.flights.impl.FlightEntityTest.callsign, less.stupid.flights.impl.FlightEntityTest.equipment, less.stupid.flights.impl.FlightEntityTest.departure, less.stupid.flights.impl.FlightEntityTest.arrival))); <FIXE>
<FIXS> return ((((o1 & 255) << 24) | ((o2 & 255) << 16)) | ((o3 & 255) << 8)) | (o4 & 255); <FIXE>
<FIXS> MazeGenerator.Maze tempMaze = new MazeGenerator.Maze(inpMazeTitle.getText(), sldGridSize.getValue(), sldActiveNodeCount.getValue()); <FIXE>
<FIXS> assertNotNull("Working copy vocabulary", result); assertEquals("Working user", "testUser", result.getWorkingUser()); assertEquals("Working copy", true, result.isWorkingCopy()); assertEquals("Checked out copy id", 1, result.getCheckedOutCopyId()); <FIXE>
<FIXS> <FIXE>
<FIXS> boolean wasInstantiated = ((attribute != null) && (attribute instanceof org.eclipse.persistence.indirection.ValueHolderInterface)) && (((org.eclipse.persistence.indirection.ValueHolderInterface) (attribute)).isInstantiated()); <FIXE>
<FIXS> return super.isItemHoldable(itemInfo, curScope); <FIXE>
<FIXS> if (index == (str.length())) { return 0; } <FIXE>
<FIXS> <FIXE>
<FIXS> if ((results.length) > 0) return results[0].geometry.location; return null; <FIXE>
<FIXS> if ((slidingPanelLayout != null) && (slidingPanelLayout.isPanelExpanded())) { slidingPanelLayout.collapsePanel(); }else { super.onBackPressed(); <FIXE>
<FIXS> while (audioReferences.find()) { <FIXE> <FIXS> } <FIXE>
<FIXS> if (fd != null) { fd.setUseSpeedForColor(useSpeedForColor); if (useSpeedForColor) { colorIndex = fd.getSpeedTypeIndex(); } <FIXE>
<FIXS> private void authSuccess(java.lang.String username) { <FIXE> <FIXS> this.username = username; <FIXE>
<FIXS> return ((T) (new java.lang.Integer(1))); <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> stdFrame.setVisible(true); <FIXE> <FIXS> ftdFrame.setVisible(true); <FIXE>
<FIXS> java.lang.String time = ((mLastHour) + ":") + (toTimeDigits(mLastMinute)); <FIXE>
<FIXS> addAttribute(org.molgenis.data.mapper.meta.AttributeMappingMetaData.SOURCEATTRIBUTEMETADATAS).setDataType(org.molgenis.MolgenisFieldTypes.AttributeType.TEXT); <FIXE>
<FIXS> if (list != null) { for (java.lang.Object item : list) { if (provider.equals(item, target)) { return true; } <FIXE>
<FIXS> if (userInfo.get(i).username.equals(user)) { <FIXE>
<FIXS> if (!(webElement.getText().isEmpty())) { texts.add(webElement.getText()); } <FIXE>
<FIXS> public LeastMatrix.Output compute(prashanth.photoncodechallenge.reusable.LeastMatrix leastMatrix) { <FIXE> <FIXS> return new prashanth.photoncodechallenge.reusable.LeastMatrix.Output(false, 0, null); }else { return new prashanth.photoncodechallenge.reusable.LeastMatrix.Output(((integers.size()) == (leastMatrix.getWidth())), pathValue(integers), appendToRow(integers)); <FIXE> <FIXS> <FIXE>
<FIXS> presentOne(rootKey, o, (-1), false); <FIXE>
<FIXS> if (((matrix.get(row, column)) == null) || (matrix.get(row, column).equals("X"))) { <FIXE>
<FIXS> uk.co.cranfield.core.WaveSimulatorSolver.logger.info(("Bathymetry File Created with file name : " + (uk.co.cranfield.common.Constants.SLOPE_RES_FILE))); <FIXE> <FIXS> <FIXE> <FIXS> timeStepping(); <FIXE>
<FIXS> try { executePredictionCalculation(); org.oracul.service.task.PredictionTask3D.LOGGER.debug((("Execute calculation 3D task #" + (getId())) + ": test sleep for 10 sec")); org.oracul.service.dto.Prediction3D pred = facade.getPrediction3dRepository().findById(getId()); pred = facade.getBuilder3D().buildPrediction(pred); facade.getPrediction3dRepository().savePrediction(pred); facade.removeStatus(getId()); } finally { facade.releaseCores(getCores()); } <FIXE>
<FIXS> double deltaW = (((-1) * rate) * (connections[i].delta)) * (Output); weights[i] += deltaW; <FIXE>
<FIXS> if ((longitude != 0) && (lat != 0)) currLoc = new org.jxmapviewer.viewer.GeoPosition(lat, longitude); else currLoc = new org.jxmapviewer.viewer.GeoPosition(cLat, cLong); <FIXE>
<FIXS> int index = ((int) (input % alphabetLen)); if ((index >= 0) && (index < (alphabet.length()))) { hash = (alphabet.charAt(index)) + hash; } <FIXE>
<FIXS> if (selectedIndex != ((Main.layerStrings.size()) - 1)) { <FIXE>
<FIXS> <FIXE>
<FIXS> public static void playCollisionNoise() { <FIXE>
<FIXS> java.lang.String pictureURL = parsePictureURL(message, name); <FIXE>
<FIXS> assertEquals(2, cd.getFamilies().length); assertEquals("Business/Salesforce", cd.getFamilies()[0]); assertEquals("Cloud/Salesforce", cd.getFamilies()[1]); <FIXE>
<FIXS> <FIXE> <FIXS> newGameSetup(); <FIXE>
<FIXS> if ((dir) != null) player.setLookingDirection(dir); <FIXE>
<FIXS> <FIXE> <FIXS> level.Location agLoc = action.getAgentLocation(); <FIXE>
<FIXS> if ((treeInstanceRoot) == null) return null; <FIXE>
<FIXS> private void commit() { <FIXE> <FIXS> p.setValue(new android.util.Pair(p.getValue().second, p.getValue().second)); <FIXE>
<FIXS> return extractValue(dfValue, sysObject.getAttrDataType(attr)); <FIXE>
<FIXS> if ((data) != null) { if ((data) instanceof redis.clients.jedis.exceptions.JedisDataException) { throw new redis.clients.jedis.exceptions.JedisDataException(((redis.clients.jedis.exceptions.JedisDataException) (data))); } response = builder.build(data); <FIXE> <FIXS> <FIXE>
<FIXS> getLog().info(message); <FIXE>
<FIXS> start(); <FIXE>
<FIXS> <FIXE>
<FIXS> game.putCardInDiscard(card); <FIXE>
<FIXS> toDoListChanges.add(change); toDoListUndoChanges.remove(((toDoListUndoChanges.size()) - 1)); <FIXE> <FIXS> <FIXE>
<FIXS> mockMvc.perform(get(com.cinema.controller.rest.SessionControllerTest.SESSION_GET_ALL).accept(MediaType.APPLICATION_JSON)).andDo(org.springframework.test.web.servlet.result.MockMvcResultHandlers.print()); <FIXE>
<FIXS> <FIXE>
<FIXS> builder.addParam(getAPI(hsyndicate.rest.client.SyndicateUGHttpClient.OPEN)); <FIXE>
<FIXS> public java.util.ArrayList<no.ntnu.stud.minvakt.data.NewsFeedItem> getNewsFeed() { <FIXE> <FIXS> return newsDB.getNewsFeedAdmin(); <FIXE> <FIXS> return newsDB.getNewsFeed(getSession().getUser().getId()); <FIXE>
<FIXS> if ((enregistrerFichier.getSelectedFile()) != null) { ctrl.changerSauvegardeProjet(enregistrerFichier.getSelectedFile().getPath().substring(0, ((enregistrerFichier.getSelectedFile().getPath().length()) - (enregistrerFichier.getSelectedFile().getName().length()))), enregistrerFichier.getSelectedFile().getName()); actualiserTitre(); } <FIXE>
<FIXS> if ((klase.size()) == 0) { return null; <FIXE>
<FIXS> <FIXE>
<FIXS> return null; <FIXE>
<FIXS> return prettyPrint(new response.ResponseMessage((("User " + id) + " removed!!"), 200)); <FIXE>
<FIXS> if (((protection != null) && ((protection.getRemoteReplicationParam()) != null)) && ((protection.getRemoteReplicationParam().getRemoteReplicationSettings()) != null)) { return protection.getRemoteReplicationParam().getRemoteReplicationSettings(); <FIXE>
<FIXS> super.setEnabled(enabled); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> public boolean hasNext() { if (((this.iterator) == null) || (!(this.iterator.hasNext()))) { <FIXE> <FIXS> return this.iterator.hasNext(); <FIXE>
<FIXS> <FIXE>
<FIXS> if ((chunks.size()) >= count) { <FIXE>
<FIXS> user.overrideJoystickPosition((-5)); <FIXE>
<FIXS> if (stream != null) { java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.InputStreamReader(stream)); java.lang.StringBuilder result = new java.lang.StringBuilder(); java.lang.String line; while ((line = reader.readLine()) != null) { result.append(line); } return result.toString(); } return ""; <FIXE>
<FIXS> mediaPlayer.setLooping(false); <FIXE>
<FIXS> if ((!(this.awaitingResponseQueue.isEmpty())) || (!(this.outgoingQueue.isEmpty()))) { <FIXE>
<FIXS> int waitingTime = ((int) ((edu.caltech.cs141b.hw2.gwt.collab.client.Collaborator.EATING_RANGE_START) + (eatRange * (java.lang.Math.random())))) + 1; <FIXE>
<FIXS> return sh; <FIXE>
<FIXS> builder.append(format(wikiText)); <FIXE>
<FIXS> int count = 1; <FIXE> <FIXS> if (gid <= ((range.getLeft()) + count)) { <FIXE> <FIXS> count += (range.getLeft()) + 1; <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> btnStop.setEnabled(true); btnStart.setEnabled(false); <FIXE> <FIXS> <FIXE> <FIXS> btnStart.setEnabled(true); btnStop.setEnabled(false); <FIXE>
<FIXS> synchronized(ssrc) { if ((ssrc.endpointId) == null) ssrc.endpointId = item.cname; <FIXE>
<FIXS> java.io.PipedInputStream inputStream; final java.io.PipedOutputStream outputStream; try { inputStream = new java.io.PipedInputStream(); outputStream = new java.io.PipedOutputStream(inputStream); } catch (java.io.IOException e) { throw new java.lang.RuntimeException(e); } <FIXE> <FIXS> <FIXE> <FIXS> <FIXE> <FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> if ((person.getHealth().getCurrent()) < (getPace().getSpeed())) { <FIXE>
<FIXS> if ((((first != null) && (second != null)) && ((first.getName()) != null)) && ((second.getName()) != null)) { <FIXE>
<FIXS> if (!(isGamePadConnected(gamepad))) <FIXE>
<FIXS> long[][] temp = new long[n][n]; sim.eqiv(temp, grid); undone.push(temp); <FIXE> <FIXS> <FIXE>
<FIXS> if (view == null) { return null; } <FIXE>
<FIXS> assertTrue(sim.addAgent(rob)); <FIXE>
<FIXS> <FIXE>
<FIXS> return ((shortenedName.equals(name)) || (com.Acrobot.ChestShop.Permission.otherName(player, name))) || ((!(name.isEmpty())) && (player.getUniqueId().equals(com.Acrobot.ChestShop.UUIDs.NameManager.getUUID(name)))); <FIXE>
<FIXS> java.lang.System.out.println(disease.getDescription()); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> int a = 64 - length; int b = a - offset; word = word & (~(((co.paralleluniverse.fibers.Stack.MASK_FULL) >>> a) << b)); word = word | (value << b); <FIXE>
<FIXS> mv.visitMethodInsn(org.renjin.compiler.pipeline.INVOKESPECIAL, "java/lang/Object", "<init>", "()V", false); <FIXE>
<FIXS> mOverlayPoint.setCoordinates(mMapPoint); <FIXE>
<FIXS> <FIXE>
<FIXS> if (AppGlobals.APP_FOREGROUND) { com.byteshaft.towerinfo.PhoneInfo.getInstance().setDataDirection(0); } <FIXE>
<FIXS> locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 0, 0, locationListener); <FIXE>
<FIXS> event = event.trim(); <FIXE>
<FIXS> if ((historyItems.size()) > 0) { lvAdapterHistory = new com.extinctspecie.betman.LVAdapterTVHistory(getActivity().getBaseContext(), historyItems); listView.setAdapter(lvAdapterHistory); } <FIXE>
<FIXS> assertEquals(2, several.size()); <FIXE>
<FIXS> super.onResume(); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> private void scannerPrint(int type) throws java.lang.Exception { <FIXE> <FIXS> com.dax.demo.fingerprint.SymmetricCryptoObjectHelper cryptoHelper = new com.dax.demo.fingerprint.SymmetricCryptoObjectHelper(this); android.support.v4.hardware.fingerprint.FingerprintManagerCompat.CryptoObject cryptoObject = cryptoHelper.buildCryptoObject(type); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> return ioArgGroup; <FIXE> <FIXS> return generalArgGroup; <FIXE> <FIXS> return ldapArgGroup; <FIXE> <FIXS> return defaultArgGroup; <FIXE> <FIXS> <FIXE>
<FIXS> return java.lang.Long.signum(((u.lastAccessTime(java.util.concurrent.TimeUnit.NANOSECONDS)) - (t.lastAccessTime(java.util.concurrent.TimeUnit.NANOSECONDS)))); <FIXE>
<FIXS> previewIntent = null; <FIXE>
<FIXS> final java.util.Set<org.fenixedu.academic.domain.curricularPeriod.CurricularPeriod> configured = getCurricularPeriodsConfigured(getYearMin(), getYearMax(), true); <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> if ((listItem) != null) { for (int i = 0; i < (listItem.size()); i++) news.insert(listItem.get(i)); } <FIXE>
<FIXS> filter = new ee.hm.dop.rest.filter.SecurityFilterTest.SecurityFilterMock(); <FIXE>
<FIXS> if (structure.BuildStructure(this, world, hitBlockPos, EnumFacing.NORTH, player)) { player.inventory.clearMatchingItems(com.wuest.prefab.ModRegistry.TreeFarm(), (-1), 1, null); player.inventoryContainer.detectAndSendChanges(); } <FIXE>
<FIXS> endSemaphore = new java.util.concurrent.Semaphore(((-(Sorters.size())) + 1), true); <FIXE>
<FIXS> public static void writeUVarLong(com.pingcap.tikv.codec.CodecDataOutput cdo, long value) { <FIXE>
<FIXS> if ((tempFile) != null) { tempFile.delete(); } <FIXE>
<FIXS> @android.support.annotation.Nullable <FIXE> <FIXS> java.lang.reflect.Field field = notification.getClass().getDeclaredField("extras"); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> org.wso2.carbon.policy.mgt.core.dao.PolicyManagementDAOFactory.openConnection(); <FIXE>
<FIXS> for (int i = 0; i < (picture.length); i++) { <FIXE> <FIXS> <FIXE>
<FIXS> static void sendHttpRedirect(co.paralleluniverse.comsat.webactors.netty.ChannelHandlerContext ctx, co.paralleluniverse.comsat.webactors.netty.FullHttpRequest req, java.lang.String newUri) { <FIXE>
<FIXS> return isRemoveNotif && (!(new org.eclipse.sirius.common.tools.api.query.NotificationQuery(notification).isTransientNotification())); <FIXE>
<FIXS> if ((mChicken1Count) >= 1) { <FIXE>
<FIXS> word = word.toLowerCase(); <FIXE>
<FIXS> org.sonar.core.issue.DefaultIssue issue = issueService.createManualIssue(componentKey, ruleKey, request.paramAsInt("line"), request.param("message"), request.param("severity")); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> byte[] bytes = mapper.writeValueAsBytes(com.google.common.collect.ImmutableMap.of("properties", com.google.common.collect.ImmutableMap.of("test0", "test", "test1", com.google.common.collect.ImmutableList.of("test", "test"), "test2", false), "api", api, "collection", "test")); <FIXE>
<FIXS> private static void writeChallenges(java.util.ArrayList<Picolo.model.Challenge> challenges) { <FIXE>
<FIXS> if (((password) == null) || ("".equals(password))) <FIXE>
<FIXS> if (!(readyQueue.isEmpty())) { <FIXE> <FIXS> }else { simulator.Config.getCPU().contextSwitch(null); <FIXE>
<FIXS> com.continuum.nova.utils.RenderCommandBuilder.addRenderWorldCommand(mc, partialTicks, command); <FIXE>
<FIXS> if ((p.uuid) == null) { continue; } <FIXE>
<FIXS> lvAdapterTVVIPLive = new com.extinctspecie.betman.adapters.LVAdapterTVVIPLive(view.getContext(), vipLiveItems); <FIXE>
<FIXS> return rx.Observable.error(throwable); <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE> <FIXS> usersFragment.passDataToFragment(response); <FIXE>
<FIXS> taskSession = new org.orienteer.camel.tasks.OCamelTaskSession(); taskSession.setCallback(callback); taskSession.setDeleteOnFinish(false); taskSession.setConfig(configId); taskSession.setFinalProgress(context.getRoutes().size()); taskSession.start(); <FIXE>
<FIXS> <FIXE> <FIXS> super.onDestroy(); <FIXE>
<FIXS> refreshView(true); <FIXE>
<FIXS> com.example.aishwarya.favoriteicon.AnimationUtils.heart(circleBackground, orangeFavIcon, greyFavIcon); <FIXE>
<FIXS> <FIXE>
<FIXS> return stream(clazz).filter(( logRecord) -> logRecord.getLevel().equals(level)); <FIXE>
<FIXS> <FIXE>
<FIXS> java.util.Collection<java.lang.String> ids = org.eol.globi.tool.LinkerTestUtil.assertHasOther("Phytophthora infestans", 6, taxonIndex, RelTypes.SAME_AS); <FIXE>
<FIXS> if ((_currentHeath) <= 0) { <FIXE>
<FIXS> if ((((((index > ((rows) * (rows))) || (index < 0)) || (row < 0)) || (row >= (rows))) || (col <= 0)) || (col > (rows))) <FIXE>
<FIXS> selectionEnd = true; <FIXE>
<FIXS> if ((d1.length) != (d2.length)) { <FIXE>
<FIXS> verify(container, never()).isBrowserStillOpen(any()); <FIXE>
<FIXS> if (el != null) { double d = 0; java.util.regex.Pattern p = java.util.regex.Pattern.compile("(\\d+(?:\\.\\d+))"); java.util.regex.Matcher m = p.matcher(el); while (m.find()) { d = java.lang.Double.parseDouble(m.group(1)); } return d; } return 0; <FIXE>
<FIXS> void GenerateShipsOnTheField(int[][] field) { PutNDeckShip(field, 4); <FIXE> <FIXS> PutNDeckShip(field, 3); <FIXE> <FIXS> PutNDeckShip(field, 2); <FIXE> <FIXS> Put1DeckShip4Times(field); <FIXE>
<FIXS> if (de.fosefx.steamnotificator.Main2Activity.friendArrayList.get(i).getSteamID().equals(choosenID)) { <FIXE>
<FIXS> if (((liveEntry.recordedEntryId) != null) && ((liveEntry.recordedEntryId.length()) > 0)) { impersonateClient.getMediaService().cancelReplace(liveEntry.recordedEntryId); } <FIXE>
<FIXS> throw new io.atomix.copycat.error.CommandException(e); <FIXE>
<FIXS> org.hibernate.Criteria criteria = createEntityCriteria().addOrder(org.hibernate.criterion.Order.asc("id")); <FIXE>
<FIXS> for (java.lang.Object world : this.getServer().getWorlds().toArray()) { if (!(world instanceof org.bukkit.World)) continue; if (((org.bukkit.World) (world)).getName().equalsIgnoreCase(worldname)) { return ((org.bukkit.World) (world)); <FIXE>
<FIXS> if (tv != null) { if (!(mScrolling)) updateIndicator(tv.getLeft(), tv.getMeasuredWidth()); smoothScrollTo((((tv.getLeft()) - (((getWidth()) - (tv.getWidth())) / 2)) + (getPaddingLeft())), 0); <FIXE> <FIXS> <FIXE>
<FIXS> if ((mLayoutManager) != null) { int lastItemPosition = mLayoutManager.findFirstVisibleItemPosition(); java.lang.String chapterId = mAdapter.getFocusedChapterId(lastItemPosition); java.lang.String frameId = mAdapter.getFocusedFrameId(lastItemPosition); com.door43.translationstudio.util.AppContext.setLastFocus(mTargetTranslation.getId(), chapterId, frameId); } <FIXE>
<FIXS> final org.apache.logging.log4j.core.LoggerContext context = ((org.apache.logging.log4j.core.LoggerContext) (org.apache.logging.log4j.LogManager.getContext(false))); final org.apache.logging.log4j.core.config.Configuration configuration = context.getConfiguration(); return new java.io.File(((org.apache.logging.log4j.core.appender.FileAppender) (configuration.getAppender("FILE"))).getFileName()).toURI(); <FIXE>
<FIXS> }else { break; <FIXE>
<FIXS> if (pointsArr[i].equals(point)) <FIXE>
<FIXS> @org.junit.Test <FIXE> <FIXS> <FIXE>
<FIXS> public void onImageFileGenerated(android.net.Uri file) { <FIXE> <FIXS> takePictureIntent.putExtra(MediaStore.EXTRA_OUTPUT, file); <FIXE>
<FIXS> @org.springframework.web.bind.annotation.RequestMapping(value = "/filter", method = org.springframework.web.bind.annotation.RequestMethod.GET, produces = "application/json") public org.springframework.http.ResponseEntity<java.util.List<org.openbox.sf5.model.Transponders>> getTranspondersBySatelliteId(@org.springframework.web.bind.annotation.MatrixVariable(required = true, value = "satId") <FIXE>
<FIXS> private boolean getPlayerPassword(java.io.PrintWriter msgOut, java.io.BufferedReader msgIn, Player newPlayer) { <FIXE> <FIXS> return true; <FIXE>
<FIXS> <FIXE>
<FIXS> public <T> void modifyRecord(T object, net.moddity.droidnubekit.utils.DNKOperationType operationType, DroidNubeKitConstants.kDatabaseType environmentType, final net.moddity.droidnubekit.requests.DNKCallback<java.util.List<T>> callback) { <FIXE> <FIXS> modifyRecord(objects, operationType, environmentType, callback); <FIXE>
<FIXS> <FIXE>
<FIXS> org.springframework.data.domain.Page<com.jlfex.hermes.model.CrediteInfo> obj = creditInfoService.queryByCondition(null, page, size, null); <FIXE>
<FIXS> thread.close(true, true); <FIXE>
<FIXS> <FIXE>
<FIXS> this.x = (this.renderer.x()) + ((com.darkxell.client.resources.images.AbstractDungeonTileset.TILE_SIZE) / 2); this.y = (this.renderer.y()) + ((com.darkxell.client.resources.images.AbstractDungeonTileset.TILE_SIZE) / 2); <FIXE>
<FIXS> <FIXE>
<FIXS> is_dirty = false; firePropertyChange(IEditorPart.PROP_DIRTY); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> if ((values[(i - 1)]) > (values[i])) <FIXE>
<FIXS> public java.util.Map<java.lang.Integer, java.util.Map<java.lang.Integer, java.lang.Double>> estimateRelevances(java.util.List<java.lang.Integer> startCategories, int topKShortestPathes, boolean distributeOverSiblingCategories) { <FIXE>
<FIXS> private int containsStraight() { <FIXE>
<FIXS> if (choice.equals("numAvg")) { <FIXE> <FIXS> if (choice.equals("sup")) { <FIXE> <FIXS> if (choice.equals("randy")) { <FIXE>
<FIXS> <FIXE>
<FIXS> if ((size) < 6) { <FIXE>
<FIXS> java.lang.System.out.println(); <FIXE>
<FIXS> for (int i = 0; i < (size()); i++) { <FIXE>
<FIXS> if ((resultSet != null) && (!(resultSet.isClosed()))) { <FIXE>
<FIXS> yoVariableClient.start(); <FIXE>
<FIXS> public int getUnconfirmedCount(java.util.List<com.breadwallet.presenter.entities.TransactionListItem> items) { <FIXE> <FIXS> updateEstimatedBlockHeight(); <FIXE>
<FIXS> if ((x == 0) || ((x + 1) >= (width))) <FIXE>
<FIXS> assert idUser >= 0 : "Unexpected error: the attribute idUser is less than 0"; <FIXE>
<FIXS> private java.util.List<org.hisp.dhis.dataelement.DataElementOperand> getOperands(org.hisp.dhis.dataelement.DataElement dataElement, org.hisp.dhis.dataelement.DataElementCategoryCombo categoryCombo) { <FIXE> <FIXS> <FIXE>
<FIXS> ans.add(pf.query.Path.singleElementPath(node).append(new pf.query.Path.AttributeNode(id, id), pf.query.Path.singleElementPath(new pf.query.Path.ValueNode("ASD")))); <FIXE>
<FIXS> return ; <FIXE>
<FIXS> public static java.util.List<android.content.Intent> queryIntents(@android.support.annotation.NonNull android.content.Context context, @android.support.annotation.NonNull android.content.Intent targetIntent, java.lang.String packageNameBlacklistRegex) { java.util.List<android.content.Intent> intents = new java.util.ArrayList<>(); <FIXE>
<FIXS> double avg = ((outgoingTransactions) == 0) ? 0 : (serviceTime) / (outgoingTransactions); <FIXE>
<FIXS> default : return R.drawable.header_blue_red; <FIXE> <FIXS> <FIXE>
<FIXS> addAfterTestOperation(new org.zanata.provider.DBUnitProvider.DataSetOperation(dataSetToClear, org.dbunit.operation.DatabaseOperation.DELETE_ALL)); <FIXE> <FIXS> <FIXE>
<FIXS> setWebViewClient(); <FIXE>
<FIXS> if ((0 <= atAddress) && (atAddress < (memory.length))) { <FIXE>
<FIXS> <FIXE>
<FIXS> java.lang.System.out.println(daysBetween); <FIXE>
<FIXS> setAndShowTitle(tableId_); <FIXE>
<FIXS> case kAiming : <FIXE> <FIXS> <FIXE>
<FIXS> } catch (java.lang.Throwable t) { timber.log.Timber.e(t, "Error parsing the Clickable Date pages for Grid info"); return rx.Observable.error(t); <FIXE>
<FIXS> game = ((byui.cit260.detectiveWizard.model.Game) (input.readObject())); <FIXE>
<FIXS> getChildren().get(i).setVisible((number <= unlockedLevels)); <FIXE>
<FIXS> javax.ws.rs.core.Response response = search.query("wrong.json", "testquery", null, null); <FIXE>
<FIXS> mCompositeDisposable.add(redditInterface.register().observeOn(io.reactivex.android.schedulers.AndroidSchedulers.mainThread()).subscribeOn(io.reactivex.schedulers.Schedulers.io()).subscribe(this::handleResponse, this::handleError)); <FIXE>
<FIXS> if (json.isEmpty()) { <FIXE> <FIXS> com.metis.meishuquan.model.login.LoginUserData user = new com.google.gson.Gson().fromJson(json, new com.google.common.reflect.TypeToken<com.metis.meishuquan.model.login.LoginUserData>() { }.getType()); <FIXE>
<FIXS> private java.lang.String getSuffix(org.bukkit.entity.Player p) { <FIXE>
<FIXS> <FIXE> <FIXS> selectedWeapon = null; <FIXE>
<FIXS> removeSaved(restaurant); <FIXE>
<FIXS> if ((!(taskToUpdate.equals(editedTask))) && (internalList.contains(editedTask))) { <FIXE>
<FIXS> if (((data) == null) || ((data.getData().length) == 0)) { return ; } <FIXE>
<FIXS> public static void showDialog(final android.content.Context context, java.lang.String title, java.lang.String message, final android.content.DialogInterface.OnClickListener positiveClickListener) { <FIXE> <FIXS> alertDialogBuilder.setTitle("").setMessage(message).setCancelable(false).setPositiveButton("Ok", positiveClickListener); <FIXE>
<FIXS> if ((mCamera) == null) { mCamera = android.hardware.Camera.open(); } <FIXE>
<FIXS> tokenInfo.setValidityPeriod(((java.lang.Long) (map.get("expires_in")))); <FIXE>
<FIXS> if ((xacmlPolicyTemplateContexts != null) && (!(xacmlPolicyTemplateContexts.isEmpty()))) { org.wso2.carbon.appmgt.api.EntitlementService entitlementService = org.wso2.carbon.appmgt.impl.entitlement.EntitlementServiceFactory.getEntitlementService(config, authorizedAdminCookie); entitlementService.generateAndSaveEntitlementPolicies(xacmlPolicyTemplateContexts); appMDAO.updateURLEntitlementPolicyPartialMappings(xacmlPolicyTemplateContexts); } <FIXE>
<FIXS> <FIXE>
<FIXS> assertEquals("housename", result.getName()); assertEquals("denneweg", result.getAddressOfTheHouse().getStreet()); assertEquals(1, result.getAddressOfTheHouse().getNumber()); assertEquals("Nederland", result.getAddressOfTheHouse().getCountry().getCountryName()); <FIXE>
<FIXS> <FIXE>
<FIXS> @java.lang.Override <FIXE> <FIXS> for (int i = 0; i < (lists.size()); i++) { <FIXE>
<FIXS> com.otaliastudios.cameraview.Camera1.LOG.i("sizesFromList:", result); <FIXE>
<FIXS> return super.onKeyUp(keyCode, event); <FIXE>
<FIXS> throw new com.pokitdok.UnauthorizedException("Unauthorized"); <FIXE>
<FIXS> public boolean deleteEmploye(java.lang.Integer id) { <FIXE> <FIXS> collection.remove(new md.utm.fi.sincronizeServices.BasicDBObject().append("id", id)); return true; <FIXE>
<FIXS> edu.msergey.jalg.sorting.InversionsCounter.data = null; <FIXE>
<FIXS> if (!(me.zsj.pretty_girl.utils.NetUtils.checkNet(this))) { <FIXE>
<FIXS> private boolean sendEmptyAnswer() { if ((uiSubscriber) != null) { <FIXE>
<FIXS> java.lang.System.out.println(result); <FIXE>
<FIXS> result = searchService.suggest(term); <FIXE>
<FIXS> if (!(fi.metatavu.edelphi.utils.ActionUtils.hasDelfoiAccess(requestContext, actionAccessName))) { <FIXE>
<FIXS> net.devintia.commons.bukkit.armorstand.ArmorStandModel model = net.devintia.commons.bukkit.armorstand.ArmorStandModelImporter.importModel(args.getArg(0), file, this); <FIXE>
<FIXS> updateConversation(message.getConversationID(myMonkeyID), getSecondaryTextByMOkMessage(message), (isMyOwnMsg ? MonkeyConversation.ConversationStatus.deliveredMessage : MonkeyConversation.ConversationStatus.receivedMessage), (isMyOwnMsg ? 0 : 1), message.getDatetimeorder()); <FIXE>
<FIXS> final long a = ((long) (MarioAI.Hasher.hashSpeed(vx, MarioAI.Hasher.FACTOR_NUMBER_OF_SPEED_NODES))) << 32; <FIXE>
<FIXS> return 0; <FIXE>
<FIXS> if ((resultSetType) == (java.sql.ResultSet.TYPE_FORWARD_ONLY)) { <FIXE> <FIXS> fetchDirection = direction; <FIXE>
<FIXS> return kiviuq.views.TileView.NUMBER_COLORS[(num - 1)]; <FIXE>
<FIXS> if (user == null) { user = new uk.ac.tees.donut.squad.users.FBUser(); } if (photoUrl != null) { user.setPicture(photoUrl.toString()); } if (name != null) { user.setName(name); } <FIXE>
<FIXS> holder.lastToken = com.ggstudios.lolcraft.SplashFetcher.getInstance().fetchChampionSplash(((android.os.Build.VERSION.SDK_INT) >= (android.os.Build.VERSION_CODES.HONEYCOMB) ? com.ggstudios.lolcraft.MainFragment.THREAD_POOL_EXECUTOR : null), holder.lastInfo.key, holder.splash.getWidth(), 0, new com.ggstudios.lolcraft.SplashFetcher.OnDrawableRetrievedListener() { <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> final int[] values = this.values; <FIXE>
<FIXS> if ((!(plugin instanceof com.sk89q.worldguard.bukkit.WorldGuardPlugin)) || (plugin == null)) { <FIXE>
<FIXS> if ((newData == null) || ((newData.length()) < 1)) { <FIXE>
<FIXS> java.lang.Iterable<bookshelf.model.Book> books = bookService.addBook(new bookshelf.model.Book("9780132350555", "Test Driven Development by Example", "Kent Beck", 30.32)); <FIXE>
<FIXS> coursesAdapter.showLoadingFooter(false); <FIXE>
<FIXS> if (!(includePath.contains(java.nio.file.Paths.get(path)))) { <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> public java.util.List<org.wso2.carbon.policy.mgt.common.Policy> filterOwnershipTypeBasedPolicies(java.lang.String ownershipType, java.util.List<org.wso2.carbon.policy.mgt.common.Policy> policies) { <FIXE> <FIXS> return temp; <FIXE>
<FIXS> <FIXE>
<FIXS> int chunkSize = java.lang.Math.min((length - offset), ((buffer.capacity()) >> 1)); <FIXE>
<FIXS> return true; <FIXE>
<FIXS> finished = true; <FIXE>
<FIXS> java.lang.System.out.println(project); <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> setInsurance_enddate((((((getInsurance_startdate().getMonth()) + "/") + (getInsurance_startdate().getDayOfMonth())) + "/") + ((getInsurance_startdate().getYear()) + 1))); <FIXE>
<FIXS> throw new java.lang.IllegalStateException("Construction finished, TransFormula must not be modified."); }else { <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> int size = ((this.fontSizeRange) > 0 ? r.nextInt(this.fontSizeRange) : 0) + (this.fontBasicSize); <FIXE>
<FIXS> queryAll(type, "", callback); <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> if (((auditMasterList) == null) || (auditMasterList.isEmpty())) { <FIXE> <FIXS> insertDeleted = false; <FIXE>
<FIXS> view.printAllTasks(toDoList); <FIXE> <FIXS> view.printThatCompleated(task); <FIXE>
<FIXS> <FIXE>
<FIXS> public static java.lang.String getRandomString(java.util.List<java.lang.String> strings) { <FIXE> <FIXS> if ((strings.size()) > 0) { result = strings.get(com.jsl.babytrader.Utilities.CommonUtilities.getRandomInteger(0, strings.size())); <FIXE>
<FIXS> this.getFishCount(typeOfFish).update(); <FIXE>
<FIXS> return 8L; <FIXE>
<FIXS> newChains.add(generatePolicyChain(rawChain)); <FIXE> <FIXS> if (newChains.equals(_currentChains)) <FIXE>
<FIXS> task = txn.get(taskKey); if (task == null) { <FIXE>
<FIXS> public android.database.sqlite.SQLiteDatabase deleteInvestments() { <FIXE> <FIXS> return db; <FIXE>
<FIXS> public void determineCurrentState() { <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> lu.requestLocation(); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> mPublisherTextView.setText(java.lang.String.format(org.chromium.chrome.browser.ntp.snippets.SnippetArticleViewHolder.PUBLISHER_FORMAT_STRING, item.mPublisher, android.text.format.DateUtils.getRelativeTimeSpanString(item.mTimestamp, java.lang.System.currentTimeMillis(), DateUtils.MINUTE_IN_MILLIS))); <FIXE>
<FIXS> public org.python.core.PyObject __call__(org.python.core.PyObject key, org.python.core.PyObject value) { asMap().put(org.python.core.Py.tojava(key, java.lang.Object.class), (value == (Py.None) ? Py.None : org.python.core.Py.tojava(value, java.lang.Object.class))); <FIXE>
<FIXS> <FIXE>
<FIXS> org.junit.Assert.assertThat(spiderPig.getName(), org.hamcrest.core.Is.is("Spider-Pig")); org.junit.Assert.assertThat(horse.getName(), org.hamcrest.core.Is.is("Horse")); <FIXE>
<FIXS> public void setNewChildTagId(java.lang.Long newChildTagId) { if (newChildTagId == null) return ; <FIXE>
<FIXS> private void readConfig() { <FIXE> <FIXS> <FIXE>
<FIXS> for (int index : indexMap) { if ((index >= (indexMap.get(cnt))) && ((layout[(index / 9)][(index % 9)]) != 0)) { <FIXE>
<FIXS> } if (time < (min)) { min = time; } <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> setDescription(message); <FIXE>
<FIXS> <FIXE> <FIXS> obligations.addAll(getObligations(exprsMap)); <FIXE>
<FIXS> public static com.sensia.swetools.editors.sensorml.client.panels.charts.ISensorChart createChart(com.sensia.swetools.editors.sensorml.client.panels.widgets.AbstractSensorElementWidget root) { <FIXE> <FIXS> chart = com.sensia.swetools.editors.sensorml.client.panels.charts.versusline.SWESensorDataArrayVersusLineHelper.create1LineVersusChart(root, fields.get(0), fields.get(1)); <FIXE>
<FIXS> public void showBreakTimeDlg() { <FIXE> <FIXS> scs71.com.scscws.ui.main_menu.break_time_dlg.BreakTimeDlg dlg = scs71.com.scscws.ui.main_menu.break_time_dlg.BreakTimeDlg.newInstance(this); <FIXE>
<FIXS> owo.com.androidunittest.targets.A b = org.mockito.Mockito.spy(new owo.com.androidunittest.targets.A()); <FIXE> <FIXS> junit.framework.Assert.assertTrue(org.mockito.Mockito.mockingDetails(b).isMock()); <FIXE>
<FIXS> ((de.uulm.dbis.coaster2go.activities.AttractionOverviewActivity) (getActivity())).progressBar.hide(); <FIXE>
<FIXS> <FIXE>
<FIXS> java.lang.String result = mc.getPossibleState(); assertTrue(((result == "bar") || (result == "foobar"))); <FIXE>
<FIXS> <FIXE>
<FIXS> saleService.applySales(order); <FIXE>
<FIXS> int randomPosition = com.blackwolves.seeder.YahooRunnable.randInt(0, ((msgs.size()) >= 50 ? 49 : (msgs.size()) == 0 ? 0 : (msgs.size()) - 1)); <FIXE>
<FIXS> <FIXE>
<FIXS> if (user != null) { if ((user.getName()) != "default") { java.lang.String string = (("Name: " + (user.getName())) + " Age: ") + (user.getAge()); setImage(user); textView.setText(string); }else { } <FIXE>
<FIXS> public void checkMovement2Started() { <FIXE>
<FIXS> synchronized(org.blockartistry.mod.DynSurround.client.AuroraEffectHandler.auroras) { if (((org.blockartistry.mod.DynSurround.client.AuroraEffectHandler.auroraDimension) != (data.dimensionId)) || ((org.blockartistry.mod.DynSurround.client.EnvironStateHandler.EnvironState.getDimensionId()) != (data.dimensionId))) { org.blockartistry.mod.DynSurround.client.AuroraEffectHandler.auroras.clear(); org.blockartistry.mod.DynSurround.client.AuroraEffectHandler.currentAurora = null; org.blockartistry.mod.DynSurround.client.AuroraEffectHandler.auroraDimension = data.dimensionId; } org.blockartistry.mod.DynSurround.client.AuroraEffectHandler.auroras.add(data); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> return false; <FIXE>
<FIXS> if (points != null) { int mx = (points.get(0).x) - (creature.x); int my = (points.get(0).y) - (creature.y); creature.moveBy(mx, my, 0); } <FIXE>
<FIXS> ipConnectionLists.put(address, pool); <FIXE>
<FIXS> <FIXE>
<FIXS> wowStatText.setText((wowCount + " WoWs")); <FIXE>
<FIXS> net.stigmod.service.ValueNode valueNode = getValueNodeByNameWithoutSaving(ccmId, icmId, valueName, valueNodePool, relationNode, null); <FIXE>
<FIXS> bundle.putString(com.example.adriftbookclient.oobhomeworkclient.LoginFragment.USER_NAME, userNameEt.getText().toString().trim()); bundle.putString(com.example.adriftbookclient.oobhomeworkclient.LoginFragment.PASSWORD, passwordEt.getText().toString().trim()); <FIXE>
<FIXS> else return false; <FIXE> <FIXS> return (a == ((tuple.length) - 1)) && (b == 1); <FIXE>
<FIXS> if (record == null) return ; <FIXE>
<FIXS> waiting = 0; <FIXE>
<FIXS> int scaleFactor = java.lang.Math.max(1, (32 / (java.lang.Math.max(3, java.lang.Math.max(m.width, m.height))))); <FIXE>
<FIXS> public void applyFigure(final hrytsak.xo.model.Field field, final java.awt.Point point, final hrytsak.xo.model.Figure figure) throws hrytsak.xo.model.exception.AlreadyOccupiedException, hrytsak.xo.model.exception.InvalidPointException { <FIXE>
<FIXS> tileSourcePreference.setSummary(((((getString(R.string.map_tile_source_descr)) + " [") + (osmandSettings.MAP_TILE_SOURCES.get())) + "]")); <FIXE>
<FIXS> <FIXE>
<FIXS> org.apache.openmeetings.db.entity.server.Sessiondata sessionData = sessionDao.get(remoteHash); <FIXE>
<FIXS> java.util.List<org.opentosca.model.instancedata.ServiceInstance> serviceInstances = this.getServiceInstances(serviceInstanceID, null, null); <FIXE>
<FIXS> if (e != null) { if (e instanceof org.inaetics.dronessimulator.gameengine.common.state.HealthGameEntity) { org.inaetics.dronessimulator.gameengine.common.state.HealthGameEntity healthGameEntity = ((org.inaetics.dronessimulator.gameengine.common.state.HealthGameEntity) (e)); healthGameEntity.damage(damage); }else { org.apache.log4j.Logger.getLogger(org.inaetics.dronessimulator.gameengine.physicsenginedriver.PhysicsEngineDriver.class).error(((("Tried to damage an entity without hp! Got: " + entityId) + " ") + e)); } <FIXE> <FIXS> <FIXE>
<FIXS> return new edu.petrov.gojavaonline.calculator.BigInteger(); <FIXE>
<FIXS> if (!(inTransaction())) <FIXE>
<FIXS> java.lang.String buildScopeString(java.util.Collection<java.lang.String> scopes, java.lang.String username, java.lang.String realm) { <FIXE>
<FIXS> if ((mMap) != null) { newCircle = mMap.addCircle(circleOptions); } <FIXE>
<FIXS> array[i] = i; <FIXE>
<FIXS> if (hasPlayerWon(currentPlayer)) { winMessage = (currentPlayer.getName()) + " wins!"; return true; } <FIXE> <FIXS> <FIXE>
<FIXS> java.lang.System.out.print(e.toString()); <FIXE>
<FIXS> if (stealBlock.compareAndSet(((md.stealFromBlockIndex) - 1), item, null)) { <FIXE>
<FIXS> sdf.makeFile("graph.dot", i); <FIXE>
<FIXS> <FIXE>
<FIXS> cacheDescriptor(nullDescriptor); <FIXE>
<FIXS> org.apache.zookeeper.server.quorum.QuorumStateHelper.Message message = new org.apache.zookeeper.server.quorum.QuorumStateHelper.Message(state, peer); messages.offer(message); <FIXE>
<FIXS> com.google.common.collect.ImmutableSet<dagger.internal.codegen.Binding> immutableOwnedBindings = com.google.common.collect.ImmutableSet.<dagger.internal.codegen.Binding>copyOf(ownedBindings); <FIXE>
<FIXS> keyId = this.localToken.decodeIdentifier().getKeyId(); <FIXE>
<FIXS> <FIXE>
<FIXS> com.gmail.edenthink.tools.Util.printSQLError(e); <FIXE>
<FIXS> myListIngredientsMap.get((listName + (conor.navigationdrawer.Database.MY_LIST_INGREDIENTS))).remove(ingredient); <FIXE>
<FIXS> <FIXE>
<FIXS> if ((max == null) || ((comp.compare(point, max)) > 0)) { <FIXE>
<FIXS> }else { <FIXE> <FIXS> refreshTable(); } <FIXE>
<FIXS> java.lang.System.out.println(blocksOpen); <FIXE>
<FIXS> return !isEverythingFilled ? false : !(tabGroupView.getSelectedItem().equals(tabGroupDefaultOption)); <FIXE>
<FIXS> for (int x = x0; x < (x0 + width); x += 10) { for (int y = y0 - height; y < y0; y += 10) { <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> com.livae.util.Tuple<com.livae.util.tree.BtreePage<java.lang.Integer>, java.lang.Integer> root = createFullTree(tree, levels, nodesPerPage, 1); <FIXE>
<FIXS> <FIXE>
<FIXS> public static void giveItem(net.minecraft.world.World world, net.minecraft.entity.player.EntityPlayer player, net.minecraft.util.BlockPos pos, net.minecraft.item.ItemStack oldStack) { <FIXE>
<FIXS> if (((tower.getX()) == x) && ((tower.getY()) == y)) { <FIXE> <FIXS> iter.remove(); return ; } <FIXE>
<FIXS> if ((velocityPID.getSetpoint()) < 0) { velocity = -velocity; } <FIXE>
<FIXS> public org.springframework.http.ResponseEntity<za.org.grassroot.webapp.model.rest.ResponseWrappers.ResponseWrapper> registerUser(@za.org.grassroot.webapp.controller.rest.PathVariable(value = "phoneNumber") <FIXE>
<FIXS> int middle = (max + min) / 2; <FIXE> <FIXS> n.left = com.emajar.trees.CreateBalancedTree.createBalancedTree(array, min, (middle - 1)); <FIXE> <FIXS> return n; <FIXE>
<FIXS> final java.util.List<org.gitlab.api.models.GitlabMergeRequest> l = _responses.get(project.getId()); <FIXE>
<FIXS> continue; <FIXE>
<FIXS> public java.lang.Iterable<T> getBuildsAfter(int n) { <FIXE>
<FIXS> android.widget.TextView tv = ((android.widget.TextView) (view.findViewById(R.id.person_name))); <FIXE> <FIXS> <FIXE>
<FIXS> if ((books) != null) { books.remove(position); notifyDataSetChanged(); } <FIXE>
<FIXS> curr.setLeft(add(curr.getLeft(), t)); <FIXE> <FIXS> curr.setRight(add(curr.getRight(), t)); <FIXE> <FIXS> return curr; <FIXE>
<FIXS> @java.lang.SuppressWarnings(value = "resource") <FIXE> <FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> if ((diaVirada) > (diaVencimento)) { cDataCobranca.add(java.util.Calendar.MONTH, 1); } <FIXE>
<FIXS> com.google.common.truth.Truth.assertThat(dagger.internal.codegen.writer.ClassName.fromTypeElement(element).canonicalName()).isEqualTo("java.lang.Object"); <FIXE>
<FIXS> if ((bond != null) && (!(lockedHosts.contains(bond.host)))) { <FIXE>
<FIXS> if (!(super.next())) { <FIXE> <FIXS> return true; <FIXE>
<FIXS> this.identifiers = identifiers; <FIXE> <FIXS> identifierListAdapter = new com.mifos.mifosxdroid.adapters.IdentifierListAdapter(getActivity(), this.identifiers, clientId, this); <FIXE>
<FIXS> org.ejml.ops.CommonOps.scale((1 / (acing)), acgyro, vr_a); <FIXE>
<FIXS> if (joint == null) continue; <FIXE>
<FIXS> if (obj.equals(ref.get())) { <FIXE>
<FIXS> this.coordinator.updatePatternSubscription(metadata.fetch()); <FIXE> <FIXS> <FIXE>
<FIXS> if ((stack != null) && (amount > 0)) { <FIXE>
<FIXS> return (com.nextprot.api.isoform.mapper.utils.SequencePositionMapper.checkSequencePosition(sequence, pos, false)) && (sequence.startsWith(aas, (pos - 1))); <FIXE>
<FIXS> java.lang.String json = objectMapper.writeValueAsString(this); <FIXE>
<FIXS> assertEquals(0, realmResults.size()); <FIXE>
<FIXS> if (!(removed.isEmpty())) { <FIXE> <FIXS> stickyChanged(oldEntry, newEntry); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> public static void select(com.google.gwt.user.client.ui.ListBox cbo, java.lang.String value) { <FIXE> <FIXS> if (cbo.getValue(i).equals(value)) { <FIXE>
<FIXS> return ret; <FIXE>
<FIXS> <FIXE>
<FIXS> }else { shipSunk = false; } <FIXE>
<FIXS> if ((campData.dayEnd) < currentDay) <FIXE>
<FIXS> java.util.List<edu.nju.logic.vo.AnswerVO> answerVOs = new java.util.ArrayList<>(); <FIXE>
<FIXS> Customize.log.error((("HUDItem " + name) + " isn't in the registry. Skipping")); <FIXE>
<FIXS> if ((wayPoint.getHeight()) != null) { position.setHeight(wayPoint.getHeight()); } <FIXE>
<FIXS> return new java.lang.Float(obj.getProgress()); <FIXE>
<FIXS> edu.clemson.cs.rsrg.absyn.expressions.Exp newWhere = null; if ((myWhereExp) != null) { newWhere = ((edu.clemson.cs.rsrg.absyn.expressions.mathexpr.MathExp) (myWhereExp)).remember(); } <FIXE>
<FIXS> for (final com.alliander.osgp.adapter.ws.schema.smartmetering.monitoring.PeriodicMeterReadsGas m : source.getPeriodicMeterReadsGas()) { <FIXE>
<FIXS> if (player != null) { player.sendMessage(((org.bukkit.ChatColor.RED) + "That lore can not be found!")); } <FIXE>
<FIXS> try (java.io.InputStream fin = getClass().getResourceAsStream("resources/blankmap.png")) { <FIXE> <FIXS> java.lang.System.out.println(e.toString()); <FIXE>
<FIXS> getUser(user); <FIXE>
<FIXS> return (value) != null ? value.equals(that.value) : (that.value) == null; <FIXE>
<FIXS> price = price.add(getDetailPrice(detail, actualCostBatch)); <FIXE>
<FIXS> if (((distanceToNextDestination) - (currentSpeed)) > 0) { <FIXE>
<FIXS> public static void addMessag(java.lang.String message, org.safs.tools.mail.Mailer.MimeType msg_type, java.util.Map<java.lang.Integer, org.safs.tools.mail.Mailer.MimeContent> contents) { <FIXE>
<FIXS> if ((tableRows.get(i)) != null) { calorieTable.addView(tableRows.get(i), new android.widget.TableLayout.LayoutParams(android.widget.TableRow.LayoutParams.WRAP_CONTENT, android.widget.TableRow.LayoutParams.WRAP_CONTENT)); } <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> java.lang.String tabela_string = ""; if (this.tabelaRoteamento.isEmpty()) { tabela_string = "!"; }else { <FIXE>
<FIXS> <FIXE> <FIXS> players.remove(playerID); <FIXE>
<FIXS> <FIXE> <FIXS> final com.pi4j.io.w1.W1Device w1Devicea2 = createDevice("28-00000698ebb1"); <FIXE>
<FIXS> result.putExtra(com.ivanchug.moneytracker.AddActivity.RESULT_ITEM, new com.ivanchug.moneytracker.api.Item(name.getText().toString(), java.lang.Integer.valueOf(amount.getText().toString()), type, this)); <FIXE>
<FIXS> <FIXE>
<FIXS> private static java.lang.String FormatText(java.lang.Object text) { <FIXE>
<FIXS> <FIXE>
<FIXS> final K key = entry.getKey(); remove(key); put(key, entry.getValue()); <FIXE>
<FIXS> distanceButton.setChecked(true); <FIXE>
<FIXS> <FIXE>
<FIXS> boolean persistService = prefs.getBoolean(PERSIST_SERVICE, false); <FIXE>
<FIXS> com.github.amihalik.rya.mongo.debugging.serialization.RdfHandlerCounter.log.info(((numberFormat.format(count)) + " statements written")); <FIXE>
<FIXS> if (url == null) { <FIXE> <FIXS> ru.codeninja.proxyapp.connection.ProxyConnection connection = urlConnection.connect(url); if (connection == null) { }else { responseHeadersManager.sendHeaders(resp, connection); ru.codeninja.proxyapp.response.writer.ResponseWriter responseWriter = responseWriterFactory.get(connection); responseWriter.sendResponse(connection, resp); } <FIXE>
<FIXS> try { iterator = projector.apply(iterator); } catch (java.lang.Throwable t) { consumer.accept(null, t); return ; } <FIXE>
<FIXS> resetCurrentProcessList(false); <FIXE>
<FIXS> itemValues.addItem(field.getName(), java.lang.String.valueOf(getResult())); <FIXE>
<FIXS> public void leafNode(final java.lang.String localName, final java.lang.Object value) throws java.io.IOException { <FIXE>
<FIXS> <FIXE>
<FIXS> adapter = new com.example.administrator.searchpicturetool.presenter.adapter.MyPagerAdapter(getView(), fragmentManager); <FIXE>
<FIXS> private boolean setFormModelObject(org.apache.openmeetings.db.entity.calendar.Appointment a, org.apache.wicket.core.request.handler.IPartialPageRequestHandler target) { <FIXE>
<FIXS> int[] array = new int[java.lang.Integer.parseInt(args[0])]; <FIXE>
<FIXS> <FIXE>
<FIXS> conn = mock(org.talend.core.model.process.IConnection.class); <FIXE>
<FIXS> public void setParameters(final java.lang.String name, final uk.ac.diamond.scisoft.analysis.rcp.inspector.SliceProperty property, final uk.ac.diamond.scisoft.analysis.dataset.ILazyDataset axis, final uk.ac.diamond.scisoft.analysis.rcp.inspector.SliceProperty[] properties, boolean used) { this.name = name; <FIXE>
<FIXS> <FIXE>
<FIXS> int queryEnd = queryStart + (h.getQueryLength()); <FIXE>
<FIXS> mp.start(); <FIXE>
<FIXS> <FIXE>
<FIXS> aLinkerContext.linkClass(getObjectType()); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> junit.framework.TestCase.assertTrue(((currentDivider + 5) == (healthBar.getDivider()))); <FIXE>
<FIXS> DataHolder.Autonomous auto = new DataHolder.Autonomous(defense, shotsMadeLow, shotsMadeHigh, breach.isChecked(), reach.isChecked()); <FIXE>
<FIXS> public synchronized float[] get(int processor, int channel) { <FIXE> <FIXS> data[0] = 1; }else data[0] = 0; return data; <FIXE>
<FIXS> if ((list.containsKey(name)) && ((list.get(name)) instanceof com.google.codeu.codingchallenge.JSON)) <FIXE> <FIXS> list.put(name, value); <FIXE>
<FIXS> res = new com.uber.tchannel.messages.RawResponse(errorResponse); <FIXE>
<FIXS> if (null != switchCallback) { switchCallback.execute(); } <FIXE>
<FIXS> if (c.getName().equals(name)) { <FIXE>
<FIXS> java.lang.String[] topics = new java.lang.String[]{ "placeArmies" , "attackPhase" , "" }; <FIXE>
<FIXS> tempRepository = org.repositoryminer.utility.FileUtils.copyFolderToTmp(repositoryFolder.getAbsolutePath(), repository.getName()); <FIXE>
<FIXS> if (otherEvent == null) { return false; } <FIXE>
<FIXS> org.junit.Assert.fail(); <FIXE>
<FIXS> for (int i = 0; i < numBytes; i++) <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> java.lang.System.out.println(MyURL.URL_MAYBE_TASK_BAD); <FIXE>
<FIXS> return new com.prince.custommap.AutoCompleteAdapter.PredictionHolder(convertView); <FIXE>
<FIXS> jsonEncoder = org.apache.avro.io.EncoderFactory.get().jsonEncoder(this.schema, baos); <FIXE>
<FIXS> return retVal; <FIXE>
<FIXS> while (this.rankedSubpopulations.get(i).contains(solution)) { <FIXE> <FIXS> } <FIXE>
<FIXS> private static boolean requiresErrorChecking(java.lang.Throwable t) { <FIXE>
<FIXS> <FIXE>
<FIXS> for (int i = 1; i <= (main.Main.numCars); i++) { <FIXE>
<FIXS> org.junit.Assert.assertEquals("hello", mapProxy.get(1)); <FIXE>
<FIXS> org.junit.Assert.assertEquals(null, user.getVersion()); <FIXE>
<FIXS> partypeople.Comment temp = comment.getValue(); if (temp != null) { result.add(temp); } <FIXE>
<FIXS> boolean result = false; <FIXE> <FIXS> if (cursor != null) { result = cursor.moveToFirst(); cursor.close(); } <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> throw new org.eclipse.ecf.core.util.ECFException(("Could not create socket to connect to id=" + remote), e); <FIXE>
<FIXS> <FIXE>
<FIXS> java.io.File image = new java.io.File(storageDirectory, (fileName + ".jpg")); <FIXE>
<FIXS> io.minio.MinioClient client = new io.minio.MinioClient(server.url("")); <FIXE>
<FIXS> java.lang.System.out.println(markedLobby); <FIXE>
<FIXS> <FIXE> <FIXS> return index < 0 ? failureReason : failureReason.substring(0, index).trim(); <FIXE>
<FIXS> while (true) { if ((current) == null) { return -1; } int result = current.read(); if (result != (-1)) { return result; } advance(); } <FIXE>
<FIXS> assert (item.getEndDate()) != null; <FIXE>
<FIXS> T ret = message.get(); if (ret == null) { <FIXE> <FIXS> message.set(null); <FIXE>
<FIXS> if (updates == null) return null; <FIXE>
<FIXS> <FIXE>
<FIXS> title = ((title) == null) ? "" : title.replace("\n", ""); shortUrl = shortUrl.replace("\n", ""); textOption = textOption.replace("\n", ""); <FIXE>
<FIXS> final java.util.Date d = org.onebrick.android.helpers.DateTimeFormatter.dateFormat.parse(onebrickDate); <FIXE>
<FIXS> main.java.Task task = main.java.Controller.getInstance().getDisplayedTasks().get((editIndex - 1)); <FIXE>
<FIXS> long res = edu.ucsd.sccn.LSL.inst.lsl_pull_chunk_i(obj, data_buffer, timestamp_buffer, data_buffer.length, timestamp_buffer.length, timeout, ec); <FIXE>
<FIXS> return ; <FIXE>
<FIXS> @java.lang.Override <FIXE> <FIXS> progressBar.setVisibility(View.GONE); refresh(); <FIXE>
<FIXS> return ; } if (event instanceof plugin.events.GamePluginEvent) { plugin.events.GamePluginEvent evt = ((plugin.events.GamePluginEvent) (event)); if ((evt.context()) == null) { evt.context_$eq(context); <FIXE> <FIXS> super.post(evt); return ; } super.post(event); <FIXE>
<FIXS> <FIXE>
<FIXS> public void createLoaders(java.util.ArrayList<com.lab.flickr.network.Loader> loaders) { <FIXE> <FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> initNotification(); <FIXE>
<FIXS> public void validate_shouldFailValidationIfAllFieldsNull() throws java.lang.Exception { <FIXE> <FIXS> <FIXE>
<FIXS> if (!(academics.inArchive())) { <FIXE>
<FIXS> <FIXE> <FIXS> player = null; playerName = null; <FIXE>
<FIXS> if ((their_answer != null) && (their_answer.toLowerCase().equals(answer.toLowerCase()))) <FIXE>
<FIXS> return members; <FIXE>
<FIXS> boolean checkPermissions() { <FIXE> <FIXS> return true; <FIXE> <FIXS> return false; <FIXE> <FIXS> <FIXE> <FIXS> return true; <FIXE>
<FIXS> java.io.FileInputStream stream = new java.io.FileInputStream(bpelDeploymentContext.getBpelArchive()); latestBPELArchive.setContent(stream); <FIXE>
<FIXS> java.util.Set<com.softserve.academy.spaced.repetition.domain.Deck> decks = folder.getDecks(); <FIXE>
<FIXS> fieldParent = field.getName(); <FIXE>
<FIXS> java.lang.String key = getUserKey(newUserId); <FIXE>
<FIXS> public <T> T get(java.lang.String key, java.lang.Class<T> type) { org.graylog2.cluster.ClusterConfig config = dbCollection.findOne(org.mongojack.DBQuery.is("type", key)); <FIXE> <FIXS> org.graylog2.cluster.ClusterConfigServiceImpl.LOG.debug("Couldn't find cluster config of type {}", key); <FIXE> <FIXS> org.graylog2.cluster.ClusterConfigServiceImpl.LOG.error("Couldn't extract payload from cluster config (type: {})", key); <FIXE>
<FIXS> if ((args1.role) == null) { return false; } <FIXE>
<FIXS> <FIXE>
<FIXS> flashScope.success("organization.updateSuccessful"); <FIXE>
<FIXS> if (topic == null) return new java.util.HashSet<org.araqne.logdb.cep.EventKey>(contexts.keySet()).iterator(); <FIXE>
<FIXS> mp.start(); <FIXE> <FIXS> <FIXE>
<FIXS> items = dao.listar(); <FIXE>
<FIXS> file = readLine("Learn from file [or #cancel to cancel]: "); <FIXE>
<FIXS> if ((snapshot.length) > 0) { fDataset.addSeries(DensityHistogramLoader.DATASET_NAME, snapshot, DensityHistogramLoader.NUMBER_OF_BINS); } <FIXE>
<FIXS> java.lang.String pref = event.getServletContext().getRealPath("/"); <FIXE>
<FIXS> public org.tradingsocial.model.User login(java.lang.String emailAddress, java.lang.String password) { <FIXE> <FIXS> return user; <FIXE>
<FIXS> searchTask.execute(etSearch.getText().toString(), getActivity().getIntent().getExtras().getString("Token").trim()); <FIXE>
<FIXS> questionStack.remove(((questionStack.size()) - 1)); completedQuestionsLookup.remove(q.getId()); <FIXE>
<FIXS> assert !(d.getErrorLog().equals("")); <FIXE>
<FIXS> double b; <FIXE> <FIXS> b = 0.5; <FIXE>
<FIXS> nodes.remove(3, nodes.size()); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> mCurrentSelectedComponent = null; <FIXE>
<FIXS> public synchronized java.lang.Object getMember(orc.values.Field f) { <FIXE> <FIXS> return out; <FIXE>
<FIXS> int[] input1 = new int[]{ 1 , 0 , 0 , 1 , 1 , 0 }; int[] input2 = new int[]{ 0 , 1 , 1 , 0 , 1 , 1 }; <FIXE>
<FIXS> T removedValue = this.elements[((this.count) - 1)]; <FIXE>
<FIXS> if ((monthRv) == null) { this.day = day; this.year = year; this.month = month; }else { new gr.kokeroulis.androiddatetime.AsyncTaskHelper(month, monthRv).execute(monthAdapter); new gr.kokeroulis.androiddatetime.AsyncTaskHelper(year, yearRv).execute(yearAdapter); updateDayAdapter(day, month, year, true); } <FIXE>
<FIXS> fsURIs.remove(fs.getId().toString()); <FIXE>
<FIXS> org.epo.ocr.utils.XMLHelper.LOG.error("nodeToString Transformer Exception"); <FIXE>
<FIXS> if (null != ref) { toWrap.add(ref); } <FIXE>
<FIXS> @net.smartcosmos.dao.things.repository.Test <FIXE> <FIXS> assertFalse(entityList.isEmpty()); assertEquals(1, entityList.size()); assertEquals(id, entityList.get(0).getId()); <FIXE>
<FIXS> java.lang.String uri = l.table.get(s); <FIXE>
<FIXS> if (intent == null) return ; <FIXE>
<FIXS> public java.lang.String genSql() throws java.io.IOException, java.lang.IllegalAccessException, java.lang.InstantiationException, java.lang.reflect.InvocationTargetException { <FIXE> <FIXS> return sql; <FIXE>
<FIXS> <FIXE>
<FIXS> return cfg.get(category, field.getName(), com.google.common.primitives.Doubles.toArray(java.util.Arrays.asList(((java.lang.Double[]) (net.minecraftforge.common.config.TypeAdapters.TypeAdapter.getObject(instance, field))))), comment); <FIXE>
<FIXS> grid.getHorizontalBar().setSelection(java.lang.Math.min(grid.getHorizontalBar().getMaximum(), ((grid.getHorizontalBar().getSelection()) + 1))); <FIXE>
<FIXS> com.verivital.hyst.junit.ModelParserTest.flatten(com.verivital.hyst.importer.SpaceExImporter.importModels((path + "const_model.cfg"), (path + "const_model.xml"))); <FIXE>
<FIXS> public boolean hasCoordonate() { return ((((((this.x) != null) && ((this.x) != 0.0)) && ((this.y) != null)) && ((this.y) != 0.0)) && ((this.z) != null)) && ((this.z) != 0.0); <FIXE>
<FIXS> <FIXE>
<FIXS> controller.processEvent(TetrisController.InputEvent.ROTATE_LEFT); else <FIXE> <FIXS> <FIXE>
<FIXS> assertEquals((1L << (Store.FEAT_ENC_XTEA)), getBitField(db)); <FIXE>
<FIXS> return javax.xml.bind.JAXB.unmarshal(typedInput.in(), ((java.lang.Class) (type))); <FIXE> <FIXS> <FIXE>
<FIXS> cost += (java.lang.Math.abs(((java.lang.Math.abs(target)) - (thisElevator.getCurrentFloor())))) * (no.ntnu.stud.torbjovn.elevator.CommandHandler.COST_EACH_FLOOR); <FIXE>
<FIXS> if (biomorph != null) for (int i = 0; i < (sliders.length); i++) sliders[i].setValue(biomorph.getGenes()[i].getValue()); <FIXE>
<FIXS> if (i.getResteurant().equals(name)) { <FIXE>
<FIXS> if (redBoat.equals(blueBoat)) { <FIXE>
<FIXS> <FIXE>
<FIXS> int taken = pendingTasks.drainTo(pt, value); <FIXE>
<FIXS> sb.append(delimiter); <FIXE>
<FIXS> if ((user.getAuthToken()) == null) <FIXE>
<FIXS> org.junit.Assert.assertThat(((org.eclipse.jface.viewers.StructuredSelection) (argument)).toList(), not(org.hamcrest.collection.IsCollectionContaining.hasItems(treeItemC.getData()))); <FIXE>
<FIXS> <FIXE>
<FIXS> Customize.log.error((("ID " + id) + " doesn't relate to a HudItem. Skipping")); <FIXE>
<FIXS> int x = i + 1; frames[i] = new org.newdawn.slick.Image((("pics/robot/fall " + x) + ".png")); <FIXE>
<FIXS> if (UsciteProperties.LISTA_COMPONENTI_TARIFFARIE_FIDEIUSSIONE.contains(idComponenteTariffaria.toString())) { <FIXE>
<FIXS> if (in == null) return null; <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> if (lt && gt) { <FIXE>
<FIXS> if (((input.length) < 1) || (i >= (input.length))) { <FIXE> <FIXS> return algo.linearsearch.LinearSearch.recursiveSearch(input, searchTarget, (i + 1)); <FIXE>
<FIXS> if ((cycle) >= (track.size())) { cycle = 0; } <FIXE>
<FIXS> if (position > (getFooterStartIndex())) { <FIXE>
<FIXS> final com.blackducksoftware.integration.hub.dataservice.scan.ScanStatusDataService scanStatusDataService = services.createScanStatusDataService(new com.blackducksoftware.integration.log.Slf4jIntLogger(logger)); <FIXE>
<FIXS> public void fetchRandomDeck(final com.blstream.studybox.database.DataProvider.OnDecksReceivedListener<com.blstream.studybox.model.database.Decks> listener) { com.blstream.studybox.api.RestClientManager.getRandomDeck(true, new com.blstream.studybox.api.RequestCallback(new com.blstream.studybox.api.RequestListener<com.blstream.studybox.model.database.Decks>() { <FIXE> <FIXS> public void onSuccess(com.blstream.studybox.model.database.Decks response) { <FIXE>
<FIXS> ps.setLong(1, invoicenumber); <FIXE>
<FIXS> prs.mecanica.fase.global.RegistradorInputProcessors.getInstance().adicionarControlavel(this.controlerAtual); <FIXE>
<FIXS> return ((((msg.getX()) == (com.example.chris.myapplication.MyoHelper.END_FLAG)) || ((msg.getY()) == (com.example.chris.myapplication.MyoHelper.END_FLAG))) || ((msg.getZ()) == (com.example.chris.myapplication.MyoHelper.END_FLAG))) || ((msg.getW()) == (com.example.chris.myapplication.MyoHelper.END_FLAG)); <FIXE>
<FIXS> mSectionsPagerAdapter = new com.ieeecsvit.riviera17android.activity.EventActivity.SectionsPagerAdapter(getSupportFragmentManager(), this, id); <FIXE>
<FIXS> popNotification(); <FIXE>
<FIXS> public void changeDateOfData(java.lang.Integer data_id, java.lang.Integer date) throws java.sql.SQLException { <FIXE> <FIXS> statement = con.createStatement(); statement.executeUpdate(update); <FIXE>
<FIXS> basket = orderService.getBasket(currentUser.getCustomer()); <FIXE>
<FIXS> if (((!(isKoma)) && (checker)) || (akhir)) { <FIXE>
<FIXS> com.orhanobut.tracklytics.AssertTracker.assertTrack(tracker).event("event").noTags().attribute("key", "method").attribute("key1", "method1").noSuperAttributes(); <FIXE>
<FIXS> public static void initMap(org.bukkit.map.MapView map) { <FIXE>
<FIXS> public static java.lang.String materialToString(org.bukkit.Material material) { <FIXE>
<FIXS> if (((medias.size()) > 0) && (!(medias.contains(null)))) <FIXE>
<FIXS> public void insertArticles(int id, java.lang.String articleId, java.lang.String articleTitle, java.lang.String articleCategory, java.lang.String articleTimeStamp) { <FIXE>
<FIXS> return ((prop.containsKey(com.jiang.android.push.utils.RomUtil.KEY_FLYME_ICON)) || (prop.containsKey(com.jiang.android.push.utils.RomUtil.KEY_FLYME_PUBLISHED))) || (prop.containsKey(com.jiang.android.push.utils.RomUtil.KEY_FLYME_FLYME)); <FIXE>
<FIXS> <FIXE>
<FIXS> this.repaint(); <FIXE>
<FIXS> it.unibas.lunatic.Scenario scenario = it.unibas.lunatic.test.UtilityTest.loadScenarioFromResources(References.RS_egd_dbms, true); <FIXE>
<FIXS> file.create(source, true, null); <FIXE>
<FIXS> java.lang.String action; if (null != (action = intent.getAction())) { if (action.equals(com.android.bluetooth.gatt.ScanManager.ACTION_REFRESH_BATCHED_SCAN)) { if (mBatchClients.isEmpty()) { return ; } flushBatchScanResults(mBatchClients.iterator().next()); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> return (intValue != null) && (intValue != (comparison)); <FIXE>
<FIXS> decryptMessage(org.votingsystem.signature.util.AESParams.load(org.votingsystem.util.JSON.getMapper().readValue(new java.lang.String(decryptedBytes), org.votingsystem.dto.AESParamsDto.class))); <FIXE>
<FIXS> java.lang.Thread.sleep(0); <FIXE>
<FIXS> in.readUTF(); return new org.chromium.chrome.browser.cookies.CanonicalCookie(in.readUTF(), in.readUTF(), in.readUTF(), in.readUTF(), in.readLong(), in.readLong(), in.readLong(), in.readBoolean(), in.readBoolean(), in.readInt(), in.readInt()); <FIXE>
<FIXS> <FIXE> <FIXS> java.util.logging.Logger.getLogger(Networking.Client.ConnectionHandler.class.getName()).log(java.util.logging.Level.SEVERE, null, ex2); <FIXE>
<FIXS> ((gui.StitchingExplorerPanel<?, ?>) (panel)).togglePreviewMode(false); <FIXE>
<FIXS> <FIXE> <FIXS> this.entities.removeAll(entitiesDestroyedInTick); <FIXE> <FIXS> entitiesDestroyedInTick.clear(); <FIXE>
<FIXS> <FIXE>
<FIXS> double value = (((inst.label) == null) || ("0".equals(inst.label))) ? inst.getResult("result") : -(inst.getResult("result")); <FIXE>
<FIXS> pl.edu.uj.fais.wpz.msom.model.ProcessingSystemMockup processingSystem = new pl.edu.uj.fais.wpz.msom.model.ProcessingSystemMockup(m, controllerUnitService, distributionService, modelService, moduleService, pathService, taskService, taskTypeService); <FIXE>
<FIXS> org.apache.commons.math3.complex.Complex actual = calculator.getMemory().getListVariableValue(variable).list().get(element); <FIXE>
<FIXS> if ((diffToWin) != 0) { if ((java.lang.Math.abs((score - (java.lang.Integer.valueOf(java.lang.String.valueOf(scoresArray.get(i))))))) >= (diffToWin)) { b = true; } <FIXE>
<FIXS> if (x >= 0) { <FIXE>
<FIXS> int end = ipInfo.indexOf(com.github.pedrovgs.androidwifiadb.adb.ADBParser.END_DEVICE_IP_INDICATOR); int start = (ipInfo.indexOf(com.github.pedrovgs.androidwifiadb.adb.ADBParser.START_DEVICE_IP_INDICATOR)) + 5; return ipInfo.substring(start, end); <FIXE>
<FIXS> if ((mCamera) != null) { android.hardware.Camera.Parameters parameters = mCamera.getParameters(); parameters.setPreviewSize(mPreviewSize.width, mPreviewSize.height); requestLayout(); mCamera.setParameters(parameters); mCamera.startPreview(); } <FIXE>
<FIXS> semaphoreList.get(((getNumberOfSemaphores()) - 1)).release(); <FIXE>
<FIXS> super.setQName(qName); <FIXE>
<FIXS> <FIXE>
<FIXS> do { java.lang.System.out.println("Enter the name of the product"); java.lang.String productDescription = input.nextLine(); java.lang.System.out.println("Enter the price of the product"); double productPrice = input.nextDouble(); java.lang.System.out.println("Enter the quantity that you're buying"); int quantity = input.nextInt(); input.nextLine(); java.lang.String receiptLine = java.lang.String.format("%s $%.2f %d", productDescription, productPrice, quantity); java.lang.System.out.println(receiptLine); } while (true ); <FIXE>
<FIXS> isByObject = true; <FIXE>
<FIXS> <FIXE>
<FIXS> init(); <FIXE>
<FIXS> return (i[0]) / 1000; <FIXE> <FIXS> return videoFps; <FIXE>
<FIXS> if (java.util.Arrays.equals(element, array)) { return true; <FIXE> <FIXS> return false; <FIXE>
<FIXS> while (index.isIndexed(s)) { <FIXE> <FIXS> } <FIXE>
<FIXS> int randomWidth = ((int) ((java.lang.Math.random()) * (this.width))); int randomHeight = ((int) ((java.lang.Math.random()) * (this.height))); <FIXE>
<FIXS> if ((isPlayerOnly()) && (!((sender.getCommandSenderEntity()) instanceof net.minecraft.entity.player.EntityPlayer))) <FIXE>
<FIXS> org.springframework.data.domain.Page<net.smartcosmos.dao.things.domain.ThingEntity> entityPage = repository.findByTenantIdAndType(tenantId, type, null); <FIXE>
<FIXS> document = nl.knaw.huygens.tei.Document.createFromXml(textDecorationFixed, false); return traverse(document); <FIXE>
<FIXS> }else if ((event.getId()) == null) { timeTableManager.addTimeTableToWorker(worker.getId(), event.getTt()); }else { timeTableManager.saveTimeTable(event.getTt()); } <FIXE>
<FIXS> presenter.joinGroup(new com.pedrodavidlp.footballmanager.domain.model.Group(nameGroup.getText().toString(), passGroup.getText().toString(), 0, 0), new com.pedrodavidlp.footballmanager.domain.model.Player(com.pedrodavidlp.footballmanager.data.UserRepository.currentNickname, 0, false, false)); <FIXE>
<FIXS> <FIXE> <FIXS> return null; <FIXE>
<FIXS> <FIXE> <FIXS> updateFamilyMembership(entity, true); <FIXE>
<FIXS> if (((VEL1) != null) && ((pcchatapp.getAuth()) != null)) <FIXE>
<FIXS> private void onError(final java.lang.String errorMessage) { <FIXE> <FIXS> android.widget.Toast.makeText(this, errorMessage, Toast.LENGTH_LONG).show(); <FIXE>
<FIXS> dataAccess.deleteSearch(SearchSpace.vipFqdn, (((workItem.getVip().dns) + ".") + (workItem.getVip().domain))); <FIXE>
<FIXS> org.openhab.binding.innogysmarthome.handler.InnogyBridgeHandler.Initializer i = new org.openhab.binding.innogysmarthome.handler.InnogyBridgeHandler.Initializer(this); <FIXE>
<FIXS> <FIXE>
<FIXS> for (java.util.Iterator<com.cmput301.cs.project.models.Claim> iterator = mClaims.iterator(); iterator.hasNext();) { <FIXE> <FIXS> } <FIXE>
<FIXS> if (month < 1) { return null; } <FIXE> <FIXS> c.set(year, (month - 1), date, hourOfDay, minute, second); <FIXE>
<FIXS> resumeProgress = -1; if (progress == 0.0F) { mediaPlayer.seekTo(0); return ; } <FIXE> <FIXS> <FIXE>
<FIXS> int blockingNumber = 1; <FIXE>
<FIXS> return new net.filebot.similarity.SimilarityMetric[]{ net.filebot.similarity.EpisodeMetrics.FileSize , new net.filebot.similarity.MetricCascade(net.filebot.similarity.EpisodeMetrics.FileName, net.filebot.similarity.EpisodeMetrics.EpisodeFunnel) , net.filebot.similarity.EpisodeMetrics.EpisodeBalancer , net.filebot.similarity.EpisodeMetrics.AirDate , net.filebot.similarity.EpisodeMetrics.MetaAttributes , net.filebot.similarity.EpisodeMetrics.SubstringFields , net.filebot.similarity.EpisodeMetrics.NameBalancer , net.filebot.similarity.EpisodeMetrics.SeriesName , net.filebot.similarity.EpisodeMetrics.RegionHint , net.filebot.similarity.EpisodeMetrics.Numeric , net.filebot.similarity.EpisodeMetrics.NumericSequence , net.filebot.similarity.EpisodeMetrics.SeriesRating , net.filebot.similarity.EpisodeMetrics.TimeStamp , net.filebot.similarity.EpisodeMetrics.AbsolutePath }; <FIXE> <FIXS> return new net.filebot.similarity.SimilarityMetric[]{ net.filebot.similarity.EpisodeMetrics.EpisodeFunnel , net.filebot.similarity.EpisodeMetrics.EpisodeBalancer , net.filebot.similarity.EpisodeMetrics.AirDate , net.filebot.similarity.EpisodeMetrics.MetaAttributes , net.filebot.similarity.EpisodeMetrics.SubstringFields , net.filebot.similarity.EpisodeMetrics.NameBalancer , net.filebot.similarity.EpisodeMetrics.SeriesName , net.filebot.similarity.EpisodeMetrics.RegionHint , net.filebot.similarity.EpisodeMetrics.Numeric , net.filebot.similarity.EpisodeMetrics.NumericSequence , net.filebot.similarity.EpisodeMetrics.SeriesRating , net.filebot.similarity.EpisodeMetrics.TimeStamp , net.filebot.similarity.EpisodeMetrics.AbsolutePath }; <FIXE>
<FIXS> if ((gameAccessObject.getCommandAmount(gameId)) == (interval)) { <FIXE>
<FIXS> @android.support.annotation.NonNull <FIXE> <FIXS> android.database.Cursor c = getContext().getContentResolver().query(tbd.getUri(), mProjection, mSelection, mSelectionArgs, mOrderBy); assert c != null; return c; <FIXE>
<FIXS> if (obj != null) { return ((java.lang.Boolean) (obj)); } <FIXE>
<FIXS> double classPred = 0; classPred = classifier.classifyInstance(dataset.instance(0)); <FIXE>
<FIXS> <FIXE>
<FIXS> return "0"; <FIXE>
<FIXS> sqlParser.SqlParser.jj_la1_0 = new int[]{ 0 , 0 , 0 , 256 , 256 , 0 , 0 , 25165824 , 0 , 0 , 0 , 0 , 0 , 25165824 , 2048 , 25165824 , 2048 , 0 , 25165824 , 0 , 0 , 7307264 , 0 , 0 , 16777216 , 2048 , 0 , 2048 , 0 , 1024 , 0 }; <FIXE>
<FIXS> android.util.Log.i("setUserVisibleHint", (((category) + ", isVisibleToUser:") + isVisibleToUser)); <FIXE> <FIXS> android.util.Log.i("setUserVisibleHint", ((category) + " is loading.")); <FIXE>
<FIXS> futures.put(f2sh, f2sh); if ((state) == (org.apache.tomcat.websocket.WsSession.State.OPEN)) { return ; <FIXE> <FIXS> if (f2sh.isDone()) { return ; <FIXE> <FIXS> java.io.IOException ioe = new java.io.IOException(org.apache.tomcat.websocket.WsSession.sm.getString("wsSession.messageFailed")); javax.websocket.SendResult sr = new javax.websocket.SendResult(ioe); f2sh.onResult(sr); <FIXE>
<FIXS> java.lang.System.out.println(super.getSimRoutes()); <FIXE> <FIXS> java.lang.System.out.println((("r: " + r) + (r.getViewId()))); <FIXE>
<FIXS> if ((turnSwitch.getComputer().getSelectedPokemon().getCurrentHealth()) <= 0) { <FIXE>
<FIXS> this.isValid = true; <FIXE>
<FIXS> <FIXE>
<FIXS> return com.google.common.base.Objects.equal(this.dischargeSummary, that.dischargeSummary); <FIXE>
<FIXS> org.exist.remoteconsole.RemoteConsoleServlet.LOG.error(("Error sending message via websocket: " + (e.getMessage())), e); <FIXE>
<FIXS> if (propertyList == null) { return null; } <FIXE>
<FIXS> org.bukkit.scoreboard.Score score = getPointsObjective().getScore(org.bukkit.Bukkit.getPlayer(uuid).getName()); <FIXE>
<FIXS> playedCards = false; <FIXE>
<FIXS> if ((!((stack1.getItem()) instanceof dk.mrspring.kitchen.item.food.ItemIceCreamableBase)) || (!((stack2.getItem()) instanceof dk.mrspring.kitchen.item.food.ItemIceCreamableBase))) <FIXE>
<FIXS> <FIXE>
<FIXS> if (e != null) { log.error(tag, ("stackTrace: " + (ngspipesengine.utils.Utils.getStackTrace(e)))); <FIXE> <FIXS> } <FIXE>
<FIXS> return new com.visenze.visearch.Box(((int) ((x1) * ratio)), ((int) ((y1) * ratio)), ((int) ((x2) * ratio)), ((int) ((y2) * ratio))); <FIXE>
<FIXS> java.lang.String content = document.getText(0, document.getLength()); qic.util.Util.overwriteFile(qic.util.Config.CONFIG_PROPERTIES_FILENAME, content); <FIXE>
<FIXS> double ratio = 0.0; <FIXE>
<FIXS> <FIXE> <FIXS> super.refresh(); <FIXE>
<FIXS> seng301.monstertrainer.Monster.setHunger(0); <FIXE>
<FIXS> private double[] sds(final double[] psis) { <FIXE>
<FIXS> if (!(entity instanceof net.minecraft.entity.passive.EntitySheep)) { <FIXE>
<FIXS> db.insert(DatabaseInfo.FRIENDS_TABLE, null, values); <FIXE> <FIXS> <FIXE>
<FIXS> if ((worldName != null) && (worldName.isEmpty())) { worldName = null; } <FIXE>
<FIXS> public static java.lang.String convertToStringFromBaseN(java.util.Queue<java.lang.String> digitsList, short baseNumber) { <FIXE> <FIXS> for (java.lang.String digits : digitsList) { <FIXE>
<FIXS> doReturn(null).when(rabbitManager).sendRpcMessage(any(), any(), any(), any()); <FIXE>
<FIXS> return (hPSHandle.GetRepertoryByKeyList(java.util.Arrays.asList("Bar_Code", "po_name", "isEnsure"), java.util.Arrays.asList(curBarcode, "Material_Supply", "1"))) + (GetProductOtherPoNotDepleteRepertory(curBarcode, po_name)); <FIXE>
<FIXS> edu.umass.cs.gnsclient.client.integrationtests.ServerIntegrationTest.failWithStackTrace("Exception creating ALL_GUIDS access for Barney's cell: ", e); <FIXE> <FIXS> edu.umass.cs.gnsclient.client.integrationtests.ServerIntegrationTest.failWithStackTrace("Exception when we were not expecting it in ACLPartTwo: ", e); <FIXE>
<FIXS> <FIXE>
<FIXS> for (int i = 0; i < 3; i++) { <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> ph1.setLocations(new java.util.ArrayList<org.Point>(java.util.Arrays.asList(p2))); org.junit.jupiter.api.Assertions.assertEquals(false, ph1.equals(ph2)); <FIXE>
<FIXS> public void enterAPIName(java.lang.String apiname) { <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> default : break; <FIXE>
<FIXS> list.add(ItemStack.EMPTY); <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> mockMvc = org.springframework.test.web.servlet.setup.MockMvcBuilders.standaloneSetup(todoController).setControllerAdvice(new com.myprojects.todo.controller.ExceptionHandlerAdvice()).build(); <FIXE>
<FIXS> rootJ.addProperty(Tags.Json.DATE, formatDate(element.getDate())); <FIXE>
<FIXS> if (savedInstanceState == null) { getSupportFragmentManager().beginTransaction().add(R.id.startscreenlayout, new com.bam.darkhouseextreme.app.fragments.StartScreenFragment(), "startScreen").commit(); } <FIXE>
<FIXS> puzzle[1][0] = true; <FIXE>
<FIXS> createDocuments(database, numDocs, false); <FIXE>
<FIXS> if ((ps.executeUpdate()) > 0) { <FIXE>
<FIXS> if ((rowIndex < 0) || (rowIndex > ((boundingBox.getHeight()) - 1))) { <FIXE> <FIXS> if ((columnIndex < 0) || (columnIndex > ((boundingBox.getWidth()) - 1))) { <FIXE>
<FIXS> public de.uni_freiburg.informatik.ultimate.logic.Term[] getInterpolants(final de.uni_freiburg.informatik.ultimate.logic.Term proofTree) { colorLiterals(); <FIXE>
<FIXS> <FIXE>
<FIXS> final de.be4.classicalb.core.parser.rules.PSubstitution newNode = createPositinedNode(createCounterExampleSubstitutions(node.getIdentifiers(), node.getWhere(), null, node.getMessage(), node.getErrorType()), node); <FIXE>
<FIXS> chars[0] = ((char) ((chars[0]) - (mysh.codegen.CodeUtil.alphaStep))); <FIXE>
<FIXS> return (((((m != null) && ((from) == (m.from))) && ((to) == (m.to))) && ((movedPiece) == (m.movedPiece))) && ((capturedPiece) == (m.capturedPiece))) && ((type) == (m.type)); <FIXE>
<FIXS> musicPlayer.playNewSong(songsTable.getSelectionModel().getSelectedItem(), musicPlayer.getLibrary().getTracksPointer(), musicPlayer.getLibrary().getTracksPointer().indexOf(songsTable.getSelectionModel().getSelectedItem())); <FIXE>
<FIXS> java.util.List<de.slackspace.openkeepass.domain.Property> properties = new java.util.ArrayList<de.slackspace.openkeepass.domain.Property>(); <FIXE>
<FIXS> public <T> javax.persistence.TypedQuery<T> where(java.lang.Class<T> cls, java.lang.String column, java.lang.Object value) { <FIXE>
<FIXS> long[] groupIds = getGroupIdsFromFacetConfiguration(); if (com.liferay.portal.kernel.util.ArrayUtil.isEmpty(groupIds)) { groupIds = getGroupIdsFromParameter(searchContext); <FIXE> <FIXS> <FIXE>
<FIXS> if (!(checkPermissions(request, response, roles))) { return ; } <FIXE>
<FIXS> if (!(org.quenlen.magic.MagicImage.isLibraryLoadSuccess())) { <FIXE>
<FIXS> com.jidesoft.utils.Lm.verifyLicense("Edward Kort", "WWIDesigner", "DfuwPRAUR5KQYgePf:CH0LWIp63V8cs2"); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> controllers.Register.r.setHeader(created.username, created.username); <FIXE>
<FIXS> return new org.springframework.http.ResponseEntity(jsonRepresentation, org.springframework.http.HttpStatus.BAD_REQUEST); <FIXE>
<FIXS> gui.MainWindow frame = new gui.MainWindow(role); <FIXE>
<FIXS> setOps.put(org.robolectric.shadows.ShadowMatrix.SCALE, ((((((sx + " ") + sy) + " ") + px) + " ") + py)); <FIXE>
<FIXS> com.google.gson.JsonObject jsonObject = sendQuery("Authorization", ("Bearer " + (clientAccessToken)), url); <FIXE>
<FIXS> retrieved obj = new retrieved(s1); <FIXE>
<FIXS> private void addRow() { <FIXE>
<FIXS> if ((get(meal.getId(), userId)) != null) { <FIXE>
<FIXS> java.util.List<se.walkercrou.places.Place> places = client.getNearbyPlaces(200, 500, 200, GooglePlaces.MAXIMUM_RESULTS); <FIXE>
<FIXS> collected.add(new cascading.tuple.TupleEntry(getDeclaredFields(), new cascading.tuple.Tuple(tuple))); <FIXE>
<FIXS> if (x >= (trials)) <FIXE>
<FIXS> if (favorites != null) { return favorites.toArray(new java.lang.String[favorites.size()]); } return null; <FIXE>
<FIXS> android.widget.Toast.makeText(getApplicationContext(), (("\u0422\u043e\u0440\u0433\u043e\u0432\u0430\u044f \u0442\u043e\u0447\u043a\u0430 \"" + (cShopItem[0])) + "\""), Toast.LENGTH_SHORT).show(); <FIXE>
<FIXS> <FIXE>
<FIXS> if (!(listCourses.isEmpty())) { prefs.setLastCourseSelected(position); es.ugr.swad.swadroid.model.Course courseSelected = ((es.ugr.swad.swadroid.model.Course) (listCourses.get(position))); courseCode = courseSelected.getId(); es.ugr.swad.swadroid.Global.setSelectedCourseCode(courseCode); es.ugr.swad.swadroid.Global.setSelectedCourseShortName(courseSelected.getShortName()); es.ugr.swad.swadroid.Global.setSelectedCourseFullName(courseSelected.getFullName()); createMenu(); } <FIXE>
<FIXS> return null; <FIXE>
<FIXS> if (childView != null) { final int position = rv.getChildAdapterPosition(childView); onItemClick(childView, position); return true; } return false; <FIXE>
<FIXS> if ((position < 0) || (position >= (listData.size()))) { return ; } <FIXE>
<FIXS> if ((mDialog) != null) { mDialog.dismiss(); } <FIXE>
<FIXS> if ((newState == true) && (newState != (buttonState[button]))) { <FIXE> <FIXS> buttonState[button] = newState; <FIXE>
<FIXS> syncTrees(tree); <FIXE>
<FIXS> try (java.sql.PreparedStatement stmt = con.prepareStatement("CALL SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY('derby.database.defaultConnectionMode','readOnlyAccess')")) { <FIXE>
<FIXS> adminUserDao.removeInvalidatedToken(invalidToken); <FIXE>
<FIXS> private java.util.Map<org.apache.ignite.cluster.ClusterNode, int[]> createBalanceMap(java.util.List<org.apache.ignite.cluster.ClusterNode> nodes, int replicasCnt) { java.util.Map<org.apache.ignite.cluster.ClusterNode, int[]> balanceMap = new java.util.HashMap<>(); <FIXE> <FIXS> int[] arr = new int[replicasCnt]; <FIXE>
<FIXS> listOfPages = new java.util.ArrayList(); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> user.setLoginDate(now); <FIXE>
<FIXS> <FIXE>
<FIXS> java.lang.System.out.println(block.getBlockId()); <FIXE>
<FIXS> }.run(key); <FIXE>
<FIXS> adapter = new com.example.shoomka.ejournal.adapter.RecyclerAdapter(this); <FIXE>
<FIXS> org.expath.ns.GeoTest.error("geo:touches(a, text {'a'})", org.expath.ns.NOCTX_X); <FIXE>
<FIXS> fragment.updateListView(event, newEvent, false, false); <FIXE>
<FIXS> recyclerAdapter.notifyDataSetChanged(); <FIXE>
<FIXS> <FIXE>
<FIXS> if (!(result.next())) { <FIXE> <FIXS> <FIXE>
<FIXS> protected int rotatePlayerIndex(int currIndex, boolean mustBeActive) { <FIXE>
<FIXS> if ((canClaimEntry(key, publicKeyMessage)) || (canClaimEntry(key, publicKeyData))) { <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> setSwipeRefreshLayoutState(false, false); <FIXE>
<FIXS> return com.github.yoojia.inputs.ValueSchema.ABTest(new com.github.yoojia.inputs.RangeValueBridge(min, max)).msg((((("输入数值大小必须在[" + min) + ",") + max) + "]之间")); <FIXE>
<FIXS> java.lang.String validatedPath = validateResourcePath(path, false); <FIXE>
<FIXS> com.google.gwt.emultest.java.lang.MathTest.assertEquals((a - 1), java.lang.Math.decrementExact(a)); <FIXE>
<FIXS> public void update_stats(int win, int new_standing) { <FIXE> <FIXS> if (win == 1) { <FIXE> <FIXS> }else if (win == 0) { streak = 0; (losses)++; } <FIXE>
<FIXS> startLoadImageThreads(bitmapFiles, 0); <FIXE>
<FIXS> layers.add(new recurrentNeuralNetwork.lstmNetwork.Layer(inputAmount, hiddenAmount)); <FIXE> <FIXS> layers.add(new recurrentNeuralNetwork.lstmNetwork.Layer(hiddenAmount, hiddenAmount)); <FIXE>
<FIXS> dest.writeString(damage); <FIXE>
<FIXS> if (!(subscriber.update(ds_id, dataType))) <FIXE>
<FIXS> resultSet = executeQuery(query, new java.lang.Object[]{ key.toString() }); <FIXE>
<FIXS> if ((wrapped) != null) { wrapped.close(); } <FIXE>
<FIXS> int[] set = new int[getAllSelectedDiceValues().size()]; <FIXE>
<FIXS> <FIXE> <FIXS> onGroupClicked = true; <FIXE>
<FIXS> com.heroku.sdk.deploy.SlugDeployer slugDeployer = new com.heroku.sdk.deploy.SlugDeployer(deployer.getBuildPackDesc(), getName(), getRootDir(), deployer.getTargetDir(), this); <FIXE>
<FIXS> private java.lang.String getStartDate(org.w3c.dom.Node currentEvent) { <FIXE>
<FIXS> writer.writeToFile(this.facetTransformerToSCAD(model)); <FIXE>
<FIXS> sendRemotePlan(); <FIXE> <FIXS> <FIXE>
<FIXS> return ((fi.dy.masa.enderutilities.item.ItemBuildersWand.hasEnoughCharge(stack, player)) && (fi.dy.masa.enderutilities.item.ItemBuildersWand.canManipulateBlock(world, posIn.toBlockPos(), player, stack, true))) && ((player.capabilities.isCreativeMode) || ((fi.dy.masa.enderutilities.item.ItemBuildersWand.getAndConsumeBuildItem(stack, world, posIn.toBlockPos(), posIn.blockInfo.blockState, player, true)) != null)); <FIXE>
<FIXS> return ((map != null) && (map.containsKey(comp.getId()))) && (comp == (map.get(comp.getId()))); <FIXE>
<FIXS> for (int i = 0; i <= (list.size()); i++) { if ((i == (list.size())) || ((list.get(i).getFrequency()) >= (n.getFrequency()))) { <FIXE> <FIXS> break; <FIXE>
<FIXS> <FIXE> <FIXS> element.accept(this, arg); <FIXE>
<FIXS> if (not_patterns.get(i).equals(given)) { <FIXE>
<FIXS> com.leviathanstudio.mineide.model.base.BaseDataContent content = ((com.leviathanstudio.mineide.model.base.BaseDataContent) (obj)); return this.data.equals(content.data); <FIXE>
<FIXS> com.github.javaparser.ast.CompilationUnit cu = new com.github.javaparser.InstanceJavaParser(comments).parse(); <FIXE>
<FIXS> org.junit.Assert.assertEquals(java.math.BigInteger.valueOf(java.lang.Long.MIN_VALUE).subtract(java.math.BigInteger.ONE), result); <FIXE>
<FIXS> if ((this.getDatabase()) == null) { if (!availableOnly) { ((org.opendatakit.common.android.listener.DatabaseConnectionListener) (activeActivity)).databaseUnavailable(); } <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> return factory.deserialize(in, c, true); <FIXE>
<FIXS> if ((mCheckListener) != null) { mCheckListener.onCheckStateChanged(mImageAdapter.getCheckedImageList().size()); } <FIXE>
<FIXS> <FIXE>
<FIXS> if (project == null) { <FIXE>
<FIXS> if (((n.x) == x) && ((n.y) == y)) <FIXE>
<FIXS> progress((((double) ((java.lang.System.currentTimeMillis()) - (timeStart))) / ((double) (timeLimit)))); <FIXE>
<FIXS> int result; <FIXE> <FIXS> result = h.advanceOver(myBase); <FIXE>
<FIXS> java.util.Date date = new java.util.Date(time); <FIXE>
<FIXS> stopSelf(); <FIXE>
<FIXS> <FIXE> <FIXS> this.fireInvalidationListeners(); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> org.elasql.cache.CachedRecord record = localStorage.read(commonKey, tx); <FIXE> <FIXS> localStorage.writeBack(commonKey, record, tx); <FIXE>
<FIXS> private boolean validateIdentityData(java.lang.String fanExternalName, byte[] fanImageBytes, com.bitdubai.fermat_art_api.all_definition.enums.ArtExternalPlatform externalPlatform) { <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> return "pictures"; <FIXE>
<FIXS> return ((((((((((((((("Competition [id=" + (id)) + ", caption=") + (caption)) + ", league=") + (league)) + ", year=") + (year)) + ", currentMatchday=") + (currentMatchday)) + ", numberOfMatchdays=") + (numberOfMatchdays)) + ", numberOfTeams=") + (numberOfTeams)) + ", numberOfGames=") + (numberOfGames)) + "]"; <FIXE>
<FIXS> if (payload != null) { for (float[] payloadMat : payload) { arr.put(new org.json.JSONArray(payloadMat)); } <FIXE>
<FIXS> if ((this.alcoholLevel) == 0) { <FIXE>
<FIXS> if (id == (R.id.playlist_item)) { com.kaidoh.mayuukhvarshney.gearjam.PlayListFragment fragobj = new com.kaidoh.mayuukhvarshney.gearjam.PlayListFragment(); android.support.v4.app.FragmentTransaction ft = getSupportFragmentManager().beginTransaction(); ft.replace(R.id.FragmentContainer, fragobj); ft.addToBackStack(null); ft.commit(); } <FIXE>
<FIXS> update(); <FIXE>
<FIXS> fr.gwombat.predicadmin.web.vo.builder.ContactDetailVoBuilder builder = fr.gwombat.predicadmin.web.vo.builder.ContactDetailVoBuilder.begin(); if (contactDetail != null) builder = fr.gwombat.predicadmin.web.vo.builder.ContactDetailVoBuilder.begin().email(contactDetail.getEmail()).mobilePhone(fr.gwombat.predicadmin.web.transformer.ContactDetailTransformer.formatPhoneNumber(contactDetail.getMobilePhone())).phone(fr.gwombat.predicadmin.web.transformer.ContactDetailTransformer.formatPhoneNumber(contactDetail.getPhone())); return builder.build(); <FIXE>
<FIXS> public void deleteHobby(int id) { <FIXE> <FIXS> em.remove(getHobby(id)); <FIXE>
<FIXS> showVerifyVarsityPlayerDialog(userNickname, playerProfile); <FIXE>
<FIXS> java.util.ArrayList<com.nucc.hackwinds.types.Condition> dayConditions = new java.util.ArrayList(conditions.subList((index * 6), ((index * 6) + 6))); <FIXE>
<FIXS> when(dao.findAll()).thenReturn(users); <FIXE> <FIXS> verify(dao).findAll(); assertEquals(foundUsers.size(), 2); <FIXE>
<FIXS> assertThat(loaded.categories, equalTo(bean.categories)); <FIXE>
<FIXS> assertEquals(total, game.getScore()); <FIXE>
<FIXS> p = assertProperty(((org.openflexo.toolbox.ToolBox.getPLATFORM()) + (org.openflexo.prefs.PresentationPreferences.LOOK_AND_FEEL))); <FIXE>
<FIXS> java.util.concurrent.ConcurrentHashMap<java.lang.Integer, java.lang.Integer> map = this.createResizedDS(); <FIXE> <FIXS> this.assertEqualstUnordered("The collection does not containt the elements asserted", "{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}", enumerated.toString()); <FIXE>
<FIXS> static void run(org.matsim.api.core.v01.network.Network network) { <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> updateValues(true); <FIXE>
<FIXS> for (int i = coords.length; i > 0; i -= 3) { <FIXE>
<FIXS> public synchronized int useNextID() { <FIXE> <FIXS> nextID = no + 1; <FIXE>
<FIXS> android.util.Log.d(de.lilithwittmann.voicepitchanalyzer.utils.CacheableWebViewClient.LOG_TAG, ("Error reading file over network: " + (entry.url)), e); <FIXE>
<FIXS> <FIXE> <FIXS> if (temp != null) { temp.prev = newNode; } <FIXE>
<FIXS> packet.setId((block >> 4)); <FIXE>
<FIXS> if (!(pendingPages.containsKey(sid))) { return ; } <FIXE>
<FIXS> xyz.jaoafa.mymaid.BugReport.folder = Path; <FIXE> <FIXS> xyz.jaoafa.mymaid.BugReport.plugin.getLogger().info("BugReportのリポートディレクトリの作成に成功しました。"); <FIXE> <FIXS> xyz.jaoafa.mymaid.BugReport.plugin.getLogger().info("BugReportのリポートディレクトリの作成に失敗しました。"); <FIXE>
<FIXS> private static void displayInWebview(final android.content.Context context, java.lang.String url) { android.app.AlertDialog.Builder alert = new android.app.AlertDialog.Builder(context); android.webkit.WebView wv = new android.webkit.WebView(context); <FIXE>
<FIXS> if ((emsc == null) || ((emsc.getName()) == null)) <FIXE>
<FIXS> return object != null ? accessor.toString(object) : null; <FIXE>
<FIXS> (i)++; <FIXE> <FIXS> <FIXE>
<FIXS> messagesButton.setOnClickListener(this); <FIXE>
<FIXS> return true; } catch (final java.io.IOException e) { <FIXE> <FIXS> return false; <FIXE>
<FIXS> default : <FIXE>
<FIXS> if (messageSource != null) { return messageSource.getMessage(messageKey, getMessageParameters(), locale); }else { return super.getLocalizedMessage(); } <FIXE>
<FIXS> while (newGridY > 1) { newGridY = newGridY - 1; if (!(BombsAround(myPanelB, newGridX, newGridY))) { myPanelB.colorArray[newGridX][newGridY] = uncoveredCell; myPanelB.repaint(); }else { myPanelB.colorArray[newGridX][newGridY] = hasNumber; myPanelB.repaint(); newGridY = 0; } <FIXE> <FIXS> <FIXE>
<FIXS> lock = new com.auth0.lock.LockBuilder().loadFromApplication(this).closable(true).build(); <FIXE>
<FIXS> gui.pairings.Player player = new gui.pairings.Player(new_player, ((selectionList.size()) + 1)); <FIXE>
<FIXS> final int facing = (this.getMetaFromState(state)) & 8; <FIXE>
<FIXS> if ((node.hasProperty(Node.PROPERTY_ANONYMOUS)) && (((globalMaximum) == null) || ((node.getInformationLoss().compareTo(globalMaximum.getInformationLoss())) > 0))) { <FIXE>
<FIXS> if (((token) != null) || ((status) == (Status.userRecoverableError))) { if ((token) != null) { status = Status.okay; handleToken(token); postToken(); } <FIXE>
<FIXS> if (((v.prerequisite) != null) && (v.prerequisite().name().equalsIgnoreCase(vaccine.trim()))) { vl.add(v); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> videoNumberLabel.setText(((((currentNumber) + 1) + " of ") + (tapes.size()))); <FIXE>
<FIXS> if ((!(isSet())) || (!(other.isSet()))) { <FIXE>
<FIXS> toTest = new org.fiware.apps.repository.dao.impl.MongoCollectionDAO(db, mongoCollection, mongoCollection, virtuosoResourceDAO); <FIXE>
<FIXS> seedu.address.model.property.PropertyManager.initializePropertyManager(); <FIXE> <FIXS> <FIXE>
<FIXS> leaderJson.put("userId", userServiceApi.USER.get(utoken).getId()); <FIXE>
<FIXS> intent.putExtra("url", url); <FIXE>
<FIXS> criteria.add(org.hibernate.criterion.Restrictions.eq("artistId", artistId)); <FIXE>
<FIXS> <FIXE>
<FIXS> mapper = com.alibaba.fastjson.JSON.parseObject(jsonText, org.pinae.timon.io.SqlMapper.class); <FIXE>
<FIXS> java.lang.Integer innerKey = nextInnerMapKeyValue(i); <FIXE>
<FIXS> if ((!(this.protectedPoints.contains(p))) && (me.newyith.generator.Wall.isProtectableWallMaterial(b.getType()))) { <FIXE>
<FIXS> private void moveVisibleChildren(final com.notlob.jgrid.model.Row<T> row) { <FIXE> <FIXS> final int newExpectedIndex = sortModel.getSortedRowIndex(child); <FIXE> <FIXS> child.setRowIndex(newExpectedIndex); <FIXE>
<FIXS> nl.defsoftware.mrgb.view.models.RibbonLine ribbonLine = new nl.defsoftware.mrgb.view.models.RibbonLine(0, determineLength(startY, endY)); <FIXE>
<FIXS> recyclerView.setLayoutManager(new android.support.v7.widget.GridLayoutManager(getContext(), 2)); <FIXE>
<FIXS> if ((perdido.getId()) == 0) { perdido.setDataCadastro(new java.util.Date()); } <FIXE>
<FIXS> if ((correctResponses.size()) == 0) { return 0.0; } <FIXE>
<FIXS> if ((index < 0) || (((importantList.size()) - 1) < index)) { <FIXE>
<FIXS> com.rmnoon.workflowy.app.WFModel.getInstance(context).ensureAppWidgets(com.google.common.primitives.Ints.asList(getAppWidgetIds(context))); <FIXE>
<FIXS> if ((java.lang.Math.abs(java.lang.Math.sqrt(((java.lang.Math.pow(((this.getX()) - (e.getX())), 2)) + (java.lang.Math.pow(((this.getY()) - (e.getY())), 2)))))) < i) { <FIXE>
<FIXS> progressDialog = com.qadmni.utils.DialogUtils.getProgressDialog(getContext()); <FIXE>
<FIXS> com.healthmarketscience.sqlbuilder.UpdateQuery $ = new com.healthmarketscience.sqlbuilder.UpdateQuery(tabel); <FIXE>
<FIXS> <FIXE> <FIXS> fldGrpdch05.setVisibility(View.VISIBLE); <FIXE> <FIXS> <FIXE>
<FIXS> return url + (url.contains("?") ? (("&" + field) + "=") + value : (("?" + field) + "=") + value); <FIXE>
<FIXS> if ((wardrobe.getShirts().size()) == 0) { return null; } <FIXE>
<FIXS> this.session = s = org.pageseeder.bridge.PSSession.parseSetCookieHeader(cookie); <FIXE>
<FIXS> m_y = (phoenix.delta.Utilities.random((((DroidConstants.GROUND_Y) - (m_game.getDroid().getHeight())) + (DroidConstants.JUMP_HEIGHT)), DroidConstants.GROUND_Y)) - (m_h); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> throw new java.lang.RuntimeException(("Error occured during creating instance of " + clazz), e); <FIXE>
<FIXS> endTransaction(); <FIXE>
<FIXS> <FIXE>
<FIXS> int min = arr.get(0); <FIXE> <FIXS> if (a < min) { min = a; <FIXE> <FIXS> if (min == a) { <FIXE>
<FIXS> client.Bidder bidder = new client.Bidder("thaleia", bidderPort, hostname); <FIXE>
<FIXS> size = size.concat(java.lang.String.valueOf(b)); <FIXE>
<FIXS> rob_array = getResources().getStringArray(R.array.rob); hooman_array = getResources().getStringArray(R.array.hooman); arjun_array = getResources().getStringArray(R.array.arjun); <FIXE>
<FIXS> return com.redhat.ceylon.compiler.codegen.AttributeDefinitionBuilder.getter(this, atrrName, decl.getDeclarationModel()).modifiers(transformAttributeGetSetDeclFlags(decl.getDeclarationModel())).isActual(com.redhat.ceylon.compiler.util.Decl.isActual(decl)).isFormal(com.redhat.ceylon.compiler.util.Decl.isFormal(decl)).build(); <FIXE>
<FIXS> public static java.lang.String[] getMonthValues(int length) { <FIXE> <FIXS> java.lang.String[] months = new java.lang.String[length]; <FIXE> <FIXS> for (int i = 0; i < length; i++) { <FIXE>
<FIXS> if (tmpSum != 0) tmpSum /= nbPart; <FIXE>
<FIXS> long usec = ((long) (((seconds.asDouble()) - (timeval[0])) * 1000000.0)); <FIXE>
<FIXS> swissTournamentRunner.Player p1 = new swissTournamentRunner.Player("P1", 1, 0, 0, 0); swissTournamentRunner.Player p2 = new swissTournamentRunner.Player("P2", 0, 0, 0, 0); <FIXE>
<FIXS> (executions)++; <FIXE>
<FIXS> map.createFood((lengthen = false)); <FIXE>
<FIXS> double bodyLength = ((messageBody) != null ? ((double) (messageBody.length)) : 0.0) / ((double) (1024)); return java.lang.String.format("%s%sBody Dimension: %sKB\n", startLine.toString(), headers.toString(), java.lang.String.valueOf(bodyLength)); <FIXE>
<FIXS> return id.equals(stop.id); <FIXE>
<FIXS> com.example.alex.weatheraarhusgroup03.WeatherInfo weatherInfo = new com.example.alex.weatheraarhusgroup03.WeatherInfo(); <FIXE> <FIXS> if (infos != null) { weatherInfo = infos.get(0); } <FIXE>
<FIXS> id = database.insert(tableName, null, contentValues); <FIXE>
<FIXS> http.antMatcher("/**").authorizeRequests().antMatchers("/index.html", "/login", "/", "/api/catalog/**", "/user", "/assets/**").permitAll().anyRequest().authenticated().and().csrf().disable(); <FIXE>
<FIXS> if ((lastRead) == ']') { break; } <FIXE>
<FIXS> rootMethod = new org.jruby.compiler.ir.IRMethod(this, n, false, getStaticScope()); <FIXE>
<FIXS> if (((parameters != null) && (parameterIndex >= 0)) && (parameterIndex < (parameters.length))) { <FIXE>
<FIXS> user.setKreditkarte(tmpKreditkarte); user = em.merge(user); tmpKreditkarte = user.getKreditkarte(); <FIXE>
<FIXS> long price1 = java.lang.Math.abs(((long) (((getTotal()) * 1000.0) / (quantity)))); <FIXE>
<FIXS> buildingMapName = mappingResult.getBuilding(); <FIXE> <FIXS> if (!(buildingMapName.equals("CampusMap"))) { return buildingMapName; <FIXE>
<FIXS> return -1.0; <FIXE>
<FIXS> if (intent != null) { intent.addCategory(Intent.CATEGORY_LAUNCHER); if (bundle != null) { intent.putExtras(bundle); } }else { return null; } <FIXE>
<FIXS> com.shatteredpixel.shatteredpixeldungeon.actors.Actor.add(Dungeon.hero); <FIXE>
<FIXS> int cmd = svcProxy.forceRepairRangeAsync(range.begin, range.end, keySpaceName, false, false, false); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> if (context == null) return null; <FIXE>
<FIXS> return org.mycore.access.MCRAccessManager.checkPermission(org.urmel.dbt.rc.resources.MailResourcePermission.PERMISSION_MAIL); <FIXE>
<FIXS> <FIXE>
<FIXS> update(); <FIXE>
<FIXS> com.vinmein.dvadivel.foodie.model.MenuItems deleteitem = foodmenuitems.get(pos); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> return name0.compareTo(name1); <FIXE>
<FIXS> <FIXE> <FIXS> hideProgress(); <FIXE>
<FIXS> return hostname.equals(that.hostname); <FIXE>
<FIXS> if (((media) != null) && ((media.getMediaType()) == (de.danoeh.antennapod.feed.MediaType.AUDIO))) { <FIXE>
<FIXS> assert connection.isInMailBoxMenu(); phone.speak(ConnectionTestRecording.MAILBOX_MENU_TEXT); <FIXE> <FIXS> <FIXE>
<FIXS> getSeries(); <FIXE>
<FIXS> }else { res.coeff[index] = false; <FIXE>
<FIXS> btnPre.setOnClickListener(this); <FIXE>
<FIXS> thread = null; <FIXE>
<FIXS> return com.amagh.bakemate.ui.StepDetailsFragment.newInstance(mActivity.getSteps()[position]); <FIXE>
<FIXS> <FIXE>
<FIXS> protected void testEqualSeconds(java.lang.String s, java.util.Date expected, java.util.Date actual) { <FIXE> <FIXS> }else { org.junit.Assert.assertNotNull(s, actual); long esec = (expected.getTime()) / 1000L; long asec = (actual.getTime()) / 1000L; org.junit.Assert.assertEquals(s, esec, asec); <FIXE> <FIXS> <FIXE>
<FIXS> return parseError(key, value, e); <FIXE>
<FIXS> if ((getView()) != null) { outState.putCharSequence(org.sufficientlysecure.keychain.ui.keyunlock.wizard.PinUnlockWizardFragment.STATE_SAVE_STATUS_TEXT, mPinUnlockDialogStatus.getText()); outState.putInt(org.sufficientlysecure.keychain.ui.keyunlock.wizard.PinUnlockWizardFragment.STATE_SAVE_CHECK_VISIBILITY, mCheckImageView.getVisibility()); outState.putInt(org.sufficientlysecure.keychain.ui.keyunlock.wizard.PinUnlockWizardFragment.STATE_SAVE_WRONG_VISIBILITY, mWrongImageView.getVisibility()); outState.putInt(org.sufficientlysecure.keychain.ui.keyunlock.wizard.PinUnlockWizardFragment.STATE_SAVE_STATUS_COLOR, mPinUnlockDialogStatus.getCurrentTextColor()); } <FIXE>
<FIXS> return java.lang.String.format(Constants.MESSAGE_UPDATED, doneTask.getId()); <FIXE>
<FIXS> predict(circle, 0); <FIXE>
<FIXS> private Opcion getSelectedRow(int selectedRow) { <FIXE> <FIXS> optionsToWallet.add(opcion); return opcion; <FIXE>
<FIXS> <FIXE>
<FIXS> app.util.HttpUtils.ContentType contentType = app.util.HttpUtils.ContentType.get(fileExtension); <FIXE>
<FIXS> <FIXE>
<FIXS> org.biojava.nbio.structure.Chain atomRes = org.biojava.nbio.structure.io.SeqRes2AtomAligner.getMatchingAtomRes(seqRes, atomList, false); <FIXE>
<FIXS> public edu.neu.ccs.pyramid.dataset.MultiLabel predict(java.util.Vector vector) { <FIXE>
<FIXS> java.lang.String newMessage = message.replace(java.lang.String.valueOf(ChatColor.COLOR_CHAR), "&").replace("&r", ""); <FIXE>
<FIXS> java.lang.System.out.println(twImages.getUrl()); <FIXE>
<FIXS> _editPans[_tab.getSelectedIndex()].setComponentZOrder(selectedPanel, 0); <FIXE> <FIXS> <FIXE>
<FIXS> dataSource.deleteLocation(item.getId(), item.getItem().getImagePath(), item.getItem()); <FIXE>
<FIXS> <FIXE>
<FIXS> context.begin(); <FIXE>
<FIXS> <FIXE> <FIXS> consumer.consume(changeInfos); <FIXE>
<FIXS> fileWatcher = null; <FIXE>
<FIXS> if (((mProgressDialog) != null) && (mProgressDialog.isShowing())) { <FIXE>
<FIXS> BeeManager.beeRoot.registerTemplate(template); <FIXE>
<FIXS> updateChat(true); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> Storage.Storage.indexList.add(i); <FIXE>
<FIXS> channels.put(channel.toUpperCase(), new com.mak001.ircbot.irc.Channel(this, channel, startup)); output.sendRawLine(("JOIN " + channel)); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> if (session == null) { <FIXE>
<FIXS> public boolean accountAction(java.lang.String name, double amount) { <FIXE> <FIXS> outToServer.writeObject(name); <FIXE>
<FIXS> <FIXE>
<FIXS> android.support.design.widget.Snackbar.make(this.findViewById(R.id.main_activity_view), ("Exception while connecting to Google Play services: " + (result.getErrorMessage())), Snackbar.LENGTH_INDEFINITE).show(); <FIXE>
<FIXS> public void deleteUser(final java.lang.String name) throws javax.jcr.RepositoryException { <FIXE>
<FIXS> if (temp < (TensorFlowUtils.NORMALIZATION_MIN)) { <FIXE>
<FIXS> }else { nestedFilter.doFilter(httpRequest, response, chain); <FIXE> <FIXS> <FIXE>
<FIXS> public static double calculateQ2(Shop s) { <FIXE> <FIXS> if (ingredientRatio < (((double) (2)) / 3)) { <FIXE>
<FIXS> finish(); <FIXE>
<FIXS> if ((window.getGamePanel().getGame().getNextShape()) == null) return ; <FIXE>
<FIXS> return new org.springframework.http.ResponseEntity<java.lang.Object>(new com.baifendian.swordfish.webserver.exception.CustomErrorType(status, ex.getMessage()), status); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> window.newGame(); <FIXE> <FIXS> <FIXE>
<FIXS> com.bumptech.glide.Glide.with(mContext).load(url).dontAnimate().listener(listener).placeholder(com.xinyi.czbasedevtool.base.manager.ui_about.GlideMaster.placeHolderRes).error(com.xinyi.czbasedevtool.base.manager.ui_about.GlideMaster.errorHolderRes).into(img); <FIXE>
<FIXS> <FIXE> <FIXS> iterator.remove(); <FIXE> <FIXS> <FIXE>
<FIXS> return clause.createQueryStatement(qc, params()); <FIXE>
<FIXS> private void setValue(final java.lang.String name, final java.lang.Object value, final com.health.ValueType type) { assert type != null; <FIXE>
<FIXS> return com.blackducksoftware.integration.hub.jenkins.helper.BuildHelper.getRestConnection(logger, serverUrl, hubServerConfigBuilder); <FIXE>
<FIXS> if ((!(seen.contains(n))) && (dfs(n, finish, seen))) { return true; <FIXE>
<FIXS> <FIXE>
<FIXS> if (scanResult == null) { com.nervousfish.nervousfish.activities.QRExchangeKeyActivity.LOGGER.error("No scan result in QR Scanner"); }else { <FIXE> <FIXS> <FIXE>
<FIXS> assertNull(twinParser.getDesiredPropertyMap()); <FIXE>
<FIXS> if ((((current()) != null) && ((current()) != (Token.KEY))) && (!(lists[level]))) { <FIXE>
<FIXS> if ((null != role2) && (!(role1.getRoleId().equals(role2.getRoleId())))) { <FIXE>
<FIXS> future.get(); <FIXE>
<FIXS> builder.append(no.imr.nmdapi.dao.file.NMDSeriesReferenceDaoImpl.DATASET_FILENAME); <FIXE>
<FIXS> <FIXE> <FIXS> loggedInStaffID = staff.getId(); <FIXE>
<FIXS> public java.lang.Boolean isStorageAccountNameReferenceTypeEquals(final java.lang.String type) { <FIXE> <FIXS> return true; <FIXE> <FIXS> return (type != null) && (type.equalsIgnoreCase(this.storageAccountNameReferenceType)); <FIXE>
<FIXS> return (uncompressedChunk[((uncompressedChunkOffset)++)]) & 255; <FIXE>
<FIXS> result.putString("error", error.toString()); <FIXE>
<FIXS> loader = new javafx.fxml.FXMLLoader(Controller.SceneSwitcher.class.getResource(pathToView)); <FIXE>
<FIXS> <FIXE>
<FIXS> } long time = java.lang.System.currentTimeMillis(); if ((time - (latestTouchEndTime)) < 500) { latestTouchEndTime = time; if (!(newCreationMode)) { onDoubleClickAction(false, false); } <FIXE> <FIXS> latestTouchEndTime = time; <FIXE>
<FIXS> <FIXE>
<FIXS> PiSeries.getData().clear(); <FIXE>
<FIXS> <FIXE> <FIXS> try (java.io.InputStream inputStream = new java.io.BufferedInputStream(locationArgument.openStream())) { <FIXE> <FIXS> <FIXE>
<FIXS> private void drawBackground(java.awt.Graphics g, int[] background) { if (background == null) { } <FIXE>
<FIXS> <FIXE> <FIXS> kill(); <FIXE>
<FIXS> openAdder(images.get(position)).show(); <FIXE>
<FIXS> <FIXE>
<FIXS> logger.info(java.lang.String.format("Removing television (%s) from previous channel (%s).", television.getId(), previousChannel.getId())); <FIXE>
<FIXS> sourceSocket = new java.net.ServerSocket(7001); <FIXE>
<FIXS> if ((org.usfirst.frc.team245.robot.GhostModeWrite.recordingGhost) == true) { <FIXE>
<FIXS> int value = ((int) (java.lang.Math.floor(((((d.getSortingLayer()) + 0.95F) - (d.getInnerSortingLayer())) - (((d1.getSortingLayer()) + 0.95F) - (d1.getInnerSortingLayer())))))); value = (value == 0) ? 1 : value; return value; <FIXE>
<FIXS> this.writtenVariableTreeViewer.setContentProvider(new microbat.views.DebugFeedbackView.RWVariableContentProvider(false)); <FIXE>
<FIXS> if ((mVerticalBar.getVisibility()) == (android.view.View.VISIBLE)) { <FIXE> <FIXS> mVerticalBar.setVisibility(View.INVISIBLE); } <FIXE>
<FIXS> long memberID = TestUtils.getMemberBySsn(RegistryTest.registry, memberJson.getString("socialSecurityNumber")).getMemberID(); <FIXE>
<FIXS> _mp.highlightChar(_pa, _x, _y); <FIXE> <FIXS> <FIXE>
<FIXS> lineNo -= 1; <FIXE>
<FIXS> org.expath.ns.GeoTest.error("geo:asText(text {'a'})", org.expath.ns.INVCAST_X_X_X); <FIXE>
<FIXS> for (com.solera.defrag.ViewStackListener listener : new java.util.ArrayList(viewStackListeners)) { <FIXE>
<FIXS> <FIXE>
<FIXS> if ((meta.DataManager.data) == null) { <FIXE> <FIXS> java.lang.System.out.println((("Created new data object (" + (meta.DataManager.i)) + ")")); (meta.DataManager.i)++; } <FIXE>
<FIXS> io.xdevs23.cornowser.browser.CornBrowser.goForwardImgBtn.setBackgroundResource((io.xdevs23.cornowser.browser.browser.modules.WebThemeHelper.isDark ? R.drawable.ic_arrow_forward_white_48dp : R.drawable.ic_arrow_forward_black_48dp)); <FIXE>
<FIXS> java.lang.String body = token.substring(2).toLowerCase(); <FIXE> <FIXS> java.lang.Long.parseLong(body, 16); <FIXE>
<FIXS> return matrixCreator.getFeatureMatrix(data.getCombinedSourceMap().keySet(), allowedTargets, false); <FIXE>
<FIXS> <FIXE>
<FIXS> if ((movies.get(s).getMajor()) != null) { if (movies.get(s).getMajor().equals(major)) { Recommendations.add(movies.get(s)); } <FIXE>
<FIXS> <FIXE>
<FIXS> public void runController() { <FIXE>
<FIXS> if (k.equals(primaryKeys.get(b0))) <FIXE> <FIXS> if (k.equals(secondaryKeys.get(b0))) <FIXE>
<FIXS> if ((directionEvents.size()) > 0) if (directionEvents.get(0).eTime.isAfter(t1)) throw new devices.encoder.Encoder.DirectionChange(); <FIXE>
<FIXS> <FIXE>
<FIXS> public void joinRequest(java.lang.String ipAddress, int port, int clusterID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException { <FIXE>
<FIXS> protected void generate(de.cpgaertner.edu.inf.api.level.LocationFactory factory, int x1, int x2, int y1, int y2) { <FIXE>
<FIXS> <FIXE>
<FIXS> return (org.joda.time.Days.daysBetween(getBeforeFixture(java.lang.Integer.valueOf(nextFixture.getSeason().getYear()), nextFixture.getDate(), null).getDate(), nextFixture.getDate()).getDays()) + 1; <FIXE>
<FIXS> android.widget.TextView readingPane = ((android.widget.TextView) (this.getView().findViewById(R.id.reading_surface))); android.widget.TextView readingInfo = ((android.widget.TextView) (this.getView().findViewById(R.id.reading_info))); <FIXE>
<FIXS> if (citiesBoolean[j][i]) <FIXE>
<FIXS> public void lostOrWon() { int counter = 0; <FIXE> <FIXS> counter += ((blackjackgame.Card) (card)).value; <FIXE> <FIXS> if (counter < 21) { java.lang.System.out.println(((name) + " won ")); }else { <FIXE> <FIXS> <FIXE>
<FIXS> ownDeclaration = new com.mgs.reflections.Declaration(typeResolution, effectiveParameters); <FIXE>
<FIXS> if (soundStatus.equals("1")) { <FIXE>
<FIXS> value = (value.equalsIgnoreCase("Default")) ? getDefaultValue(feature) : value.trim(); <FIXE>
<FIXS> for (org.sat4j.core.VecInt v : cnfEncoding) { java.lang.System.out.println(v); } java.lang.System.out.println(); <FIXE>
<FIXS> if (value instanceof org.aludratest.eclipse.vde.model.ITestDataFieldValue) { org.aludratest.eclipse.vde.internal.editors.ConfigurationSegmentDetailsFormPart.SegmentField field = ((org.aludratest.eclipse.vde.internal.editors.ConfigurationSegmentDetailsFormPart.SegmentField) (element)); field.fieldValue = ((org.aludratest.eclipse.vde.model.ITestDataFieldValue) (value)); tvFields.update(element, null); } <FIXE>
<FIXS> com.bah.web.controller.ClientControllerTest.logger.error("Error happened in the ClientControllerTest class", e); <FIXE> <FIXS> com.bah.web.controller.ClientControllerTest.logger.error("Error happened in the ClientControllerTest class", e); <FIXE>
<FIXS> if ((body.contentType()) != null) { entity.setContentType(body.contentType().type()); } <FIXE>
<FIXS> localization.USLocalizer ultrasonicLocalizer = new localization.USLocalizer(leftMotor, rightMotor, odometer, usSensor, startCorner, navigator); ultrasonicLocalizer.doUSLocalization(); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> if ((color) != null) { int mask = 0; for (final magic.model.MagicColor element : color) { mask += element.getMask(); } if (additionTo) { return flags | mask; }else { return mask; } <FIXE> <FIXS> return flags; <FIXE>
<FIXS> return new org.apache.drill.exec.physical.base.ScanStats(nativeHiveScanStats.getGroupScanProperty(), nativeHiveScanStats.getRecordCount(), ((nativeHiveScanStats.getCpuCost()) / (HIVE_SERDE_SCAN_OVERHEAD_FACTOR)), nativeHiveScanStats.getDiskCost()); <FIXE>
<FIXS> <FIXE> <FIXS> if ((hasNewName) && (hasNewColour)) { editType = dooyit.parser.EditCategoryParser.EDIT_NAME_AND_COLOUR; }else if ((!(hasNewName)) && (hasNewColour)) { editType = dooyit.parser.EditCategoryParser.EDIT_COLOUR_ONLY; }else if ((hasNewName) && (!(hasNewColour))) { editType = dooyit.parser.EditCategoryParser.EDIT_NAME_ONLY; }else { editType = dooyit.parser.EditCategoryParser.EDIT_INVALID; } <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> this.products.remove(pVSerialName[i]); <FIXE>
<FIXS> this.Alive.set(0.0); <FIXE>
<FIXS> java.lang.Double[] pref = new java.util.ArrayList<>(java.util.Arrays.asList(10.0, 10.0, 2.0)).toArray(new java.lang.Double[0]); <FIXE>
<FIXS> title.setText(finger.getTitle()); <FIXE> <FIXS> <FIXE>
<FIXS> return 0.9; <FIXE> <FIXS> return 0.3; <FIXE>
<FIXS> this.filePath = remoteImage.getFileUrl(); <FIXE>
<FIXS> grid[i][j] = new com.jdrago.sudoku.SudokuGame.Cell(0, false); <FIXE>
<FIXS> <FIXE>
<FIXS> return core.makeRequest(au.id.mclowry.tah.GET, end_point_path, params, targetClass); <FIXE>
<FIXS> for (int i = (this.size()) - 1; i >= 0; i--) { <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> final openmods.utils.RecipeUtils.InputBuilder builder = new openmods.utils.RecipeUtils.InputBuilder(); <FIXE> <FIXS> final int size = recipe.getRecipeSize(); for (int i = 0; i < size; i++) <FIXE> <FIXS> return builder.build(size); <FIXE>
<FIXS> requestPermissions(new java.lang.String[]{ Manifest.permission.READ_EXTERNAL_STORAGE }, io.github.nfdz.foco.ui.dialogs.EditDocCoverDialog.ImageFragment.PERMISSION_REQUEST_CODE); <FIXE>
<FIXS> if (item.equals(value)) <FIXE>
<FIXS> if ((clientUriResolver) != null) { <FIXE>
<FIXS> <FIXE>
<FIXS> if (resultCode == (-1)) { com.faa1192.weatherforecast.Cities.City city = com.faa1192.weatherforecast.Cities.City.fromBundle(data.getExtras()); android.widget.Toast.makeText(this, ((getResources().getString(R.string.added_city)) + (city.name)), Toast.LENGTH_SHORT).show(); this.update(); } <FIXE>
<FIXS> if ((breadCrumbs.size()) > 1) { folderContentPath += "%2F" + folderName; } <FIXE>
<FIXS> <FIXE>
<FIXS> return open(ciphertext.substring(0, 12), ciphertext.substring(12), data); <FIXE>
<FIXS> if ((this.context) != null) { <FIXE> <FIXS> this.context = context; <FIXE>
<FIXS> <FIXE>
<FIXS> return io.tornadofaces.component.util.GlobalId.getGlobalIds(context).get(gid.substring(1)); <FIXE>
<FIXS> public void mutate(int currentGeneration, java.util.Map mutationMap) { <FIXE> <FIXS> deleteriousMutate(currentGeneration, mutationMap); beneficialMutate(currentGeneration, mutationMap); <FIXE>
<FIXS> <FIXE>
<FIXS> this.commentsRecyclerView = ((android.support.v7.widget.RecyclerView) (findViewById(R.id.comments_list))); <FIXE>
<FIXS> this.timerValue = io.netty.util.internal.ThreadLocalRandom.current().nextLong(((minRandom) * 1000), (((maxRandom) * 1000) + 1)); <FIXE>
<FIXS> speaker.wake(); <FIXE> <FIXS> <FIXE>
<FIXS> public void refreshView() { <FIXE>
<FIXS> sideConfigs.put(type.ordinal(), nbtTags.getByteArray(("config" + (type.ordinal())))); <FIXE>
<FIXS> <FIXE>
<FIXS> in_doc = doc_builder.parse(new java.io.File(in_file)); <FIXE>
<FIXS> com.github.jetqin.orm.constants.OrmType type = ((com.github.jetqin.orm.constants.OrmType) (importingClassMetadata.getAnnotationAttributes(com.github.jetqin.orm.annotation.EnableOrmConfiguration.class.getName()).get("type"))); <FIXE>
<FIXS> if (list == null) { <FIXE> <FIXS> return ; } <FIXE>
<FIXS> if ((points.isEmpty()) || (faces.isEmpty())) return null; <FIXE>
<FIXS> if ((!(deletedObjects.isEmpty())) | (mappedObjects.isEmpty())) { <FIXE>
<FIXS> <FIXE>
<FIXS> for (java.util.Map.Entry<edu.cmu.ml.proppr.prove.wam.Goal, java.lang.Double> val : ret.entrySet()) { <FIXE>
<FIXS> for (int i = 0; i < len; ++i) { array[i] = com.kylinolap.common.util.BytesUtil.readVInt(in); } <FIXE>
<FIXS> result[((length - 1) - i)] = ((byte) ((value >> (8 * i)) & 255)); <FIXE>
<FIXS> <FIXE> <FIXS> return policyDAO.getPolicyCount(); <FIXE>
<FIXS> if ((confirm.isVisible()) == false) confirm.setVisible(true); <FIXE>
<FIXS> if (cometResource != null) { <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> this.hostilePool.put(obj, obj); <FIXE>
<FIXS> return (((type.is(com.google.common.net.MediaType.ANY_TEXT_TYPE)) || (com.google.common.net.MediaType.APPLICATION_XML_UTF_8.withoutParameters().is(type))) || (com.google.common.net.MediaType.JSON_UTF_8.withoutParameters().is(type))) && (java.lang.String.class.equals(com.google.common.reflect.TypeToken.of(resultType).getRawType())); <FIXE>
<FIXS> <FIXE>
<FIXS> public double snackPrice(int snack) { <FIXE>
<FIXS> get(key).add(value); <FIXE>
<FIXS> assertEquals("Modified identifier", "new", folder.getIdentifier()); assertEquals("Modified label", "new", folder.getLabel()); <FIXE>
<FIXS> }else { return null; } <FIXE>
<FIXS> cpds.setUser(user); cpds.setPassword(password); <FIXE>
<FIXS> assignToken(); makeRequest(); <FIXE> <FIXS> <FIXE>
<FIXS> callbackContext.success(); <FIXE>
<FIXS> public <T extends org.roda.core.data.v2.index.IsIndexed> org.roda.core.index.utils.IterableIndexResult<T> findAll(final java.lang.Class<T> returnClass, final org.roda.core.data.v2.index.filter.Filter filter, final boolean justActive, final java.util.List<java.lang.String> fieldsToReturn) { return findAll(returnClass, filter, new org.roda.core.data.v2.index.sort.Sorter(new org.roda.core.data.v2.index.sort.SortParameter(org.roda.core.data.common.RodaConstants.INDEX_UUID, true)), Sublist.ALL, null, justActive, fieldsToReturn); <FIXE>
<FIXS> if (returnThis.equals("CARD_PLACED")) { <FIXE>
<FIXS> com.dexecutor.executor.TaskProvider.Task task = taskProvider.provid(this.node.getValue()); <FIXE> <FIXS> com.dexecutor.executor.DefaultDependentTasksExecutor.logger.error(("Exception caught, executing task :" + (this.node.getValue())), ex); <FIXE> <FIXS> return this.node; <FIXE>
<FIXS> <FIXE> <FIXS> case NORTH : return (this.boundingBox.maxX) - x; <FIXE>
<FIXS> private static java.lang.String getA() { <FIXE> <FIXS> if ((sample.CalculationAction.end) >= (Main.numbers.length())) { break; } <FIXE> <FIXS> <FIXE>
<FIXS> ((net.vicp.lylab.server.utils.Logger) (CoreDef.config.getConfig("Singleton").getObject("Logger"))).appendLine(((((("Access key:" + (request.getKey())) + "\nBefore:") + request) + "\nAfter:") + response)); <FIXE>
<FIXS> java.util.Calendar calendar = org.spine3.time.Parser.createCalendar(seconds, nanos, zoneOffset); <FIXE> <FIXS> final org.spine3.time.OffsetDateTime result = org.spine3.time.OffsetDateTimes.of(localDate, localTime, zoneOffset); <FIXE>
<FIXS> if ((aProjectDirectory == null) || (aProjectDirectory.equals(projectDirectry))) <FIXE>
<FIXS> return ((this.elseThen) == null) || (this.elseThen.isType(type)); <FIXE>
<FIXS> return (isGameLost()) || (((lastCardPicked) >= 0) && (((getTurn()) - (lastCardPicked)) >= ((hanabi.getPlayerCount()) * (hanabi.getRuleSet().getNbTurnsPerPlayerAfterLastCard())))); <FIXE>
<FIXS> <FIXE>
<FIXS> int result = petComparator.compare(ruby, dottie); org.junit.Assert.assertTrue((result == 0)); <FIXE>
<FIXS> btnStart.setVisibility((bool ? android.view.View.GONE : android.view.View.VISIBLE)); <FIXE>
<FIXS> com.krishagni.catissueplus.core.common.events.BulkDeleteEntityOp op = new com.krishagni.catissueplus.core.common.events.BulkDeleteEntityOp(java.util.Collections.singleton(formId)); <FIXE>
<FIXS> <FIXE>
<FIXS> annotatorstub.classification.Classifier t = new annotatorstub.classification.Classifier(); <FIXE>
<FIXS> textView.setText(contact.getName()); <FIXE>
<FIXS> @org.springframework.web.bind.annotation.RequestMapping(value = "all", method = org.springframework.web.bind.annotation.RequestMethod.GET) public java.util.List<org.openbox.sf5.model.Settings> getSettingsByUserLogin() { <FIXE> <FIXS> return new java.util.ArrayList<org.openbox.sf5.model.Settings>(); <FIXE> <FIXS> return settList; <FIXE>
<FIXS> help = new Manager.DBHelper(); <FIXE>
<FIXS> if ((((x >= 0) && (y >= 0)) && (x < (gridVals.length))) && (y < (gridVals[0].length))) <FIXE>
<FIXS> viewToSet = nativeViewTmp.nativeImplView; <FIXE>
<FIXS> double meanEdge = proc1.getStatistics().mean; <FIXE>
<FIXS> getHourlyForecastFromWg(s.getZip(), s.getEmail()); <FIXE>
<FIXS> batch.draw(region, ((xp) + (i * 36)), ((yp) + (j * 36))); <FIXE>
<FIXS> if (slist == null) { result = true; }else { final com.puppycrawl.tools.checkstyle.api.DetailAST block = slist.getFirstChild(); if ((block != null) && ((block.getType()) != (com.puppycrawl.tools.checkstyle.api.TokenTypes.SLIST))) { result = (literalDefault.getLineNo()) == (block.getLineNo()); } <FIXE>
<FIXS> stmt.executeQuery(); <FIXE>
<FIXS> contextPath = conf.getAttribute(com.amadeus.session.servlet.CookieSessionTracking.COOKIE_CONTEXT_PATH_PARAMETER, null); <FIXE>
<FIXS> remarema.domain.Network network = em.find(remarema.domain.Network.class, result.getNetworkID()); if (network != null) { networkList.add(network); } <FIXE>
<FIXS> pages_loaded_is_changed.set(page_index, new java.lang.Boolean(false)); <FIXE>
<FIXS> robot.setDriveT((-(robot.gyro.getAngle()))); <FIXE>
<FIXS> if (id == 1) { <FIXE> <FIXS> return new android.content.CursorLoader(this, Contract.Lingodecks_Tables.CONTENT_URI1, columns, null, null, "RANDOM()"); <FIXE>
<FIXS> alarmMgr.setInexactRepeating(AlarmManager.RTC, ((java.lang.System.currentTimeMillis()) + interval), interval, pendingIntent); <FIXE>
<FIXS> addQuestionToQuizQuestions(quizId, questionId, sequenceNumber, stm); <FIXE>
<FIXS> if ((list.size()) > 0) <FIXE>
<FIXS> if ((exception) == null) { <FIXE>
<FIXS> checked = resultSet.next(); <FIXE>
<FIXS> public java.lang.String addQueryParam(java.lang.String key, java.lang.String value) throws java.lang.Exception { <FIXE> <FIXS> return value; <FIXE>
<FIXS> <FIXE> <FIXS> com.ssyijiu.library.MLog.tmpTAG = com.ssyijiu.library.MLog.TAG; com.ssyijiu.library.MLog.TAG = tag; <FIXE>
<FIXS> shaderCodePanel.refreshCode(dataHandler.getCurrentTechnique(), matDef); <FIXE>
<FIXS> java.lang.String[] itemTextDisplay = com.example.boss.lesson4_alarm_clock.MainActivity.getItemsTextToDisplay(this); <FIXE> <FIXS> if ((listView) != null) { listView.setChoiceMode(ListView.CHOICE_MODE_MULTIPLE); } <FIXE>
<FIXS> newContext = new Model.ThreadContext(nextStackPointer, oldContext.getProducedItem(), Consts.STATUS_THREAD_EXECUTING, this); <FIXE>
<FIXS> if ((userSettings.getHomeTimeZone()) != null) { result.put("homeTimeZone", userSettings.getHomeTimeZone().getID()); } <FIXE>
<FIXS> if (min > max) min = max; <FIXE>
<FIXS> private static java.util.HashMap<java.lang.String, java.lang.Integer> fillMapAndCounting(java.util.HashMap<java.lang.String, java.lang.Integer> map, java.lang.String[] strArray) { <FIXE> <FIXS> return map; <FIXE>
<FIXS> ru.timuruktus.SApp.BackendlessPart.EGetMagazinesList currentEvent = ((ru.timuruktus.SApp.BackendlessPart.EGetMagazinesList) (event)); <FIXE>
<FIXS> ppDeleteProject.setEnabled(true); <FIXE>
<FIXS> @java.lang.SuppressWarnings(value = "unchecked") <FIXE> <FIXS> synchronized(type2instance) { T obj = ((T) (type2instance.get(c))); if (obj == null) { obj = loadProvider(c); type2instance.put(c, obj); } return obj; <FIXE> <FIXS> <FIXE>
<FIXS> for (int i = 0; i < numFeatures; i++) { for (int j = 0; j < numInputs; j++) { <FIXE>
<FIXS> if (tempFile != null) { <FIXE>
<FIXS> org.pinae.timon.io.SQLMapper.SQL sql = this.sqlMap.get(name); <FIXE>
<FIXS> for (int ii = 1; ii < (col2.length); ++ii) { <FIXE>
<FIXS> if (aggregation == null) return range; <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> pitchDetector.setRunning(true); <FIXE>
<FIXS> io.fabric.sdk.android.Fabric.with(this, new com.crashlytics.android.Crashlytics()); <FIXE>
<FIXS> org.junit.Assert.assertThat("parent 로 캐스팅 됐지만, 객체는 여전히 children의 속성을 갖고 있다.", accessParentCasted.getNameByProtected(), org.hamcrest.CoreMatchers.is(accessChildren.getNameByProtected())); <FIXE>
<FIXS> return kankan.wheel.widget.DateTimePicker.stringDateFormatter.format(calendar.getTime()); <FIXE>
<FIXS> return 0; <FIXE>
<FIXS> <FIXE> <FIXS> barManager.pushLiked(currentBar); <FIXE> <FIXS> update(); <FIXE>
<FIXS> <FIXE>
<FIXS> return ((("" + "\nfailing: ") + (printTestResult(this.getTestResult()))) + ((this.manualTestValidation) != null ? "\nmanual_regression: " + (printTestResult(this.manualTestValidation.getTestResult())) : "")) + ((this.evoValidation) != null ? "\nevo_regression: " + (printTestResult(this.evoValidation.getTestResult())) : ""); <FIXE>
<FIXS> list.add(createIdentifier(strings[i])); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> public java.lang.String checkInvalidField(org.openqa.selenium.WebElement field, java.lang.String value, org.openqa.selenium.By error) { <FIXE> <FIXS> return errorElem.getText(); <FIXE>
<FIXS> perMatches = (matches.size()) / ((double) (matches.getLFGroup().size())); perMatchesOnMatching = (matches.size()) / ((double) (matches.getMatchingLFGroup().size())); <FIXE>
<FIXS> public boolean addToInventory(com.bayviewglen.zork.Items item) { <FIXE> <FIXS> if (!check) { return false; }else { <FIXE> <FIXS> return true; } <FIXE>
<FIXS> protected void delete(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) throws java.io.IOException, javax.servlet.ServletException { <FIXE>
<FIXS> if ((!(previousDimen.equals(preferredSize))) || ((preferredWidth) != (-1))) { previousDimen.setSize(autoContentsFitSize()); <FIXE>
<FIXS> recyclerView = ((android.support.v7.widget.RecyclerView) (rootView.findViewById(R.id.recycler_view))); <FIXE> <FIXS> rcAdapter = new com.sunway.android.memoapp.model.MemoItemAdapter(getActivity(), sList); <FIXE>
<FIXS> <FIXE>
<FIXS> com.vividsolutions.jts.geom.Polygon polygon = ((com.vividsolutions.jts.geom.Polygon) (at.jku.cis.radar.convert.GeometryTransformator.transformToGeometry(geoJsonPolygon))); <FIXE>
<FIXS> <FIXE> <FIXS> if ((dateString != null) && (!("".equals(dateString)))) { LOGGER.debug("getting date for {}", dateString); <FIXE> <FIXS> } <FIXE>
<FIXS> return baos.toByteArray(); <FIXE>
<FIXS> return (root.get(key.hashCode(), 0, key, notFound)) != (io.coronet.pico.PMapImpl.NOT_FOUND); <FIXE>
<FIXS> if (player == (this)) return false; <FIXE>
<FIXS> java.lang.String durationString = ((duration.getStandardSeconds()) % 60) + "s"; <FIXE>
<FIXS> <FIXE> <FIXS> if ((message.contains(msg)) || (additionalMessage.contains(msg))) { <FIXE> <FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> com.ddiehl.timesincetextview.TimeSinceTextView view = new com.ddiehl.timesincetextview.TimeSinceTextView(getContext()); view.setDate(new java.util.Date((((mTime) - ((24 * 60) * 60)) * 1000))); <FIXE>
<FIXS> io.cloudsoft.winrm4j.winrm.WinRmTool.Builder builder = WinRmTool.Builder.builder(host, computerName, user, password).setAuthenticationScheme(authenticationScheme).useHttps(useSecureWinrm).port(port); <FIXE>
<FIXS> hop.setAmountOfHopsInGrams(text); <FIXE>
<FIXS> @org.springframework.web.bind.annotation.RequestMapping(value = "channel/data/{id}", method = { org.springframework.web.bind.annotation.RequestMethod.PUT }) <FIXE> <FIXS> channel.setParent(channelService.findById(c.getParent())); <FIXE>
<FIXS> if (!(password.isEmpty())) { if (!(password.matches(com.epam.danilchican.betting.validator.UserValidator.PASSWORD_REGEX))) { this.errors.add("Your password must be at least 6 characters as well as contain at least one uppercase, one lowercase, and one number."); return false; } <FIXE>
<FIXS> difficulty = bh.blockReceive(message, false); <FIXE>
<FIXS> if (paperGenerateTemplate == null) { return 0; }else { return paperGenerateTemplate.getNo(); } <FIXE>
<FIXS> barcode = new com.itr.dlaxist.BarcodeScan("UPC", str); } catch (java.lang.Exception e) { <FIXE>
<FIXS> board = drawBall(board, ballX, ballY); setBoard(board); <FIXE>
<FIXS> <FIXE>
<FIXS> if (id == (R.id.action_search)) { handleMenuSearch(); <FIXE> <FIXS> if (id == (R.id.action_refresh_list)) { checkForNewContent(); } <FIXE>
<FIXS> drive = new org.usfirst.frc.team6542.robot.XboxDrive(sparkLeft, sparkRight, myGamepad, gyro); <FIXE>
<FIXS> }, ((long) (delay))); <FIXE>
<FIXS> <FIXE>
<FIXS> if (justCleared) return ; <FIXE>
<FIXS> <FIXE>
<FIXS> T = T.getLeft(); else <FIXE> <FIXS> <FIXE>
<FIXS> }else if (i1 == 3) { motionX += d4; }else if (i1 == 4) { motionZ += d4; }else if (i1 == 5) { motionZ -= d4; } <FIXE>
<FIXS> if (cfg == null) { return null; } <FIXE>
<FIXS> <FIXE>
<FIXS> this.whiteListedPlayers(); this.whitelistedPlayersList(); java.util.List<java.lang.String> whitelistedPlayersList = this.getWhitelistedPlayersList(); java.util.List<java.lang.String> players = getPlayers(); this.clear(); this.update(whitelistedPlayersList, players); this.whiteListedPlayers(); this.whitelistedPlayersList(); <FIXE>
<FIXS> if ((re) == (((Complex) (o)).re)) if ((im) == (((Complex) (o)).im)) if ((theta) == (((Complex) (o)).theta)) if (type.equals(((Complex) (o)).type)) return true; return false; <FIXE>
<FIXS> bookingEngine.Step3_payInfo.go(); <FIXE>
<FIXS> fitnessLog = new co.rpg_fitness_app.android.rpg_fitness_app.fitness_Package.FitnessLog(this); <FIXE>
<FIXS> <FIXE> <FIXS> listView.setAdapter(new com.firefly.shoppomem.PendingItemAdapter(getActivity(), R.layout.pending_list_row, com.firefly.shoppomem.HistoryActivity.getHistoryList().get(position).getmItemsList())); <FIXE>
<FIXS> java.util.List<com.oney.WebRTCModule.PeerConnection.IceServer> iceServers = createIceServers(iceServersArray); <FIXE>
<FIXS> addEventListener(listener, (eventType != null ? new java.lang.Class[]{ eventType } : null), null, (eventSource != null ? new java.lang.Object[]{ eventSource } : null), null); <FIXE>
<FIXS> if (hi <= lo) return ; <FIXE> <FIXS> com.jaichaudhary.algorithms.sort.MergeSort.sort(a, aux, (mid + 1), hi); <FIXE>
<FIXS> result.append(element).append(sep); <FIXE>
<FIXS> data = weatherpony.pml.launch.PMLRoot.transformClass(loader, name, data, protectionDomain); <FIXE>
<FIXS> @java.lang.Override <FIXE> <FIXS> <FIXE>
<FIXS> long id, itn.issuemanager.domain.User updatedUser, java.lang.String newPassword) throws itn.issuemanager.domain.ForbiddenTypeException { <FIXE>
<FIXS> hudson.plugins.testng.Publisher before = new hudson.plugins.testng.Publisher("", false, false, true, false, 0, 0, 0, 0, 1); <FIXE>
<FIXS> if (((mTotalTrueAnswers) != 0) || ((mTotalFalseAnswers) != 0)) { <FIXE>
<FIXS> addLabel(db, s); <FIXE>
<FIXS> return null; <FIXE>
<FIXS> item.position = position; <FIXE>
<FIXS> return () -> uk.gov.gchq.gaffer.commonutil.stream.Streams.toStream(operation.getInput()).map(EntitySeed::new).iterator(); <FIXE>
<FIXS> partypeople.Event temp = event.getValue(); if (temp != null) { created.add(temp); } <FIXE>
<FIXS> if (historyResetFlag) { historyValue = new java.lang.StringBuilder(); historyResetFlag = false; } <FIXE> <FIXS> <FIXE>
<FIXS> fail("Expected vocabulary not found exception"); <FIXE> <FIXS> assertNotNull("Expected exception", exception); <FIXE>
<FIXS> assertEquals(id, compound.getMolId()); <FIXE>
<FIXS> return new java.util.HashMap<>(); <FIXE>
<FIXS> public void actionPerformed(java.awt.event.ActionEvent event) { <FIXE>
<FIXS> for (int x = 0; x < (play1.getSize()); x++) { <FIXE>
<FIXS> java.util.Date dDate = null; <FIXE> <FIXS> dDate = dateFormat.parse(sDate); <FIXE> <FIXS> <FIXE> <FIXS> return dDate; <FIXE>
<FIXS> protected boolean checkCollisionConnection(java.lang.Object object, int x, int y) { boolean result = false; <FIXE> <FIXS> result = addCollisionConnection(object, x, y, componentViewsProvider, false); <FIXE> <FIXS> result = found; <FIXE> <FIXS> result = addCollisionConnection(object, x, y, componentViewsConsumer, true); <FIXE> <FIXS> return result; <FIXE>
<FIXS> return ; <FIXE>
<FIXS> <FIXE>
<FIXS> java.lang.reflect.Method m = android.content.Intent.class.getMethod("toUri", int.class); <FIXE>
<FIXS> if (((event.getTransition()) != null) && ((event.getTransition().getDestination()) == (ReplicationState.IDLE))) { <FIXE>
<FIXS> if ((player.getStatus()) == (ArenaPlayer.Status.NULL)) { <FIXE>
<FIXS> if (null == child) { return ; } <FIXE>
<FIXS> messageAtField = uk.gov.dvsa.motr.web.validator.PhoneNumberValidator.EMPTY_PHONE_NUMBER_MESSAGE; <FIXE>
<FIXS> <FIXE>
<FIXS> analyzeMethodOverrideCallbacks(sc, null); <FIXE>
<FIXS> junit.framework.Assert.assertEquals("Incorrect focus", com.github.bordertech.wcomponents.examples.AutoReFocusRepeaterExample_Test.driver.findWRadioButton(byWComponentPath(path)).getActiveId(), com.github.bordertech.wcomponents.examples.AutoReFocusRepeaterExample_Test.driver.switchTo(true).activeElement().getAttribute("id")); <FIXE>
<FIXS> return questions; <FIXE>
<FIXS> if ((b[(off + n)]) == '\n') { <FIXE>
<FIXS> public net.arcanesanctuary.Configuration.Conf get(java.lang.String variable) { <FIXE> <FIXS> return conf; <FIXE> <FIXS> return conf.get(variable); <FIXE>
<FIXS> boolean secure = false; <FIXE> <FIXS> testCapturedProps(secure); <FIXE>
<FIXS> <FIXE>
<FIXS> int number = StdRandom.uniform(count); <FIXE>
<FIXS> if (isContainedInDirectoryWithSuffix(resourceCenter, contents, VirtualModelResourceFactory.FML_SUFFIX)) { <FIXE>
<FIXS> <FIXE>
<FIXS> com.getlosthere.completeme.Item updatedItem = com.getlosthere.completeme.Item.load(com.getlosthere.completeme.Item.class, items.get(position).getId()); <FIXE>
<FIXS> <FIXE>
<FIXS> if (dat == null) return ret; <FIXE>
<FIXS> java.io.FileInputStream excelFile = new java.io.FileInputStream(new java.io.File(this.filename)); <FIXE>
<FIXS> org.junit.Assert.assertTrue("checkRulesTest2 failed", ((board.checkRules(new com.letitgo.Point(board, 0, 8), Board.FRIENDLY)) == false)); <FIXE>
<FIXS> return false; <FIXE>
<FIXS> cellGrid[coord[0]][coord[1]].playMove(false); }else { <FIXE> <FIXS> <FIXE>
<FIXS> closeParametersDialog(); <FIXE>
<FIXS> <FIXE>
<FIXS> if (!(this.index.equals(other.index))) { <FIXE>
<FIXS> btnRefresh.setEnabled(false); <FIXE>
<FIXS> int length; <FIXE>
<FIXS> if ((name == null) || (name.trim().isEmpty())) { <FIXE> <FIXS> return org.inventivetalent.bossbar.BossBarAPI.Color.valueOf(name.trim().toUpperCase()); <FIXE>
<FIXS> throw new java.lang.IllegalArgumentException("NETWORK : url can't be null !!!!"); <FIXE>
<FIXS> transactionBean.setAmount(amount); <FIXE> <FIXS> accountUpdateAmountService.updateAmount(sourceAccountBean.getAccountId(), (-amount)); <FIXE>
<FIXS> if (net.minecraft.server.MinecraftServer.getServer().getConfigurationManager().func_152596_g(gp)) { <FIXE>
<FIXS> for (fi.riissanen.gwent.engine.assets.AssetParams params : queue.get(loader)) { fi.riissanen.gwent.engine.assets.Asset asset = loader.load(params); if (asset != null) { assets.put(params.getFilename(), asset); } <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> return (category == null) || ((!(category.contains(com.kabouzeid.gramophone.auto.MediaIDHelper.CATEGORY_SEPARATOR))) && (!(category.contains(com.kabouzeid.gramophone.auto.MediaIDHelper.LEAF_SEPARATOR)))); <FIXE>
<FIXS> system.scheduler().schedule(scala.concurrent.duration.Duration.create(1, java.util.concurrent.TimeUnit.DAYS), scala.concurrent.duration.Duration.create(1, java.util.concurrent.TimeUnit.DAYS), userCleanUpActor, "tick", system.dispatcher(), null); <FIXE>
<FIXS> session.init("TestClient/1.0", java.util.Collections.emptyMap(), (-1), null, null); <FIXE>
<FIXS> <FIXE>
<FIXS> return repoCache.get(repositoryId); <FIXE>
<FIXS> android.widget.TextView view = ((android.widget.TextView) (mContentView.findViewById(R.id.device_info))); <FIXE>
<FIXS> float deltaX = java.lang.Math.abs(((getTankX(tank)) - (getProjectileX(projectile)))); float deltaY = java.lang.Math.abs(((getTankY(tank)) - (getProjectileY(projectile)))); <FIXE>
<FIXS> com.bumptech.glide.Glide.with(this).load(new java.io.File(mImagePath)).apply(new com.bumptech.glide.request.RequestOptions().dontAnimate().diskCacheStrategy(DiskCacheStrategy.NONE).skipMemoryCache(true).override(imageSize, imageSize)).into(mImage); <FIXE>
<FIXS> assertThat(connection.getCloseCalls(), org.hamcrest.core.Is.is(0)); <FIXE> <FIXS> assertThat(connection.getCloseCalls(), org.hamcrest.core.Is.is(1)); <FIXE>
<FIXS> <FIXE>
<FIXS> final java.lang.Object object = mDocument.getObjectForId(request.nodeId); mDocument.postAndWait(new java.lang.Runnable() { <FIXE> <FIXS> mDocument.setAttributesAsText(object, request.text); <FIXE>
<FIXS> android.util.Log.d(org.eclipse.paho.android.service.AlarmPingSender.TAG, ("Register alarmreceiver to MqttService" + action)); <FIXE>
<FIXS> <FIXE>
<FIXS> mockMvc.perform(get(com.cinema.controller.rest.SessionControllerTest.SESSION_GET_BY_ID).accept(MediaType.APPLICATION_JSON)).andDo(org.springframework.test.web.servlet.result.MockMvcResultHandlers.print()); <FIXE>
<FIXS> <FIXE> <FIXS> char taskType = index.charAt(0); int taskNum = java.lang.Integer.parseInt(index.substring(1)); <FIXE>
<FIXS> public static int getStatusBarHeight(android.content.Context context) { <FIXE> <FIXS> int resId = context.getResources().getIdentifier("status_bar_height", "dimen", "android"); <FIXE> <FIXS> result = context.getResources().getDimensionPixelSize(resId); <FIXE>
<FIXS> <FIXE> <FIXS> return referer.substring(((referer.indexOf(path)) + (path.length()))); <FIXE>
<FIXS> if (oldLayer != null) { nl.weeaboo.vn.core.impl.DrawablePart.LOG.debug("Moved drawable part: {} -> {}", oldLayer, newLayer); } <FIXE>
<FIXS> if ((elements) >= (CAP)) { <FIXE> <FIXS> bloomFilter.put(toAdd); elements += 1; <FIXE>
<FIXS> return (((((block()) || (defVariables())) || (expressionOperator())) || (ifOperator())) || (returnOperator())) || (emptyOperator()); <FIXE>
<FIXS> if (pathWalk == null) return true; <FIXE>
<FIXS> @org.junit.Ignore <FIXE> <FIXS> <FIXE>
<FIXS> public static com.ustadmobile.core.controller.CatalogController makeControllerByURL(java.lang.String url, int resourceMode, java.lang.String httpUser, java.lang.String httpPassword, int flags, java.lang.Object context) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException { <FIXE>
<FIXS> <FIXE>
<FIXS> test.assertEquals(result, (!toBeCancelled)); <FIXE>
<FIXS> }else { com.apptentive.android.sdk.module.messagecenter.ApptentiveToastNotificationManager manager = com.apptentive.android.sdk.module.messagecenter.ApptentiveToastNotificationManager.getInstance(null, false); if (manager != null) { manager.cleanUp(); <FIXE> <FIXS> currentForgroundApptentiveActivity = null; } <FIXE>
<FIXS> public org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<org.apache.commons.math3.analysis.differentiation.DerivativeStructure> dragAcceleration(final org.orekit.time.AbsoluteDate date, final org.orekit.frames.Frame frame, final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<org.apache.commons.math3.analysis.differentiation.DerivativeStructure> position, final org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<org.apache.commons.math3.analysis.differentiation.DerivativeStructure> rotation, final org.apache.commons.math3.analysis.differentiation.DerivativeStructure mass, final org.apache.commons.math3.analysis.differentiation.DerivativeStructure density, final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<org.apache.commons.math3.analysis.differentiation.DerivativeStructure> relativeVelocity) { return new org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<org.apache.commons.math3.analysis.differentiation.DerivativeStructure>(relativeVelocity.getNorm().multiply(density.multiply((((dragCoeff) * (crossSection)) / 2))).divide(mass), relativeVelocity); <FIXE>
<FIXS> int val = java.lang.Integer.parseInt(value); <FIXE>
<FIXS> java.lang.String[] x = calIO.CalFile.CalReadV2(date, false); <FIXE>
<FIXS> if (user == null) { return "path.page.index"; } <FIXE>
<FIXS> for (int i = (lastServicedRequesterIndex) + 1, count = 0; count < (requesters.size()); i++ , count++) { <FIXE> <FIXS> RequesterT requester = requesters.get((i % (requesters.size()))); <FIXE>
<FIXS> for (int i = 0; i < (the.length); i++) { a = (a + sep) + (the[i]); <FIXE>
<FIXS> assertEquals("2003", result.get(0).getValue()); <FIXE>
<FIXS> android.view.View view = getInnerView(); if (view == null) return ; java.util.concurrent.ConcurrentHashMap<java.lang.String, com.taobao.weex.ui.component.WXScroller.AppearData> appearMap = mAppearMap.get(view); <FIXE>
<FIXS> return (slot == 10) || (slot == 11); <FIXE>
<FIXS> while (((currentIterator) == null) || (!(currentIterator.hasNext()))) { <FIXE> <FIXS> } return ((currentIterator) != null) && (currentIterator.hasNext()); <FIXE>
<FIXS> <FIXE>
<FIXS> if (requestCode == (com.airsaid.mpermissionutils.MPermissionUtils.mRequestCode)) { <FIXE>
<FIXS> if (maxUserSessionFromApplication < (net.whydah.token.user.AuthenticatedUserTokenRepository.DEFAULT_SESSION_EXTENSION_TIME_IN_SECONDS)) { <FIXE>
<FIXS> lib.returnBook(lib.getCollection().get(0)); <FIXE>
<FIXS> assertEquals("text/plain;charset=ISO-8859-1", servletResponse.getHeader("Content-Type")); assertEquals("Foo", servletResponse.getContentAsString()); <FIXE>
<FIXS> mutableData.setValue(0); <FIXE> <FIXS> mutableData.setValue(((mutableData.getValue(java.lang.Integer.class)) + value)); <FIXE>
<FIXS> java.lang.String hql = "select new com.cooksys.fastbook.models.PostWithLikeData(p, count(p.id), " + ((((((("CASE l.user.id WHEN :loggedInId THEN true " + "ELSE false END) ") + "from User u ") + "inner join u.posts p ") + "left join p.likes l ") + "where u.id = :userId ") + "group by p.id ") + "order by p.timestamp desc"); <FIXE>
<FIXS> bank.transfer(bank.getClientByName("Carlos"), bank.getClientByName("Melo"), 3000); <FIXE>
<FIXS> <FIXE>
<FIXS> book = bookService.createBook(book.getTitle(), book.getAuthor(), book.getEdition(), isbn, book.getYearOfPublication(), null); <FIXE>
<FIXS> return "redirect:/admin/albums/"; <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> if (column == null) { return null; } <FIXE>
<FIXS> continue; <FIXE>
<FIXS> return 0; <FIXE>
<FIXS> <FIXE>
<FIXS> if (!(origns.contains(j.getOrigin()))) { <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> for (T connection : connections) { <FIXE>
<FIXS> public boolean hasBeenUpdated() throws java.io.IOException { <FIXE>
<FIXS> return ; <FIXE>
<FIXS> mCamera.stopPreview(); <FIXE> <FIXS> <FIXE>
<FIXS> return (super.canRecieve(m, mach, port)) && (mach == null ? true : new com.loovjo.loo2D.utils.Vector(mach.x, mach.y).equals(getStart())); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> new android.os.CountDownTimer(((com.accountabilibuddies.accountabilibuddies.activity.SplashActivity.DELAY) * 1000), 1000) { <FIXE>
<FIXS> if (acebOnly) { <FIXE> <FIXS> if (isDome) { reviseData(result); <FIXE>
<FIXS> listener.storeDistributedInfo(jobId, ses, null, null); <FIXE>
<FIXS> <FIXE>
<FIXS> assertTrue((args == result)); <FIXE>
<FIXS> net.torocraft.chess.engine.chess.ChessMoveResult moveResult = getChessPieceWorker(internalState, chessPieceState).getLegalMoves(); <FIXE>
<FIXS> static void commandLoad() { <FIXE>
<FIXS> public java.util.List<java.awt.Point> showAvailableSquares(int y, int x) { <FIXE> <FIXS> java.util.List<java.awt.Point> moves = null; <FIXE> <FIXS> moves = clickedPiece.getAvailableMoves(myBoard.getMyBoardArray()); <FIXE> <FIXS> return moves; <FIXE>
<FIXS> while ((results.size()) > (maxResult)) <FIXE>
<FIXS> if ((this.iv.getType()) == null) <FIXE> <FIXS> int pos = spinnerArrayAdapter.getPosition(this.iv.getType()); <FIXE>
<FIXS> <FIXE>
<FIXS> try (java.io.PrintWriter printWriter = new java.io.PrintWriter(new java.io.FileWriter(pointsFile))) { <FIXE> <FIXS> <FIXE>
<FIXS> ((com.quickblox.sample.videochatwebrtcnew.activities.NewDialogActivity) (getActivity())).getCurrentSession().hangUp(userInfo); <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> while (sk.game.Game.running) { if (sk.game.Window.shouldClose()) sk.game.Game.running = false; <FIXE> <FIXS> } <FIXE>
<FIXS> if (logBean != null) { responseContext.getHeaders().put(org.mockenize.provider.filter.ResponseLoggingFilter.KEY, com.google.common.collect.Lists.<java.lang.Object>newArrayList(key)); logBean.setResponse(mapResponseLogBean(responseContext)); loggingService.save(logBean); org.jboss.logging.MDC.remove(org.mockenize.provider.filter.ResponseLoggingFilter.KEY); } <FIXE>
<FIXS> int actualResult = seriesAnalysis.addTemps(1.0, 3.1); <FIXE>
<FIXS> return drain(from, resource.amount, doDrain); <FIXE>
<FIXS> <FIXE>
<FIXS> if (targetNode != null) { <FIXE>
<FIXS> if ((getInnerGeometry()) == null) return result; <FIXE>
<FIXS> com.izettle.metrics.influxdb.InfluxDbTcpSender influxDbTcpSender = new com.izettle.metrics.influxdb.InfluxDbTcpSender("0.0.0.0", 10080, 1000, "test", ""); <FIXE>
<FIXS> <FIXE>
<FIXS> if (p.getName().equals(petName)) { <FIXE>
<FIXS> factoryCreator.prepare(null, true, null, null); <FIXE>
<FIXS> private boolean isClickInExpandedBoundaries(float x, float y) { <FIXE>
<FIXS> return new java.lang.Float[]{ (value[0]) / normal , (value[1]) / normal }; <FIXE>
<FIXS> this.logger.error(java.text.MessageFormat.format(com.qut.middleware.spep.sessions.Messages.getString("SessionCacheImpl.11"), e.toString()), e); <FIXE>
<FIXS> if ((session == null) || ((session.getAttribute("userName")) == null)) { <FIXE> <FIXS> }else { chain.doFilter(req, resp); } <FIXE>
<FIXS> edges = new java.util.HashSet(edgeList); <FIXE> <FIXS> edges = new java.util.HashSet<>(); <FIXE>
<FIXS> return loadModule(moduleId, net.orzo.scripting.SourceCode.fromFile(module)); <FIXE>
<FIXS> <FIXE>
<FIXS> test.createDB.connection = java.sql.DriverManager.getConnection(test.createDB.url, "root", "root"); <FIXE>
<FIXS> <FIXE>
<FIXS> connection.local().createStream(io.netty.microbench.http2.Http2PriorityTreeBenchmark.toStreamId(i), false); <FIXE>
<FIXS> return new som.interpreter.actors.SPromise.SDebugPromise(owner, false, false, false); <FIXE> <FIXS> return new som.interpreter.actors.SPromise.STracingPromise(owner, false, false, false); <FIXE>
<FIXS> output.setMaxLength(65535); <FIXE>
<FIXS> double freePercent; if (totalSwap > 0) { double freePercentDecimal = ((double) (freeSwap)) / ((double) (totalSwap)); freePercent = getPercentsValue(freePercentDecimal); }else { freePercent = 0; } <FIXE>
<FIXS> if (result == null) return new java.lang.Long[]{ vsId }; <FIXE>
<FIXS> showPasswordError(messageId); <FIXE> <FIXS> <FIXE>
<FIXS> left = resolveWidth(left, signature); <FIXE>
<FIXS> int month = (cal.get(java.util.Calendar.MONTH)) + 1; <FIXE>
<FIXS> return ((name.equals(that.name)) && (date.equals(that.date))) && (time.equals(that.time)); <FIXE>
<FIXS> die(); <FIXE> <FIXS> <FIXE>
<FIXS> if ((AdvancedXP.instance.theme) != null) { java.lang.String tempFileNameStorage = AdvancedXP.instance.theme.fileName; AdvancedXP.instance.theme = co.bugg.advancedxp.util.FileUtil.deserializeTheme(new java.io.File(((AdvancedXP.instance.themesPath) + tempFileNameStorage))); AdvancedXP.instance.theme.fileName = tempFileNameStorage; } <FIXE>
<FIXS> com.johnuckele.vtest.Tester.test((lhs > (rhs + (java.lang.Math.abs(margin))))); <FIXE>
<FIXS> int numberOfApplicationsArchived = theModel.archiveApplications(containingFrame, new java.sql.Timestamp(((java.util.Date) (model1.getValue())).getTime())); <FIXE>
<FIXS> query.addListenerForSingleValueEvent(new de.tomgrill.gdxfirebase.core.database.ValueEventListener() { <FIXE> <FIXS> }); <FIXE>
<FIXS> if (day >= (joshie.harvest.api.calendar.CalendarDate.DAYS_PER_SEASON)) { <FIXE>
<FIXS> <FIXE>
<FIXS> return new org.sosy_lab.cpachecker.cpa.smg.refiner.SMGPrecision.SMGRefineablePrecision(pPrecision.logger, new org.sosy_lab.cpachecker.cpa.smg.refiner.SMGPrecision.SMGPrecisionAbstractionOptions(pPrecision.allowsHeapAbstraction(), true, false), emptyMemoryPaths, emptyAbstractionBlocks, emptyStackVariable); <FIXE>
<FIXS> protected byte[] prependSyn(byte[] action) { <FIXE>
<FIXS> undoCommand.setData(model, history, undoHistory, null); <FIXE>
<FIXS> if (!(com.onpositive.text.analisys.Euristic.registered.containsKey(clazz))) <FIXE>
<FIXS> if ((endDate.getTime()) >= (calendarEndDay.getTime())) { }else { <FIXE>
<FIXS> <FIXE> <FIXS> sendFile(track); <FIXE> <FIXS> }else { sendFile(silence); <FIXE>
<FIXS> public int clear() { <FIXE> <FIXS> int count = 0; <FIXE> <FIXS> while (e != null) { <FIXE> <FIXS> count++; <FIXE> <FIXS> content[i] = null; <FIXE> <FIXS> return count; <FIXE>
<FIXS> private static boolean isInternetAvailable(android.content.Context context) { android.net.NetworkInfo info = ((android.net.ConnectivityManager) (context.getSystemService(Context.CONNECTIVITY_SERVICE))).getActiveNetworkInfo(); <FIXE>
<FIXS> org.junit.Assert.assertTrue("batch removal succeeds", constructor.removeBatch(new java.lang.String[]{ this.getRandString() , this.getRandString() , this.getRandString() }, "Search Suggestions")); <FIXE>
<FIXS> <FIXE>
<FIXS> java.util.Set<org.molgenis.data.Entity> resultSet = newHashSet(person1, person2, person3); <FIXE>
<FIXS> @java.lang.Override <FIXE> <FIXS> mForegroundBoundsChanged = true; <FIXE> <FIXS> <FIXE>
<FIXS> if ((coverChoices.size()) == 0) { minimizeCovers(covers); return ; } <FIXE>
<FIXS> i.putExtra("customerNo", rev.getCustomerNo()); <FIXE>
<FIXS> if (clazz.equals(com.example.nikolay.alarm.model.Day.class)) { return io.realm.io.realm.DayRealmProxy.validateTable(sharedRealm, allowExtraColumns); } <FIXE> <FIXS> <FIXE>
<FIXS> CURRENT_LIMIT = edu.wpi.first.wpilibj.smartdashboard.SmartDashboard.getInt(org.usfirst.frc2619.PlyBot2017.subsystems.DriveTrain.CURRENT_LIMIT_KEY); <FIXE>
<FIXS> return ((((!(citate.isEmpty())) || ((translationRating) > 0)) || ((rating) > 0)) || ((carteCitita) != null)) || (org.apache.commons.lang3.StringUtils.isNotEmpty(review)); <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> android.graphics.Bitmap source = getBitmap(); if (source == null) return ; <FIXE> <FIXS> <FIXE>
<FIXS> com.himself12794.powersapi.storage.PropertiesManager.runOnJoinWorld(((net.minecraft.entity.EntityLivingBase) (event.entity)), event.world); <FIXE> <FIXS> com.himself12794.powersapi.storage.PropertiesManager.syncPlayerToClient(((net.minecraft.entity.player.EntityPlayerMP) (event.entity))); <FIXE>
<FIXS> for (java.lang.String fluidName : cofh.thermalexpansion.util.managers.dynamo.MagmaticManager.getFuels()) { <FIXE>
<FIXS> mask |= (getRawButton((button + 1)) ? 1 : 0) << button; <FIXE>
<FIXS> throw new java.lang.IllegalArgumentException("IGFS name cannot be null"); <FIXE>
<FIXS> testModules("test.js", com.google.javascript.jscomp.LINE_JOINER.join("(function (global, factory) {", " typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :", " typeof define === 'function' && define.amd ? define(['exports'], factory) :", " (factory((global.L = {})));", "}(this, (function (exports) {", " 'use strict';", " var webkit = userAgentContains('webkit');", " function userAgentContains(str) {", " return navigator.userAgent.toLowerCase().indexOf(str) >= 0;", " }", " exports.webkit = webkit", "})));"), com.google.javascript.jscomp.LINE_JOINER.join("/** @const */ var module$test={};", "{", " var exports$jscomp$inline_3$$module$test=module$test;", " var userAgentContains$jscomp$inline_5$$module$test=function(str$jscomp$inline_6){", " return navigator.userAgent.toLowerCase().indexOf(str$jscomp$inline_6)>=0;", " };", " var webkit$jscomp$inline_4$$module$test=userAgentContains$jscomp$inline_5$$module$test('webkit');", " exports$jscomp$inline_3$$module$test.webkit=webkit$jscomp$inline_4$$module$test;", "}")); <FIXE>
<FIXS> while (claimUris.hasNext()) { <FIXE> <FIXS> } <FIXE>
<FIXS> private synchronized void addEmailStore(edu.stanford.muse.email.EmailStore stores) { <FIXE>
<FIXS> <FIXE>
<FIXS> java.util.List<java.util.List<java.lang.String>> expectedRows = generateExpectedRows(); <FIXE>
<FIXS> return this.mAdapter.getItemViewType((position - (getHeaderCount()))); <FIXE>
<FIXS> <FIXE>
<FIXS> assertThat(provinceClass.getLabel(), equalTo("Province")); assertThat(territoryClass.getLabel(), equalTo("Territoire")); <FIXE>
<FIXS> if (this.startNodeChanged) { <FIXE> <FIXS> this.startNodeChanged = false; <FIXE>
<FIXS> org.json.JSONObject temp = content; <FIXE> <FIXS> temp = createAddress(temp, address); <FIXE> <FIXS> return temp; <FIXE>
<FIXS> when(facilityRepository.getById(facilityId)).thenReturn(defaultFacility); when(productService.getByCode(productCode)).thenReturn(null); <FIXE>
<FIXS> assertEquals("Henk", twuf.getName()); assertEquals("NL", twuf.getNation()); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> parent.setProgBar_loading(((i)++)); <FIXE> <FIXS> } <FIXE>
<FIXS> if ((user.equals(org.opends.server.snmp.SNMPUserAcl.DEFAULT_USER)) || (user.equals(org.opends.server.snmp.SNMPUserAcl.ADMIN_USER))) { <FIXE> <FIXS> return (this.usersList.contains(org.opends.server.snmp.SNMPUserAcl.ALL_USERS_ALLOWED)) || (this.usersList.contains(user)); <FIXE>
<FIXS> execute(Opcodes.LOOKUPSWITCH, 0, 0, null, null); <FIXE>
<FIXS> break; <FIXE> <FIXS> break; <FIXE> <FIXS> return super.onOptionsItemSelected(item); <FIXE>
<FIXS> child = new net.sf.memoranda.TaskImpl(new java.util.ArrayList<net.sf.memoranda.Task>()); <FIXE> <FIXS> assertEquals(child, task.getSubTask("child")); <FIXE>
<FIXS> java.lang.System.out.println((("Round " + 1) + ":")); playRound(); <FIXE>
<FIXS> <FIXE>
<FIXS> breadcrumbToolbarListener.onBreadcrumbToolbarItemPop((i - 1)); <FIXE> <FIXS> <FIXE>
<FIXS> android.app.ActivityManager manager = null; manager = ((android.app.ActivityManager) (getSystemService(Context.ACTIVITY_SERVICE))); <FIXE> <FIXS> java.lang.System.out.println(service.service.getClassName()); <FIXE>
<FIXS> if ((value == null) && ((!(lowerBound.isEmpty())) || (!(upperBound.isEmpty())))) { return false; } <FIXE>
<FIXS> if (!(temp.moved)) { temp.moved = true; <FIXE> <FIXS> } <FIXE>
<FIXS> if ((highestAccessLevel == null) || ((accessLevel.compareTo(highestAccessLevel)) >= 0)) { <FIXE>
<FIXS> return onKeys(com.couchbase.client.java.document.json.JsonArray.from(((java.lang.Object[]) (constantKeys)))); <FIXE>
<FIXS> if ((((selectedDayPosition) != null) && (dayPosition != null)) && ((dayPosition + 1) != (selectedDayPosition))) { if ((actionBar != null) && ((actionBar.getNavigationMode()) == (android.support.v7.app.ActionBar.NAVIGATION_MODE_LIST))) { <FIXE>
<FIXS> int resId = (com.android.mms.rcs.RcsUtils.saveRcsMassage(this, rcs_id)) ? R.string.copy_to_sdcard_success : R.string.copy_to_sdcard_fail; <FIXE>
<FIXS> <FIXE>
<FIXS> org.wso2.carbon.apimgt.core.impl.APIStoreImpl.log.error(errorMsg, e); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> if ((((maxStartValue) < (absoluteMaxValue)) && ((maxStartValue) > (absoluteMinValue))) && ((maxStartValue) >= (absoluteMinStartValue))) { <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> protected static java.io.File getLoaderFile(java.lang.Class<?> clazz, java.lang.String fileName) { <FIXE> <FIXS> return new java.io.File(new java.io.File(plugin.getPath(), "loader"), fileName); <FIXE>
<FIXS> super.onCreateDrawer(); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> return ; <FIXE>
<FIXS> testScriptFile(SCRIPT_TEXT, argList, EXPECTED_PATTERN, true); <FIXE>
<FIXS> private synchronized boolean readWait() { <FIXE> <FIXS> try { wait(1000); } catch (java.lang.InterruptedException e) { java.lang.Thread.currentThread().interrupt(); <FIXE>
<FIXS> com.novoda.pianohero.Sequence updatedSequence = sequence.error(note); <FIXE>
<FIXS> <FIXE>
<FIXS> game.endTurn(); <FIXE> <FIXS> <FIXE> <FIXS> cluedo.Output.setText((("Player " + (game.getCurrentPlayer().getName())) + "\'s turn\n")); <FIXE>
<FIXS> <FIXE>
<FIXS> org.assertj.core.api.Assertions.assertThat(klondike.getTableauPile(1)).hasSize(1); <FIXE>
<FIXS> for (int i = 0; i < (complexOutput.length); i++) { <FIXE>
<FIXS> linked_yarn.LinkedYarn.Node nodeToRemoveFrom = this.findFirstNodeWith(toRemove); <FIXE> <FIXS> (this.modCount)++; <FIXE> <FIXS> (this.size)--; <FIXE> <FIXS> this.destroyNode(nodeToRemoveFrom); <FIXE>
<FIXS> this.add(board[x][(((boardHeight) - 1) - y)]); <FIXE>
<FIXS> <FIXE>
<FIXS> com.pottda.game.InventoryBlueprint.newBlueprint(reader.parseInventory(f)); <FIXE>
<FIXS> httpInvoker.config().setUrl(uploadUrl); <FIXE>
<FIXS> <FIXE>
<FIXS> if ((mCurrentOpContext) == null) return ; <FIXE>
<FIXS> timeSignatureText.setText(((("" + beat) + "/") + value)); <FIXE>
<FIXS> if (this.cur.hasNext()) { return true; } while (this.hasNext()) { <FIXE> <FIXS> if (this.cur.hasNext()) { return true; } } return false; <FIXE>
<FIXS> <FIXE>
<FIXS> int parentIdx = (idx - 1) / 2; <FIXE>
<FIXS> org.quattor.pan.type.BaseType type = new org.quattor.pan.type.ChoiceType(null, null, args); <FIXE>
<FIXS> existing.setAmount(("" + ((java.lang.Integer.parseInt(existing.getAmount())) + 1))); <FIXE>
<FIXS> controllers.Application.calendar(name, null, null, (-1)); <FIXE>
<FIXS> <FIXE>
<FIXS> (frontend.app.TextProcessor.wordsInserted)++; PDFContainer.wordsOccurence.put(word, 0); <FIXE>
<FIXS> if ("".equalsIgnoreCase(mP1.getCode())) <FIXE>
<FIXS> synchronized void register(com.kk.bus.Bus bus, java.lang.Object objectToRegister, java.lang.reflect.Method producerMethod, com.kk.bus.DeliveryContext deliveryContext) { com.kk.bus.EventDeliverer eventDeliverer = mObjectDeliverers.get(objectToRegister); if (eventDeliverer == null) { eventDeliverer = new com.kk.bus.EventDeliverer(bus, objectToRegister, deliveryContext); mObjectDeliverers.put(objectToRegister, eventDeliverer); <FIXE> <FIXS> eventDeliverer.setProducerMethod(producerMethod); <FIXE>
<FIXS> this.physikTyp = typ; <FIXE>
<FIXS> myFaction.msg(TL.COMMAND_FRIENDLYFIRE_TOGGLED, fme.describeTo(myFaction, true), ((!friendlyFire ? "en" : "dis") + "abled")); <FIXE>
<FIXS> try { sc.setProgram(sc.getDocumentText()); } catch (java.lang.NullPointerException e) { } <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> if ((chatId == 0) || (action == null)) <FIXE>
<FIXS> return timestamp > (lastBackupTS); <FIXE>
<FIXS> dialog.dismiss(); <FIXE>
<FIXS> return org.cubeengine.pericopist.util.Misc.getContent(url, java.nio.charset.Charset.forName(charsetName), readTimeout).getValue(); <FIXE>
<FIXS> mSpeed = ((mSpeedAccel) * vel_weight) + ((currentGPSReadings[0]) * gps_weight); <FIXE>
<FIXS> EntryListRowHolder.date.setText((((date.getDate()) + ". ") + (months[date.getMonth()]))); <FIXE>
<FIXS> if (h.startsWith(VBox5.VERSION)) <FIXE> <FIXS> if (h.startsWith(VBox43.VERSION)) <FIXE>
<FIXS> blockPositionByHash.size(newHashSize); <FIXE>
<FIXS> <FIXE>
<FIXS> return true; <FIXE>
<FIXS> return ++stringPosition; <FIXE>
<FIXS> return ; <FIXE>
<FIXS> student = new model.Student("Jacó Mario Souza", cpf, rg, date, null, address, phone1, phone2, "Milene Souza Medeiros", "Mário Souza Filho", 1); <FIXE>
<FIXS> break; <FIXE>
<FIXS> lastPosition[1] = yPosition; <FIXE>
<FIXS> attackCooldown -= delta; if ((attackCooldown) < 0.0F) attackCooldown = 0.0F; if ((attacking) && ((attackCooldown) == 0.0F)) { <FIXE>
<FIXS> if (line >= 0) { int currentCount = --(counts[line]); if (currentCount == 0) { times[line] += (java.lang.System.nanoTime()) - (start[line]); start[line] = 0L; } if (line > (max)) { max = line; } <FIXE>
<FIXS> if ((com.students.lmi.lmi_app.News.referencelist.size()) != 0) { android.content.Intent intent = new android.content.Intent(this, com.students.lmi.lmi_app.CurrentNews.class); dialog2 = android.app.ProgressDialog.show(this, "Загрузка", "Подождите, новость загружается..."); intent.putExtra("reference", com.students.lmi.lmi_app.News.referencelist.get(position)); startActivity(intent); } <FIXE>
<FIXS> final java.lang.String[] actual = tested.getArray("key", input); <FIXE>
<FIXS> assertEquals(null, findPrinter(java.util.Collections.emptyMap())); <FIXE>
<FIXS> createTopic(title, content, date); <FIXE>
<FIXS> for (int i = (field.length) - 1; i >= 0; i--) { <FIXE> <FIXS> } <FIXE>
<FIXS> if (account >= 0) { java.lang.System.out.println("Enter the amount that you would like to Deposit : "); double amount = 0; try { amount = java.lang.Double.parseDouble(keyboard.nextLine()); } catch (java.lang.NumberFormatException e) { amount = 0; } atm.getPerson(account).getAccount().deposit(amount); <FIXE> <FIXS> <FIXE>
<FIXS> link.attr(Constants.HREF, ((relPath + "/") + (utils.Constants.PAGE_NAME))); <FIXE>
<FIXS> if ((!(mSearchMode)) && ((mCreateFab) != null)) { <FIXE>
<FIXS> while ((turnCount) == 0) { <FIXE>
<FIXS> try { com.prismaqf.callblocker.sql.ServiceRun lastRun = com.prismaqf.callblocker.sql.ServiceRun.LatestRun(db); setNumReceived(lastRun.getNumReceived()); setNumTriggered(lastRun.getNumTriggered()); myRunId = com.prismaqf.callblocker.sql.ServiceRun.InsertAtServiceStart(db); com.prismaqf.callblocker.sql.ServiceRun.UpdateWhileRunning(db, myRunId, (-1), (-1)); } finally { db.close(); } <FIXE>
<FIXS> private void doShare(com.liulishuo.share.content.ShareContent shareContent, java.lang.String appId) { <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> return false; <FIXE> <FIXS> if (one.equals(two)) return true; <FIXE>
<FIXS> rectangle.set(((point.x) - ((rectangle.width()) / 2)), ((point.y) - ((rectangle.height()) / 2)), ((point.x) + ((rectangle.width()) / 2)), ((point.y) + ((rectangle.height()) / 2))); <FIXE>
<FIXS> private void setActivePlayers() { <FIXE>
<FIXS> showPasswordFieldAndFocus(); <FIXE>
<FIXS> public static java.util.Date setTimeToStartOfDay(java.util.Date date) { <FIXE>
<FIXS> public void startCLI() { <FIXE>
<FIXS> JavafxLab6.Equipment equip = new JavafxLab6.Equipment(serialNumber, power, name); <FIXE>
<FIXS> <FIXE> <FIXS> throw new java.lang.UnsupportedOperationException("The body of the constructor has been added already."); <FIXE>
<FIXS> if ((android.view.InputDevice.SOURCE_MOUSE) == (source & (android.view.InputDevice.SOURCE_MOUSE))) { <FIXE> <FIXS> if ((android.view.InputDevice.SOURCE_TOUCHSCREEN) == (source & (android.view.InputDevice.SOURCE_TOUCHSCREEN))) { <FIXE>
<FIXS> if ((m_bUseStaticServerInfo) && (com.helger.web.servlet.server.StaticServerInfo.isSet())) { return com.helger.commons.url.URLHelper.getAsURI((((com.helger.web.servlet.server.StaticServerInfo.getInstance().getFullServerPath()) + "/") + (m_aUriInfo.getPath(false)))); } <FIXE>
<FIXS> <FIXE>
<FIXS> final com.squareup.okhttp.Request request = new com.squareup.okhttp.Request.Builder().url(this.endpointUri).build(); <FIXE>
<FIXS> if (!(nodes.isEmpty())) <FIXE> <FIXS> <FIXE>
<FIXS> private static MiniWebStore deserializeStore(java.lang.String filename) throws java.io.IOException, java.lang.ClassNotFoundException { <FIXE> <FIXS> return loadedStore; <FIXE>
<FIXS> <FIXE>
<FIXS> org.junit.Assert.assertEquals(1, calculateSmallFactorial(1)); org.junit.Assert.assertEquals(2, calculateSmallFactorial(2)); org.junit.Assert.assertEquals(6, calculateSmallFactorial(3)); org.junit.Assert.assertEquals(479001600, calculateSmallFactorial(12)); <FIXE>
<FIXS> <FIXE>
<FIXS> int i = 1; <FIXE> <FIXS> chatserver.ChatServer.chatRoomListString = (((((chatserver.ChatServer.chatRoomListString) + "\n") + (i++)) + ". ") + (rm.getName())) + "\n"; <FIXE>
<FIXS> strafeSpeed = 0; <FIXE>
<FIXS> int newX = ((int) (java.lang.Math.round(((this.shape.getX()) + ((force.x) * milliseconds))))); int newY = ((int) (java.lang.Math.round(((this.shape.getY()) + ((force.y) * milliseconds))))); <FIXE>
<FIXS> super.reset(); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> if (((priceDTO.getAdrSurchargeMinimum()) == null) && ((priceDTO.getCalculatedAdrSurcharge()) == null)) { <FIXE> <FIXS> if ((priceDTO.getAdrSurchargeMinimum().doubleValue()) > (priceDTO.getCalculatedAdrSurcharge().doubleValue())) { priceDTO.setResultingPriceSurcharge(priceDTO.getAdrSurchargeMinimum()); }else { priceDTO.setResultingPriceSurcharge(priceDTO.getCalculatedAdrSurcharge()); } <FIXE>
<FIXS> position.setPosition(((bottomLeft.getX()) + 1), bottomLeft.getY()); <FIXE> <FIXS> position.setPosition((((topRight.getX()) - (region.getRegionWidth())) - 1), bottomLeft.getY()); <FIXE>
<FIXS> shared.logic.Player cit = addPlayer(shared.logic.templates.BasicRoles.Citizen()); <FIXE> <FIXS> <FIXE>
<FIXS> java.lang.System.out.println(locationString); <FIXE>
<FIXS> default : return null; <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> java.text.SimpleDateFormat format = new java.text.SimpleDateFormat("MMMM yyyy", java.util.Locale.getDefault()); <FIXE>
<FIXS> canvas.drawBitmap(nativeCanvasBitmap, 0, 0, mPaint); <FIXE>
<FIXS> model = new com.pdpmr.task0.mappers.KScorerMapper.WordStats.WordStatsModel(((model.wordScore) + value), ((model.wordCount) + 1)); <FIXE>
<FIXS> if (((VEL) != null) && ((pcchatapp.getAuth()) != null)) <FIXE>
<FIXS> public com.whayer.wx.common.mvc.ResponseCondition associate(@org.springframework.web.bind.annotation.RequestParam(value = "ids[]") java.lang.String[] ids, java.lang.String role, javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) { <FIXE> <FIXS> <FIXE>
<FIXS> }else { PIVOT_MOTOR.set(0); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> imp.lickgen.transformations.Transform result = transformLearning.createTrendTransform(outline, original.copy(), chords, start, stop); return result; <FIXE>
<FIXS> output = output.substring(0, ((output.length()) - 1)); <FIXE>
<FIXS> if ((getInnerView()) == null) { return ; } <FIXE>
<FIXS> changesList = new java.util.ArrayList<>(changesList.subList(0, changeIndex)); <FIXE>
<FIXS> query.Doc2Mysql.writeDocs(query.Doc2Mysql.docMap); <FIXE>
<FIXS> res[(i - 1)] = getDecodedSymbol(iseq.intAt(i)); <FIXE>
<FIXS> <FIXE>
<FIXS> if (this.parent.screen.addOption(nameField.getText(), this.parent.screen.getParent().getScreen(((java.lang.String) (screenField.getSelectedItem()))))) model.fireTableStructureChanged(); <FIXE>
<FIXS> return ((((((((((getFingerprint()) + "\t") + (getCommonName())) + "\t") + (getOrganization())) + "\t") + (getValidFrom())) + "\t") + (getValidTo())) + "\t") + (isTrusted()); <FIXE>
<FIXS> <FIXE>
<FIXS> if ((getType()) == (RendererType.SHADER)) { <FIXE>
<FIXS> public void initObjects(java.util.List<gui.components.Visible> viewObjects) { <FIXE>
<FIXS> if (diffInMinutes >= (com.silicolife.textmining.core.datastructures.dataaccess.daemon.webserviceclient.RestClient.sessiontimeout)) { <FIXE>
<FIXS> if ((csrfToken != null) && (sessionID != null)) { <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> return true; <FIXE> <FIXS> return false; <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> java.lang.System.out.println(b.getGeneratedRule()); <FIXE>
<FIXS> <FIXE>
<FIXS> if (intent != null) UPDATE_INTERVAL = intent.getIntExtra("updateInterval", 8); <FIXE>
<FIXS> <FIXE> <FIXS> java.lang.String input = ((myName) + ": ") + (key.nextLine()); web.MessageHolder.AddMessageToSend(web.Message.MessageFactoryStringToB64(Message.typeEnum.Chat, input)); <FIXE> <FIXS> <FIXE>
<FIXS> final jloda.gui.commands.ICommand command = getCommand(commandName); if (command != null) { final javax.swing.JMenuItem item = getJMenuItem(command); if (item != null) { item.setEnabled(command.isApplicable()); return item; } } return null; <FIXE>
<FIXS> protected java.lang.String translateRegexp(final java.lang.String pattern, final boolean ignoreWhitespace, final boolean caseBlind) throws org.exist.xquery.functions.fn.XPathException { <FIXE> <FIXS> return org.exist.xquery.regex.JDK15RegexTranslator.translate(pattern, xmlVersion, true, ignoreWhitespace, caseBlind); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> android.preference.PreferenceManager.setDefaultValues(context, R.xml.general, true); android.preference.PreferenceManager.setDefaultValues(context, R.xml.help, true); android.preference.PreferenceManager.setDefaultValues(context, R.xml.logging, true); android.preference.PreferenceManager.setDefaultValues(context, R.xml.notification, true); android.preference.PreferenceManager.setDefaultValues(context, R.xml.advanced, true); android.preference.PreferenceManager.setDefaultValues(context, R.xml.widget, true); <FIXE>
<FIXS> com.google.gson.GsonBuilder builder = null; <FIXE> <FIXS> builder = new com.google.gson.GsonBuilder().setDateFormat(DataLayerConstants.DATE_FORMAT).setPrettyPrinting(); }else { builder = new com.google.gson.GsonBuilder().setDateFormat(DataLayerConstants.DATE_FORMAT); <FIXE>
<FIXS> if ((btn_func_app) != null) btn_func_app = btn_func_app.trim(); <FIXE> <FIXS> if ((btn_func_app2) != null) btn_func_app2 = btn_func_app2.trim(); <FIXE>
<FIXS> projElems.remove(varName); <FIXE>
<FIXS> drawCursor(g); <FIXE>
<FIXS> synchronized(mNotifications) { synchronized(mNotificationValues) { while (!(mNotifications.isEmpty())) { android.bluetooth.BluetoothGattCharacteristic c = mNotifications.remove(); c.setValue(mNotificationValues.remove()); java.lang.Runnable cb = mNotifyCB.get(c.getUuid()); if (cb != null) { cb.run(); } } <FIXE> <FIXS> } <FIXE>
<FIXS> org.apache.karaf.features.internal.resolver.ResourceUtils.addIdentityRequirement(res, name, org.apache.karaf.features.internal.resolver.ResourceUtils.TYPE_FEATURE, range, false); <FIXE>
<FIXS> myGenerator = new toe.generator(ListOfParameterSetsToBeWritten, fileName, this, jTableParameterList); <FIXE>
<FIXS> cursorX = java.lang.Math.min(java.lang.Math.abs(data.getInteger("cursorX")), 79); cursorY = java.lang.Math.min(java.lang.Math.abs(data.getInteger("cursorY")), 49); <FIXE>
<FIXS> super.paintComponent(g); <FIXE>
<FIXS> GUI.EstimationScreen.mainpanel.add(GUI.EstimationScreen.getSetupPanel()); <FIXE> <FIXS> <FIXE>
<FIXS> public static java.util.Set<org.votingsystem.dto.currency.CurrencyDto> getWallet(java.lang.String pin) throws java.lang.Exception { byte[] walletBytes = org.votingsystem.util.Wallet.getWalletBytes(pin); <FIXE>
<FIXS> img = null; bufferedImage = null; <FIXE>
<FIXS> out = "" + (diag.stn.DiagSTN.runRandomGen()); <FIXE>
<FIXS> private boolean mergeLiteralWordInNextRunningLength(boolean value, int lw, int pos, int wordPosition) { <FIXE> <FIXS> return (value == nextRb) || (nextRl == 0); <FIXE>
<FIXS> if (!(net.minecraft.client.Minecraft.getMinecraft().thePlayer.capabilities.isCreativeMode)) { <FIXE>
<FIXS> if (context != null) { mAppList.add(context); } <FIXE>
<FIXS> sociam.pybossa.TaskPerformer.logger.error("Error ", e); <FIXE>
<FIXS> if ((videoAdapter) == null) { videoAdapter = ((com.example.inspired.inspiredvideo.app.MovieAdapter) (mRecyclerView.getAdapter())); } <FIXE>
<FIXS> <FIXE>
<FIXS> cssFile.readFile(); <FIXE>
<FIXS> if ((_logFileDos) != null) { _logFileDos.close(); } <FIXE>
<FIXS> <FIXE> <FIXS> counter = input.readInt(); <FIXE>
<FIXS> return timeZone.convertLocalToUTC(rounded, false); <FIXE>
<FIXS> objectInStream = null; objectOutStream = null; <FIXE>
<FIXS> <FIXE> <FIXS> com.epam.hackaton.bot.skype.BotSingleton.informUser("Result"); <FIXE>
<FIXS> if ((tlObj) != null) { for (org.opentravel.schemacompiler.model.TLParamGroup tlp : tlObj.getParamGroups()) new org.opentravel.schemas.node.resources.ParamGroup(tlp); for (org.opentravel.schemacompiler.model.TLAction action : tlObj.getActions()) new org.opentravel.schemas.node.resources.ActionNode(action); for (org.opentravel.schemacompiler.model.TLActionFacet af : tlObj.getActionFacets()) new org.opentravel.schemas.node.resources.ActionFacet(af); } <FIXE>
<FIXS> if ((newType == null) || (!(newType.equals(type)))) { <FIXE>
<FIXS> carsPerLevel = 3; <FIXE>
<FIXS> if (group == 1) calculateDistance(); <FIXE>
<FIXS> no.glv.android.stdntworkflow.core.DataHandler.GetInstance().handInTask(mTask, stdTask); <FIXE>
<FIXS> node.setAttribute("lat", java.lang.Float.toString(poi.getLatitude())); node.setAttribute("lon", java.lang.Float.toString(poi.getLongitude())); <FIXE>
<FIXS> if (item == null) { return false; } <FIXE>
<FIXS> private frames.UploadRequest verifyPacket(byte[] request) { <FIXE> <FIXS> return null; <FIXE> <FIXS> return ((frames.UploadRequest) (object)); <FIXE> <FIXS> return null; <FIXE>
<FIXS> int getLongZone(final double longitude) { <FIXE> <FIXS> return ((int) (longZone)); <FIXE>
<FIXS> if ((runnersBest != null) && ((runnersBest.compareTo(currentBest)) > 0)) { <FIXE>
<FIXS> if (true) { <FIXE>
<FIXS> if (((pd.getStrAttrCount()) != 0) || ((pd.getGroupAttrCount()) != 0)) { <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> instagrams = instagramCollection.instagrams; <FIXE>
<FIXS> <FIXE>
<FIXS> mWordLength = mWord.size(); if ((mWordLength) >= 1) { this.removeView(findViewById(mWord.get(((mWordLength) - 1)).getId())); mWord.remove(((mWordLength) - 1)); mWordLength -= 1; } <FIXE>
<FIXS> private java.lang.String parsePlayString(org.json.simple.JSONObject play, java.lang.String playString) { <FIXE> <FIXS> java.lang.String result = playString + (java.lang.String.valueOf(positions.get(0))); result += " " + (java.lang.String.valueOf(positions.get(1))); result += (" " + value) + "\n"; return result; <FIXE>
<FIXS> actionPanel.resetPanel(); <FIXE>
<FIXS> bluetoothService.write(message); <FIXE>
<FIXS> if (addr == null) return null; <FIXE>
<FIXS> this.componentInfo = new acromusashi.stream.hook.ComponentInfo(context.getThisComponentId(), context.getThisTaskId()); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> }else { edtEmail.setError(null); <FIXE>
<FIXS> <FIXE>
<FIXS> if (resource == null) { return ; } <FIXE>
<FIXS> timelogger.mprtcz.com.timelogger.activities.SettingsListActivity.Language language = languages[(position - 1)]; <FIXE>
<FIXS> public java.lang.String sample2(org.springframework.ui.Model model) { <FIXE>
<FIXS> org.commonjava.maven.cartographer.testutil.PresetAssertions.assertConcreteAcceptance(child, from, src, tgt, new java.util.HashSet<org.commonjava.maven.atlas.ident.DependencyScope>(), org.commonjava.maven.atlas.graph.rel.RelationshipType.PARENT); <FIXE>
<FIXS> }else { y.setChecked(false); n.setChecked(false); <FIXE>
<FIXS> for (int x = 0; x < (editor.ImageEditor.height); x++) { for (int y = 0; y < (editor.ImageEditor.width); y++) { <FIXE>
<FIXS> if ((nodeTemplate.getRelationships()) != null) { for (alien4cloud.model.topology.RelationshipTemplate relationshipTemplate : nodeTemplate.getRelationships().values()) { processGetInput(deploymentSetup.getInputProperties(), relationshipTemplate.getProperties()); } <FIXE>
<FIXS> if (fileName.contains(tripleaJarName)) { <FIXE> <FIXS> if (fileName.contains(tripleaJarNameWithEngineVersion)) { <FIXE>
<FIXS> okhttp3.OkHttpClient.Builder okHttpClientBuilder = new okhttp3.OkHttpClient.Builder().addNetworkInterceptor(new com.tvdbRestClient.utils.TvdbInterceptor()).authenticator(new com.tvdbRestClient.utils.TvdbAuthenticator()); <FIXE>
<FIXS> if ((!(this.username.isEmpty())) && (!(this.password.isEmpty()))) { <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> org.openhab.io.caldav.internal.CalDavLoaderImpl.LOG.trace(event.getShortName()); <FIXE>
<FIXS> public void execute(net.minecraft.command.ICommandSender icommandsender, java.lang.String[] astring) { <FIXE>
<FIXS> public boolean add(T value) { <FIXE>
<FIXS> buffer.append(record.getWriteBuffer(reflectModel, retain)); <FIXE>
<FIXS> return org.joor.Reflect.accessible(type.getField(name)); <FIXE>
<FIXS> <FIXE> <FIXS> mAppContext.addListenerForMatchUpdates(this, mMatch.getMatchId()); <FIXE>
<FIXS> break; <FIXE> <FIXS> break; <FIXE> <FIXS> break; <FIXE>
<FIXS> <FIXE>
<FIXS> return (value) == (memory.toLong()); <FIXE>
<FIXS> for (int i = 0; i < (myCell.length); i++) { if ((myCell[i]) == null) continue; <FIXE> <FIXS> } <FIXE>
<FIXS> if (files == null) { return ; } <FIXE>
<FIXS> assertEquals(1, testList.size()); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> long maxSum = k; long maxMul = 1; while ((++maxSum) > (maxMul <<= 1)) { i++; } while (!(redistribute(i, i, k, 1))) { i++; } <FIXE>
<FIXS> <FIXE>
<FIXS> if ((modelUpdateListener) != null) { modelUpdateListener.reset(); } <FIXE>
<FIXS> <FIXE>
<FIXS> cleanExpiredAPIKeyTimeWindows(currMillis); <FIXE>
<FIXS> <FIXE>
<FIXS> intent.putExtra("LibraryEntry", entry); <FIXE> <FIXS> <FIXE>
<FIXS> if (net.minecraftforge.oredict.OreDictionary.getOreName(ID).equals(oreDict)) { <FIXE>
<FIXS> executeGitCommand("push", "--quiet", gitFlowConfig.getOrigin(), branchName); <FIXE>
<FIXS> if (list == null) { return ; } <FIXE>
<FIXS> db.Config config = new db.Config(null, null, carID); <FIXE>
<FIXS> BR.set(((y - x) + r)); <FIXE>
<FIXS> super.deserialize(keyValuePairs); <FIXE>
<FIXS> if ((atoms.length) > 0) chainAtoms.add(atoms); <FIXE>
<FIXS> <FIXE> <FIXS> return !(edu.gemini.p2checker.rules.gmos.GmosRule.getFPU(config, elems).isNS()); <FIXE>
<FIXS> world.paint(buffer); <FIXE>
<FIXS> <FIXE>
<FIXS> if (panel != (activePanel)) { prevPanel = activePanel; if ((activePanel) != null) { getContentPane().remove(activePanel); } getContentPane().add(panel, java.awt.BorderLayout.CENTER); activePanel = panel; pack(); repaint(); <FIXE> <FIXS> <FIXE>
<FIXS> if (data.shouldBeSkipped(node)) { <FIXE>
<FIXS> if (type == (models.datatable.BackupDataTable.Type.REMOTE)) { util.BackupUtils.pullBackup(id); } <FIXE> <FIXS> <FIXE>
<FIXS> org.apache.lucene.document.Document d = document(docId); <FIXE> <FIXS> <FIXE> <FIXS> return contentStores.getSubstrings(fieldName, d, new int[]{ startAtChar }, new int[]{ endAtChar })[0]; <FIXE>
<FIXS> super.onActivityCreated(savedInstanceState); <FIXE> <FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> public static void close(final int socketIndex) { <FIXE>
<FIXS> pageOnView = com.logan19gp.flickrviewer.MainApplication.loadFromPrefsInt(com.logan19gp.flickrviewer.SearchActivity.PAGE_ON_VIEW, 0); showSearchResult(); <FIXE>
<FIXS> <FIXE>
<FIXS> assertEquals(((school1.getId()) + 1), school2.getId()); <FIXE>
<FIXS> java.util.regex.Matcher m = com.muqdd.iuob2.features.schedule_builder.ScheduleBuilderFragment.pCourse.matcher(charSequence.toString().toUpperCase().trim()); <FIXE>
<FIXS> bufferPlaceList.add(new ru.aviaj.model.Place(resultSet.getLong("id"), resultSet.getString("title"), null, resultSet.getDouble("longitude"), resultSet.getDouble("latitude"))); <FIXE>
<FIXS> if (((feet == null) && (inches == null)) || ((feet == 0) && (inches == 0))) { <FIXE>
<FIXS> if ((((expirationTrigger) != null) && (interestedIn(event.getEventType()))) && (expirationTrigger.fires(event, host))) { <FIXE>
<FIXS> private void addQueryIntegerListFilter(java.lang.String optionKey, org.opencb.datastore.core.QueryOptions options, java.lang.String queryKey, org.opencb.opencga.catalog.db.DBObject query) { <FIXE>
<FIXS> i = i - (offset); <FIXE>
<FIXS> org.testng.Assert.assertEquals(results.size(), 1); <FIXE> <FIXS> org.testng.Assert.assertEquals(doc.field("nnum"), 1); <FIXE>
<FIXS> note.name = note.name.substring(0, ((note.name.length()) - 1)); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> updateActivity(activity, config.getQualifier()); <FIXE> <FIXS> updateActivity(client.getCurrentActivity(), config.getQualifier()); <FIXE>
<FIXS> java.io.FileOutputStream out = null; java.io.BufferedWriter writer = null; try { out = openFileOutput("data", Context.MODE_PRIVATE); writer = new java.io.BufferedWriter(new java.io.OutputStreamWriter(out)); writer.write(inputText); } catch (java.lang.Exception e) { e.printStackTrace(); } finally { com.example.dysaniazzz.utils.StreamUtils.endStream(writer); <FIXE>
<FIXS> <FIXE>
<FIXS> java.util.List<entities.Book> bookList = dbAccessor.getBooks(bookRepo, library); <FIXE>
<FIXS> if (!(helper.CalendarHelper.getDateString(date).toLowerCase().equals(dateString.toLowerCase()))) { <FIXE>
<FIXS> synchronized(this) { <FIXE>
<FIXS> <FIXE> <FIXS> return this.variable; <FIXE> <FIXS> if ((this.category) != null) { return this.category.getVariable(); <FIXE> <FIXS> return getParent().getVariable(); <FIXE>
<FIXS> if ((stack1.isEmpty()) || (stack2.isEmpty())) { <FIXE>
<FIXS> leftX = (HomeList.maxWidth) / 2; topY = (HomeList.maxHeight) / 2; <FIXE>
<FIXS> return com.aimluck.eip.schedule.util.ScheduleUtils.getScheduleList(userId, viewStart, viewEnd, users, facilities, null, (-1), (-1), false, isDetail, true); <FIXE>
<FIXS> java.lang.System.out.println(e); <FIXE>
<FIXS> if ((transaction.get()) != null) { <FIXE> <FIXS> return ; } <FIXE>
<FIXS> <FIXE>
<FIXS> this.state = com.microsoft.azure.iothub.transport.State.CLOSED; this.sender.close(); this.receiver.close(); this.session.close(); this.connection.close(); this.reactorFuture.cancel(true); this.executorService.shutdown(); <FIXE>
<FIXS> boolean above = (y) >= (obj.y); <FIXE>
<FIXS> for (int i = 1; i < (params.length); i++) { <FIXE>
<FIXS> return ((T) (java.lang.reflect.Proxy.newProxyInstance(service.getClassLoader(), new java.lang.Class<?>[]{ service }, new spwrap.proxy.CallerInvocationHandler(this)))); <FIXE>
<FIXS> for (int i = 0; i < (this.sizeX); i++) { for (int j = 0; j < (this.sizeY); j++) { this.board.getCellAt(i, j).setCurrentState(CellState.DEAD); <FIXE>
<FIXS> com.davidwang.feed.parse.ParseFeed.PostToServer(url, params); <FIXE>
<FIXS> if (((missileFlightTime) <= 0) && ((missileType) == (defense.common.entity.EntityMissile.MissileType.MISSILE))) { <FIXE> <FIXS> if ((missileType) == (defense.common.entity.EntityMissile.MissileType.CruiseMissile)) { <FIXE>
<FIXS> if (mCamera != null) { mCamera.release(); }else { canUse = false; } <FIXE>
<FIXS> cursor.close(); <FIXE>
<FIXS> public static <T extends aurelienribon.texturepackergui.AppEvents.BaseAppEventListener> void fireEventToListeners(java.lang.Class<T> listenersClass, java.lang.Object... args) { <FIXE> <FIXS> ((T) (listeners[(i + 1)])).onEvent(args); <FIXE>
<FIXS> private org.terasology.entitySystem.entity.EntityRef doBushGrowth(org.terasology.simpleFarming.components.BushDefinitionComponent bushComponent, int direction) { <FIXE> <FIXS> return newBush; <FIXE>
<FIXS> <FIXE>
<FIXS> if (alternateIpHeaders.isEmpty()) { <FIXE>
<FIXS> if ((deviceServiceRemoved != null) && ((broadcaster) != null)) { <FIXE>
<FIXS> <FIXE> <FIXS> mLocationHandler = locationHandler; <FIXE>
<FIXS> return hu.akarnokd.rxjava2.basetypes.Solo.onAssembly(new hu.akarnokd.rxjava2.basetypes.SoloDoOnLifecycle<T>(this, hu.akarnokd.rxjava2.basetypes.Functions.emptyConsumer(), hu.akarnokd.rxjava2.basetypes.Functions.emptyConsumer(), hu.akarnokd.rxjava2.basetypes.Functions.emptyConsumer(), Functions.EMPTY_ACTION, Functions.EMPTY_ACTION, hu.akarnokd.rxjava2.basetypes.Functions.emptyConsumer(), onRequest, Functions.EMPTY_ACTION)); <FIXE>
<FIXS> if ((meas.getBluetoothTags()) != null) { java.util.Set<java.lang.String> measurementBluetoothTags = meas.getBluetoothTags().getTags(); for (java.lang.String bl : measurementBluetoothTags) { if (bl.toUpperCase().contains(hardwareAddress.toUpperCase())) { return 1; } <FIXE>
<FIXS> this.appInst.popNodestack(); <FIXE>
<FIXS> if (((mManager) != null) && (setViewResult == 0)) { <FIXE>
<FIXS> if ((toDisplay != null) && ((toDisplay.get(i).isFinished()) != isDone)) { <FIXE>
<FIXS> return ((int) (((key.getArticleId()) - (hbase.query3.HBaseCompositeKeyPartitioner.firstArticleId)) / intervalLength)); <FIXE>
<FIXS> return false; <FIXE>
<FIXS> int error = 0; <FIXE>
<FIXS> <FIXE> <FIXS> keep = false; <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> Adhoc.Main.createPlayerCamera(mainScene); <FIXE>
<FIXS> for (com.mysql.jdbc.ReplicationConnection c : this.replicationConnections.values()) { c.removeMasterHost(host, closeGently); } <FIXE>
<FIXS> public java.util.List<java.util.Collection<java.lang.String>> getCollections(eu.europeana.uim.store.Provider<java.lang.String> provider) { <FIXE> <FIXS> java.util.List<java.util.Collection<java.lang.String>> res = new java.util.ArrayList<java.util.Collection<java.lang.String>>(); <FIXE>
<FIXS> if ((features == null) || ((features.size()) < 1)) { <FIXE>
<FIXS> e = java.lang.Math.min(a.restitution, b.restitution); sf = 0; df = 0; normal.set(0, 0); penetration = 0; <FIXE>
<FIXS> correct = (correct && ((page.matches("[0-9]+")) && ((page.length()) >= 5))) ? true : false; <FIXE>
<FIXS> if (volume < 0) return ; <FIXE> <FIXS> if (volume < (lowestVolume)) { <FIXE>
<FIXS> this.mountPoint = mountPoint; mountLock.unlock(); net.fusejna.FuseJna.mount(this, mountPoint, blocking); onMount(mountPoint); <FIXE>
<FIXS> edu.umass.cs.gnsclient.client.integrationtests.ServerIntegrationTest.failWithStackTrace("Exception when we were not expecting it in ACLPartTwo: ", e); <FIXE>
<FIXS> uri = uri + toBeSearchedWord; <FIXE>
<FIXS> tupleQuery.getTuple2KeyValuePair(CoreTupleTypes.ViewApplicability, artId, branch, consumer); <FIXE>
<FIXS> } finally { mLock.writeUnlock(); <FIXE>
<FIXS> handleException("actfm-authenticate", e, false); <FIXE>
<FIXS> if (!(isWithinLimits(p, horizLimit, vertLimit))) { <FIXE>
<FIXS> if (files != null) { for (java.io.File _file : files) { if (_file.isDirectory()) { java.lang.System.out.println((_depth + (_file.getName()))); searchTree(_file, (depth + 1)); } <FIXE>
<FIXS> final android.graphics.Point cenPx = mv.getProjection().toPixels(cen, null); <FIXE> <FIXS> cenPx.y += diff[1]; <FIXE>
<FIXS> hudson.model.FreeStyleProject project = hudson.plugins.disk_usage.integration.DiskUsageTestUtil.prepareProjet(jenkins, "job"); <FIXE> <FIXS> <FIXE> <FIXS> }else { e.printStackTrace(); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> writer.append(valueAsPreference(pref.getValue())); <FIXE>
<FIXS> org.elasticsearch.action.update.UpdateResponse response = client.prepareUpdate(indexName, indexName, id).setRefresh(true).setConsistencyLevel(WriteConsistencyLevel.DEFAULT).setDoc(jsonBuilder.getBuilder()).setRefresh(true).get(); <FIXE>
<FIXS> public int getSinkIndex(pb.sim.Asteroid[] asteroids, long sink) { <FIXE> <FIXS> if ((asteroids[i].id) == sink) <FIXE>
<FIXS> if ((mAdapter) != null) mAdapter.setCustomHeaderView(mHeader); <FIXE>
<FIXS> if (partyId <= 0) { throw new java.lang.IllegalArgumentException(("User id isn't correct: " + partyId)); } <FIXE>
<FIXS> <FIXE>
<FIXS> private int current = 1; <FIXE> <FIXS> return (current) <= (numFolds); <FIXE> <FIXS> return getFold(((current)++)); <FIXE>
<FIXS> <FIXE>
<FIXS> javafx.scene.media.AudioClip clip = new javafx.scene.media.AudioClip(("file:Resources/Sound/" + fileName)); <FIXE>
<FIXS> final engine.models.Table table = new engine.models.Table("005D0A28", 10, 6, null); <FIXE>
<FIXS> <FIXE>
<FIXS> com.codename1.impl.android.AndroidImplementation.stopEditing(true); <FIXE>
<FIXS> <FIXE>
<FIXS> return ; <FIXE>
<FIXS> testScriptFile(SCRIPT_TEXT, getBaseArgs(org.apache.hive.beeline.TestBeeLineWithArgs.miniHS2.getBaseJdbcURL()), EXPECTED_PATTERN, true); <FIXE>
<FIXS> this.pli = pli[0]; <FIXE> <FIXS> publishProgress(); <FIXE>
<FIXS> if (hasStatus(player, EnumTeamStatus.INVITED)) { <FIXE> <FIXS> if (!(hasStatus(player, EnumTeamStatus.MEMBER))) { MinecraftForge.EVENT_BUS.post(new com.feed_the_beast.ftbl.api.events.team.ForgeTeamPlayerJoinedEvent(this, player)); setStatus(player.getId(), EnumTeamStatus.MEMBER); } <FIXE>
<FIXS> update(false); <FIXE> <FIXS> update(true); <FIXE> <FIXS> <FIXE>
<FIXS> hex.genmodel.algos.deeplearning.ActivationUtils.applyDropout(output, drop_out_ratio, output.length); <FIXE>
<FIXS> if ((listItem.size()) >= 0) { <FIXE>
<FIXS> final java.lang.Double newY = com.ivli.roim.controls.XYSeriesUtilities.getNearestY(iSeries, aVal); <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE> <FIXS> break; } default : { <FIXE>
<FIXS> if (IS_PRIME) { <FIXE>
<FIXS> isPainted = true; <FIXE>
<FIXS> private void checkProject(hudson.model.AbstractProject<?, ?> project) { <FIXE>
<FIXS> if (((p1Index) > 7) && ((p1Index) < 10)) { <FIXE> <FIXS> if ((p1Index) > 10) { <FIXE>
<FIXS> } <FIXE>
<FIXS> <FIXE>
<FIXS> java.util.List<org.apache.river.api.security.PermissionGrant> grants; <FIXE>
<FIXS> java.lang.Double d = getValue(x); <FIXE>
<FIXS> if (newTop < ((mOriginalTop) - (mAppBarLayout.getTotalScrollRange()))) { <FIXE>
<FIXS> <FIXE>
<FIXS> android.content.Intent intent = new android.content.Intent(getActivity(), com.logcat.example.pc.orbitalproj.MedicationViewer.class); medication = tempList.get(position); intent.putExtra("Medicine", medication); startActivity(intent); <FIXE>
<FIXS> <FIXE>
<FIXS> this.info("Disabling client library"); <FIXE>
<FIXS> <FIXE>
<FIXS> controller.onTutorialProgress(tutorial.size()); <FIXE>
<FIXS> ca.claytonrogers.Common.Card bottomCard = new ca.claytonrogers.Common.Card((-1), true); <FIXE>
<FIXS> if ((cluster == null) || (cluster instanceof net.echinopsii.ariane.community.core.mapping.ds.blueprintsimpl.domain.ClusterImpl)) { <FIXE>
<FIXS> <FIXE>
<FIXS> displayUsers(sg.edu.nus.comp.orbital.synchro.SearchResultsFragment.recyclerView, query); <FIXE>
<FIXS> <FIXE>
<FIXS> java.lang.Object object = super.get(key); <FIXE>
<FIXS> if (fragment instanceof android.support.v4.app.DialogFragment) { <FIXE>
<FIXS> } doMinimize(); <FIXE>
<FIXS> <FIXE> <FIXS> if (!(mRespondToClick)) return ; <FIXE>
<FIXS> keyword = keyword.toLowerCase(); <FIXE> <FIXS> currWord = currWord.trim().toLowerCase(); <FIXE>
<FIXS> value[i] = parseValue(targetList.get(i)); <FIXE>
<FIXS> if ((mVelocityTracker) != null) mVelocityTracker.recycle(); <FIXE>
<FIXS> return de.codesourcery.luaparser.LuaToJSON.printValue(((de.codesourcery.luaparser.antlr.LuaParser.TableconstructorContext) (value.getChild(0))), false); <FIXE>
<FIXS> <FIXE>
<FIXS> devices.removeAll(); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> com.puresoltechnologies.commons.osgi.AbstractActivator.logger.info((("Register service '{}' for interface '{}' (context='" + (context.getBundle().getSymbolicName())) + "')."), instance.getClass().getName(), iface.getName()); org.osgi.framework.ServiceRegistration<?> serviceRegistration = context.registerService(iface, instance, dictionary); <FIXE>
<FIXS> <FIXE> <FIXS> threshold(grayImage, img_threshold, 0, 255, ((CV_THRESH_OTSU) + (CV_THRESH_BINARY))); return getTheFeatures(img_threshold); <FIXE>
<FIXS> private static byte reverseBitsInByte(final byte val) { byte tmp = val; <FIXE> <FIXS> result |= ((byte) (tmp & 1)); tmp = ((byte) (tmp >> 1)); <FIXE>
<FIXS> <FIXE>
<FIXS> addWorkflowSteps(workflowSteps, "findAvailableNodes", "listVCenterComponents", "discoverVCenter", "discoverNodeInventory", "configIdrac", "pingIdrac", "configureObmSettings", "configureBootDeviceIdrac", "configurePxeBoot", "findVCluster", "findProtectionDomain", "findSystemData", "assignDefaultHostName", "assignDefaultCredentials"); <FIXE>
<FIXS> <FIXE>
<FIXS> MinecraftForge.EVENT_BUS.unregister(me.guichaguri.pvptime.PvPTimeUpdater.tick); <FIXE>
<FIXS> <FIXE>
<FIXS> java.lang.String stream, @javax.annotation.Nonnull <FIXE> <FIXS> value = status; <FIXE>
<FIXS> return new java.lang.Object[][]{ new java.lang.Object[]{ null , null } , new java.lang.Object[]{ 0 , null } , new java.lang.Object[]{ null , 0 } , new java.lang.Object[]{ 0 , 0 } , new java.lang.Object[]{ null , -1 } , new java.lang.Object[]{ -1 , null } }; <FIXE>
<FIXS> try (java.io.PrintWriter writer = new java.io.PrintWriter(new java.io.FileOutputStream(com.uom.cse.distsearch.util.Utility.FILE_NAME, true))) { <FIXE>
<FIXS> mBackdrop.setX((-(mNewBackdrop.getWidth()))); <FIXE>
<FIXS> return (((((((((((type.toString()) + " ") + (layoutX)) + " ") + (layoutY)) + " ") + " ") + (out[0])) + " ") + ((out.length) > 1 ? out[1] : " ")) + " ") + (entry); <FIXE>
<FIXS> destroyDrink = false; <FIXE> <FIXS> itemComp.baseDamage = 1; <FIXE>
<FIXS> gui.GUI gui = new gui.GUI(false); <FIXE>
<FIXS> if (((businessName) != null) && (!(businessName.trim().isEmpty()))) { <FIXE>
<FIXS> dbHelper.close(); <FIXE>
<FIXS> <FIXE>
<FIXS> }else { (currentBucket)++; while (((currentBucket) < (buckets.length)) && ((buckets[currentBucket]) == null)) (currentBucket)++; next = ((currentBucket) < (buckets.length)) ? buckets[currentBucket] : null; <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> android.util.Log.e(com.emolance.enterprise.ui.QRScanActivity.TAG, "Failed to submit the test report.", t); <FIXE>
<FIXS> if (!(p.getConfig().contains(path))) { p.getConfig().addDefault(path, type); p.getConfig().options().copyDefaults(true); <FIXE> <FIXS> p.saveConfig(); <FIXE>
<FIXS> if ((currentCode != null) && (currentCode.equalsIgnoreCase(code))) <FIXE>
<FIXS> <FIXE>
<FIXS> for (; condition.run(global, scope).get().toBool(); execute(loop, global, scope)) { <FIXE>
<FIXS> <FIXE> <FIXS> parser.loadMusicXML(new java.io.File("scores/xmlsamples/BeetAnGeSample.xml")); <FIXE>
<FIXS> antiChess.AntiChess.board.printBoard(); <FIXE>
<FIXS> if (de.uniks.networkparser.ext.Os.isEclipse()) { <FIXE> <FIXS> }else { try { de.uniks.networkparser.ext.generic.ReflectionLoader.call("show", this.stage); } catch (java.lang.Exception e) { errorHandler.saveException(e, this.stage); <FIXE>
<FIXS> <FIXE>
<FIXS> fileChooser.getExtensionFilters().addAll(new javafx.stage.FileChooser.ExtensionFilter("SER", "*.ser")); <FIXE>
<FIXS> <FIXE>
<FIXS> if (!(org.apache.commons.lang3.StringUtils.isEmpty(projectsSelected))) { for (java.lang.String projectId : projectsSelected.split(",")) { org.phenotips.projects.data.Project p = new org.phenotips.projects.internal.DefaultProject(projectId); projectsList.add(p.getFullName()); } <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> removeOptimisationForLargeExpressions(response, expression, context); <FIXE>
<FIXS> if ((this.parent[i]) != (-1)) { <FIXE>
<FIXS> <FIXE>
<FIXS> java.lang.StringBuilder str = new java.lang.StringBuilder(); <FIXE> <FIXS> if ((str.length()) == 0) { str = str.append(it.next()); <FIXE> <FIXS> str = str.append(str).append(it.next()).append(it.next()); <FIXE>
<FIXS> xDif = 0; yDif = 0; <FIXE>
<FIXS> return bindCollectionWithCache(this, path, path, newCollectionSupplier, itemModelFunction); <FIXE>
<FIXS> if (((this.currentResultSet) != null) && (!(this.currentResultSet.isClosed()))) { <FIXE>
<FIXS> <FIXE>
<FIXS> shapetex.getTexture().dispose(); <FIXE>
<FIXS> public void twoFunctionButtonPress(android.view.View view) { <FIXE>
<FIXS> initMapYandex(savedInstanceState); <FIXE>
<FIXS> <FIXE>
<FIXS> org.apache.nifi.processors.kafka.StreamTokenizer scanner = new org.apache.nifi.processors.kafka.StreamTokenizer(is); <FIXE>
<FIXS> return oldAngle - angle; <FIXE>
<FIXS> when(projectPaginatedScanList.stream()).thenReturn(java.util.stream.Stream.of(getProject("projectFirst", 1))); <FIXE> <FIXS> verify(dynamoDBMapper).save(getProject(projectId, 2)); <FIXE>
<FIXS> if ((com.adsamcik.signalcollector.Services.TrackerService.isActive) == enable) <FIXE>
<FIXS> <FIXE> <FIXS> if ((constMap.containsKey(lhs)) && (constMap.get(lhs).isConst())) { <FIXE>
<FIXS> java.lang.reflect.Constructor<?> c = testerClass.getConstructor(org.jasig.portal.groups.pags.dao.IPersonAttributesGroupTestDefinition.class); java.lang.Object o = c.newInstance(test); <FIXE>
<FIXS> if ((this.sum.compareTo(pp.getSum())) == 0) { <FIXE>
<FIXS> <FIXE>
<FIXS> return ((org.wso2.carbon.business.rules.core.bean.BusinessRule) (availableBusinessRule.getValue())); <FIXE>
<FIXS> return neutralIndication + (((value) * (confidence)) * (1 - neutralIndication)); <FIXE> <FIXS> return neutralIndication + (((value) * (confidence)) * neutralIndication); <FIXE>
<FIXS> default : break; <FIXE>
<FIXS> if ((!(column.optional)) && ((column.size) < fewestRemainingRows)) { <FIXE> <FIXS> mandatoryColumnWithFewestRemainingRows = column; } <FIXE>
<FIXS> <FIXE>
<FIXS> private void help(java.lang.String[] message) { <FIXE>
<FIXS> return (((getFullDesc().equals(task.getDesc().getValue())) && (getVenue().equals(task.getVenue().getValue()))) && (getTime().equals(task.getTime().getValue()))) && (getPriority().equals(task.getPriority().getValue())); <FIXE>
<FIXS> knowLedgeBaseService.removeknowledgeBaseForUser(kb); <FIXE>
<FIXS> <FIXE> <FIXS> int mid = low + ((high - low) / 2); <FIXE>
<FIXS> output = output.replace(java.lang.String.format("${%s}", entry.getKey()), entry.getValue()); <FIXE>
<FIXS> private int modeRandom(GameState currState) { <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> }else { out("var "); <FIXE> <FIXS> self(d.getExtendedTypeDeclaration()); <FIXE>
<FIXS> return (pending.get()) != null; <FIXE>
<FIXS> this.size = (this.size) - 1; <FIXE> <FIXS> <FIXE>
<FIXS> if (rowData == null) return null; <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> javafx.scene.Scene scene = new javafx.scene.Scene(root, 275, 275); <FIXE>
<FIXS> result = matches.get(0); textView.setText(result); <FIXE>
<FIXS> java.util.List<by.robotun.webapp.domain.Lot> lots = entityManager.createNamedQuery("Lot.findLotsRespondedUser").setParameter("id", idUser).setFirstResult(offset).setMaxResults(limit).getResultList(); <FIXE>
<FIXS> org.ehcache.internal.store.offheap.factories.EhcacheSegmentFactory.EhcacheSegment<K, V> segment = ((org.ehcache.internal.store.offheap.factories.EhcacheSegmentFactory.EhcacheSegment) (org.ehcache.internal.store.offheap.EhcacheConcurrentOffHeapClockCache.segmentFor(key))); <FIXE>
<FIXS> ++(controlPoint); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> java.lang.System.out.println(categoryList); <FIXE>
<FIXS> return new com.hazelcast.core.ExecutionCallback<T>() { <FIXE>
<FIXS> java.lang.Long currMedID = medService.getMedicine(name).getId(); java.util.ArrayList<java.lang.Long> remIDs = reminderService.getAllMedReminderIDs(medService.getMedicine(name).getId()); <FIXE>
<FIXS> CloudWatchMonitor c = new CloudWatchMonitor(mockClient, null); <FIXE>
<FIXS> if (endOfExistDirIndex != (-1)) { java.lang.String path = getTemplateDirPath(pathCells, endOfExistDirIndex); java.lang.String validPagePath = findValidPagePath(path, extensionName); if (validPagePath != null) { java.lang.String params = selectParamsFromPath(pathCells, (endOfExistDirIndex + 1)); return new com.taozeyu.calico.generator.PageService(runtimeContext, resource, validPagePath, params); } <FIXE>
<FIXS> return java.lang.Integer.toString((idx + 1)); <FIXE>
<FIXS> public void add(java.lang.String data) { <FIXE> <FIXS> if ((head.getData()) == null) { head = tmp; }else { testrepo.basiclinklist.Node current = head; while ((current.getNext()) != null) { current = current.getNext(); } current.setNext(tmp); (listcount)++; } <FIXE>
<FIXS> private static int getHappiness(org.jsoup.nodes.Document doc) { io.github.endreman0.pokedex.io.WebIO.logger.entry(doc); return io.github.endreman0.pokedex.io.WebIO.logger.exit(java.lang.Integer.parseInt(doc.getElementsByClass("dextable").get(1).child(0).child(3).child(1).text())); <FIXE>
<FIXS> if ((pl.uuid) == null) { continue; } <FIXE>
<FIXS> fireConnectionEvent(LifecycleEvent.LifecycleState.CLIENT_DISCONNECTED); <FIXE> <FIXS> <FIXE>
<FIXS> dataSource = new org.melayjaire.boimela.data.BookDataSource(this, new org.melayjaire.boimela.data.BookDataSource.OnDataChangeListener() { <FIXE>
<FIXS> return 0; <FIXE>
<FIXS> register.registerNBTProvider(dataProvider, net.minecraft.entity.passive.EntityVillager.class); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> getNewfriends(); <FIXE>
<FIXS> messageCollection.deleteMany(com.mongodb.client.model.Filters.lt("date", timeLimit)); <FIXE>
<FIXS> diagramModel = iDModels.get(1); <FIXE>
<FIXS> <FIXE>
<FIXS> BoardTests.testNeighbors(false); <FIXE>
<FIXS> excute(testcase.Object_Description, testcase.Operation_WaitForExists, "更多选项", "10000"); <FIXE> <FIXS> check(testcase.Object_ResourceId, testcase.Operation_checkExist, "android:id/content"); <FIXE>
<FIXS> com.airbnb.android.react.maps.AirMapManager mapManager = new com.airbnb.android.react.maps.AirMapManager(); <FIXE>
<FIXS> logError(member, "%s cannot be assigned a different JavaScript name than the method it overrides.", getMemberDescription(member)); <FIXE>
<FIXS> java.net.URL website = new java.net.URL(java.lang.String.format(com.amazon.proposalcalculator.reader.PriceListDownloader.URL_PRICE_LIST, productName)); <FIXE>
<FIXS> acquireLock(outputLock); <FIXE> <FIXS> <FIXE>
<FIXS> if (name != null) { final dyvil.tools.parsing.Name name1 = dyvil.tools.parsing.Name.fromQualified(name); parameter.setName(name1); parameter.setLabel(name1); } <FIXE>
<FIXS> if ((first) == 0) <FIXE> <FIXS> else first = ((first) - 1) % (stored.length); <FIXE>
<FIXS> sociam.pybossa.TaskCollector.logger.error("Error ", e); <FIXE>
<FIXS> <FIXE>
<FIXS> return -1; <FIXE>
<FIXS> listItem.isFavorite = false; <FIXE>
<FIXS> java.lang.Long id) { logger.info(("CERTIFY USER ID: " + id)); com.is0967.menutri.entities.User user = userService.certify(id); <FIXE>
<FIXS> basket.getProducts().remove(product); <FIXE>
<FIXS> id = ncsa.hdf.hdf5lib.H5.H5Fopen(org.eclipse.dawnsci.hdf5.Hdf5Test.TestFileAbsolutePath, HDF5Constants.H5F_ACC_RDONLY, HDF5Constants.H5P_DEFAULT); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> return (valid(x, y)) && (!(map[((int) (x / (tileSize)))][((int) (y / (tileSize)))])); <FIXE>
<FIXS> return true; <FIXE>
<FIXS> public org.apache.twill.internal.ProcessController<org.apache.twill.internal.yarn.YarnApplicationReport> submit(org.apache.twill.internal.yarn.YarnLaunchContext context) { <FIXE> <FIXS> appSubmissionContext.setResource(capability); <FIXE>
<FIXS> <FIXE> <FIXS> realm.commitTransaction(); <FIXE>
<FIXS> outputDir = null; <FIXE>
<FIXS> object.put("isKilled", isKilled.get()); <FIXE>
<FIXS> return ((selValCombine | outVal) & (dir)) & 255; <FIXE>
<FIXS> try { if (org.apache.stratos.autoscaler.monitor.cluster.ClusterMonitor.log.isDebugEnabled()) { org.apache.stratos.autoscaler.monitor.cluster.ClusterMonitor.log.debug(("Cluster monitor is running.. " + (this.toString()))); <FIXE> <FIXS> monitor(); } catch (java.lang.Exception e) { org.apache.stratos.autoscaler.monitor.cluster.ClusterMonitor.log.error(("Cluster monitor: Monitor failed." + (this.toString())), e); } try { java.lang.Thread.sleep(getMonitorIntervalMilliseconds()); } catch (java.lang.InterruptedException ignore) { } <FIXE>
<FIXS> while (true) { if (!((backup = new java.io.File(folder, (((org.protege.editor.owl.model.library.OntologyCatalogManager.CATALOG_BACKUP_PREFIX) + (i++)) + ".xml"))).exists())) { break; } <FIXE>
<FIXS> if ((count >= 0) && (isReachedToLastPage())) { <FIXE>
<FIXS> try (java.io.FileReader reader = new java.io.FileReader(testFile);java.io.BufferedReader br = new java.io.BufferedReader(reader)) { java.lang.String content = br.readLine(); junit.framework.Assert.assertEquals((("File " + fileName) + " does not contain expected content:"), expectedContent, content); } <FIXE>
<FIXS> x += f * ((double) (j % 2)); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> if (!(argument.isEmpty())) { proto.getParameters().add(createFunctionParameterFrom(argument)); } <FIXE>
<FIXS> dbc.insert(bdb); <FIXE>
<FIXS> clazzes.clear(); for (com.ngusta.cupassist.domain.Clazz clazz : maxNumberOfTeams.keySet()) { clazzes.add(new com.ngusta.cupassist.domain.Tournament.TournamentClazz(clazz, maxNumberOfTeams.get(clazz))); <FIXE>
<FIXS> xyz.autholius.game.components.CollisionComponent cc = CollisionComponent.m.get(entities.get(i)); <FIXE>
<FIXS> <FIXE>
<FIXS> if (!(trackQueue.setPlaylist(playListId))) { return false; } <FIXE>
<FIXS> return docsgeneralRepository.searchExhibitionAccounting(search.getCustomer(), search.getTypeOfImport(), search.getTypeOfContainer(), true, search.getStartDate(), search.getEndDate()); <FIXE>
<FIXS> org.telegram.telegrambots.api.objects.replykeyboard.InlineKeyboardMarkup inlineKeyboard = Constructors.InlineKeyboardConstructor.getKeyboard(buttons); <FIXE>
<FIXS> if (sprite == null) { return ; } <FIXE>
<FIXS> com.ibm.streamsx.hdfs.AsyncBufferWriter.FlushRunnable runnable = new com.ibm.streamsx.hdfs.AsyncBufferWriter.FlushRunnable(buffer, true, position, false); <FIXE>
<FIXS> if (null != orphanedSlots) { <FIXE>
<FIXS> mVerticalMovieAdapter.get().updateItem(position, movie); <FIXE>
<FIXS> stall_till_cloudsize(args, 1); <FIXE>
<FIXS> public boolean update(java.lang.String identifier, java.util.Map<java.lang.String, java.lang.String> metadata) { <FIXE> <FIXS> return false; <FIXE> <FIXS> return true; <FIXE>
<FIXS> if (((inType == (net.sf.memoranda.ui.CalendarPanelView.VIEW_MONTH)) || (inType == (net.sf.memoranda.ui.CalendarPanelView.VIEW_WEEK))) || (inType == (net.sf.memoranda.ui.CalendarPanelView.VIEW_DAY))) { <FIXE>
<FIXS> if (!(worlds.contains(dim))); { <FIXE> <FIXS> if (mytown.datasource.TownBlockEvent.fire(new mytown.datasource.TownBlockEvent.BlockCreateEvent(block))); return null; <FIXE>
<FIXS> return new com.ctrip.zeus.support.AppSlbDo().setAppName(e.getAppName()).setSlbName(e.getSlbName()).setSlbVirtualServerName(e.getVirtualServer().getName()).setPath(e.getPath()).setRewrite(e.getRewrite()).setPriority(((e.getPriority()) == null ? 0 : e.getPriority().intValue())); <FIXE>
<FIXS> com.clevertap.android.sdk.CleverTapAPI.setDebugLevel(1); <FIXE>
<FIXS> final java.lang.String message = java.lang.String.format("Importing from %s to table %s", dir, tableName); this.logger.info(message); final java.lang.String sql = java.lang.String.format("LOAD DATA LOCAL INFILE \'%s\' into table %s fields terminated by \',\' optionally enclosed by \'\"\' escaped by \'\"\' lines terminated by \'\\r\\n\'", dir, wrapName(tableName)); <FIXE> <FIXS> } catch (final java.sql.SQLException e) { this.logger.error(("FAILED " + message), e); <FIXE>
<FIXS> while ((found == false) && (scanner.hasNextLine())) { java.lang.String s = scanner.nextLine(); if (s.startsWith(prefix)) { r = s; found = true; <FIXE>
<FIXS> private void write(wyil.lang.Codes.IndexOf o) { <FIXE>
<FIXS> if (((request.requestSent) != null) && ((cur - (request.requestSent)) > (org.ethereum.sync.WarpSyncManager.CHUNK_DL_TIMEOUT))) { <FIXE>
<FIXS> com.emc.storageos.volumecontroller.impl.isilon.IsilonReplicationTest.result = com.emc.storageos.volumecontroller.impl.isilon.IsilonReplicationTest._isi.doFailover(com.emc.storageos.volumecontroller.impl.isilon.IsilonReplicationTest._device, "mudit_policy", null); <FIXE>
<FIXS> org.junit.Assert.assertEquals(1, mockDevice.readRegister(PCA9685Device.MODE1)); org.junit.Assert.assertEquals(4, mockDevice.readRegister(PCA9685Device.MODE2)); <FIXE>
<FIXS> return methodStr; <FIXE>
<FIXS> alex_shutov.com.ledlights.bluetoothmodule.bluetooth.BtPortAdapterCreator diComponent = ((alex_shutov.com.ledlights.bluetoothmodule.bluetooth.BtPortAdapterCreator) (getAdaperCreator())); btFacade = new alex_shutov.com.ledlights.bluetoothmodule.bluetooth.BtLogicCellFacade(diComponent); btCommAdapter.setDecoree(btFacade); initializeEsbMappers(); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> detectionManagment.start(nsr_id); <FIXE>
<FIXS> issueDto.setIssueType(issue.getIssueType()); <FIXE>
<FIXS> java.lang.Object[] array = ((java.lang.Object[]) (clothes)); <FIXE> <FIXS> com.cs528.style.style.clothes.Clothes cloth = com.cs528.style.style.database.ClothesDatabase.getClothes(((java.lang.Integer) (array[i]))); <FIXE>
<FIXS> double totalPrice = price * quantity; <FIXE>
<FIXS> de.tEngine.math.Quaternion rot = de.tEngine.math.Quaternion.fromAxisAngle(new de.tEngine.math.Vector3f(0, 1, 0), euler.y); <FIXE> <FIXS> rot = de.tEngine.math.Quaternion.mul(rot, de.tEngine.math.Quaternion.fromAxisAngle(new de.tEngine.math.Vector3f(0, 0, 1), euler.z)); <FIXE>
<FIXS> return exportUtil.exportAsDocxFromXml(serializationService.serializeDatatypeLibrary(datatypeLibraryDocument, exportConfig).toXML(), gov.nist.healthcare.tools.hl7.v2.igamt.lite.service.impl.ExportServiceImpl.GLOBAL_STYLESHEET, exportParameters, datatypeLibraryDocument.getMetaData(), datatypeLibraryDocument.getDateUpdated()); <FIXE>
<FIXS> if (i == ((array.length) - 1)) { <FIXE>
<FIXS> maxSequence = java.lang.Math.max(maxSequence, curSequence); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> private android.graphics.Bitmap decodeSampledBitmapFromResource(android.content.res.Resources res, int resId, int reqWidth, int reqHeight) { <FIXE>
<FIXS> com.sun.jna.Pointer pointer = new com.sun.jna.Pointer(com.sun.jna.Native.malloc(bytes.length)); <FIXE> <FIXS> <FIXE>
<FIXS> return super.calculateBestEntry(); <FIXE>
<FIXS> text = text.replace("\\p", "<br/>"); <FIXE>
<FIXS> <FIXE>
<FIXS> return new org.openmuc.jdlms.datatypes.BitString(newConfigurationObjectFlagsByteArray, 16); <FIXE>
<FIXS> <FIXE>
<FIXS> Matrix[] layerWeights = new Matrix[nHLayers + 1]; for (int i = 0; i < (nHLayers + 1); i++) { <FIXE>
<FIXS> assertEquals(0, ((java.util.List<es.unizar.es.foodnet.model.CarroFavorito>) (model.get("carrosFavoritos"))).size()); <FIXE>
<FIXS> public int findUser(java.lang.String name) { <FIXE> <FIXS> if (user.getName().equals(name)) { <FIXE>
<FIXS> try { framework.common.MessageCommon.switchView("文件夹视图"); framework.common.MessageCommon.Menuoption("收件箱"); framework.common.MessageCommon.switchView("显示选项"); java.lang.String SIM1 = ((java.lang.String) (excute(testcase.Object_ResIdInstance, testcase.Operation_GetText, "android:id/text1", "1"))); excute(testcase.Object_ResourceId, testcase.Operation_ClickWait, "android:id/text1", "1"); check(testcase.Object_Text, testcase.Operation_checkExist, SIM1); } finally { framework.common.MessageCommon.switchView("显示选项"); excute(testcase.Object_Text, testcase.Operation_ClickWait, "显示全部信息"); } <FIXE>
<FIXS> com.google.common.base.Preconditions.checkArgument((!(generatingPolynom.hasNullpoints())), "generatingPolynom has at least one null point"); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> if ((firstPlayer.hasWon(true)) || (firstPlayer.hasLost(true))) <FIXE> <FIXS> if ((lastPlayer.hasWon(true)) || (lastPlayer.hasLost(true))) <FIXE>
<FIXS> <FIXE>
<FIXS> passwordForm = new com.core.objects.frames.PasswordFrame(); <FIXE> <FIXS> passwordForm = new com.core.objects.frames.NewPasswordFrame(); <FIXE>
<FIXS> int delimiter = input.indexOf(':', index); <FIXE> <FIXS> throw new org.lorecraft.phparser.SerializedPhpParserException("Missing delimiter after string, array or object length field!", index); <FIXE> <FIXS> int arrayLen = java.lang.Integer.valueOf(input.substring(index, delimiter)); index = delimiter + 2; <FIXE>
<FIXS> hideActionBar(actionBar); <FIXE>
<FIXS> pageTable[vpn] = new nachos.vm.TranslationEntry(TLBEntry); <FIXE>
<FIXS> return true; <FIXE> <FIXS> return true; <FIXE> <FIXS> return true; default : return super.onOptionsItemSelected(item); <FIXE> <FIXS> <FIXE>
<FIXS> org.junit.Assert.assertTrue("Type1 font expected", ((com.itextpdf.io.font.FontProgramFactory.createFont(afm, false)) instanceof com.itextpdf.io.font.Type1Font)); <FIXE>
<FIXS> if (jsonString != null) { com.example.jim.myapplication.Equipment[] downloadedEquipments = gson.fromJson(jsonString, com.example.jim.myapplication.Equipment[].class); for (com.example.jim.myapplication.Equipment equipment : downloadedEquipments) { equipmentList.add(equipment); } <FIXE>
<FIXS> <FIXE>
<FIXS> if ((feePaid) == true) { <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> int temp = page; page = title; <FIXE>
<FIXS> if ((url.getURL()) == null) return true; <FIXE> <FIXS> if (canonicalUrl == null) return true; <FIXE>
<FIXS> mode = new java.lang.String("month"); <FIXE>
<FIXS> private int countAreas(java.lang.Integer[][] array) { <FIXE>
<FIXS> isDragDetected = true; root.setLayoutX(((event.getSceneX()) - (startX))); root.setLayoutY(((event.getSceneY()) - (startY))); node.setStartPoint(new model.Point(root.getLayoutX(), root.getLayoutY())); mainPanel.redrawArc(self); <FIXE>
<FIXS> io.fabric.sdk.android.Fabric.with(this, new com.crashlytics.android.Crashlytics()); <FIXE> <FIXS> mWearData = new ca.hoogit.powerhour.Game.WearData(this); <FIXE> <FIXS> <FIXE>
<FIXS> public void showNotifications(android.content.Context context) { <FIXE>
<FIXS> return hu.akarnokd.rxjava2.basetypes.Solo.onAssembly(new hu.akarnokd.rxjava2.basetypes.SoloDoOnLifecycle<T>(this, onNext, hu.akarnokd.rxjava2.basetypes.Functions.emptyConsumer(), hu.akarnokd.rxjava2.basetypes.Functions.emptyConsumer(), Functions.EMPTY_ACTION, Functions.EMPTY_ACTION, hu.akarnokd.rxjava2.basetypes.Functions.emptyConsumer(), Functions.EMPTY_LONG_CONSUMER, Functions.EMPTY_ACTION)); <FIXE>
<FIXS> <FIXE>
<FIXS> for (int i = 0; i < ((img.getWidth()) - 1); i++) { <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> removePeerSession(); <FIXE>
<FIXS> if (image.getTheme().getName().equals(imageTheme.toLowerCase())) { <FIXE>
<FIXS> if ((steps > 0) && ((timesoffY) < (maxOffsetY))) { <FIXE>
<FIXS> com.pratilipi.data.type.doc.PratilipiContentDocImpl.PageImpl page = new com.pratilipi.data.type.doc.PratilipiContentDocImpl.PageImpl(); <FIXE>
<FIXS> assertEquals(1, keywordHash.size()); <FIXE>
<FIXS> <FIXE>
<FIXS> ps.excludedValues = new java.util.ArrayList<>(excludedValues); <FIXE>
<FIXS> <FIXE>
<FIXS> Spaceship player0 = new Spaceship(this, 'w', 's', 'a', 'd', 250, 250, 0, 30, ' ', 0); Spaceship player1 = new Spaceship(this, 'w', 's', 'a', 'd', 250, 248, 0, 32, ' ', 1); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> if (((prefZipCode) != null) && (!(isUsingCurrentLocation))) { showSaveZipCodeEntryDialog(v); } startSearch(v); <FIXE>
<FIXS> if (term.toLowerCase().equals(stopWord)) { <FIXE>
<FIXS> act.finish(); <FIXE>
<FIXS> for (int i = 0; i < q; i++) { <FIXE>
<FIXS> if (currentUser != null) { com.achanr.glovercolorapp.models.GCUser user = com.achanr.glovercolorapp.models.GCUser.convertFromFirebaseUser(currentUser); com.achanr.glovercolorapp.common.GCOnlineDatabaseUtil.getCurrentDatabaseReference().child(com.achanr.glovercolorapp.common.GCOnlineDatabaseUtil.USERS_KEY).child(currentUser.getUid()).setValue(user); } <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> if ((reply) == null) { reply = new com.gpl.rpg.atcontentstudio.model.gamedata.Dialogue.Reply(); } <FIXE>
<FIXS> public int getItemHeight() { <FIXE>
<FIXS> <FIXE>
<FIXS> if (is == null) { <FIXE>
<FIXS> public static void handleError(android.content.Context context, @android.support.annotation.NonNull java.lang.String message, java.lang.Throwable e) { <FIXE> <FIXS> if (BuildConfig.DEBUG) { android.widget.Toast.makeText(context, message, Toast.LENGTH_LONG).show(); <FIXE>
<FIXS> <FIXE>
<FIXS> return ((!(cat.equals(simulatedMouseMove))) && (!(CatAndMouseWithLake.isInsideLake(simulatedMouseMove)))) && (CatAndMouseWithLake.isInsideBoard(simulatedMouseMove, boardSize)); <FIXE>
<FIXS> if ((parameters) != null) { parameters = reusable.swapParameters(parameters); parameterCount = reusable.getParameterCount(); } <FIXE>
<FIXS> toPrint = ""; <FIXE>
<FIXS> callback.onListUpdate(note); <FIXE>
<FIXS> hasConnection = validarUsuario(USUARIOHIPERREG, PASSWORDHIPERREG); <FIXE>
<FIXS> <FIXE>
<FIXS> if ((obj == null) || (!(lilium.arubabacon.iBeacon.class.isAssignableFrom(obj.getClass())))) return false; return ((lilium.arubabacon.iBeacon) (obj)).mac.equals(mac); <FIXE>
<FIXS> java.lang.System.out.print(">> DataAccess: getOfferLowestPrice() -> "); <FIXE> <FIXS> java.lang.System.out.println(result); <FIXE>
<FIXS> game.GameBoard board = new game.GameBoard(game.GameBoard.User.PLAYER1, pieces, pieces); <FIXE>
<FIXS> minium.developer.config.WebDriversProperties.DeveloperWebDriverProperties webDriverProperties) throws java.io.IOException { <FIXE> <FIXS> org.openqa.selenium.WebDriver webDriver = webDriverService.createWebDriver(webDriverProperties); <FIXE>
<FIXS> if (gain == null) { return this; } agent.AgentInternalState gainState = new agent.AgentInternalState(); for (data.Emotion emotion : this) { if (emotion != null) { double gainEmo = (gain * (emotion.intensity)) / ((gain * (emotion.intensity)) + 1); gainState.add(new data.Emotion(emotion.name, gainEmo)); <FIXE> <FIXS> <FIXE> <FIXS> return gainState; <FIXE>
<FIXS> <FIXE>
<FIXS> if (((users.size()) > i) && (hidden.contains(users.get(i).getName()))) <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> if (cap != null) cap.onCartBroken(((net.minecraft.entity.item.EntityMinecart) (entityIn))); <FIXE>
<FIXS> draw(seq.getImageSafe(jsettlers.graphics.map.draw.MapObjectDrawer.WINE_GROW_STEPS), x, y, color); <FIXE>
<FIXS> @java.lang.Override <FIXE> <FIXS> <FIXE>
<FIXS> if (debConfig == null) { debConfig = failingConfig; } <FIXE>
<FIXS> java.lang.String token = tokens[i].toLowerCase(); <FIXE>
<FIXS> continuation = new com.google.devtools.build.lib.syntax.Environment.Continuation(continuation, function, caller, lexicalFrame, globalFrame, isSkylark); <FIXE>
<FIXS> if ((mBluetoothAdapter != null) && (mBluetoothAdapter.isEnabled())) { <FIXE>
<FIXS> return new java.net.URL(this.self.getProtocol(), this.self.getHost(), this.self.getPort(), ((this.basePath) + (name.trim()))); <FIXE>
<FIXS> javax.swing.JButton visionaSchedaButton = view.getVisionaSchedaButton(); visionaSchedaButton.addActionListener(new java.awt.event.ActionListener() { @java.lang.Override public void actionPerformed(java.awt.event.ActionEvent e) { java.lang.System.out.print(Box.getSelectedItem()); if ((Box.getSelectedItem()) != null) <FIXE> <FIXS> } }); <FIXE>
<FIXS> if (value == null) { V old = map.remove(key); super.remove(key); return old; } V old = map.put(key, value); super.get(key); <FIXE>
<FIXS> <FIXE>
<FIXS> synchronized(c) { c.up(); } <FIXE>
<FIXS> <FIXE>
<FIXS> return ((iter.hasNext()) && (!(((train) && ((cursor) > (lowerBound))) && ((folds) == ((iteration) + 1))))) && (!((!(train)) && ((cursor) > (upperBound)))); <FIXE>
<FIXS> timeline.Event event = ((timeline.Event) (this.serializer.getItem(eventId, this))); <FIXE> <FIXS> this.serializer.deleteItem(eventId, this); <FIXE>
<FIXS> } catch (java.lang.Exception e) { <FIXE>
<FIXS> if (!(playerTeam.HasTeamWon(m_Levels.get(((m_Levels.size()) - 1))))) { <FIXE>
<FIXS> java.util.List<org.educationalProject.surfacePathfinder.Point> shortestPath = new java.util.LinkedList<org.educationalProject.surfacePathfinder.Point>(); <FIXE>
<FIXS> com.google.android.gms.maps.model.LatLng expectedAnswer1 = new com.google.android.gms.maps.model.LatLng(40.01277732, (-75.15383119)); <FIXE> <FIXS> com.google.android.gms.maps.model.LatLng expectedAnswer2 = new com.google.android.gms.maps.model.LatLng(39.98790629, (-75.24043568)); <FIXE>
<FIXS> long size = java.lang.Integer.parseInt(tmp[1]); <FIXE>
<FIXS> assertNotNull("result must not be null", memberships); assertTrue((!(memberships.isEmpty()))); assertEquals("user1", memberships.iterator().next().getUserId()); <FIXE>
<FIXS> if (getMoves(board).contains(position)) { <FIXE>
<FIXS> if (rs.next()) { las.DBConnector.truncateBeforeLoad = false; <FIXE>
<FIXS> org.mockito.Mockito.verify(mockLoginView, org.mockito.Mockito.times(1)).getPassword(); <FIXE>
<FIXS> for (int i = start, j = end; i < j; ++i , --j) { <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> anomaly.setResponsiveNode(clientDelayGenerator.getResponsiveNode(request, nodes)); <FIXE>
<FIXS> int position = mImageViews.indexOf(imageView); if (position == (-1)) { <FIXE> <FIXS> return position; <FIXE>
<FIXS> org.apache.kafka.connect.runtime.TargetState targetState = configState.targetState(connector); worker.setTargetState(connector, targetState); if (targetState == (org.apache.kafka.connect.runtime.TargetState.STARTED)) reconfigureConnectorTasksWithRetry(connector); <FIXE>
<FIXS> <FIXE>
<FIXS> for (int i = off; i < len; i++) { <FIXE>
<FIXS> this.filename = filename; <FIXE> <FIXS> getAudioPlayerManager().play(this.filename); <FIXE>
<FIXS> if (list != null) { for (sample.handleData.User u : list) { if (u.username().equals(username)) { return true; } <FIXE>
<FIXS> android.net.Uri selectedImageUri = android.net.Uri.parse(path); <FIXE>
<FIXS> pitchDetector.setRunning(false); <FIXE>
<FIXS> <FIXE>
<FIXS> synchronized(m_exportedEndpoints) { for (java.util.Set<org.inaetics.remote.admin.wiring.ExportedEndpointImpl> exportedEndpoints : m_exportedEndpoints.values()) { for (org.inaetics.remote.admin.wiring.ExportedEndpointImpl exportedEndpoint : exportedEndpoints) { exportedEndpoint.close(); } <FIXE> <FIXS> synchronized(m_importedEndpoints) { for (java.util.Set<org.inaetics.remote.admin.wiring.ImportedEndpointImpl> importedEndpoints : m_importedEndpoints.values()) { for (org.inaetics.remote.admin.wiring.ImportedEndpointImpl importedEndpoint : importedEndpoints) { importedEndpoint.close(); } <FIXE> <FIXS> <FIXE>
<FIXS> return c.getContentResolver().query(Aware_Provider.Aware_Studies.CONTENT_URI, null, ((((Aware_Provider.Aware_Studies.STUDY_URL) + " LIKE '") + study_url) + "'"), null, ((Aware_Provider.Aware_Studies.STUDY_TIMESTAMP) + " DESC LIMIT 1")); <FIXE>
<FIXS> routeDto.setOwner(((address) + (user.getOid().toString()))); <FIXE>
<FIXS> public boolean containsModifications() { return (((((((mEpisodesWatched) != null) || ((mRewatching) != null)) || ((mRewatchedTimes) != null)) || ((mPrivacy) != null)) || ((mNotes) != null)) || ((mWatchingStatus) != null)) || ((mRating) != null); <FIXE>
<FIXS> break; <FIXE>
<FIXS> debug(() -> ((((("writeCharacters (" + (java.lang.String.valueOf(aText, nStart, nLen))) + ", ") + nStart) + ", ") + nLen) + ")"); <FIXE>
<FIXS> <FIXE>
<FIXS> return (quantity.equals(ipCounter.quantity)) && (date.equals(ipCounter.date)); <FIXE>
<FIXS> public void dropItem(game.Item item, game.Floor floor) { <FIXE>
<FIXS> double low = (compare) ? d2 : d1; double high = (compare) ? d1 : d2; <FIXE>
<FIXS> headDialogShow(view); <FIXE>
<FIXS> if (((mCallbacks.get(i)) != null) && ((mCallbacks.get(i).get()) == callback)) { <FIXE>
<FIXS> <FIXE>
<FIXS> if (new_context == null) return new org.musetest.core.step.BasicStepExecutionResult(StepExecutionStatus.COMPLETE); <FIXE>
<FIXS> if ((!(Storage.Storage.taskList.isEmpty())) && (taskNumberToDelete <= (Storage.Storage.taskList.size()))) { <FIXE>
<FIXS> new com.spoiledmilk.ibikecph.map.SMHttpRequest().getRecalculatedRoute(loc, end, null, null, null, null, this.type, this); <FIXE>
<FIXS> filler.fill(fd, map); <FIXE>
<FIXS> saveCurrentSolution(); <FIXE>
<FIXS> <FIXE>
<FIXS> org.wso2.carbon.apimgt.core.api.APIStore apiStore = new org.wso2.carbon.apimgt.core.impl.UserAwareAPIStore(org.wso2.carbon.apimgt.core.impl.UserAwareAPIStoreTestCase.USER_NAME, null, applicationDAO, null, null, null, null, null); <FIXE>
<FIXS> <FIXE>
<FIXS> public java.lang.StringBuilder qMarks(int length, int start) { <FIXE> <FIXS> for (int i = start; i < length; i++) { <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> private java.lang.String checkForProblem(final com.sap.cloud.sdk.s4hana.serialization.SapClient sapClient) { <FIXE> <FIXS> final com.sap.cloud.sdk.s4hana.connectivity.ErpConfigContext config = new com.sap.cloud.sdk.s4hana.connectivity.ErpConfigContext(com.sap.cloud.sdk.s4hana.connectivity.ErpDestination.getDefaultName(), sapClient, java.util.Locale.ENGLISH); <FIXE>
<FIXS> byui.cit260.fireSwamp.model.Item newItem = new byui.cit260.fireSwamp.model.Item(); <FIXE>
<FIXS> for (int i = 0; i < (adapters.length); i++) { <FIXE>
<FIXS> org.junit.Assert.assertThat(dataPoint.getValue(), instanceOf(java.lang.Integer.class)); <FIXE>
<FIXS> final java.util.LinkedList<java.util.List<java.lang.Integer>> trace = new java.util.LinkedList<>(); <FIXE>
<FIXS> java.lang.String resolvedText = (text == null) ? null : resolver.resolveString(text); <FIXE> <FIXS> if ((text == null) || (text.equals(resolvedText))) { <FIXE>
<FIXS> protected java.lang.Integer getNotificationColor(android.content.Context context) { <FIXE> <FIXS> if (id == 0) { return null; } <FIXE> <FIXS> return null; <FIXE>
<FIXS> if (cart != null) { cart.computeTotal(); session.setAttribute("cartlist", cart); } <FIXE>
