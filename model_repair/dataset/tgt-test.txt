<FIXS> return userComputeResourcePreference.getLoginUserName(); <FIXE>
<FIXS> putAll(index, attributes); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> com.example.johannes.colorpicker.Task task = new com.example.johannes.colorpicker.Task(); <FIXE>
<FIXS> if (dfs.isReified()) { <FIXE>
<FIXS> try (java.util.jar.JarFile jar = new java.util.jar.JarFile((((warDirectory) + (java.io.File.separator)) + jarFile))) { <FIXE>
<FIXS> cfg.setPort(java.lang.Integer.parseInt(data.getBundle(res.getString(R.string.i2ptunnel_wizard_k_binding_port)).getString(Page.SIMPLE_DATA_KEY))); <FIXE>
<FIXS> group8.com.application.Application.AlertSystem.fuelAlert = false; <FIXE>
<FIXS> if (requestCode != (EditFragment.REQUEST_TAKE_PHOTO)) <FIXE> <FIXS> editFrag.onCameraActivityResult(resultCode); <FIXE>
<FIXS> ensureParentsByMerge(datastore, path, writeTransaction, schemaContext); <FIXE>
<FIXS> expect(false, ((expression + " != ") + o2)); <FIXE>
<FIXS> <FIXE>
<FIXS> if (mergeInto != null) { result.putAll(mergeInto); } if (mergeFrom != null) { result.putAll(mergeFrom); } <FIXE>
<FIXS> public void displayTitle() { <FIXE>
<FIXS> return ((((this.userID1) == userID1) && ((this.userID2) == userID2)) || (((this.userID1) == userID2) && ((this.userID2) == userID1))) || (userID1 == userID2); <FIXE>
<FIXS> public boolean find(java.lang.String findWhat, boolean matchCase, boolean wholeWord) { <FIXE> <FIXS> if (found) textPane.select(matcher.start(), matcher.end()); <FIXE>
<FIXS> if ((topic == null) || (((getUserId()) == null) ^ ((topic.getUserId()) == null))) <FIXE>
<FIXS> java.util.Scanner scanner = new java.util.Scanner(new java.io.BufferedReader(new java.io.FileReader(file))); <FIXE>
<FIXS> <FIXE> <FIXS> initControllers(); <FIXE>
<FIXS> org.stepik.api.client.StepikApiClient stepikApiClient = org.stepik.core.stepik.StepikAuthManager.authAndGetStepikApiClient(); org.stepik.api.objects.lessons.CompoundUnitLesson unitLesson = org.stepik.plugin.utils.Utils.getCompoundUnitLessonStudyObject(stepikApiClient, unitId, lessonId); <FIXE> <FIXS> org.stepik.api.objects.sections.Section section = org.stepik.plugin.utils.Utils.getSectionStudyObject(stepikApiClient, unit.getSection()); <FIXE>
<FIXS> if (((_transactions) == null) || (!(_transactions.hasNext()))) <FIXE>
<FIXS> private boolean readJsonStream(java.io.InputStream in, com.josephcmontgomery.bookscanner.BookInformation book) throws java.lang.Exception { <FIXE> <FIXS> return com.josephcmontgomery.bookscanner.BookJsonInterpreter.processSearchResult(reader, book); <FIXE>
<FIXS> setStorage(new org.apache.commons.math3.geometry.euclidean.threed.Rotation(com.neuronrobotics.sdk.addons.kinematics.math.RotationNR.getOrder(), com.neuronrobotics.sdk.addons.kinematics.math.RotationNR.getConvention(), java.lang.Math.toRadians(azumeth), java.lang.Math.toRadians(elevation), java.lang.Math.toRadians(tilt))); <FIXE>
<FIXS> <FIXE>
<FIXS> if (main_package.MapUpdaterGUI.DEBUG) java.lang.System.out.println("Calling create and show GUI"); <FIXE>
<FIXS> <FIXE> <FIXS> myMessage.add(0.0F); myMessage.add(0.0F); myMessage.add(0.0F); <FIXE>
<FIXS> protected java.io.File getComponentFile(java.io.File pathFile, java.lang.String componentName) throws de.invation.code.toval.misc.wd.ProjectComponentException { <FIXE>
<FIXS> if ((start != (-1)) && (stop != (-1))) { <FIXE>
<FIXS> game.items.Item itemOld = items[selected].item; <FIXE> <FIXS> addItem(null, selected); <FIXE> <FIXS> addItem(itemNew, selected); <FIXE>
<FIXS> title.set(key); <FIXE>
<FIXS> org.junit.Assert.assertThat(e.getMessage(), containsString("charset must be initialized")); <FIXE>
<FIXS> <FIXE> <FIXS> if (allsavedApis.get(i).getName().toLowerCase().contains(text.toLowerCase())) { <FIXE>
<FIXS> if ((javax.swing.JOptionPane.showInternalConfirmDialog(this, ("Are you sure you want to remove this item?\n" + p), "Stock Item", javax.swing.JOptionPane.YES_NO_OPTION)) == (javax.swing.JOptionPane.YES_OPTION)) { <FIXE>
<FIXS> java.lang.Boolean isSimCardValid = (tm.getSimState()) == (android.telephony.TelephonyManager.SIM_STATE_READY); <FIXE>
<FIXS> <FIXE>
<FIXS> if (firstByte == (-1)) { }else { <FIXE>
<FIXS> <FIXE>
<FIXS> return (am.getAccounts().length) > 0; <FIXE> <FIXS> <FIXE>
<FIXS> connection.addRequestProperty(com.android.volley.toolbox.HurlStack.HEADER_CONTENT_TYPE, request.getBodyContentType()); <FIXE> <FIXS> <FIXE>
<FIXS> if (active.get()) { <FIXE>
<FIXS> org.usfirst.frc.team5026.robot.Robot.hardware = new org.usfirst.frc.team5026.robot.Hardware(); <FIXE> <FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> if (validationResult != null) { <FIXE>
<FIXS> android.widget.Toast.makeText(com.example.michael.archerygame.GameActivity.getGameContext(), getNextPlayerTeamA(), Toast.LENGTH_SHORT).show(); <FIXE> <FIXS> android.widget.Toast.makeText(com.example.michael.archerygame.GameActivity.getGameContext(), getNextPlayerTeamB(), Toast.LENGTH_SHORT).show(); <FIXE>
<FIXS> protected java.util.List<com.orientechnologies.orient.server.distributed.ODistributedResponse> getConflictResponses() { <FIXE>
<FIXS> for (int i = ((bytestream.length) * 8) - 1; i >= 0; i--) { <FIXE>
<FIXS> public final java.lang.String getToken() { <FIXE>
<FIXS> return t.getElevation(); <FIXE>
<FIXS> throw new java.lang.IllegalArgumentException(); <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> break; <FIXE> <FIXS> break; <FIXE> <FIXS> break; <FIXE> <FIXS> break; <FIXE>
<FIXS> public java.util.List<ca.ubc.ece.cpen221.mp3.staff.Vertex> getUpstreamNeighbors(ca.ubc.ece.cpen221.mp3.staff.Vertex vertex) { java.util.List<ca.ubc.ece.cpen221.mp3.staff.Vertex> upstreamNeighboursList = new java.util.LinkedList<ca.ubc.ece.cpen221.mp3.staff.Vertex>(); for (int i = 0; i < (vertexList.size()); i++) { if (adjacencyList.contains(vertex)) { upstreamNeighboursList.add(new ca.ubc.ece.cpen221.mp3.staff.Vertex(vertexList.get(i))); <FIXE>
<FIXS> this.context.unregisterReceiver(this.IntentReceiver); <FIXE>
<FIXS> <FIXE> <FIXS> case ' ' : if ((argument.length()) == 0) continue; <FIXE>
<FIXS> highscoreList = ((android.widget.ListView) (layout.findViewById(R.id.highscore_list))); <FIXE>
<FIXS> public static void releaseColor(int color, int which) { <FIXE>
<FIXS> return null; <FIXE>
<FIXS> if (proposedBillCycleDate < billingCycleDay) { if (billingCycleDay <= lastDayOfMonth) { proposedBillCycleDate = billingCycleDay; }else { proposedBillCycleDate = lastDayOfMonth; } <FIXE>
<FIXS> if (1 == 1) { return false; } <FIXE>
<FIXS> in.jaaga.learning.api.ChatReply reply; <FIXE> <FIXS> reply = new in.jaaga.learning.api.ChatReply(); <FIXE> <FIXS> reply.displayText = options[i]; <FIXE> <FIXS> <FIXE>
<FIXS> }else { } <FIXE>
<FIXS> for (int i = level - 1; i >= 0; i--) { <FIXE>
<FIXS> protected java.lang.String getName(com.google.gwt.core.ext.typeinfo.JClassType source) { <FIXE>
<FIXS> if (cyanogenOTAUpdate != null) { java.io.File file = new java.io.File((((android.os.Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS).getPath()) + (java.io.File.separator)) + (cyanogenOTAUpdate.getFileName()))); onUpdateDownloaded(((file.exists()) && (!(settingsManager.containsPreference(com.arjanvlek.cyngnotainfo.views.PROPERTY_DOWNLOAD_ID)))), false); } <FIXE>
<FIXS> security.authorizeRequests().antMatchers("/css/**").permitAll().anyRequest().authenticated().and().formLogin().loginPage("/login").permitAll().failureUrl("/login?error").permitAll().and().logout().permitAll(); <FIXE>
<FIXS> <FIXE>
<FIXS> assertFalse(fact.validateFluxLocationsForFaCatch(faCatchFacts)); <FIXE>
<FIXS> setText(t.getName()); <FIXE>
<FIXS> if (arg3 == null) return ; <FIXE>
<FIXS> if (timeLeft <= 0) { <FIXE>
<FIXS> return ((HIGH) == volatilityIndexRisk) || ((HIGH) == countryRisk) ? com.github.vincent_fuchs.comprehensive_testing.service.HIGH.toString() : ((MEDIUM) == volatilityIndexRisk) || ((MEDIUM) == countryRisk) ? com.github.vincent_fuchs.comprehensive_testing.service.MEDIUM.toString() : com.github.vincent_fuchs.comprehensive_testing.service.LOW.toString(); <FIXE>
<FIXS> new com.ashwinpilgaonkar.popularmovies.Backend.Favorite(getActivity(), movies, favorite, 0); <FIXE>
<FIXS> ExpectedPresident(focusNode.leftChild); <FIXE> <FIXS> ExpectedPresident(focusNode.rightChild); <FIXE>
<FIXS> <FIXE>
<FIXS> for (int value : values) presses.add(value); <FIXE>
<FIXS> org.junit.Assert.assertEquals(8, ans); <FIXE>
<FIXS> <FIXE>
<FIXS> calcMinMax(); <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE> <FIXS> return stat; <FIXE>
<FIXS> if ((invoiceTable) == null) { return ; } <FIXE>
<FIXS> getSupportFragmentManager().beginTransaction().add(R.id.image_frag_container, fragment, thenextvoyager.wallser.Data.Constants.IMAGE_FRAGMENT_TAG).commit(); <FIXE>
<FIXS> <FIXE>
<FIXS> if ((getActionBar()) != null) { getActionBar().setTitle(title); } <FIXE>
<FIXS> mTfs.unpin(mTfs.open(path)); <FIXE>
<FIXS> java.util.List result = session.createQuery(query).list(); <FIXE>
<FIXS> <FIXE>
<FIXS> mockRoom.when(mockRoom.getDescription()).thenReturn("hi"); <FIXE>
<FIXS> if (edges.remove(x)) { return true; } <FIXE>
<FIXS> coordinates = new org.springframework.data.geo.Point(latLong[1], latLong[0]); <FIXE>
<FIXS> field[x][y] = 2; <FIXE>
<FIXS> <FIXE> <FIXS> org.junit.Assert.assertEquals("1233.14", concat.apply(123, 3.14)); <FIXE>
<FIXS> if ((entryPage) >= (entryWrapperMap.asMap().size())) entryPage = (entryWrapperMap.asMap().size()) - 1; <FIXE>
<FIXS> if ((com.zhour.fragments.AlienCarFragment.et_vehicle_number.getText().toString().length()) < 4) { <FIXE>
<FIXS> return ; <FIXE> <FIXS> super.onBackPressed(); <FIXE>
<FIXS> if (((mPlayerButtonList) == null) || ((mPlayerButtonList.size()) == 0)) { <FIXE>
<FIXS> if ((mFrontImageAsset) != null) assets.add(mFrontImageAsset); if ((mBackImageAsset) != null) assets.add(mBackImageAsset); if ((mInsideLeftImageAsset) != null) assets.add(mInsideLeftImageAsset); if ((mInsideRightImageAsset) != null) assets.add(mInsideRightImageAsset); <FIXE>
<FIXS> if ((data.getOwner()) == null) { return "???"; } <FIXE>
<FIXS> public long requestBook(long bookId) throws library_project.models.BookIsOutException { <FIXE>
<FIXS> public void run() { <FIXE>
<FIXS> update(ret); <FIXE>
<FIXS> _newAppointment.setStartTime(_calendarTime); <FIXE> <FIXS> _newAppointment.setEndTime(_calendarTime); <FIXE>
<FIXS> org.easymock.EasyMock.expect(study.getId()).andStubReturn(1); <FIXE>
<FIXS> <FIXE>
<FIXS> if (shown) { return true; } <FIXE> <FIXS> <FIXE>
<FIXS> mRecyclerView.swapAdapter(adapter, true); <FIXE>
<FIXS> <FIXE>
<FIXS> xbot.common.math.PIDManager manager = new xbot.common.math.PIDManager("test", injector.getInstance(xbot.common.properties.XPropertyManager.class), 1, 0, 0, 0, 0.5, (-0.25)); <FIXE>
<FIXS> private org.gradle.api.internal.artifacts.ivyservice.resolveengine.excludes.AbstractModuleExclusion maybeMergeIntoUnion(org.gradle.api.internal.artifacts.ivyservice.resolveengine.excludes.AbstractModuleExclusion one, org.gradle.api.internal.artifacts.ivyservice.resolveengine.excludes.AbstractModuleExclusion two) { if (one.equals(two)) { return one; } <FIXE>
<FIXS> <FIXE> <FIXS> if ((acceptThread) != null) { acceptThread.cancel(); acceptThread = null; } <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> if (teamId == 0) { return true; } <FIXE>
<FIXS> <FIXE>
<FIXS> return stmt.executeQuery(); <FIXE>
<FIXS> <FIXE> <FIXS> invalidateClients(fileName, serverFile.currentWriter); <FIXE> <FIXS> serverFile.state = FileState.Not_Shared; <FIXE>
<FIXS> <FIXE>
<FIXS> queryBuilder.append(columnAliases[i].getAliasName()); <FIXE>
<FIXS> <FIXE>
<FIXS> com.common.PreferanceUtil preferanceUtil = new com.common.PreferanceUtil(getActivity()); <FIXE>
<FIXS> canvas.drawArc(new com.anwesome.games.dataindicationbutton.RectF((-newR), (-newR), newR, newR), 240, 60, false, paint); <FIXE>
<FIXS> if ((file.getSize()) > 0) { com.webessay.model.Uploadfile entity = new com.webessay.model.Uploadfile(); entity.setFileContentType(file.getContentType()); entity.setFileName(file.getOriginalFilename()); entity.setFileSize(file.getSize()); entity.setFile(file.getBytes()); uploadrepo.save(entity); orders.setFileId(entity.getId()); } <FIXE>
<FIXS> cal.set(year, month, 1); <FIXE> <FIXS> java.lang.System.out.println(max); <FIXE>
<FIXS> setupSpinnerSubject(request); <FIXE>
<FIXS> return hu.akarnokd.rxjava2.basetypes.Solo.onAssembly(new hu.akarnokd.rxjava2.basetypes.SoloDoOnLifecycle<T>(this, hu.akarnokd.rxjava2.basetypes.Functions.emptyConsumer(), hu.akarnokd.rxjava2.basetypes.Functions.emptyConsumer(), hu.akarnokd.rxjava2.basetypes.Functions.emptyConsumer(), onComplete, Functions.EMPTY_ACTION, hu.akarnokd.rxjava2.basetypes.Functions.emptyConsumer(), Functions.EMPTY_LONG_CONSUMER, Functions.EMPTY_ACTION)); <FIXE>
<FIXS> reference = reference.replaceAll("%", "%20"); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> evaluator = new name.cantanima.idealnim.Game_Evaluation_Hashmap(getContext(), playable, played, game_level); <FIXE>
<FIXS> client.launch(); <FIXE>
<FIXS> return count >= numOfValues; <FIXE>
<FIXS> <FIXE>
<FIXS> double distance = (java.lang.Math.abs(java.lang.Math.sqrt(((x * x) + (y * y))))) / (player.getScale()); <FIXE>
<FIXS> player.setColor(((olof.sjoholm.Net.Both.Envelope.PlayerSelectColor) (envelope)).getColor()); <FIXE>
<FIXS> if ((dependency.getY()) >= 0) { <FIXE>
<FIXS> java.lang.System.arraycopy(old, 0, _buffer, 0, _position); _encoder.init(_buffer, _position, ((_buffer.length) * 2)); <FIXE>
<FIXS> <FIXE>
<FIXS> (currentPosition)++; return realEstate.SortedList.list[currentPosition]; <FIXE>
<FIXS> <FIXE>
<FIXS> registry.beginTransaction(); registry.put(path, resource); registry.commitTransaction(); return true; <FIXE>
<FIXS> extension = ext.substring(1).toLowerCase(); <FIXE> <FIXS> extension = ext.toLowerCase(); <FIXE>
<FIXS> record.setStringValue(AssertFactoryMiddlewareDatabaseConstant.ASSET_FACTORY_CONTRACT_NAME_COLUMN, name); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> saveState(); <FIXE>
<FIXS> ret = askForFirstPassword(); <FIXE>
<FIXS> long[][] temp = new long[n][n]; sim.eqiv(temp, grid); done.push(temp); <FIXE>
<FIXS> final int rotateViewGravity = (android.view.Gravity.RIGHT) | (android.view.Gravity.TOP); <FIXE>
<FIXS> return nextDoc(); <FIXE>
<FIXS> tx.put(LogicalDatastoreType.OPERATIONAL, macEntryId, macEntry, true); <FIXE>
<FIXS> org.pegdown.ast.RootNode rootNode = processor.parseMarkdown(normalize(mkd).toCharArray()); <FIXE>
<FIXS> cursor = mDb.query(NotesContract.TABLE_NAME, null, null, null, null, null, ((NotesContract.COLUMN_FAV) + " DESC")); <FIXE>
<FIXS> <FIXE>
<FIXS> private void updateCell(int x, int y) { javafx.scene.shape.Rectangle r = getRectangle(x, y); if (game.isAlive(x, y)) { <FIXE>
<FIXS> valueProperty().bindBidirectional(channelSelector.selectedChannelProperty().asObject()); <FIXE>
<FIXS> this.repaint(); <FIXE>
<FIXS> int x = (i * cols) + j; <FIXE>
<FIXS> this.x = radius * (java.lang.Math.cos(winkel)); this.y = radius * (java.lang.Math.sin(winkel)); <FIXE>
<FIXS> public void onItemClick(android.widget.AdapterView<?> adapterView, android.view.View view, int position, long id) { <FIXE>
<FIXS> <FIXE>
<FIXS> this.onWorkflowFinished(null); <FIXE>
<FIXS> <FIXE>
<FIXS> java.lang.String token = response.getString("access_token"); <FIXE>
<FIXS> public static void printResult(double[] result) { java.lang.System.out.println(""); for (int i = 0; i < (result.length); i++) { java.lang.System.out.print(((result[i]) + " ")); <FIXE>
<FIXS> count += 1; <FIXE>
<FIXS> mViewPager.setCurrentItem(((mViewPager.getCurrentItem()) + 1), smooth); <FIXE> <FIXS> <FIXE>
<FIXS> bindings.add(record); <FIXE>
<FIXS> private static java.util.List<com.dabsquared.gitlabjenkins.trigger.handler.push.PushHookTriggerHandler> retrieveHandlers(boolean triggerOnPush, com.dabsquared.gitlabjenkins.trigger.TriggerOpenMergeRequest triggerOpenMergeRequestOnPush, boolean skipWorkInProgressMergeRequest) { <FIXE>
<FIXS> de.teamhug.GlacialEpoch.Recipes.GE_ButcherRecipes.addRecipe(new de.teamhug.GlacialEpoch.Util.GE_ButcherRecipe().setInput(new net.minecraft.item.ItemStack(de.teamhug.GlacialEpoch.Registry.GE_ItemRegistry.itemCadaverCow)).setTools(de.teamhug.GlacialEpoch.Recipes.GE_ButcherRecipes.tools).addOutput(new net.minecraft.item.ItemStack(net.minecraft.init.Items.leather, 1, 1)).addOutput(new net.minecraft.item.ItemStack(net.minecraft.init.Items.beef, 6, 1))); <FIXE>
<FIXS> <FIXE>
<FIXS> java.lang.String taskName = getDetailFromParameter(getNameParameter()); java.lang.String priority = getDetailFromParameter(getPriorityParameter()); java.lang.String category = getDetailFromParameter(getCategoryParameter()); <FIXE>
<FIXS> <FIXE>
<FIXS> if ((args.length) == 0) return false; <FIXE>
<FIXS> canvas.drawText(getContext().getString(R.string.game_over_text), ((startP_) + ((cellSize_) * 2.5F)), ((startP_) + ((cellSize_) * 4.7F)), noticePaint_); <FIXE>
<FIXS> int num = edu.ucsd.sccn.LSL.inst.lsl_resolve_all(buf, buf.length, wait_time); <FIXE>
<FIXS> session.setAttribute(CricketSpeechlet.START_KEY, 0); <FIXE>
<FIXS> com.tri.pgs.client.surface.ui.UISystem.init(comp, border, true); <FIXE>
<FIXS> TrafficSimulator.lanes.get(newLaneIndex).addCar(car, ((laneIndex) - (newLaneIndex))); <FIXE>
<FIXS> <FIXE>
<FIXS> connectionService = com.northghost.caketube.AFConnectionService.newBuilder(this).addConnectionCallbacksListener(this).addVPNConnectionStateListener(this).build(); <FIXE>
<FIXS> <FIXE> <FIXS> android.app.FragmentTransaction tx = fragmentManager.beginTransaction(); <FIXE> <FIXS> tx.commit(); <FIXE> <FIXS> <FIXE>
<FIXS> java.lang.String message = MessageSend.getText().trim(); <FIXE> <FIXS> <FIXE>
<FIXS> (this.steps)++; <FIXE>
<FIXS> }else { login(userLogged.getCurrentUserLogged().getAuUsername(), userLogged.getCurrentUserLogged().getAuPassword()); <FIXE>
<FIXS> contents.add(org.jitsi.jicofo.JingleOfferFactory.createContentForMedia(MediaType.AUDIO, false, true, false)); contents.add(org.jitsi.jicofo.JingleOfferFactory.createContentForMedia(MediaType.VIDEO, false, true, false)); contents.add(org.jitsi.jicofo.JingleOfferFactory.createContentForMedia(MediaType.DATA, false, true, false)); <FIXE>
<FIXS> mMap.addMarker(marker); <FIXE>
<FIXS> public void brokenFunction(android.view.View view) { <FIXE>
<FIXS> return ((this.getNaam().equals(speler.getNaam())) && (this.getInitialen().equals(speler.getInitialen()))) && ((this.getKNSBnummer()) == (speler.getKNSBnummer())); <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> readSwaggerSpec(spec, file, validationResult); <FIXE>
<FIXS> <FIXE>
<FIXS> public static com.izik.recipebook.Model instance(android.content.Context context) { <FIXE> <FIXS> <FIXE>
<FIXS> if (items[i].equals(item)) { <FIXE>
<FIXS> return true; <FIXE>
<FIXS> res.fillResult(modelExtractions); <FIXE>
<FIXS> public void printGrid() { <FIXE>
<FIXS> this.setVisible(true); <FIXE>
<FIXS> m_deck.shuffle(); <FIXE>
<FIXS> clickModel.transform.setToTranslation(control.getClickOnMap().x, control.getClickOnMap().y, de.eightbitboy.ecorealms.Highlighter.CLICK_HEIGHT); hoverModel.transform.setToTranslation(control.getHoverOverMap().x, control.getHoverOverMap().y, de.eightbitboy.ecorealms.Highlighter.HOVER_HEIGHT); <FIXE>
<FIXS> for (int i = 0; i < (orderFields.size()); i++) { <FIXE>
<FIXS> if (!(javaClass.isInner())) { <FIXE>
<FIXS> if ((this.cardprices) != null) { this.cardprices.setText(prices); swipeLayout.setRefreshing(false); } <FIXE>
<FIXS> @org.junit.AfterClass <FIXE> <FIXS> main.com.valkryst.VcLSM.benchmarks.TweetsDictBenchmarks.db.close(); <FIXE> <FIXS> } catch (final java.io.IOException e) { <FIXE>
<FIXS> for (int i = 0; i < (symnum); ++i) { <FIXE>
<FIXS> <FIXE>
<FIXS> java.util.List<com.softserve.tc.diary.entity.Record> list = recordDAO.getAllPublicRecordsByNickName(nickName); <FIXE>
<FIXS> assertNotNull(restResponse.getData()); <FIXE> <FIXS> assertTrue(java.lang.Boolean.valueOf(dataMap.get("valid").toString())); <FIXE>
<FIXS> java.util.List<java.lang.Integer> colorsList = new java.util.ArrayList<java.lang.Integer>(pointList.size()); <FIXE>
<FIXS> db.close(); <FIXE>
<FIXS> com.coremedia.iso.IsoFile lIsoFile = new com.coremedia.iso.IsoFile(new com.coremedia.iso.IsoBufferWrapperImpl(new java.io.File(pFileName))); <FIXE>
<FIXS> tokenValueMap.put(key, tokenValue); <FIXE> <FIXS> <FIXE>
<FIXS> determineSize(recordsToReadInThisPass); <FIXE>
<FIXS> props.putValue(PreviewProperty.BACKGROUND_COLOR, null); <FIXE>
<FIXS> public java.util.HashMap<de.uni_freiburg.informatik.ultimate.logic.TermVariable, de.uni_freiburg.informatik.ultimate.logic.Term> constructAuxVarMapping(final java.util.Set<de.uni_freiburg.informatik.ultimate.logic.TermVariable> auxVars) { final java.util.HashMap<de.uni_freiburg.informatik.ultimate.logic.TermVariable, de.uni_freiburg.informatik.ultimate.logic.Term> result = new java.util.HashMap<>(); for (final de.uni_freiburg.informatik.ultimate.logic.TermVariable auxVar : auxVars) { final de.uni_freiburg.informatik.ultimate.logic.Term auxVarConst = getOrConstructConstForAuxVar(auxVar); result.put(auxVar, auxVarConst); <FIXE> <FIXS> return result; <FIXE>
<FIXS> for (int i = 0; i < (sortedKeys.size()); i++) { <FIXE>
<FIXS> this.client.sendMessage(channelTo, java.lang.String.format("%s/%s/%s: %s", msg.getBotFrom().getId(), msg.getChannelFrom(), msg.getNicknameFrom(), messageToken)); <FIXE>
<FIXS> public javax.ws.rs.core.Response editCompany(@org.cba.rest.resources.PathParam(value = "id") int id, java.lang.String content) { <FIXE> <FIXS> if (company == null) { <FIXE>
<FIXS> result.add(new com.app.restfulapp.models.Member("Hỗn hợp & Đậm đặc", "")); <FIXE> <FIXS> <FIXE>
<FIXS> for (int t = 0; t < trials; t++) { <FIXE>
<FIXS> <FIXE>
<FIXS> android.view.View view = inflater.inflate(R.layout.dialog_progress, null); builder.setView(view); <FIXE>
<FIXS> <FIXE> <FIXS> update(delta); <FIXE>
<FIXS> private java.lang.String decrypt(final java.lang.String key, java.lang.String value) { <FIXE> <FIXS> com.microsoft.aad.adal.Logger.v(com.microsoft.aad.adal.DefaultTokenCacheStore.TAG, java.lang.String.format("Decryption error for key: '%s'. Item will be removed", key)); removeItem(key); com.microsoft.aad.adal.Logger.v(com.microsoft.aad.adal.DefaultTokenCacheStore.TAG, java.lang.String.format("Item removed for key: '%s'", key)); <FIXE>
<FIXS> n_skipped = 1; <FIXE> <FIXS> while (((current) == ',') && ((n_skipped++) != n_skip)) { <FIXE> <FIXS> <FIXE>
<FIXS> int temp = start; while (temp != (end)) { save += (array[temp]) + ","; if (temp == ((array.length) - 1)) { temp = 0; }else { temp++; <FIXE> <FIXS> save += array[temp]; <FIXE>
<FIXS> javax.sound.sampled.AudioInputStream inputStream = javax.sound.sampled.AudioSystem.getAudioInputStream(com.bsc.cs.kidssoftware.Test.class.getResource(("/assets/" + (file2)))); <FIXE>
<FIXS> double updatedFraction = updateFraction(currentPlayer); <FIXE>
<FIXS> <FIXE>
<FIXS> }else return null; <FIXE>
<FIXS> @WebTests.BeforeSuite(groups = "InternetExplorer") public void setUpDriverIE() throws java.lang.InterruptedException { <FIXE>
<FIXS> <FIXE>
<FIXS> public void init() { super.init(); <FIXE>
<FIXS> <FIXE>
<FIXS> int length = java.lang.Integer.parseInt(args[0]); int width = java.lang.Integer.parseInt(args[1]); <FIXE>
<FIXS> <FIXE>
<FIXS> int[] s = spectrumStrategy.execute(spectrum, sampleRate); <FIXE>
<FIXS> } <FIXE>
<FIXS> if (((activeDownloadsList[mapID]) != null) && (activeDownloadsList[mapID])) { <FIXE>
<FIXS> return !(((record != null) && ((this.retryLimit) > 0)) && ((this.retryLimit) <= (record.retryNum))); <FIXE>
<FIXS> baseParsers.add(new org.monospark.spongematchers.parser.element.BaseElementParser(org.monospark.spongematchers.parser.base.BaseMatcherParser.FLOATING_POINT)); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> if (delay > 0) { sendPrayAlarm(idx, prayId, prayName, delay); } <FIXE>
<FIXS> mConnectedThread.write("0"); <FIXE>
<FIXS> if ((queue.isEmpty()) && ((this.travelInfo) == null)) { <FIXE>
<FIXS> assertTrue(net.sf.memoranda.util.AgendaGenerator.getAgenda(cd, collection).equals(getAgenda)); <FIXE>
<FIXS> java.util.Iterator<com.sb.elsinore.Temp> iterator = com.sb.elsinore.LaunchControl.tempList.iterator(); com.sb.elsinore.Temp tTemp; while (iterator.hasNext()) { tTemp = iterator.next(); if ((tTemp.getName().equalsIgnoreCase(name)) || (tTemp.getProbe().equalsIgnoreCase(name))) { return tTemp; } } <FIXE>
<FIXS> return em.createQuery(cq); <FIXE>
<FIXS> if ((url != null) && (Patterns.WEB_URL.matcher(url).matches())) { <FIXE>
<FIXS> <FIXE>
<FIXS> callback.done(objects, e); <FIXE> <FIXS> <FIXE>
<FIXS> malfunctionTypePrivacyField.setValue(rand.nextDouble()); numOfPeoplePrivacyField.setValue(rand.nextDouble()); <FIXE>
<FIXS> speedX = (((random.nextFloat()) - 0.5F) * 2) * (com.studiau.amazinggravity.ExhaustParticle.BASE_SPEEDX); <FIXE>
<FIXS> clientApi.ascan.removeAllScans(apiKey); <FIXE>
<FIXS> }else { getNewLocation(); <FIXE> <FIXS> <FIXE>
<FIXS> verify(fakeMailSender).createMessageWithHTMLCode(messageTextArgumentCaptor.capture(), anyString(), anyString()); <FIXE>
<FIXS> if ((result.length()) > 0) { result.deleteCharAt(((result.length()) - 1)); } <FIXE>
<FIXS> synchronized(this) { if ((getStatus()) != (XTaskBean.STATUS_DOING)) return false; if (!(onEndSuccess())) return false; setStatus(XTaskBean.STATUS_DONE); } <FIXE>
<FIXS> <FIXE>
<FIXS> final java.util.Collection<java.lang.String> affiliationStrings = java.util.Arrays.asList(affiliationArguments.replaceFirst(" f/", "").split(" f/")); <FIXE>
<FIXS> update(); <FIXE>
<FIXS> rows.remove(indices[i]); <FIXE>
<FIXS> try { sensorManager.unregisterListener(this); thread.join(); } catch (java.lang.Exception e) { e.printStackTrace(); } <FIXE>
<FIXS> uk.gov.ea.datareturns.distributedtransaction.impl.RemoteCacheDelegate.LOGGER.info(("Cleared cache group: " + cache)); break; <FIXE>
<FIXS> for (int i = index - (side); i <= (index + (side)); i++) { <FIXE>
<FIXS> positionCourante = new model.Position(y, x); <FIXE>
<FIXS> component = componentRepository.findByEuropeanArticleNumber(productData.getEan()).get(0); <FIXE>
<FIXS> for (int i = (this.glasses.length) - 1; i >= ((this.glasses.length) / 2); i--) { <FIXE>
<FIXS> return exportUtil.exportAsHtmlFromXsl(serializationService.serializeDatatypeLibrary(datatypeLibraryDocument, exportConfig).toXML(), gov.nist.healthcare.tools.hl7.v2.igamt.lite.service.impl.ExportServiceImpl.GLOBAL_STYLESHEET, exportParameters, datatypeLibraryDocument.getMetaData()); <FIXE>
<FIXS> int row = emptyTiles[randNum][0]; int column = emptyTiles[randNum][1]; <FIXE>
<FIXS> else { currentTree = getInstanceTree(tree3); java.lang.System.out.println("done updating current tree"); } <FIXE> <FIXS> <FIXE>
<FIXS> java.util.List<com.liferay.portal.model.Layout> layouts = com.liferay.portal.service.LayoutLocalServiceUtil.getLayouts(groupId, false, LayoutConstants.DEFAULT_PARENT_LAYOUT_ID, false, 0, 1); <FIXE>
<FIXS> for (int yRow = 1; yRow <= (length); ++yRow) { for (int xCol = 1; xCol <= (length); ++xCol) { <FIXE>
<FIXS> org.newdawn.slick.ApplicationGDXContainer container = new org.newdawn.slick.ApplicationGDXContainer(new bounceAnator.BounceAnator(), 480, 800, 480, 800); <FIXE>
<FIXS> com.wpi.cs509.teamA.util.PaintHelper.PaintHelperComposite.paintStartEndNode(g2, path, plt); <FIXE>
<FIXS> currentLimit = limit; <FIXE>
<FIXS> public static void main(java.lang.String[] args) { <FIXE>
<FIXS> setBounds(profile.getInt(this.getClass(), ((prefPrefix_) + (org.micromanager.internal.utils.MMFrame.WINDOW_X)), x), profile.getInt(this.getClass(), ((prefPrefix_) + (org.micromanager.internal.utils.MMFrame.WINDOW_Y)), y), getWidth(), getHeight()); <FIXE>
<FIXS> <FIXE> <FIXS> pstmt.close(); <FIXE>
<FIXS> <FIXE>
<FIXS> list.add(i, fte); <FIXE> <FIXS> <FIXE>
<FIXS> public void execute() { <FIXE>
<FIXS> twosnakes.Vector size = new twosnakes.Vector(50, 20); state.snake1 = new twosnakes.P1Snake(headPos, facing, size, size, size); <FIXE>
<FIXS> result.append(constants.GENERIC_SEMICOLON_SEPARATOR); <FIXE>
<FIXS> return oneFragment.newInstance("1", "2"); <FIXE>
<FIXS> if (choice == 1) { Objects.MapTypes.SafeMapCreator creator = new Objects.MapTypes.SafeMapCreator(); return creator.create(mapSize, numOfPlayers); }else { Objects.MapTypes.HazardousMapCreator creator2 = new Objects.MapTypes.HazardousMapCreator(); return creator2.create(mapSize, numOfPlayers); <FIXE> <FIXS> <FIXE>
<FIXS> for (int i = 1; i < (inputArray.length); i++) { remainingText += inputArray[i]; <FIXE>
<FIXS> <FIXE>
<FIXS> result = service.readMessages(userId); <FIXE>
<FIXS> java.lang.String executionId = null; org.safehaus.uuid.UUIDGenerator uuidGen = org.safehaus.uuid.UUIDGenerator.getInstance(); org.safehaus.uuid.UUID uuidObj = uuidGen.generateTimeBasedUUID(); executionId = uuidObj.toString(); executionId = executionId.replaceAll("-", ""); <FIXE>
<FIXS> if (((nomineeDetailsList) != null) && ((nomineeDetailsList.size()) > 0)) { for (int i = 0; i < (nomineeDetailsList.size()); i++) { object = webService.insertUpdatePersonalDetails(nomineeDetailsList.get(i), methodName); } <FIXE>
<FIXS> if (isDroppable(selectedTreePath, destinationPath)) { <FIXE>
<FIXS> private void addRecord(java.lang.String key, T newRecord) { org.kisst.pko4j.index.MultiIndex.logger.info("adding unique key {} ", key); org.kisst.item4j.ImmutableSequence<T> oldList = map.get(key); <FIXE> <FIXS> map.put(key, org.kisst.item4j.ImmutableSequence.of(getRecordClass(), newRecord)); <FIXE> <FIXS> map.put(key, newList); <FIXE>
<FIXS> if (view == null) return ; <FIXE>
<FIXS> excute(testcase.Object_Description, testcase.Operation_WaitForExists, "更多选项", "10000"); <FIXE> <FIXS> <FIXE>
<FIXS> uz.samtuit.samapp.helpers.ItineraryHelper.addNewItemFromItinerary(getFragmentManager(), day, indexToAssign); <FIXE>
<FIXS> if ((state) == (pixelitor.layers.ImageLayer.State.SHOW_ORIGINAL)) { return ; } <FIXE> <FIXS> if ((state) == (pixelitor.layers.ImageLayer.State.PREVIEW)) { return ; } <FIXE>
<FIXS> try { table.packAll(); } catch (java.lang.Exception e) { } <FIXE>
<FIXS> at.favre.tools.apksigner.SignToolTest.testAndCheck(cmd, originalFolder, outFolder, uApks); <FIXE>
<FIXS> this.messageSender = new org.hawkular.inventory.bus.MessageSender(ccf, configuration.getInventoryChangesTopicName()); <FIXE>
<FIXS> java.lang.System.arraycopy(this.array, this.start, result, 0, result.length); <FIXE>
<FIXS> java.util.Date nextRuntime = nextRunTimeCalculator.calculateNextRuntime(new java.util.ArrayList<model.Player>()); <FIXE>
<FIXS> longitudeCardinalDirectionSwitch.setChecked(((java.lang.Double.valueOf(longitude)) >= 0)); <FIXE>
<FIXS> if (attr == (R.styleable.ColorButton_jr_color)) { mColor = a.getColor(attr, 0); colorify(); break; <FIXE>
<FIXS> return new java.util.Date(((((itsValue) - ((atnf.atoms.time.DUTC.get(itsValue)) * 1000000L)) - 3506716800000000L) / 1000L)); <FIXE>
<FIXS> while (!(this.captureIpl.available())) { <FIXE> <FIXS> } captureIpl.read(); org.bytedeco.javacpp.opencv_core.IplImage img = captureIpl.getIplImage(); if (img != null) { updateCurrentImage(img); <FIXE>
<FIXS> <FIXE>
<FIXS> TournamentColumn.setCellValueFactory(new javafx.scene.control.cell.PropertyValueFactory<>("name")); DateColumn.setCellValueFactory(new javafx.scene.control.cell.PropertyValueFactory<>("date")); <FIXE>
<FIXS> <FIXE>
<FIXS> public synchronized void onRequest(java.lang.String ipAddress, java.sql.Timestamp time) { (requestTotal)++; <FIXE>
<FIXS> solverInput_beq.reshape(0, 1); <FIXE>
<FIXS> if ((getRemoteUser()) != null) { javax.servlet.http.HttpServletRequest request = com.opensymphony.webwork.ServletActionContext.getRequest(); javax.servlet.http.HttpSession session = request.getSession(); chatBoxMap = chatManager.getOpenChats(session); chatManager.setOnlineStatus(getRemoteUser(), ChatStatus.NO_CHANGE); } <FIXE>
<FIXS> <FIXE>
<FIXS> if (filename != null) { if (filename.endsWith(((java.io.File.separator) + "DB"))) connField.setText(filename.substring(0, ((filename.length()) - 3))); else connField.setText(filename); } <FIXE>
<FIXS> if (!(store.getBit((hash % (capacity))))) { return false; <FIXE> <FIXS> return true; <FIXE>
<FIXS> java.lang.Double value = setValue(dataSnapshot.getValue()); <FIXE>
<FIXS> session.execute((((((((((((((("CREATE TABLE IF NOT EXISTS " + (TableName)) + " (\"_id\" text PRIMARY KEY, name list<text>) WITH bloom_filter_fp_chance = 0.01 ") + " AND caching = \'{\"keys\":\"ALL\", \"rows_per_partition\":\"NONE\"}\'") + " AND comment = 'Auto-created by Elassandra' ") + " AND compaction = {'class': 'org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy'} ") + " AND compression = {'sstable_compression': 'org.apache.cassandra.io.compress.LZ4Compressor'} ") + " AND dclocal_read_repair_chance = 0.1 ") + " AND default_time_to_live = 0 ") + " AND gc_grace_seconds = 864000 ") + " AND max_index_interval = 2048 ") + " AND memtable_flush_period_in_ms = 0 ") + " AND min_index_interval = 128 ") + " AND read_repair_chance = 0.0 ") + " AND speculative_retry = '99.0PERCENTILE'; ")); <FIXE>
<FIXS> if (!(de.citec.sc.templates.TopicSpecificPageRankTemplate.isInitialized)) { <FIXE>
<FIXS> count = (count) + 1; <FIXE> <FIXS> count = (count) + 1; <FIXE> <FIXS> if ((count) == 5) { <FIXE>
<FIXS> if ((isDnssecEnabled(name)) && (name.subdomain(com.comcast.cdn.traffic_control.traffic_router.core.dns.ZoneManager.getTopLevelDomain()))) { <FIXE>
<FIXS> <FIXE>
<FIXS> originalGenerate(lickgen, improviseStartSlot, improviseEndSlot); <FIXE>
<FIXS> if ((idList != null) && (!(idList.isEmpty()))) { com.JJ.model.InvoiceDbObjectExample invoiceDbObjectExample = new com.JJ.model.InvoiceDbObjectExample(); invoiceDbObjectExample.createCriteria().andDeleteIndEqualTo(GeneralUtils.NOT_DELETED).andInvoiceIdIn(idList); invoiceDbObjectExample.setOrderByClause("invoice_date desc"); return convertToInvoiceVOList(invoiceDbObjectMapper.selectByExample(invoiceDbObjectExample)); } return new java.util.ArrayList<com.JJ.controller.invoicemanagement.vo.InvoiceVO>(); <FIXE>
<FIXS> if ((albums != null) && ((albums.size()) > 0)) { <FIXE>
<FIXS> displayNotification(false); <FIXE>
<FIXS> properties.stringPropertyNames().forEach(( key) -> { <FIXE>
<FIXS> <FIXE>
<FIXS> int sign = e.getWheelRotation(); if (sign < 0) { this.cam_zoom_increase(); return ; } if (sign > 0) { this.cam_zoom_decrease(); return ; <FIXE>
<FIXS> <FIXE>
<FIXS> return xmlVariable.isDisabled(); <FIXE> <FIXS> }else { return true; <FIXE> <FIXS> <FIXE>
<FIXS> if ((android.support.v4.content.ContextCompat.checkSelfPermission(getActivity(), android.Manifest.permission.ACCESS_FINE_LOCATION)) == (android.content.pm.PackageManager.PERMISSION_GRANTED)) { <FIXE>
<FIXS> <FIXE>
<FIXS> tilemaps.update(delta); <FIXE>
<FIXS> com.packt.spi.BookServiceProvider provider = null; <FIXE>
<FIXS> java.util.ArrayList<org.fossasia.phimpme.leafpic.data.Album> list; org.fossasia.phimpme.leafpic.data.providers.StorageProvider p = new org.fossasia.phimpme.leafpic.data.providers.StorageProvider(context); list = p.getAlbums(context, hidden); <FIXE>
<FIXS> playlist.append(i); playlist.append("/ "); playlist.append(getConfiguration().getProperty(("playlist.entry.name." + i))); playlist.append("\n"); <FIXE>
<FIXS> java.lang.System.out.println(nerDoc.text); <FIXE> <FIXS> ner.record(nerDoc); doc = nerDoc; <FIXE>
<FIXS> <FIXE>
<FIXS> ent.setY(((ent.getY()) - ((ent.getHeight()) / 2))); <FIXE>
<FIXS> <FIXE>
<FIXS> remove(key); <FIXE>
<FIXS> addRemoveType(); <FIXE>
<FIXS> return (((areaLeftX < (pos.x)) && ((pos.x) < areaRightX)) && (areaUpY < (pos.y))) && ((pos.y) < areaDownY); <FIXE>
<FIXS> if (poke.isEmpty()) { throw new PokedexException(Config.UNCAUGHT_POKEMON); }else { <FIXE> <FIXS> <FIXE> <FIXS> throw new PokedexException(Config.UNSEEN_POKEMON); <FIXE>
<FIXS> return ((((double) (timeIndex)) / (getProp(de.htw.berlin.polysun4diac.plugins.BatteryPreSimulatorSocket.CALL_INTERVAL_KEY).getInt())) - 1) == ((java.lang.Math.ceil((((double) (timeIndex)) / (getProp(de.htw.berlin.polysun4diac.plugins.BatteryPreSimulatorSocket.CALL_INTERVAL_KEY).getInt())))) - 1); <FIXE>
<FIXS> sut.dropTable(metadata); <FIXE>
<FIXS> set.setWeight(((s.length()) > 0 ? java.lang.Float.parseFloat(s.toString()) : 0)); <FIXE>
<FIXS> public static java.lang.String fetchWebpageData(java.lang.String requestUrl) { java.net.URL url = com.example.android.hashseparator.QueryUtils.createUrl(requestUrl); <FIXE> <FIXS> response = com.example.android.hashseparator.QueryUtils.makeHttpRequest(url); <FIXE>
<FIXS> <FIXE> <FIXS> mCardNumberView.setText(getFormattedCardNumber(addSpaceToCardNumber())); <FIXE>
<FIXS> if (file != null) { tbxMedienBrowser.setUserData(file); tbxMedienBrowser.setText(file.getAbsolutePath()); } <FIXE>
<FIXS> <FIXE>
<FIXS> if (!(((((top) == null) && ((bottom) == null)) && ((right) == null)) && ((left) == null))) { <FIXE>
<FIXS> if ((android.support.v4.content.ContextCompat.checkSelfPermission(getApplicationContext(), android.Manifest.permission.ACCESS_FINE_LOCATION)) == (android.content.pm.PackageManager.PERMISSION_GRANTED)) { <FIXE>
<FIXS> copyAction(db, a.getId(), newActionId, sortNr, com.ha81dn.webausleser.backend.DatabaseHandler.getUniqueCopiedActionName(activity, db, input.getText().toString().trim(), com.ha81dn.webausleser.MainActivity.sourceId), idShow, false); <FIXE>
<FIXS> <FIXE>
<FIXS> org.junit.jupiter.api.Assertions.assertEquals((((((((("HTTP/1.1 200 \n" + "Date: ") + (this.date)) + "\n") + "X-XSS-Protection: 1; mode=block\n") + "X-Frame-Options: DENY\n") + "Content-Type: text/plain\n") + "\n") + ""), headers); <FIXE>
<FIXS> <FIXE>
<FIXS> if ((votes) < (((Translator) (t)).votes)) <FIXE> <FIXS> if ((votes) > (((Translator) (t)).votes)) <FIXE>
<FIXS> <FIXE>
<FIXS> if (!(com.nx.util.jme3.base.SpatialUtil.hasControl(originalSpatial, skeletonControl))) { <FIXE>
<FIXS> java.util.ArrayList<com.watabou.pixeldungeon.effects.SystemFloatingText> stack = com.watabou.pixeldungeon.effects.SystemFloatingText.stacks.get(key); if (stack != null) { <FIXE> <FIXS> <FIXE>
<FIXS> queueArray[((front)++)] = null; <FIXE>
<FIXS> position.x = 1000; <FIXE>
<FIXS> final java.net.URI uri = httpClient.pathToUri("billogram", billogramId, "command", "credit"); <FIXE>
<FIXS> <FIXE>
<FIXS> this.consumerMap.put(consumer.getName(), consumer); <FIXE>
<FIXS> add(modulus); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> if (position != 0) { edu.mit.mitmobile2.shuttles.model.MITShuttleStopWrapper stop = adapter.getItem((position - 1)); android.content.Intent intent = new android.content.Intent(getActivity(), edu.mit.mitmobile2.shuttles.activities.ShuttleStopActivity.class); intent.putExtra(Constants.ROUTE_ID_KEY, routeId); intent.putExtra(Constants.STOP_ID_KEY, stop.getId()); startActivity(intent); } <FIXE>
<FIXS> <FIXE>
<FIXS> private void addText(java.awt.Graphics2D g2d, java.lang.String text, int x, int y, java.awt.Color color, int size) { g2d.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, size)); <FIXE>
<FIXS> <FIXE> <FIXS> java.lang.String removeCommaEscapes = originalDed.replaceAll("\\\\\"", "\""); <FIXE>
<FIXS> record = org.embulk.input.kafka.data.DataConverter.convertFromLtsv(message, enclosedChar); <FIXE>
<FIXS> break; <FIXE>
<FIXS> public dto.User getUser(@module.PathParam(value = config.Routes.MODULE_USER_GETUSER_USERID) <FIXE> <FIXS> jdbclib.IConnector db; <FIXE>
<FIXS> resizedImage = org.imgscalr.Scalr.resize(originalImage, Scalr.Method.SPEED, Scalr.Mode.AUTOMATIC, resizingConfig.getWidth(), resizingConfig.getHeight()); <FIXE> <FIXS> resizedImage = org.imgscalr.Scalr.resize(originalImage, Scalr.Method.SPEED, Scalr.Mode.FIT_EXACT, resizingConfig.getWidth(), resizingConfig.getHeight()); <FIXE>
<FIXS> } <FIXE>
<FIXS> isToSum = settings.getBoolean("isToSum", false); <FIXE>
<FIXS> mFrame = new android.widget.FrameLayout(getContext()); <FIXE>
<FIXS> super.onSaveInstanceState(outState); <FIXE>
<FIXS> if ((getView()) != null) { android.support.design.widget.Snackbar.make(getView(), R.string.magic_link_unavailable_error_message, Snackbar.LENGTH_SHORT); } <FIXE>
<FIXS> scanner.nextLine(); <FIXE>
<FIXS> net.quetzi.whitelister.Whitelister.whitelist = new java.util.HashMap<java.lang.String, java.util.Set<java.lang.String>>(); <FIXE>
<FIXS> return java.lang.Long.compare(x1.brokerSession.getTimestamp(), x2.brokerSession.getTimestamp()); <FIXE>
<FIXS> org.openqa.selenium.remote.RemoteWebDriver driver = new org.openqa.selenium.remote.RemoteWebDriver(com.epam.jdi.uitests.web.selenium.driver.SauceLabRunner.getSauceUrl(), caps); <FIXE>
<FIXS> (N)--; <FIXE> <FIXS> pq = ((Key[]) (utils.Utils.resizeArray(pq, ((N) + 1)))); <FIXE>
<FIXS> db.update(com.abezukor.abezukor.autosms.DBHandler.TABLE_AUTOSMSTABLE, values, ("_id=" + id), null); <FIXE>
<FIXS> if (position.getAttributes().containsKey(Event.KEY_ALARM)) { <FIXE>
<FIXS> for (E e = pq.poll(); !(pq.isEmpty()); e = pq.poll()) { <FIXE> <FIXS> if (checkForCycle(set, e.getSource(), e.getDest())) { <FIXE>
<FIXS> Promotion = new chessgame.Queen("WhitePromotedPawn"); Promotion.setIcon(WhiteQueenImg); <FIXE> <FIXS> Promotion = new chessgame.Queen("BlackPromotedPawn"); Promotion.setIcon(BlackQueenImg); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> builder.setCancelable(true); <FIXE>
<FIXS> return 1; <FIXE> <FIXS> return 2; <FIXE> <FIXS> return 2; else return 1; default : if (findUpper) <FIXE> <FIXS> <FIXE>
<FIXS> final java.lang.String imageFileName = ((com.bionic.kvt.serviceapp.GlobalConstants.LMRA_PHOTO_FILE_NAME) + orderNumber) + "_"; <FIXE>
<FIXS> socket.setKeepAlive(false); <FIXE>
<FIXS> <FIXE>
<FIXS> if (data != null) { android.graphics.Bitmap image = ((android.graphics.Bitmap) (data.getExtras().get("data"))); android.widget.ImageView imageview = ((android.widget.ImageView) (findViewById(R.id.imglogo))); imageview.setImageBitmap(image); new com.example.audi.uaspenir.Main.PostTask().execute(imageToString(image), "test"); buatsnackbar("Uploading image . . ."); } <FIXE>
<FIXS> mGridManager.update(superNode); <FIXE>
<FIXS> <FIXE>
<FIXS> parent.add(info).right().fillX().expandX().row(); <FIXE>
<FIXS> public static java.lang.String escapeAndConvertToSQLWildcards(java.lang.String value, boolean alwaysWildcard) { <FIXE>
<FIXS> int moveIndex = (index > movesAmount) ? index / movesAmount : index; <FIXE>
<FIXS> if (((slide) % 4) == 1) { <FIXE> <FIXS> if (((slide) % 4) == 2) { <FIXE> <FIXS> if (((slide) % 4) == 3) { <FIXE> <FIXS> if (((slide) % 4) == 4) { <FIXE>
<FIXS> frame.pack(); <FIXE> <FIXS> <FIXE>
<FIXS> org.hibernate.Criteria criteria = getDefaultCriteria("procedure"); <FIXE>
<FIXS> return url + (url.contains("?") ? (("&" + field) + "=") + value : (("?" + field) + "=") + value); <FIXE>
<FIXS> mSearcherDone = true; de.htwsaar.chessbot.engine.search.SearchWorker.infoBestmove(mSearcher.getBestMove(), mSearcher.getPonderMove()); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> synchronized(_numberOnDisplay) { if (_numbers.isEmpty()) { _numberOnDisplay = -1; }else { java.lang.System.out.print(("Display:" + (_numbers.getFirst()))); java.lang.System.out.println(); _numberOnDisplay = _numbers.poll(); } <FIXE>
<FIXS> if ((key == null) || ((apcs.Window.keyMap) == null)) <FIXE>
<FIXS> if ((sourceVertex < (graphStructure.size())) && (sinkVertex < (graphStructure.size()))) { <FIXE>
<FIXS> result.port = ((port) != (com.squareup.okhttp.HttpUrl.defaultPort(scheme))) ? port : -1; <FIXE>
<FIXS> org.wso2.carbon.messaging.CarbonMessage client1Message = org.ballerinalang.testutils.MessageUtils.generateWebSocketOnOpenMessage(session1, uri); org.wso2.carbon.messaging.CarbonMessage client2Message = org.ballerinalang.testutils.MessageUtils.generateWebSocketOnOpenMessage(session2, uri); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> consumption.setValue(value); setChanged(true); <FIXE>
<FIXS> if ((extraOptions) != null) { <FIXE>
<FIXS> <FIXE>
<FIXS> java.io.BufferedOutputStream fileWriter = new java.io.BufferedOutputStream(new java.io.FileOutputStream(tasknote.storage.FileManipulation.textFile)); <FIXE>
<FIXS> int mes = (java.lang.Integer.parseInt(dataTermino.substring(3, 5))) - 1; <FIXE>
<FIXS> private void writeImports(java.io.Writer writer, java.lang.String className) throws java.io.IOException { <FIXE>
<FIXS> if (button != null) { perspectiveSwitcherPanel.removeComponent(button); button2ContextMenu.remove(button); } <FIXE>
<FIXS> public boolean updateStorageLocation(android.content.Context ctx, java.lang.String mount) { <FIXE> <FIXS> return updateStorageLocation(ctx); <FIXE> <FIXS> return true; <FIXE> <FIXS> return true; <FIXE>
<FIXS> mIsResumed = true; <FIXE> <FIXS> <FIXE>
<FIXS> private boolean canDelete(java.util.List<org.eclipse.core.resources.IResource> resources) { <FIXE> <FIXS> if (resources.isEmpty()) { <FIXE> <FIXS> for (int i = 0; i < (resources.size()); i++) { org.eclipse.core.resources.IResource resource = resources.get(i); <FIXE>
<FIXS> java.lang.System.out.println(i.getDirections().get(newMove)); <FIXE>
<FIXS> xaurora.ui.LoginUI.main(null); <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> if (item instanceof nu.placebo.whatsup.model.ExtendedOverlayItem) { android.content.Intent startAnnotation = new android.content.Intent(activity, nu.placebo.whatsup.activity.AnnotationActivity.class); android.os.Bundle bundle = new android.os.Bundle(); bundle.putInt("nid", ((nu.placebo.whatsup.model.ExtendedOverlayItem) (item)).getId()); startAnnotation.putExtras(bundle); activity.startActivity(startAnnotation); } <FIXE>
<FIXS> return queryDocuments(documentType, terms, null, pageSize, expandContent, broadCast); <FIXE>
<FIXS> <FIXE> <FIXS> case LAYOUT_SEARCH : <FIXE>
<FIXS> java.lang.String path = (((((com.tana.utilities.VariableUtility.getCurrentDir()) + (com.tana.utilities.VariableUtility.IMG_PATH_PRODUCTS)) + productId) + "_") + (productName.trim())) + "/"; <FIXE>
<FIXS> <FIXE>
<FIXS> }else if (!(circlesViewModel.countries.isEmpty())) { android.widget.Toast.makeText(this, "No refugee flows found", Toast.LENGTH_LONG).show(); } <FIXE>
<FIXS> if (top.has(Trait.strapped)) { <FIXE>
<FIXS> when(metaStoreFactory.loadElement(testName)).thenReturn(namedCluster); assertTrue((namedCluster == (namedClusterManager.read(testName, metaStore)))); <FIXE>
<FIXS> super.visitMethodInsn(opcode, this.owner, name, this.desc); <FIXE>
<FIXS> <FIXE>
<FIXS> private boolean better(java.util.List<de.htw.fb4.imi.master.ws15_16.foellmer_feldmann.ip.Vector2D> newPolygon, java.util.List<de.htw.fb4.imi.master.ws15_16.foellmer_feldmann.ip.Vector2D> bestPolygon) { <FIXE>
<FIXS> java.util.Iterator i = deps.iterator(); while ((i.hasNext()) && (!containsItests)) { org.apache.maven.model.Dependency d = ((org.apache.maven.model.Dependency) (i.next())); <FIXE>
<FIXS> default : break; <FIXE>
<FIXS> usersWebTarget = sessionStorage.getRootTarget().path("/rest_v2"); <FIXE>
<FIXS> duringDetail.startAnimation(fadeIn); <FIXE> <FIXS> duringDetail.startAnimation(fadeOut); <FIXE>
<FIXS> case R.id.btn_level_medium : <FIXE> <FIXS> case R.id.btn_level_difficult : <FIXE>
<FIXS> int localMinutesSinceLastAction = getMinutesSinceLastAction(); if (localMinutesSinceLastAction > (minutesSinceLastAction)) { minutesSinceLastAction = localMinutesSinceLastAction; } if ((minutesSinceLastAction) >= (settings.getIdleTime())) { stateMachine.reset(); <FIXE>
<FIXS> <FIXE>
<FIXS> ret += "0"; <FIXE> <FIXS> ret += "0"; <FIXE>
<FIXS> if ((com.vanhal.progressiveautomation.ref.ToolHelper.tinkersType(slots[slot].getItem())) >= 0) { <FIXE>
<FIXS> java.lang.String mm = java.lang.Integer.toString(m); <FIXE>
<FIXS> for (short level = 1; level < 101; level++) for (short level = 1; level < 101; level++) { for (Controlleur.Question q : Controlleur.JavaOverflow.database.getQuestions()) { <FIXE> <FIXS> <FIXE>
<FIXS> java.lang.String nmsVersion = serverPackageName.substring(((serverPackageName.lastIndexOf(".")) + 1)); <FIXE>
<FIXS> java.lang.StringBuilder buf = new java.lang.StringBuilder(); <FIXE>
<FIXS> double[] l = new double[]{ 1 , 2 , 3 , 4 }; Matrix m = new Matrix(2, 2, l); java.lang.System.out.println(m.inverse().multiply(m)); <FIXE>
<FIXS> if (station1.equals(station2)) continue; <FIXE>
<FIXS> protected void getFillersFromFile(org.w3c.dom.Document doc, edu.illinois.cs.cogcomp.nlp.corpusreaders.ereReader.View nerView) throws edu.illinois.cs.cogcomp.nlp.corpusreaders.aceReader.XMLException { <FIXE>
<FIXS> return ((o1.getExamSum()) + (o1.getHomeworkSum())) > ((o2.getExamSum()) + (o2.getHomeworkSum())) ? -1 : ((o1.getExamSum()) + (o1.getHomeworkSum())) == ((o2.getExamSum()) + (o2.getHomeworkSum())) ? 0 : 1; <FIXE>
<FIXS> generatedCode = new sg.com.fbs.services.common.codegen.mgr.CodeGeneratorManagerBD().getGeneratedCode(tbEnum.getTableName(), name); <FIXE>
<FIXS> <FIXE>
<FIXS> next(fr.gaulupeau.apps.Poche.ui.preferences.ConnectionWizardActivity.PAGE_WELCOME, null, true); <FIXE>
<FIXS> deleteRows(); test02_addRowDraftPass(); test01_addRowPass(); test02_addRowDraftPass(); com.jayway.restassured.module.mockmvc.RestAssuredMockMvc.given().header(getHeader()).contentType("application/json").when().get("/api/restricted/draft").then().statusCode(200).body("size()", org.hamcrest.core.IsEqual.equalTo(2)); <FIXE>
<FIXS> result = (((location.length()) > 0) && (sFile.startsWith(location.toString()))) || (sFile.startsWith(location.getCanonicalPath().toString())); <FIXE>
<FIXS> append(buffer, 0, readlen); <FIXE>
<FIXS> java.lang.Character loadedCharacter = new java.lang.Character(levels[0], levels[1], levels[2], levels[3], levels[3], levels[5], levels[6], levels[7], levels[8], levels[9]); <FIXE>
<FIXS> <FIXE>
<FIXS> getActivity().startActivityForResult(i, Util.REQUESTCODE_COMPOSE); <FIXE>
<FIXS> double total = (io.zipcoder.aaronlong.wutangfinancial.Money.downHandleDoubles(quantity)) / (io.zipcoder.aaronlong.wutangfinancial.Money.downHandleDoubles(exchange)); <FIXE> <FIXS> double total = (io.zipcoder.aaronlong.wutangfinancial.Money.downHandleDoubles(quantity)) * (io.zipcoder.aaronlong.wutangfinancial.Money.downHandleDoubles(exchange)); <FIXE>
<FIXS> java.util.ArrayList<edu.buffalo.cse.sneps3.gui.business.Slot> s = new java.util.ArrayList<edu.buffalo.cse.sneps3.gui.business.Slot>(edu.buffalo.cse.sneps3.gui.business.Slot.reinitializeSlots(addedslots, clear)); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> while (true) { loc = ((ETPSYSTEM.ChannelValue) (read.channel.in().read())); java.lang.System.out.println("processO - sum1: Received loc through read"); ETPSYSTEM.Sum1O.repl1O rep = new ETPSYSTEM.Sum1O.repl1O(this.spotcheck, this.topa, this.read, this.loc); org.jcsp.lang.ProcessManager manager = new org.jcsp.lang.ProcessManager(rep); manager.start(); } <FIXE>
<FIXS> return t.equals(matching); <FIXE>
<FIXS> public java.util.List<mg.angular.db.Contact> findAll() throws java.lang.ClassNotFoundException, java.sql.SQLException, mg.util.db.persist.DBMappingException, mg.util.db.persist.DBValidityException { <FIXE> <FIXS> java.sql.Connection connection = dbConfig.getConnection(); mg.util.db.persist.DB db = new mg.util.db.persist.DB(connection); mg.angular.db.Contact contact = new mg.angular.db.Contact(); allContacts = db.findAllBy(contact); <FIXE>
<FIXS> android.util.Log.i(self.hideki.popularmovies.DetailFragment.TAG, e.getMessage()); <FIXE>
<FIXS> ostr.setCenterX(((ostr.getCenterX()) * (Utils.Global.ratioW))); ostr.setCenterY(((ostr.getCenterY()) * (Utils.Global.ratioH))); <FIXE>
<FIXS> new PwdManager.Registration(user, password); <FIXE>
<FIXS> displacementX = -(displacement); <FIXE> <FIXS> displacementX = displacement; <FIXE>
<FIXS> if (list == null) return dayAppointments; <FIXE>
<FIXS> <FIXE>
<FIXS> throw new org.molgenis.security.user.MolgenisUserException(java.lang.String.format("Unknown user [%s]", username)); <FIXE>
<FIXS> setCurrentDuration(devFile.durationMillis()); setCurrentPosition(devFile.currentPosition()); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> loadBalancerService = mock(org.openstack.atlas.service.domain.services.LoadBalancerService.class); reverseProxyLoadBalancerService = mock(org.openstack.atlas.api.integration.ReverseProxyLoadBalancerService.class); asyncService = mock(org.openstack.atlas.api.integration.AsyncService.class); <FIXE>
<FIXS> public void onReceive(@android.support.annotation.NonNull android.content.Context context, @android.support.annotation.NonNull android.content.Intent intent) { <FIXE> <FIXS> int[] appWidgetIds = appWidgetManager.getAppWidgetIds(new android.content.ComponentName(context, getClass())); <FIXE>
<FIXS> if (getBounds().isEmpty()) { <FIXE>
<FIXS> ru.mail.park.chat.models.Message message = new ru.mail.park.chat.models.Message(data, getContext()); <FIXE>
<FIXS> return create(new float[]{ value }, new int[]{ 1 , 1 }, new int[]{ 1 , 1 }, 0); <FIXE>
<FIXS> javax.swing.JOptionPane.showMessageDialog(javax.swing.JOptionPane.getFrameForComponent(parent), panel, "Players", javax.swing.JOptionPane.PLAIN_MESSAGE); <FIXE>
<FIXS> if (disposed) return ; <FIXE> <FIXS> <FIXE>
<FIXS> if (((args.length) > 0) && (object instanceof org.json.simple.JSONObject)) { <FIXE>
<FIXS> temp.setPlace(block.getPlace()[0], block.getPlace()[1]); <FIXE>
<FIXS> public void initProgram() { <FIXE>
<FIXS> if ((isProgress) || ((mSuccessAnimationState) >= (com.miruker.fabprogress.Fab.SUCCESS_ANIMATION.ON))) { <FIXE>
<FIXS> if (((objExt != null) && ((objExt.getType().getDataType()) == (com.cdoframework.cdolib.base.DataType.FILE_TYPE))) && (!(key.contains(".")))) { <FIXE>
<FIXS> @java.lang.SafeVarargs <FIXE> <FIXS> for (T val : values) { <FIXE> <FIXS> } <FIXE>
<FIXS> <FIXE>
<FIXS> if (tree.getId().equals(field.getId())) { <FIXE>
<FIXS> private static java.lang.String createDNPath(org.apache.directory.api.ldap.model.name.Dn dn) { <FIXE>
<FIXS> return java.util.Objects.equals(this.documentNumber, other.documentNumber); <FIXE>
<FIXS> java.util.List<java.lang.Integer> result = CollectionUtils.map(numbers, mapper); assertEquals(numbers, result); <FIXE>
<FIXS> if ((outputPortDetails.getSinkPowerStatus()) > 0) { <FIXE>
<FIXS> super.stop(); <FIXE>
<FIXS> builder.addParam(getAPI(hsyndicate.rest.client.SyndicateUGHttpClient.WRITE)); <FIXE>
<FIXS> if ((service) != null) { cosbas.appointment.Appointment event = appointmentRepository.findById(id); appointmentRepository.delete(event); service.events().delete("primary", event.getEventID()).setSendNotifications(true).execute(); return true; } <FIXE>
<FIXS> JyNI.PyObject er = pss.modules.__finditem__(nm); if (er != null) <FIXE> <FIXS> pss.modules.__setitem__(nm, er); <FIXE>
<FIXS> assertEquals(PageLayout.TWO_COLUMN_RIGHT, victim.getUnderlyingPDDocument().getDocumentCatalog().getPageLayout()); assertEquals(PageMode.USE_OUTLINES, victim.getUnderlyingPDDocument().getDocumentCatalog().getPageMode()); <FIXE>
<FIXS> public static void put(java.lang.String url, java.lang.String requestBodyString, com.chinamobile.iot.onenet.OneNetApiCallback callback) { <FIXE>
<FIXS> <FIXE>
<FIXS> int layout = 0; <FIXE> <FIXS> <FIXE>
<FIXS> hashCode = (prime * hashCode) + ((data) == null ? 0 : data.hashCode()); <FIXE> <FIXS> <FIXE>
<FIXS> public static FoodItem getFoodItemFromByteArray(char[] tagCode, byte[] bytes) { <FIXE>
<FIXS> org.apache.curator.framework.api.CuratorEvent event = new org.apache.curator.framework.imps.CuratorEventImpl(client, org.apache.curator.framework.api.CuratorEventType.REMOVE_WATCHES, rc, path, null, ctx, null, null, null, null, null, null); <FIXE>
<FIXS> if (clientTrue != null) { <FIXE> <FIXS> return clientTrue; }else { return client; <FIXE> <FIXS> <FIXE>
<FIXS> if (!(node.rect.intersects(rect))) <FIXE>
<FIXS> textView = ((android.widget.TextView) (findViewById(R.id.textView))); editText = ((android.widget.EditText) (findViewById(R.id.editText))); <FIXE>
<FIXS> this.current_map = map; <FIXE> <FIXS> <FIXE>
<FIXS> boardTiles.get(row).get(col).setExists(start[row][col]); <FIXE>
<FIXS> if (((this.base) == null) || (!(this.base.setArrayKey(key, array)))) { <FIXE>
<FIXS> <FIXE>
<FIXS> private boolean isMyIDP(@javax.annotation.Nonnull org.apache.jackrabbit.oak.spi.security.authentication.external.SyncedIdentity id) { <FIXE> <FIXS> return ((idpName == null) || (idpName.isEmpty())) || (idpName.equals(idp.getName())); <FIXE>
<FIXS> list.add(convertStringToWhyType(context, why)); <FIXE>
<FIXS> long res = edu.ucsd.sccn.LSL.inst.lsl_pull_chunk_c(obj, data_buffer, timestamp_buffer, data_buffer.length, timestamp_buffer.length, timeout, ec); <FIXE>
<FIXS> parent[i] = new lightpos.light(generatorRandom.nextInt(((roomWidth) + 1)), generatorRandom.nextInt(((roomLength) + 1)), generatorRandom.nextInt(5), true); <FIXE>
<FIXS> if ((bids[i]) > 0) { <FIXE> <FIXS> bids[i] = 0; } <FIXE>
<FIXS> if (((state) != (AbilityState.INITIALIZING)) && (initializeAnimation.isDone())) { <FIXE>
<FIXS> if ((startState) == null) { throw new org.mindroid.impl.statemachine.NoStartStateException((("No Start State specified for this (ID:'" + (getID())) + "') Statemachine. Use setStartState(..) to specify a State to begin with!")); }else { <FIXE>
<FIXS> setState(hu.mta.sztaki.lpds.cloud.simulator.iaas.PhysicalMachine.State.SWITCHINGON); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> getSupportFragmentManager().beginTransaction().replace(R.id.outputFrame, resultFragment).commit(); <FIXE>
<FIXS> public void close() { <FIXE>
<FIXS> if (((this.moveCounter) >= 10) && (this.notEarnBabyStep())) { <FIXE>
<FIXS> return textContent.toString(); <FIXE>
<FIXS> java.util.Date lastMiss = misses.get(((misses.size()) - 1)); <FIXE>
<FIXS> getSupportLoaderManager().initLoader(com.amycui.medsminder.ui.MainActivity.PRESCRIPTION_LOADER, null, this); <FIXE>
<FIXS> int index = getNextOperatorToCalculate(list); <FIXE> <FIXS> list = operator.calculate(index, list); return calculate(list); <FIXE>
<FIXS> progressDialog = new com.afollestad.materialdialogs.MaterialDialog.Builder(this).title(R.string.hacking_progress).content(R.string.changing_contacts).progress(false, 100, true).cancelable(false).build(); <FIXE>
<FIXS> public void run(final io.dropwizard.setup.Bootstrap<?> bootstrap, final net.sourceforge.argparse4j.inf.Namespace namespace) throws java.lang.Exception { <FIXE>
<FIXS> if ((no > (this.availability)) && (no > 0)) { <FIXE>
<FIXS> batch.draw(sprite, x, (((net.awhipple.zombiebird.ZBGame.SCREEN_H) - y) - h), w, h); <FIXE>
<FIXS> this.setup(); <FIXE> <FIXS> <FIXE>
<FIXS> if (((selectedPath) != null) && (mObjects.contains(selectedPath))) <FIXE>
<FIXS> <FIXE> <FIXS> connectionRef.set(connection); open.set(true); <FIXE>
<FIXS> java.lang.String[] splitString = product.getProductId().split("/"); <FIXE> <FIXS> if (largest <= splitProductId) { <FIXE>
<FIXS> public void addLikeOnClickHandler(android.view.View v) { <FIXE>
<FIXS> if ((db) == null) { db = getWritableDatabase(); } <FIXE> <FIXS> <FIXE>
<FIXS> boolean isDiff = isAI ^ (this.isAI); <FIXE> <FIXS> if (isDiff && (this.gameInProgress())) { <FIXE> <FIXS> } <FIXE>
<FIXS> <FIXE> <FIXS> for (int index = 0; (index + (seqSize)) < qLen; index += window) { <FIXE> <FIXS> } <FIXE>
<FIXS> return java.lang.Math.sqrt(result); <FIXE>
<FIXS> for (org.jasr.currentcy.domain.Sample sample1 : samples) { <FIXE> <FIXS> for (org.jasr.currentcy.domain.Sample sample2 : snapshots) { <FIXE> <FIXS> if (!result) { <FIXE> <FIXS> } <FIXE>
<FIXS> if ((plugin.configFile.getBoolean("mobpkonly")) && ((killer == null) || (!(killer.hasPermission("playerheads.canbeheadmob"))))) { <FIXE>
<FIXS> public java.util.Iterator<Item> iterator() { java.lang.Object[] itarray = new java.lang.Object[size]; <FIXE> <FIXS> int i = 0; <FIXE> <FIXS> itarray[(i++)] = throwaway.dequeue(); <FIXE> <FIXS> return new RandomizedQueueIterator(itarray); <FIXE>
<FIXS> executorService.execute(() -> { org.neo4j.graphdb.Result execute = db.execute(query); try { execute.resultAsString(); } catch (java.lang.Exception e) { e.printStackTrace(); hasFailed.set(true); <FIXE>
<FIXS> org.apache.ofbiz.base.util.collections.FlexibleServletAccessor.AttributeAccessor<T> aa = new org.apache.ofbiz.base.util.collections.FlexibleServletAccessor.AttributeAccessor(name, expandContext, this.attributeName, this.fma, this.needsExpand); <FIXE>
<FIXS> send(new StateRequest(transactionId, this.id, i.next(), null)); <FIXE>
<FIXS> settings.Settings.beatLevel(level, time.getText()); <FIXE>
<FIXS> private final void drawGrid(android.graphics.Canvas canvas, float offset, int min) { <FIXE> <FIXS> float itimeso = i * offset; <FIXE> <FIXS> canvas.drawLine((min - 1), 0, (min - 1), min, com.gmail.wazappdotgithub.ships.model.views.BoardView.foregroundPaint); <FIXE>
<FIXS> throw new java.io.IOException(e); <FIXE>
<FIXS> if (e == null) continue; <FIXE>
<FIXS> this.te.setInventorySlotContents((i + 1), inv.getStackInSlot(i)); <FIXE> <FIXS> if ((this.craftMatrix) != null) this.craftResult.setInventorySlotContents(0, net.minecraft.item.crafting.CraftingManager.getInstance().findMatchingRecipe(this.craftMatrix, this.te.getWorldObj())); <FIXE>
<FIXS> int pointsToAdd = ((int) (((10 * (Task.POINT_RANGE[((this.importance) - 1)])) * (Task.POINT_RANGE[((this.difficulty) - 1)])) * (calculateEstimatedTimeMultiplier(this.estimated_time)))); <FIXE>
<FIXS> break; <FIXE> <FIXS> break; <FIXE>
<FIXS> sendResponse(org.nesty.core.httpserver.rest.response.HttpResponseBuilder.create(httpContext, HttpResponseStatus.NOT_FOUND)); <FIXE>
<FIXS> <FIXE>
<FIXS> restoreUserToSandbox(mSandbox, mLocalUserCredentials[0], mLocalUserCredentials[1]); <FIXE>
<FIXS> if ((getSize()) > 0) { return isComplete() ? 100 : ((int) (((bytesReceived) * 100) / (getSize()))); <FIXE>
<FIXS> <FIXE>
<FIXS> if (source.equals(fromValue)) { <FIXE> <FIXS> if (source.equals(toValue)) { <FIXE>
<FIXS> top = ui; <FIXE>
<FIXS> i++; <FIXE>
<FIXS> private int charCode(char c) { <FIXE>
<FIXS> private static void initializeRoom(double leftDoorWidth, boolean hasObstacle) { <FIXE> <FIXS> swarms.SwarmSim.buildBasic(leftDoorWidth, hasObstacle); <FIXE>
<FIXS> if ((convertView == null) || (!(convertView instanceof review.ReviewCell))) { <FIXE> <FIXS> view = ((review.ReviewCell) (convertView)); <FIXE>
<FIXS> new lu.schoolido.sukutomo.sukutomo.Card.LoadImage(view, false).execute(card_idolized_image, card_image); <FIXE> <FIXS> new lu.schoolido.sukutomo.sukutomo.Card.LoadImage(view, false).execute(card_image, card_idolized_image); <FIXE>
<FIXS> if (type != null) { int innerClassIndex = type.indexOf('$'); if (innerClassIndex > 0) { type = type.substring(0, innerClassIndex); } return (type.replace('.', '/')) + ".java"; }else { return null; <FIXE> <FIXS> <FIXE>
<FIXS> public javafx.scene.shape.Shape calcBoundingBox(int size) { <FIXE> <FIXS> circleBBox.setOpacity(0); <FIXE>
<FIXS> edu.brandeis.cs.nlp.mae.io.AnnotationLoader.catchSAXParseError(e); <FIXE>
<FIXS> if ((app.has(Feature.NEW_TOOLBAR)) || (!(getAlgebraDockPanel().isStyleBarPanelShown()))) { <FIXE>
<FIXS> assertTrue(teilnehmerenlisteService.teilnehmerHinzufuegen("Testteilnehmer")); <FIXE>
<FIXS> if ((args.length) == 0) { <FIXE>
<FIXS> <FIXE>
<FIXS> private int getByIndex(build.games.wraithaven.gui.MenuComponentHeirarchy root, int index, int pos, build.games.wraithaven.gui.MenuComponentHeirarchy[] out) { <FIXE>
<FIXS> if (!(r.getLocalName().startsWith("\""))) { java.lang.String localName = r.getLocalName(); file.writeIndent((((("local " + localName) + " = lpeg.V\"") + localName) + "\"")); } <FIXE>
<FIXS> sb.append("\n"); <FIXE>
<FIXS> this.sendBroadcast(intent); <FIXE> <FIXS> this.sendBroadcast(intent); <FIXE>
<FIXS> mPresenter.loadHistoryContact(); <FIXE>
<FIXS> if (!(applicationCode.equals(org.infobip.mobile.messaging.MobileMessagingCore.getApplicationCode(context)))) { <FIXE>
<FIXS> <FIXE>
<FIXS> if (isEmpty()) { return false; } <FIXE> <FIXS> <FIXE>
<FIXS> if ((mRefreshStatus) == (RefreshStatus.REFRESHING)) changeRefreshViewPositionWithAnimation(0, null); <FIXE>
<FIXS> javax.swing.JOptionPane.showMessageDialog(null, new java.awt.Component[]{ info , author }, "Twipstr :: About & Help", javax.swing.JOptionPane.PLAIN_MESSAGE, infoIcon); <FIXE>
<FIXS> public org.springframework.web.servlet.ModelAndView listtabUsers(com.fh.entity.Page page, @org.springframework.web.bind.annotation.RequestParam(value = "out", required = false) java.lang.String out) throws java.lang.Exception { <FIXE>
<FIXS> connectToJSON("?sort_by=it_no"); <FIXE> <FIXS> <FIXE>
<FIXS> int page = 0; <FIXE> <FIXS> page += 1; <FIXE> <FIXS> } while ((keys.getMeta().getTotal()) > (availableKeys.size()) ); <FIXE>
<FIXS> for (final java.lang.String string : this.keySet()) { <FIXE>
<FIXS> return list.nice.ajax.Response.status(Response.Status.OK).entity(list.nice.bll.UserBLL.wipeSensitiveFields(list.nice.bll.UserBLL.getUser(tokenReal.selector, tokenReal.validator))).build(); <FIXE>
<FIXS> createTextField(); <FIXE>
<FIXS> if (newYaxis.equals("Virus")) { <FIXE>
<FIXS> for (int i = 1; i < (args.length); i++) sum -= java.lang.Integer.valueOf(args[i]); else <FIXE>
<FIXS> private void presentNotificationsList(final org.apache.cordova.CallbackContext callbackContext) { <FIXE>
<FIXS> public void sendEmail(java.util.List<java.lang.String> institutionCodes, java.lang.Integer totalRecordCount, java.lang.Integer failedRecordCount, java.lang.String transmissionType, java.lang.String dateTimeStringForFolder, java.lang.String toEmailAddress) { <FIXE> <FIXS> emailPayLoad.setLocation(getLocation(transmissionType, dateTimeStringForFolder)); <FIXE>
<FIXS> de.fau.cs.mad.wanthavers.common.Haver ret = haverEndpoint.createHaver(desireId, haver); <FIXE>
<FIXS> java.util.List<java.lang.String> lines = cl.getCodeSlice(startLine, endLine); <FIXE>
<FIXS> return null; <FIXE>
<FIXS> assertTrue(areRotated); <FIXE>
<FIXS> getLoaderManager().restartLoader(LOADER_ID, null, this); <FIXE> <FIXS> <FIXE>
<FIXS> int args = this.method.getParameterTypes().length; <FIXE>
<FIXS> }else { sortedList.add(findPosition(c, sortedList), c); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> double error = ((double) (third)) - second; <FIXE>
<FIXS> excute(testcase.Object_ResourceId, testcase.Operation_WaitForExists, "android:id/image", "20000"); <FIXE>
<FIXS> if (t == null) { return dCal; } <FIXE>
<FIXS> http.authorizeRequests().anyRequest().authenticated().and().formLogin().failureUrl("/login?error").permitAll().and().logout().permitAll(); <FIXE>
<FIXS> org.apache.activemq.jms.pool.PooledSession result = ((org.apache.activemq.jms.pool.PooledSession) (pool.createSession(transacted, ackMode))); <FIXE>
<FIXS> return listenerRegistration.getT().equals(super.getT()); <FIXE>
<FIXS> setCategory(); <FIXE> <FIXS> <FIXE>
<FIXS> response.put("numberOfPages", ((int) (java.lang.Math.ceil(((1.0 * numberOfCourses) / (coursemanager.services.CourseService.PAGE_SIZE)))))); <FIXE>
<FIXS> for (int i = 1; i <= n; i++) { <FIXE>
<FIXS> if (query.equals(com.jojo.googlenewsreader.asyncTasks.LoadArticleAsyncTask.DEFAULT_RESEARCH)) { <FIXE>
<FIXS> return (pixelCount.get(bottom, right)) - (pixelCount.get(top, left)); <FIXE>
<FIXS> if (cobertura != null) return cobertura.getRequiereAutorizacion(); return false; <FIXE>
<FIXS> if (((c != null) && (val != null)) && (!(c.isAssignableFrom(val.getClass())))) { <FIXE>
<FIXS> if (bitPermissionsList == null) { <FIXE>
<FIXS> fragmentTransaction.commit(); <FIXE>
<FIXS> return java.util.Arrays.asList(new com.davidbalazs.chess.model.FriendlyPiecePosition(com.davidbalazs.chess.model.FriendlyPieceType.BLACK_KING, 6, 3), new com.davidbalazs.chess.model.FriendlyPiecePosition(com.davidbalazs.chess.model.FriendlyPieceType.WHITE_KING, 2, 1), new com.davidbalazs.chess.model.FriendlyPiecePosition(com.davidbalazs.chess.model.FriendlyPieceType.WHITE_QUEEN, 7, 7), new com.davidbalazs.chess.model.FriendlyPiecePosition(com.davidbalazs.chess.model.FriendlyPieceType.WHITE_PAWN, 4, 6)); <FIXE>
<FIXS> for (int i = 0; i < (arr.length); i++) { if ((arr[i]) >= (arr[maxIndex])) { <FIXE>
<FIXS> if (((A.length) - 1) != ((B.length) - 1)) { <FIXE> <FIXS> for (int i = 0; i < ((A.length) - 1); i++) { <FIXE>
<FIXS> <FIXE> <FIXS> android.view.View view = this.getCurrentFocus(); if (view != null) { android.view.inputmethod.InputMethodManager imm = ((android.view.inputmethod.InputMethodManager) (getSystemService(Context.INPUT_METHOD_SERVICE))); imm.hideSoftInputFromWindow(view.getWindowToken(), 0); } <FIXE>
<FIXS> <FIXE>
<FIXS> if ((attacker.isInCombat()) && (defender.isInCombat())) return dependencyManager.canAttack(attacker.getPlayer(), defender.getPlayer()); <FIXE> <FIXS> return false; <FIXE>
<FIXS> input.close(); <FIXE>
<FIXS> searchColName = comboBoxField.getSelectedItem().toString(); <FIXE>
<FIXS> break; <FIXE>
<FIXS> me.jamiethompson.forgeaccount.ListView.EmailListAdapter adapter = new me.jamiethompson.forgeaccount.ListView.EmailListAdapter(me.jamiethompson.forgeaccount.TabActivity.GeneratorFragment.context, R.layout.item_email, this.emailMessages); <FIXE>
<FIXS> destLogger.error(message, args); <FIXE>
<FIXS> return new org.sosy_lab.cpachecker.cpa.policyiteration.PolicyAbstractedState(node, com.google.common.collect.ImmutableMap.of(), (-1), pManager, org.sosy_lab.cpachecker.util.predicates.pathformula.SSAMap.emptySSAMap(), org.sosy_lab.cpachecker.util.predicates.pathformula.pointeraliasing.PointerTargetSet.emptyPointerTargetSet(), pPredicate, null, null, null); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> stopLocationUpdates(); <FIXE>
<FIXS> @java.lang.Override public void putAll(java.util.Map<? extends java.lang.String, ? extends K> add) { for (java.util.Map.Entry<? extends java.lang.String, ? extends K> entry : add.entrySet()) { <FIXE> <FIXS> } <FIXE>
<FIXS> inject(obj, GridResourceIoc.ResourceAnnotation.CACHE_NAME, null, null, cacheName); <FIXE>
<FIXS> newBits[((bits.length) - 1)] = false; <FIXE>
<FIXS> return !(didPlayerWon(currentPlayer)) ? this : new com.spanish_inquisition.battleship.server.game_states.ResultState(players, requestBus); <FIXE>
<FIXS> mState = org.williamwong.spotifystreamer.services.MusicService.State.PLAYING; <FIXE>
<FIXS> public io.netty.channel.ChannelHandler call(final io.netty.channel.Channel channel, final java.lang.Integer allIdleTimeout) { <FIXE>
<FIXS> <FIXE>
<FIXS> if ((mp.getCurrentFilePath()) != null) { output.addAll(mp.getCurrentFilePath()); } <FIXE>
<FIXS> <FIXE>
<FIXS> c.setBackground(((row % 2) != 0 ? getBackground() : java.awt.Color.LIGHT_GRAY)); <FIXE>
<FIXS> java.lang.String[] fields = new java.lang.String[]{ "id" , "blade_size" , "start_date" , "hours_used" }; java.lang.String[] values = new java.lang.String[]{ "500" , "11" , "2012-08-06 08:11:12" , "30" }; <FIXE> <FIXS> <FIXE> <FIXS> } catch (java.sql.SQLException e) { } try { <FIXE>
<FIXS> return idObject; <FIXE>
<FIXS> batchObjects[0] = new net.smartcosmos.android.ProfilesTransactionRequest.ObjectEntity(); <FIXE>
<FIXS> return ((T) (getValue(dictionary.get(subPropertyName)))); <FIXE>
<FIXS> this.boardContent = new char[board.length][board[0].length]; <FIXE>
<FIXS> java.lang.Iterable<siena.base.test.model.PersonUUID> people = pm.createQuery(siena.base.test.model.PersonUUID.class).filter("n>", 1).order("n").iter(2, 1); <FIXE>
<FIXS> counter = java.lang.Integer.parseInt(new handlers.HttpTask().execute("GET", request).get().trim()); <FIXE>
<FIXS> viewerInput.addPropertyChangeListener(commonViewerListener); <FIXE>
<FIXS> public void onBindViewHolder(android.support.v7.widget.RecyclerView.ViewHolder viewHolder, int position) { <FIXE>
<FIXS> return (trade.getInitiator().equals(this.getInitiator())) && (trade.getTarget().equals(this.getTarget())); <FIXE>
<FIXS> <FIXE> <FIXS> return widgetHelper.getConvertView(); <FIXE>
<FIXS> <FIXE> <FIXS> super.onStop(); org.chromium.chrome.browser.customtabs.CustomTabsConnection.getInstance(getApplication()).dontKeepAliveForSession(mIntentDataProvider.getSession()); <FIXE>
<FIXS> core.Wait.waitFor(common.DriverManager.getDriver(DriverType.LOOP), emerald.portal.JourneyBuilder.mbActionMenu, (!open)); <FIXE>
<FIXS> if ((StdDevCtx.count) <= 1) { <FIXE> <FIXS> } <FIXE>
<FIXS> assertEquals(Constants.DWC_ROWTYPE_TAXON, resource.getCoreRowType()); <FIXE>
<FIXS> this.close(); <FIXE>
<FIXS> new org.matsim.core.population.PopulationWriter(scenario.getPopulation()).write((((outputDir + "/initial_urban_plans_") + (cloningFactor)) + "pct.xml.gz")); new org.matsim.utils.objectattributes.ObjectAttributesXmlWriter(scenario.getPopulation().getPersonAttributes()).writeFile((((outputDir + "/initial_urban_persionAttributes_") + (cloningFactor)) + "pct.xml.gz")); <FIXE>
<FIXS> <FIXE>
<FIXS> if (((oldP[0]) != (newP[0])) || ((oldP[1]) != (newP[1]))) { positionChanged = true; playerOld = oldP; playerNew = newP; this.topDown = topDown; this.positiv = positiv; } <FIXE>
<FIXS> object.put(BitMapPath()); <FIXE>
<FIXS> public org.smartdata.model.SystemInfo getByProperty(java.lang.String property) { <FIXE> <FIXS> return jdbcTemplate.query((("select * from " + (TABLE_NAME)) + " where property = ?"), new java.lang.Object[]{ property }, new org.smartdata.metastore.dao.SystemInfoDao.SystemInfoRowMapper()).get(0); <FIXE>
<FIXS> updateDateRangeLabels(true); <FIXE>
<FIXS> <FIXE>
<FIXS> try { setFollowTerrain(false); super.render(dc); } finally { setFollowTerrain(followTerrain); } <FIXE>
<FIXS> runLicenseChecker(jahirfiquitiva.iconshowcase.activities.WITH_LICENSE_CHECKER, jahirfiquitiva.iconshowcase.activities.GOOGLE_PUBKEY, jahirfiquitiva.iconshowcase.activities.WITH_INSTALLED_FROM_AMAZON, jahirfiquitiva.iconshowcase.activities.ALLOW_APT_USE); <FIXE>
<FIXS> @java.lang.Override public double distance(final geogebra.common.kernel.geos.GeoPoint2 p) { <FIXE> <FIXS> final geogebra.common.kernel.geos.GeoElement geo = geoList.get(i); final double d = geo.distance(p); <FIXE>
<FIXS> this.logger.info(java.lang.String.format("Removing table for sid %d and tablename %s", getSid(), tableName)); final java.lang.String sql = java.lang.String.format("DROP TABLE IF EXISTS %s", wrapName(tableName)); <FIXE> <FIXS> } catch (final java.sql.SQLException e) { this.logger.error(java.lang.String.format("Removing table for sid %d and tablename %s FAILED", getSid(), tableName), e); <FIXE>
<FIXS> if (index == (size())) { add(element); }else { boundsCheck(index); enlargeIfNeeded(1); java.lang.System.arraycopy(array, index, array, (index + 1), ((end) - index)); array[index] = element; (end)++; } <FIXE>
<FIXS> sb.append(line.trim()); <FIXE>
<FIXS> checkExclusionOneWayLegacy(assignmentB, assignmentA, roleB, roleA); <FIXE> <FIXS> checkExclusionOneWayRuleBased(assignmentB, assignmentA, roleB, roleA); <FIXE>
<FIXS> return tk.thebrightstuff.blindtale.utils.StringUtils.removeAccents(getIString(ref)).toLowerCase(); <FIXE>
<FIXS> po.UserPO userPOTest = new po.UserPO(2, model.UserType.Customer, "alex2097", "151250187", "Alex Yu", "15951923079", image, 800, model.MemberType.Person, time, 1, null, 3); <FIXE>
<FIXS> public static java.util.Date getLatestDate(java.lang.Class articleClass) throws java.lang.NullPointerException { <FIXE>
<FIXS> <FIXE> <FIXS> scheduledExecutor.shutdownNow(); <FIXE>
<FIXS> <FIXE> <FIXS> java.lang.String second_part_subject = full_subject[1]; <FIXE>
<FIXS> return java.lang.String.format("%s %s %.6f %.6f %d %d %d %d %d %d %d %d", getFromId().getHeader(), getToId().getHeader(), (1.0 - (getScore())), this.rawScore, (getFromId().isForward() ? 0 : 1), this.a1, this.a2, this.fromLength, (getToId().isForward() ? 0 : 1), this.b1, this.b2, this.toLength); <FIXE>
<FIXS> this.trackRecognizerActor = getContext().actorOf(akka.actor.Props.create(ch.hsr.whitespace.javapilot.akka.TrackRecognizerActor.class, getSelf(), new java.util.ArrayList<java.lang.String>(alreadyCheckedPatterns))); <FIXE>
<FIXS> xyf.com.appframe.MusicSearchActivity.pageno = 1; <FIXE>
<FIXS> org.apache.kylin.common.persistence.ResourceStoreTest.testPerformance(org.apache.kylin.common.persistence.ResourceStoreTest.mockUrl("hdfs", kylinConfig), kylinConfig); <FIXE> <FIXS> org.apache.kylin.common.persistence.ResourceStoreTest.testPerformance(org.apache.kylin.common.persistence.ResourceStoreTest.mockUrl("hbase", kylinConfig), kylinConfig); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> return "???"; <FIXE>
<FIXS> protected mobop.booklist.app.data.api.ApiBook doInBackground(java.lang.String... params) { <FIXE> <FIXS> return book; <FIXE> <FIXS> return null; <FIXE>
<FIXS> this.pcSupport.firePropertyChange("styleType", oldShapeType, this.getStyleType()); <FIXE> <FIXS> <FIXE>
<FIXS> bundle.putInt("room", i); <FIXE>
<FIXS> line = 1; column = 1; <FIXE>
<FIXS> public boolean execute() { <FIXE> <FIXS> return false; <FIXE>
<FIXS> <FIXE>
<FIXS> myPanelB.colorArray[ClickedInX][ClickedInY] = bombs; <FIXE>
<FIXS> com.oracle.graal.asm.amd64.AMD64InstructionAttr attributes = new com.oracle.graal.asm.amd64.AMD64InstructionAttr(com.oracle.graal.asm.amd64.AMD64Assembler.AvxVectorLen.AVX_128bit, false, false, false, false, target); <FIXE>
<FIXS> return fetchUsersList(blog.getDotComBlogId(), blog.getLocalTableBlogId(), 0); <FIXE> <FIXS> return fetchFollowersList(blog.getDotComBlogId(), blog.getLocalTableBlogId(), 1); <FIXE>
<FIXS> nodebox.client.Handle handle = null; <FIXE> <FIXS> handle = repository.constructHandle(activeNode.getHandle()); } if (handle != null) { handle.setHandleDelegate(this); viewerPane.setHandle(handle); }else { viewerPane.setHandle(null); <FIXE>
<FIXS> len = datesStream.readRecord(buffer2, 0, 4); <FIXE>
<FIXS> com.carser.viamais.entity.MailConfiguration config = mailConfigurationRepository.findByEvent(MailConfiguration.Event.ERROR_MESSAGE); <FIXE>
<FIXS> testingDate = ((((java.lang.String.valueOf(datepicker.getYear())) + ",") + (java.lang.String.valueOf(((datepicker.getMonth()) + 1)))) + ",") + (java.lang.String.valueOf(datepicker.getDayOfMonth())); <FIXE>
<FIXS> str += (group[i]) + ":"; <FIXE> <FIXS> str += group[((group.length) - 1)]; <FIXE>
<FIXS> verifyThat("Only one message showing at the bottom of search results", occurrences, org.hamcrest.core.Is.is(1)); <FIXE>
<FIXS> <FIXE>
<FIXS> return ((path.endsWith(DataConstants.ROSTER_FILE_EXTENSION)) || (path.endsWith(DataConstants.ROSTER_COMPRESSED_FILE_EXTENSION))) || (path.endsWith(DataConstants.ROSTER_COMPRESSED_FILE_EXTENSION_OLD)); <FIXE>
<FIXS> subs.add(new com.example.lachlan.myfirstapp.code.SubDistrict(context, loc.municipality, loc.subdistrict)); <FIXE>
<FIXS> int l = data.length; <FIXE> <FIXS> l *= com.heerbann.unsafe.UnsafeBuffer.sizeOfLong; <FIXE>
<FIXS> <FIXE>
<FIXS> java.io.File absolute = new java.io.File(fileName); if ((org.apache.commons.lang3.StringUtils.isEmpty(basePath)) || (absolute.isAbsolute())) { file = absolute; <FIXE>
<FIXS> log(new java.lang.StringBuilder("Connection to lost! ").append(cause).toString()); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> return value != null ? value.trim() : null; <FIXE>
<FIXS> public void assertEquals(java.lang.Object expected, java.lang.Object actual) { <FIXE>
<FIXS> <FIXE> <FIXS> line = java.lang.String.format("Frames rendered: %d remaining: %d credits earned: %s | %s", rendered, remaining, ((creditsEarned) != null ? creditsEarned : "unknown"), ((status) + (exiting ? " (Exiting after this frame)" : ""))); <FIXE>
<FIXS> <FIXE>
<FIXS> public void placeInPortal(net.minecraft.entity.Entity entity, float rotation) { <FIXE> <FIXS> entity.motionX = entity.motionY = entity.motionZ = 0; <FIXE>
<FIXS> if (gameResult.getPoints().equals(points.get(i))) { <FIXE>
<FIXS> final int mask = 1 << 7; <FIXE> <FIXS> tempRegister &= ~mask; tempBackRegister &= ~mask; <FIXE>
<FIXS> java.lang.String _replace = e.getReferredType().toString().replace("::", "!"); _builder.append(_replace); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> return this.addDayInDate(date); <FIXE> <FIXS> return this.addMonthInDate(date); <FIXE> <FIXS> return this.addYearInDate(date); <FIXE>
<FIXS> assert (tailer.store.refCount()) > 0; <FIXE>
<FIXS> <FIXE>
<FIXS> if (fg.getId().equals(gID)) { <FIXE>
<FIXS> if (!(com.clothapp.ImageFragment.lista.contains(toAdd))) { com.clothapp.ImageFragment.lista.add(toAdd); mPagerAdapter.notifyDataSetChanged(); } <FIXE>
<FIXS> assertTrue("Wrong formats", (f == (formats))); <FIXE> <FIXS> assertTrue("Formats copied", (f != orgFormats)); <FIXE>
<FIXS> if ((ClientHookHandler.hook) == null) { original.updatePlayerMoveState(); player.movementInput = original; <FIXE> <FIXS> if (player.onGround) { super.updatePlayerMoveState(); <FIXE>
<FIXS> centuryPresenterWidget.setAddResourceData(centurySelectedValues); <FIXE>
<FIXS> current.addAction(neighbor.actstr); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> if (content != null) return content.getClass(); <FIXE>
<FIXS> vendorAdapter.setShowSql(true); <FIXE>
<FIXS> return ((int) (((float) ((dragged) / ((float) ((viewportHeight) - (BAR_HEIGHT))))) * ((height) - (viewportHeight)))); <FIXE>
<FIXS> hero.toggleStop(); <FIXE>
<FIXS> <FIXE>
<FIXS> com.astedt.robin.concurrentobjecthandler.ConcurrentObjectWorker worker = new com.astedt.robin.concurrentobjecthandler.ConcurrentObjectWorker(this, i); <FIXE>
<FIXS> if (resultObject instanceof byte[]) { mImageBytesConsumer.onAssetBytes(mAsset, ((byte[]) (resultObject))); <FIXE> <FIXS> if (resultObject instanceof java.lang.Exception) { mImageBytesConsumer.onAssetError(mAsset, ((java.lang.Exception) (resultObject))); <FIXE>
<FIXS> <FIXE> <FIXS> tcBaseDelegate.onCreate(this, savedInstanceState, app); <FIXE>
<FIXS> <FIXE>
<FIXS> if ((categoriesInfo.getCategories()) != null) { for (com.nusclimb.live.crimp.common.json.CategoriesResponseBody.Category c : categoriesInfo.getCategories()) { categoryEndList.add(c.getTimeEnd()); } <FIXE>
<FIXS> <FIXE> <FIXS> ready(); <FIXE>
<FIXS> if ((((this.configuration) != null) && (endpoint.equals(this.endpoint))) && (!(this.configuration.equals(otherConfig)))) { <FIXE>
<FIXS> minute = getRoundedMinute(minute); <FIXE>
<FIXS> java.lang.String output = buffer.toString(); buffer = new java.lang.StringBuilder(); <FIXE> <FIXS> buffer.append(c); <FIXE>
<FIXS> <FIXE>
<FIXS> com.iutbmteprow.shootingarchery.dbman.Utilisateur curUser = db.getUtilisateurFromName(userName[1], userName[0]); <FIXE>
<FIXS> int seconds = ((int) (((mDuration) / 1000) % 60)); <FIXE>
<FIXS> public boolean onBackPressed() { <FIXE> <FIXS> return ((tw.edu.ntust.et.mit.jonkermalacca.MainActivity.OnBackPressedListener) (currentFragment)).onBackPressed(); <FIXE> <FIXS> return false; <FIXE>
<FIXS> <FIXE>
<FIXS> public static java.lang.String toSystemPath(java.lang.String rawpath) { <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> rayHandler.updateAndRender(); <FIXE>
<FIXS> <FIXE>
<FIXS> if ((currentImage) != null) currentImage = converter.Resize(((java.awt.image.BufferedImage) (currentImage)), currentCrowd.getWidth(), currentCrowd.getHeight()); <FIXE>
<FIXS> <FIXE>
<FIXS> reactor.createEntities(species, chemical.mols); <FIXE>
<FIXS> return isRegisterFloat.get(str); <FIXE>
<FIXS> if ((cluster1 == null) || (cluster2 == null)) return true; <FIXE>
<FIXS> handleDownloadAPI(downloadLink, true, 1, false, "directlink_freeaccount"); <FIXE>
<FIXS> if (p_element != null) { java.util.List x_properties = p_element.getChildren(); for (java.lang.Object x_property : x_properties) { data.Element x_propertyElem = ((data.Element) (x_property)); x_settings.setProperty(x_propertyElem.getAttributeValue(XmlConstants.s_PROPERTY_NAME), x_propertyElem.getAttributeValue(XmlConstants.s_PROPERTY_VALUE)); } <FIXE>
<FIXS> newEmployee = new workSQL.Employee(hold, "", "", "", ""); <FIXE>
<FIXS> layer.clear(); <FIXE>
<FIXS> case DISCOVERED : <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> super.onDestroyView(); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> getCompilationProfile().profileDirectCall(this, args); <FIXE> <FIXS> result = compilationProfile.injectReturnValueProfile(result); <FIXE>
<FIXS> this.fileName = inputFile.getName(); <FIXE>
<FIXS> if (!(permissionBoundary.canCopyFromSpecificResource(originResource, targetResource.getResourceGroup()))) { <FIXE>
<FIXS> if (listener != null) { listener.onGetUser(user); <FIXE>
<FIXS> if (((ships.size()) <= 7) && ((ships.size()) > 0)) { <FIXE>
<FIXS> filter.addAction(Intent.ACTION_POWER_CONNECTED); <FIXE> <FIXS> if ((policy.Id) == (com.example.plpa.utils.UploadPolicy.CONNECTWIFI)) filter.addAction(WifiManager.WIFI_STATE_CHANGED_ACTION); <FIXE>
<FIXS> <FIXE>
<FIXS> assertEquals(java.nio.charset.Charset.defaultCharset(), layout.getCharset()); <FIXE>
<FIXS> <FIXE>
<FIXS> if (ids != null) { java.lang.StringBuilder builder = new java.lang.StringBuilder(); for (org.verapdf.model.impl.pb.cos.COSBase id : ids) { builder.append(((org.verapdf.model.impl.pb.cos.COSString) (id)).getASCII()).append(' '); } return builder.toString().substring(0, ((builder.length()) - 2)); }else { return null; <FIXE> <FIXS> <FIXE>
<FIXS> sellService.write(products, outPutFilePath, resultMSG, shopinFilePath); <FIXE>
<FIXS> public void respondAccepted_whenCreateARefund(int amount, java.lang.String gatewayAccountId, java.lang.String chargeId, java.lang.String refundId, java.lang.String status, java.lang.String createdDate) { <FIXE>
<FIXS> return new org.gitlab4j.api.GitLabApi(apiVersion, url, session); <FIXE>
<FIXS> <FIXE> <FIXS> gui.GUI.setfinalSize(textfield, new java.awt.Dimension(width, height)); <FIXE>
<FIXS> final java.util.Set<java.security.Principal> principals = new java.util.HashSet<>(); <FIXE>
<FIXS> cards.add(new org.leanpoker.player.Card(cardsJson.get(i).getAsJsonObject().get("suit").getAsString(), cardsJson.get(1).getAsJsonObject().get("rank").getAsString())); <FIXE>
<FIXS> private void startService(final int target) { <FIXE>
<FIXS> deck[i] = deck[shuf]; <FIXE>
<FIXS> ru.bigspawn.parser.parser.AlterPortalParser parser = new ru.bigspawn.parser.parser.AlterPortalParser(url); <FIXE>
<FIXS> if ((selectedHP) != null) { for (org.Point p : selectedHP.getLocations()) { javafx.scene.control.ChoiceBox<org.Point> cb = new javafx.scene.control.ChoiceBox<>(); cb.setItems(javafx.collections.FXCollections.observableList(rooms)); cb.setValue(p); locations.add(cb); } <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> byte[] buff = new byte[]{ }; <FIXE> <FIXS> byte[] bytes = new byte[]{ ((byte) (buffer[((buffer.length) - 1)])) }; <FIXE> <FIXS> return buff; <FIXE>
<FIXS> return true; <FIXE> <FIXS> return parseStringCharacters(subText, outChars); <FIXE>
<FIXS> <FIXE>
<FIXS> if ((Build.VERSION.SDK_INT) >= (Build.VERSION_CODES.LOLLIPOP)) <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> season.save("save1.json"); <FIXE> <FIXS> <FIXE>
<FIXS> int position = ((java.lang.Integer) (v.getTag())); <FIXE> <FIXS> clickListener.onCombatClick(position, eventType); <FIXE>
<FIXS> if (stock == null) return -1; <FIXE>
<FIXS> super.readFromNBT(compound); <FIXE>
<FIXS> public org.bitcoinj.core.Transaction loadTransactionFromDisk(java.lang.String txHash) throws com.bitdubai.fermat_bch_plugin.layer.crypto_network.bitcoin.developer.bitdubai.version_1.exceptions.CantLoadTransactionFromFileException { <FIXE>
<FIXS> for (proto.game.scene.Tile under : proto.game.scene.Prop.tilesUnder(type, scene, x, y, facing, 0)) { <FIXE>
<FIXS> kz.mukhamedissa.exchangerates.util.db.orm.ORMFactory.getArticleORM().delete(getBaseContext()); <FIXE>
<FIXS> rentalInfoController.returnMovie(id, clientSelected.getId()); <FIXE> <FIXS> <FIXE>
<FIXS> com.google.common.base.Preconditions.checkArgument(((null == (parallelism)) || ((parallelism) > 0)), "invalid parallelism %s; must be greater than zero", parallelism); <FIXE>
<FIXS> if ((taskPosition) >= (game.tasks.size())) { (taskPosition)--; } <FIXE>
<FIXS> startCallReport.putExtra("id", id); <FIXE>
<FIXS> private java.util.List<java.io.File> addUpperItem(java.util.List<java.io.File> oldList) { <FIXE>
<FIXS> long res = edu.ucsd.sccn.LSL.inst.lsl_pull_chunk_d(obj, data_buffer, timestamp_buffer, data_buffer.length, timestamp_buffer.length, timeout, ec); <FIXE>
<FIXS> for (int i = 3; (i * i) <= p; i += 2) <FIXE>
<FIXS> <FIXE>
<FIXS> public java.util.ArrayList<be.ehb.restservermetdatabase.model.Avatar> list(@org.springframework.web.bind.annotation.RequestParam(value = "user_id", defaultValue = "0") int user_id, @org.springframework.web.bind.annotation.RequestParam(value = "user_mail", defaultValue = "") <FIXE> <FIXS> }else { <FIXE> <FIXS> <FIXE> <FIXS> return be.ehb.restservermetdatabase.dao.AvatarDao.getAvatarsByUser(user_id); } <FIXE>
<FIXS> @javax.ws.rs.GET @javax.ws.rs.Path(value = "/createFolder") @javax.ws.rs.Produces(value = pt.webdetails.cpf.utils.MimeTypes.JSON) public java.lang.String createFolder(@javax.ws.rs.QueryParam(value = pt.webdetails.cfr.CfrApi.MethodParams.PATH) java.lang.String path) throws java.lang.Exception { path = pt.webdetails.cfr.CfrApi.checkRelativePathSanity(path); <FIXE> <FIXS> return new org.json.JSONObject().put("result", createResult).toString(); <FIXE>
<FIXS> java.lang.String testSuitePath = projPathTF.getText(); <FIXE>
<FIXS> try (java.io.InputStream verStream = getClass().getClassLoader().getResourceAsStream(com.mobilehelix.appserver.system.VersionManager.versionProperties)) { java.util.Properties verProps = new java.util.Properties(); verProps.load(verStream); majorVer = verProps.getProperty("Major"); minorVer = verProps.getProperty("Minor"); revisionVer = verProps.getProperty("Revision"); versionString = ((((majorVer) + ".") + (minorVer)) + ".") + (revisionVer); } <FIXE>
<FIXS> if ((((data.size()) - 1) <= (i)) || ((data.get(i)) == null)) <FIXE>
<FIXS> if ((account == null) || (!(account.isBannerOption()))) { bannerLayout.setVisible(false); }else if (!(com.google.common.base.Strings.isNullOrEmpty(account.getBannerName()))) { bannerImage.setValue(account.getBannerName()); bannerLayout.setVisible(true); bannerLayout.setStyleName(getBannerStyleName(account.getBannerName())); } <FIXE>
<FIXS> <FIXE>
<FIXS> this.analyticService.setHTMLtoPDF(htmlString, collectionTitle, false, new com.google.gwt.user.client.rpc.AsyncCallback<java.lang.String>() { <FIXE>
<FIXS> public static org.kentuni.WeatherStation.Drivers.MCP3427 getDriver() throws java.lang.Exception { <FIXE> <FIXS> org.kentuni.WeatherStation.Drivers.ADC.instance = new org.kentuni.WeatherStation.Drivers.MCP3427(com.pi4j.io.i2c.I2CFactory.getInstance(I2CBus.BUS_1), 105); <FIXE>
<FIXS> java.lang.Byte byteValue = ((byte) (0)); <FIXE>
<FIXS> for (int i = 0; i < nc; i++) { comps[i] = new Graph(); } <FIXE>
<FIXS> if (payload instanceof java.lang.String) { return org.springframework.util.StringUtils.isEmpty(payload); <FIXE>
<FIXS> if (nitezh.ministock.UserData.writeExternalStorage(context, rawJson, (fileName + ".txt"), "portfoliobackups/")) nitezh.ministock.DialogTools.showSimpleDialog(context, "PortfolioActivity backed up", ("Your portfolio settings have been backed up to ministocks/portfoliobackups/" + fileName)); <FIXE>
<FIXS> int end = haystack.length; while (start < end) { <FIXE> <FIXS> end = midpoint; <FIXE>
<FIXS> <FIXE>
<FIXS> this.ordinal = java.lang.Integer.parseInt(ordinal); <FIXE>
<FIXS> mNotificationListeners.put(id, null); <FIXE>
<FIXS> for (int i = 0; i < count; i++) { <FIXE> <FIXS> java.lang.Integer progress = ((int) (((i + 1) / ((float) (count))) * 100)); <FIXE>
<FIXS> p.setText(resultSet.getString((index++))); p.setSenderName(resultSet.getString((index++))); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> isVertical = FlowLayout.VERTICAL.equals(a); <FIXE>
<FIXS> private java.io.File absentDirectory() { <FIXE> <FIXS> java.lang.String result = (existingDirectory()) + (xyz.enhorse.commons.HandyPathTest.name); <FIXE> <FIXS> return new java.io.File(result); <FIXE>
<FIXS> <FIXE>
<FIXS> public synchronized void generateBottomEdge() { <FIXE>
<FIXS> sortData(eventbriteEvents); <FIXE> <FIXS> sortData(eventfulEvents); <FIXE> <FIXS> <FIXE>
<FIXS> return (gov.hhs.fha.nhinc.nhinclib.NullChecker.isNotNullish(keepAlive)) && (("TRUE".equalsIgnoreCase(keepAlive)) || ("T".equalsIgnoreCase(keepAlive))); <FIXE>
<FIXS> java.lang.String encodedName = encodeName(signal); <FIXE>
<FIXS> psiborg.fractal.jobs.JobQueue.addJob(new psiborg.fractal.jobs.RenderJob(fragment, view, callback, null)); <FIXE>
<FIXS> _simStat.isOk = true; <FIXE>
<FIXS> for (java.lang.String port : ports) { <FIXE>
<FIXS> return parent == (this); <FIXE>
<FIXS> <FIXE>
<FIXS> return (countOfAliveWolves == 0) || (countOfAliveWolves >= countOfAliveCitizens); <FIXE>
<FIXS> <FIXE>
<FIXS> countDownProgressBar.setProgress(counter); <FIXE>
<FIXS> return new org.eclipse.draw2d.geometry.Rectangle(((origin.x) + (GRID_SIZE)), origin.y, ((origin.width) - (2 * (GRID_SIZE))), ((origin.height) - (GRID_SIZE))); <FIXE>
<FIXS> if (text == null) text = java.util.Calendar.getInstance().getTime().toString(); <FIXE>
<FIXS> mBaseHeaderAdapter.pullViewToRefresh(deltaY); <FIXE> <FIXS> mBaseHeaderAdapter.releaseViewToRefresh(deltaY); <FIXE>
<FIXS> <FIXE>
<FIXS> assert (sumV2X2) != null; <FIXE>
<FIXS> mOriginal.remove(getItems().get(position)); <FIXE>
<FIXS> public java.util.List<java.util.Map<java.lang.String, java.lang.Object>> getArticleDetailById(long id) { java.util.List<java.util.Map<java.lang.String, java.lang.Object>> article = aDao.getArticleDetailById(id); if (!(article.isEmpty())) article.get(0).put("tags", aDao.getArticleTagsById(java.lang.Integer.parseInt(article.get(0).get("id").toString()))); <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> if (null != frozenVariable) { frozenVariable.freeze(selector); } <FIXE>
<FIXS> processMethodWithValueHandler(method); <FIXE> <FIXS> processMethodWithCallHandler(method); <FIXE>
<FIXS> cardNumberField.setText(paymentInfo.getCardType()); cardTypeField.setValue(paymentInfo.getCardNum()); <FIXE>
<FIXS> <FIXE>
<FIXS> mSelectedProfile.mAllowLocalLAN = true; <FIXE>
<FIXS> public java.util.List<uk.co.olimor.BMBTApi_boot.model.TestResult> getResultHistory(final java.lang.String userId) throws uk.co.olimor.BMBTApi_boot.exception.ApiException { <FIXE>
<FIXS> if ((document.getLineManager()) != null) { document.getLineManager().removeLineListener(this); } <FIXE>
<FIXS> assertTrue("Wrong limits", (l == (limits))); <FIXE> <FIXS> assertTrue("Limits copied", (l != orgLimits)); <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> if (index == 0) { if ((head) == null) { throw new java.lang.IndexOutOfBoundsException(("Sorry no such element: " + index)); } return head; } <FIXE>
<FIXS> return new org.openl.rules.lang.xls.binding.XlsModuleOpenClass(null, org.openl.rules.lang.xls.XlsHelper.getModuleName(moduleNode), new org.openl.rules.lang.xls.binding.XlsMetaInfo(moduleNode), openl, dbase, moduleDependencies, org.openl.engine.OpenLSystemProperties.isDTDispatchingMode(bindingContext.getExternalParams()), org.openl.engine.OpenLSystemProperties.isDispatchingValidationEnabled(bindingContext.getExternalParams())); <FIXE>
<FIXS> <FIXE>
<FIXS> if ((act) != null) { <FIXE> <FIXS> <FIXE> <FIXS> }else reconnect(); <FIXE>
<FIXS> if (mGoogleApiClient.isConnected()) { if ((mRequestingUpdates) == (mSharedPreferences.getBoolean(edu.cornell.jjl.info4120final.MainActivity.REQUESTING_LOCATION_UPDATES_KEY, false))) { <FIXE> <FIXS> mRequestingUpdates = mSharedPreferences.getBoolean(edu.cornell.jjl.info4120final.MainActivity.REQUESTING_LOCATION_UPDATES_KEY, false); if (mRequestingUpdates) { startLocationUpdates(); mAccelLogger = new edu.cornell.jjl.info4120final.DataLogger("accel"); mLocationLogger = new edu.cornell.jjl.info4120final.DataLogger("location"); mActivityLogger = new edu.cornell.jjl.info4120final.DataLogger("activity_recognition"); }else { } <FIXE>
<FIXS> locationUpdateListener.canReceiveLocationUpdates("Unable to get your location.Please turn on your device Gps"); <FIXE> <FIXS> locationUpdateListener.cannotReceiveLocationUpdates("Unable to get your location.Please turn on your device Gps"); <FIXE> <FIXS> locationUpdateListener.cannotReceiveLocationUpdates("Google play service not available"); <FIXE>
<FIXS> if (fixedAttributes == null) return ; com.orhanobut.tracklytics.FixedAttribute[] attributes = fixedAttributes.value(); for (com.orhanobut.tracklytics.FixedAttribute attribute : attributes) { values.put(attribute.key(), attribute.value()); if (attribute.isSuper()) { superAttributes.put(attribute.key(), attribute.value()); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> if ((mSearchResult) != null) { android.content.ContentValues historyValues = new android.content.ContentValues(); historyValues.put(DataContract.HistoryEntry.COLUMN_RESTAURANT_ID, mSearchResult.getRestID()); historyValues.put(DataContract.HistoryEntry.COLUMN_RESTAURANT_NAME, mSearchResult.getRestName()); android.net.Uri uri = getActivity().getContentResolver().insert(DataContract.HistoryEntry.CONTENT_URI, historyValues); android.util.Log.d("history check", uri.toString()); onLocationChaged(curLatitude, curLongitude); } <FIXE>
<FIXS> int _finId = jo.getInt("id"); <FIXE>
<FIXS> return java.security.AccessController.doPrivileged(((java.security.PrivilegedAction<java.net.URLClassLoader>) (() -> new java.net.URLClassLoader(urls, parentClassLoader)))); <FIXE>
<FIXS> size = 0; <FIXE>
<FIXS> this.stallMinPower = java.lang.Math.abs(stallMinPower); this.stallTimeout = java.lang.Math.abs(stallTimeout); this.resetTimeout = java.lang.Math.abs(resetTimeout); <FIXE>
<FIXS> removeNotification(com.cynerds.cyburger.activities.MainActivity.ORDERS_TAB, 1); <FIXE> <FIXS> <FIXE>
<FIXS> mImageUrlInterface = ((com.example.randomlocks.gamesnote.DialogFragment.ImageUrlFragment.ImageUrlInterface) (getActivity())); <FIXE>
<FIXS> return fileManager.createFolder(studyId, folderPath.toString(), status, parents, description, options, sessionId); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> return getValue(countMap.get(new context.healthinformatics.graphs.ConnectionSet(codes.get(i), codes.get(j)))); <FIXE>
<FIXS> com.extenprise.mapp.util.Utility.showAlert(activity, title, msg, false, null, new android.content.DialogInterface.OnClickListener() { <FIXE>
<FIXS> <FIXE> <FIXS> return (this.boundingBox.minZ) + x; case NORTH : return (this.boundingBox.maxZ) - z; <FIXE> <FIXS> return (this.boundingBox.maxZ) - x; <FIXE>
<FIXS> checkPaymentStatus(this.paymentId); <FIXE>
<FIXS> final cc.blynk.server.storage.reporting.average.AggregationValue aggregationValueTmp = new cc.blynk.server.storage.reporting.average.AggregationValue(); <FIXE>
<FIXS> <FIXE>
<FIXS> java.text.SimpleDateFormat df = new java.text.SimpleDateFormat("MM dd yyyy HHmm"); result = df.format(toBeConverted.getTime()); <FIXE>
<FIXS> private beans.Utente transform(org.telegram.telegrambots.api.objects.User utente, java.lang.Long chatId) { <FIXE>
<FIXS> toggleParameterFilter(isParameterFilterVisible()); <FIXE>
<FIXS> protected static boolean isAllASCII(java.lang.String input) { <FIXE>
<FIXS> if ((position >= 0) && (position < (mList.size()))) { <FIXE>
<FIXS> joinAction.execute(); <FIXE> <FIXS> <FIXE>
<FIXS> com.alamkanak.weekview.WeekViewEvent event = new com.alamkanak.weekview.WeekViewEvent(counter, getEventTitle(startTime, title), startTime, endTime); <FIXE>
<FIXS> public java.lang.Iterable<org.matsim.api.core.v01.Id<org.matsim.api.core.v01.population.Person>> cat(final org.matsim.api.core.v01.Id<org.matsim.api.core.v01.population.Person> ego, final java.util.Set<org.matsim.api.core.v01.Id<org.matsim.api.core.v01.population.Person>> alters) { final java.util.Collection<org.matsim.api.core.v01.Id<org.matsim.api.core.v01.population.Person>> ids = new java.util.HashSet(alters); <FIXE>
<FIXS> <FIXE>
<FIXS> executeInternal(this.action, this.rawArgs, this.callback); <FIXE>
<FIXS> public void addCover(org.ernest.applications.dmc.report.builders.Document document, java.lang.String region) throws java.io.IOException, org.ernest.applications.dmc.report.builders.DocumentException { <FIXE> <FIXS> org.ernest.applications.dmc.report.builders.Paragraph paragraph = new org.ernest.applications.dmc.report.builders.Paragraph(region, org.ernest.applications.dmc.report.builders.BuilderUtils.getTitleFont()); <FIXE>
<FIXS> assertFalse(file.exists()); <FIXE>
<FIXS> obj1.sendMessageDelayed("first message", 2, 1000); obj1.sendMessageDelayed("second message", 2, 10); <FIXE>
<FIXS> if ((p_71515_2_.length) >= 1) { <FIXE>
<FIXS> java.lang.Integer readyAgents = ((java.lang.Double) (availabilityData.get("readyAgents"))).intValue(); <FIXE>
<FIXS> return (((((((("SELECT " + (MediaLibrary.GenreSongColumns.SONG_ID)) + " FROM ") + (MediaLibrary.TABLE_GENRES_SONGS)) + " WHERE ") + (MediaLibrary.GenreSongColumns._GENRE_ID)) + "=") + genreId) + " GROUP BY ") + (MediaLibrary.GenreSongColumns.SONG_ID); <FIXE>
<FIXS> level.Direction dir = action.getDirection(); <FIXE> <FIXS> <FIXE>
<FIXS> while ((matchFound == false) && (i < (states.length))) { <FIXE>
<FIXS> getSupportFragmentManager().beginTransaction().replace(R.id.fragment_container, firstFragment).commit(); <FIXE>
<FIXS> android.widget.Toast savedToast = android.widget.Toast.makeText(context, "Unable to sign in to Google", Toast.LENGTH_SHORT); <FIXE>
<FIXS> activeFrontend = rtl2832Frontend; <FIXE>
<FIXS> public java.util.Vector cnt() { java.util.Vector center = new java.util.Vector(0, 0); <FIXE> <FIXS> for (java.util.Vector vector : outline) { <FIXE>
<FIXS> public logic.Piece turnCPU() { <FIXE>
<FIXS> if ((org.catrobat.catroid.utils.VibratorUtil.vibrator) != null) { android.util.Log.d(org.catrobat.catroid.utils.VibratorUtil.TAG, "startVibrate()"); org.catrobat.catroid.utils.VibratorUtil.startTime = android.os.SystemClock.uptimeMillis(); org.catrobat.catroid.utils.VibratorUtil.vibrator.vibrate(org.catrobat.catroid.utils.VibratorUtil.MAX_TIME_TO_VIBRATE); android.util.Log.d(org.catrobat.catroid.utils.VibratorUtil.TAG, ("start time was: " + (java.lang.Long.toString(org.catrobat.catroid.utils.VibratorUtil.startTime)))); } <FIXE>
<FIXS> if (hash != null) { lastModifiedMap.put(child, hash); } <FIXE>
<FIXS> org.junit.Assert.assertThat(new hudson.plugins.cigame.GamePublisher().perform(build, createRuleBook(5.0), true, null, null, null), org.hamcrest.CoreMatchers.is(true)); <FIXE>
<FIXS> isCorrectByAtLeastOneIds(new long[]{ 4039279022L , 94401L }, addressResultsDto.getResult(), rawAddress); <FIXE>
<FIXS> private static org.opendaylight.genius.mdsalutil.packet.Ethernet createEthernetPacket(byte[] sourceMAC, byte[] targetMAC, org.opendaylight.genius.mdsalutil.packet.ARP arp) throws org.opendaylight.controller.liblldp.PacketException { <FIXE>
<FIXS> java.io.File file = new java.io.File(((((folder) + "\\") + (fileName)) + ".osz")); <FIXE>
<FIXS> final int referenceToFind) { <FIXE>
<FIXS> if (mDragging) { touchProgress = (touchProgress < 0) ? com.triggertrap.seekarc.SeekArc.INVALID_PROGRESS_VALUE : touchProgress; touchProgress = (touchProgress > (mMax)) ? com.triggertrap.seekarc.SeekArc.INVALID_PROGRESS_VALUE : touchProgress; return touchProgress; }else return -1; <FIXE> <FIXS> <FIXE>
<FIXS> for (int i = Window_Position; (i < ((Window_Size) + (Window_Position))) && (i < ((Packet_Buffer.size()) - 1)); ++i) { <FIXE>
<FIXS> for (int i = 1; i < (razoes.length); i++) { <FIXE> <FIXS> if ((java.lang.Double.compare(razoes[i], menor)) < 0) { <FIXE>
<FIXS> double x = e.getX(); double y = e.getY(); putShape(shapes.newShape(), x, y); <FIXE>
<FIXS> position = new Vector3D(Vector3D.vectorAddition(position, velocity.scalarMultiply(dt))); position = new Vector3D(Vector3D.vectorAddition(position, force.scalarMultiply(((java.lang.Math.pow(dt, 2)) / (2 * (mass)))))); <FIXE>
<FIXS> monitor.startExecute(messageId, null, spoutService); <FIXE> <FIXS> <FIXE>
<FIXS> public static java.io.File findExe(java.io.File root, java.lang.String exe, boolean fail) { <FIXE> <FIXS> if (!fail) return null; <FIXE>
<FIXS> if ((((row <= ((rows) - 3)) && (col <= ((cols) - 3))) && (row >= 0)) && (col >= 0)) { <FIXE>
<FIXS> lejos.robotics.subsumption.Behavior[] bArray = new lejos.robotics.subsumption.Behavior[]{ b1 , b3 , b2 }; <FIXE>
<FIXS> org.apache.lucene.search.TestBHeap.assertHeap(heap, new long[][]{ new long[]{ 99 , 100 } }); <FIXE>
<FIXS> <FIXE>
<FIXS> s += line + "\n"; <FIXE>
<FIXS> <FIXE>
<FIXS> int colP = (point - (rowP * (dim))) - 1; <FIXE>
<FIXS> new org.corpus_tools.salt.util.VisJsVisualizer(uri); <FIXE>
<FIXS> current = ((-1) / lambda) * (java.lang.Math.log((1 - (java.lang.Math.random())))); <FIXE>
<FIXS> <FIXE>
<FIXS> if ((f instanceof net.osmand.plus.download.DownloadIndexesThread.DownloadEvents) && (f.isAdded())) { ((net.osmand.plus.download.DownloadIndexesThread.DownloadEvents) (f)).downloadHasFinished(); <FIXE>
<FIXS> if ((_titleList.getSelectedValue()) == selected) { <FIXE> <FIXS> _recordingTable.setColumnSelectionInterval(0, 0); } <FIXE>
<FIXS> compilationUnits.put(className, unit); <FIXE> <FIXS> <FIXE>
<FIXS> byte[] floorKey = consumingEntries.floorKey(scanStartRow); updateStartRow((floorKey == null ? scanStartRow : floorKey)); <FIXE>
<FIXS> if ((this.inner().subnets()) != null) { for (com.microsoft.azure.management.network.implementation.SubnetInner subnetInner : this.inner().subnets()) { com.microsoft.azure.management.network.implementation.SubnetImpl subnet = new com.microsoft.azure.management.network.implementation.SubnetImpl(subnetInner.name(), subnetInner, this); this.subnets.put(subnetInner.name(), subnet); } <FIXE>
<FIXS> return idList.subList((startIndex - (offset)), java.lang.Math.min(((startIndex - (offset)) + numberOfItems), maxValidIndex)); <FIXE>
<FIXS> for (int currentY = maxY; currentY >= 0; currentY--) { <FIXE>
<FIXS> <FIXE>
<FIXS> bytes.append(((offset) + (net.openhft.chronicle.wire.LongTextReference.VALUE)), value); <FIXE>
<FIXS> (ackSent)++; <FIXE>
<FIXS> if (!(tournamentLce.hasData())) { return false; } net.erikkarlsson.smashapp.common.data.entities.tournament.Tournament tournament = tournamentLce.data(); <FIXE>
<FIXS> <FIXE>
<FIXS> java.lang.System.exit(0); <FIXE>
<FIXS> <FIXE> <FIXS> if ((entity.getUpdate_time()) == null) return ; java.sql.Date date = new java.sql.Date(entity.getUpdate_time().getTime()); entity.setStr_update_time(new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(date)); <FIXE>
<FIXS> this.projectedPosition.x = 0; this.projectedPosition.y = 0; <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> java.lang.String day = splitDate[0]; <FIXE> <FIXS> java.lang.String year = splitDate[2]; <FIXE>
<FIXS> private boolean contains(KdTree.Node node, edu.princeton.cs.algs4.Point2D p) { <FIXE> <FIXS> int cmp = KdTree.compare(p, node); <FIXE> <FIXS> return contains(node.lb, p); <FIXE> <FIXS> return contains(node.rt, p); <FIXE>
<FIXS> if (currRegion == null) { return false; }else { return currRegion.valueEquals(region); } <FIXE>
<FIXS> public java.util.HashMap<java.lang.String, double[]> fetchTrace(int channelNumber) { <FIXE> <FIXS> java.util.HashMap<java.lang.String, double[]> retData = new java.util.HashMap<>(); <FIXE>
<FIXS> org.junit.Assert.assertEquals(false, isLeapYear(2014)); org.junit.Assert.assertEquals(false, isLeapYear(2015)); org.junit.Assert.assertEquals(true, isLeapYear(2016)); org.junit.Assert.assertEquals(false, isLeapYear(2017)); <FIXE>
<FIXS> return "/index.xhtml?faces-redirect=true"; <FIXE>
<FIXS> if (((this.endNode.x) == (node.x)) && ((this.endNode.y) == (node.y))) <FIXE>
<FIXS> result.addProperty("port", port.getPortNumber()); <FIXE>
<FIXS> java.lang.System.out.println((((((((((((("\n" + (this.CUSTOMER_ID)) + " ") + (this.PASSWORD)) + " ") + (this.NAME)) + " ") + (this.getAge())) + " ") + (this.getCreditScore())) + " ") + (this.getChexSystemsScore())) + " ")); <FIXE>
<FIXS> if ((valueClass != null) && (valueClass.isEnum())) { return new com.appmetr.hercules.serializers.EnumSerializer(valueClass); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> dragStart = true; <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> lineShape.add(mPolyline); <FIXE>
<FIXS> while (true) { engine.Server.getLock(); try { game.run(); } catch (java.lang.Exception e) { e.printStackTrace(); } finally { engine.Server.releaseLock(); } try { java.lang.Thread.sleep(game.delayBetweenRuns()); } catch (java.lang.Exception e) { e.printStackTrace(); } } <FIXE>
<FIXS> <FIXE>
<FIXS> protected java.util.Map<java.lang.String, java.util.List<org.apache.kafka.common.TopicPartition>> deepCopy(java.util.Map<java.lang.String, java.util.List<org.apache.kafka.common.TopicPartition>> assignment) { <FIXE>
<FIXS> public org.apollo.game.model.Position add(int deltaX, int deltaY, int deltaZ) { <FIXE>
<FIXS> org.arquillian.cube.kubernetes.impl.utils.ProcessUtil.runCommand(log, configuration.getEnvironmentSetupScriptUrl()); <FIXE>
<FIXS> return ((sheetDragHelper.getCapturedView()) != null) || (super.onTouchEvent(ev)); <FIXE>
<FIXS> if ((object != null) && ((getClass()) == (object.getClass()))) { <FIXE>
<FIXS> if ((cgroup) != null) { cgroup.toXContent(builder, params); } <FIXE>
<FIXS> return (com.mcgame.scdiary.gui.ScreenshotOverlayHandler.OPEN_DURATION) - (this.tickRemaining); <FIXE>
<FIXS> if ((((mask & 8388608) != 0) && (((value) & 8388608) == 0)) || (((mask & 8388608) == 0) && (((value) & 8388608) != 0))) { <FIXE>
<FIXS> <FIXE>
<FIXS> public int colContains(int x, int num) { <FIXE> <FIXS> if ((this.grid[o][x].value) == num) <FIXE>
<FIXS> <FIXE>
<FIXS> java.lang.String status = com.liferay.portal.kernel.util.ParamUtil.getString(actionRequest, "status"); <FIXE> <FIXS> preferences.setValue("status", status); <FIXE>
<FIXS> <FIXE>
<FIXS> com.Ben12345rocks.AdvancedCore.Objects.RewardHandler.getInstance().giveReward(this, str, false, true, false); <FIXE>
<FIXS> return ((itemStack != null) && ((itemStack.getItem()) != null)) && (itemClass.isInstance(itemStack.getItem())) ? itemClass.cast(itemStack.getItem()) : null; <FIXE>
<FIXS> if (((weatherData.getPubDate().getTime()) + (weatherData.getTtl())) > (java.lang.System.currentTimeMillis())) { if (((weatherData.getLastBuildDate().getTime()) + ((15 * 60) * 1000)) > (java.lang.System.currentTimeMillis())) { <FIXE>
<FIXS> double h = roundNumber((a * (java.lang.Math.tan(java.lang.Math.toRadians(alpha)))), 2); <FIXE>
<FIXS> if ((val != null) && (val.contains("${"))) <FIXE>
<FIXS> <FIXE> <FIXS> invokeListenersWithReset(); <FIXE>
<FIXS> if (categoria.getId().equals(java.lang.Integer.parseInt(submittedValue))) { <FIXE> <FIXS> } <FIXE>
<FIXS> vg.civcraft.mc.bettershards.bungee.QueueHandler.queue.get(server).add(pos, uuid); <FIXE>
<FIXS> final java.lang.String ret = uri.toString().replaceAll("&amp;", "&"); return ret.replaceAll("&", "&amp;"); <FIXE>
<FIXS> totalScore += getPointsScored(category, dice); <FIXE> <FIXS> <FIXE>
<FIXS> if ((totalPartCount == 1) && ((partB != null) && (partB > 0))) { <FIXE>
<FIXS> org.junit.Assert.assertEquals(this.file.toPath().toString(), pdf.toString()); <FIXE>
<FIXS> formWorkflowAPIImpl = spy(new org.bonitasoft.forms.server.api.impl.FormWorkflowAPIImpl()); <FIXE> <FIXS> doReturn(bpmEngineAPIUtil).when(formWorkflowAPIImpl).getBpmEngineAPIUtil(); doReturn(processApi).when(bpmEngineAPIUtil).getProcessAPI(session); <FIXE>
<FIXS> <FIXE>
<FIXS> super.paintComponent(g); <FIXE>
<FIXS> if ((com.hedspi.hoangviet.eslrecom.helpers.TestHelper.currentTestDifficulty.equals(Preference.ADVANCE)) || ((com.hedspi.hoangviet.eslrecom.helpers.TestHelper.upperAchivedDifficulty) != null)) { <FIXE> <FIXS> com.hedspi.hoangviet.eslrecom.helpers.TestHelper.lowerAchivedDifficulty = com.hedspi.hoangviet.eslrecom.helpers.TestHelper.currentTestDifficulty; <FIXE>
<FIXS> obj.put("x", p.x); obj.put("y", p.y); obj.put("z", p.z); obj.put("charge", p.charge); <FIXE>
<FIXS> <FIXE>
<FIXS> if ((resource != null) && ((resource.getResourceSet()) != null)) { <FIXE>
<FIXS> if (node != null) { printTree(node.left); java.lang.System.out.print((((((((node.color) == (RBTNode.RED) ? "Color: Red " : "Color: Black ") + "Key: ") + (node.key)) + " Parent: ") + (node.parent.key)) + "\n")); printTree(node.right); <FIXE> <FIXS> <FIXE>
<FIXS> if (((activePlaneList.size()) > 0) && ((freeLaneList = domain.dao.HibernateGeneric.getFreeLanes()) != null)) { <FIXE>
<FIXS> expectedException.expectMessage(ErrorMessage.REGEX_INSTANCE_FAILURE.getMessage("[abc]", thing.getId(), thing.getValue(), resourceType.getName())); <FIXE>
<FIXS> }else { this.newState = false; this.inQueue = false; this.confirmed = true; this.confirmationTime = confirmationTime; this.departureTime = departureTime; <FIXE> <FIXS> <FIXE>
<FIXS> it.grid.storm.filesystem.AclLockPoolElement e = __map.get(pathname); <FIXE>
<FIXS> public static java.util.Collection<java.lang.String> getToolString() { <FIXE>
<FIXS> <FIXE> <FIXS> first = last = new Node(item); else { queues.RandomizedQueue<Item>.Node oldLast = last; last = new Node(item); <FIXE> <FIXS> } <FIXE>
<FIXS> <FIXE>
<FIXS> if ((actionbar) != null) { actionbar.setTitle("搜尋"); actionbar.setDisplayHomeAsUpEnabled(true); } <FIXE>
<FIXS> if (com.google.common.base.Strings.isNullOrEmpty(valueAsString)) { <FIXE>
<FIXS> private float getDesiredZoomLevel(int level) { <FIXE>
<FIXS> if (singleShot) mShotStateStore.storeShot(); <FIXE> <FIXS> <FIXE>
<FIXS> if ((mPlayer) != null) { mPlayer.resumePlayer(); } <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> if ((str.length()) == 0) { return false; } <FIXE>
<FIXS> if (edit == null) { <FIXE> <FIXS> }else { <FIXE> <FIXS> } <FIXE>
<FIXS> java.net.URI uri = org.apache.http.client.utils.URIUtils.createURI(uk.ac.jorum.integration.RestApiBaseTest.apiProtocol, uk.ac.jorum.integration.RestApiBaseTest.apiHost, uk.ac.jorum.integration.RestApiBaseTest.apiPort, ((uk.ac.jorum.integration.RestApiBaseTest.apiMountPoint) + endpoint), queryString, null); <FIXE>
<FIXS> <FIXE>
<FIXS> java.lang.System.out.print("limits in getFollowersIDs: "); <FIXE>
<FIXS> translation = ((com.jme3.math.Vector3f) (capsule.readSavable("translation", null))); if ((translation) == null) { translation = new com.jme3.math.Vector3f(); } <FIXE>
<FIXS> exp = isilonApi.getExport(expId.toString(), zoneName); <FIXE>
<FIXS> java.awt.geom.Rectangle2D.Double rec = new java.awt.geom.Rectangle2D.Double(getCenter().getX(), getCenter().getY(), getRadius(), getRadius()); g2.setColor(getColor()); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> timeSwapBuff = 0L; <FIXE>
<FIXS> public java.util.List find(java.lang.String nativeQuery, java.util.List<java.lang.String> relations, java.lang.Class clazz) { java.util.List<java.lang.Object[]> result = new java.util.ArrayList<java.lang.Object[]>(); <FIXE>
<FIXS> getSupportFragmentManager().beginTransaction().replace(R.id.movie_detail_container, fragment).commit(); <FIXE>
<FIXS> public void updateTimeTaken() { <FIXE>
<FIXS> loginLayout.setVisibility(View.GONE); <FIXE> <FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> return allInformation; <FIXE>
<FIXS> <FIXE>
<FIXS> return new de.zib.vold.common.Key(key.get(0), key.get(1), key.get(2)); <FIXE>
<FIXS> <FIXE> <FIXS> } finally { this.setListAdapter(new com.axelby.podax.ImportSubscriptionActivity.ImportSubscriptionAdapter()); <FIXE>
<FIXS> int taskId = tasknote.parser.Parser.getUpdateTaskId(userCommand, true); <FIXE>
<FIXS> public boolean monsterExist(game.zork.Monster monster, java.util.Map<game.zork.GameMap.Coordination, java.util.ArrayList<java.lang.Object>> mapLevel) { <FIXE>
<FIXS> c.put(1, 1); c.put(2, 4); <FIXE> <FIXS> c.put(3, 9); <FIXE>
<FIXS> org.assertj.core.api.Assertions.assertThat(new org.corpus_tools.pepper.core.ModuleFitnessChecker().checkFitness(module).getFitness(FitnessFeature.HAS_DESCRIPTION)).isEqualTo(true); <FIXE>
<FIXS> }else capacity = originalCapacity; <FIXE>
<FIXS> if (line != null) player.sendMessage(ru.simsonic.rscMinecraftLibrary.Bukkit.GenericChatCodes.processStringStatic(((ru.simsonic.rscFirstJoinDemo.API.Settings.chatPrefix) + line))); <FIXE>
<FIXS> return -1; <FIXE> <FIXS> return 1; <FIXE>
<FIXS> out.add(st.getContext().stringValue()); <FIXE>
<FIXS> <FIXE>
<FIXS> while (!(parentComponent.equals(comp))) { <FIXE>
<FIXS> return ((int) (difference)) / (((24 * 60) * 60) * 1000); <FIXE>
<FIXS> return i + 1; <FIXE>
<FIXS> return new org.apache.commons.lang.builder.HashCodeBuilder().append(username).append(firstName).append(lastName).append(email).append(active).append(country).append(sendReminder).toHashCode(); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> public boolean equals(java.lang.Object obj) throws java.lang.NullPointerException { <FIXE> <FIXS> if (obj != null) { <FIXE> <FIXS> <FIXE>
<FIXS> getSupportFragmentManager().beginTransaction().replace(id, fragment).addToBackStack(null).commit(); <FIXE>
<FIXS> if (binOp) { if (((getLastChar()) != ' ') && ((op.charAt(0)) != ',')) { append(" "); } append(op); <FIXE> <FIXS> }else { append(op); <FIXE>
<FIXS> if (rs == null) { return 0; } <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> public static java.util.Optional<com.hartwig.healthchecks.boggs.healthcheck.prestasts.PrestatsCheck> getByDescription(@org.jetbrains.annotations.NotNull final java.lang.String description) { <FIXE>
<FIXS> final int resultOnHalfExponent = com.jwetherell.algorithms.mathematics.Exponentiation.fastRecursiveExponentiationModulo(base, (exponent / 2), mod); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> attrs.typAttr.set(funCall, ((compiler.phase.seman.FunTyp) (typ)).resultTyp); <FIXE>
<FIXS> return ((("config.rcs.mnc" + mnc) + ".mcc") + mcc) + ".pub.3gppnetwork.org"; <FIXE>
<FIXS> }).first(); <FIXE>
<FIXS> if ((cd) == 1) { i = (i) + 1; setImage((("st" + ((i) % 4)) + ".png")); } <FIXE>
<FIXS> game.Player.lastDir = 3; <FIXE> <FIXS> game.Player.lastDir = 4; <FIXE> <FIXS> game.Player.lastDir = 1; <FIXE> <FIXS> game.Player.lastDir = 2; <FIXE>
<FIXS> error = true; <FIXE>
<FIXS> if ((link.getGear1()) != null) { link.getGear1().setLink(null); } if ((link.getGear2()) != null) { link.getGear2().setLink(null); } <FIXE>
<FIXS> this.mutate(newPopulation); <FIXE>
<FIXS> if (!(text.trim().equals(""))) { <FIXE>
<FIXS> if (org.apache.stratos.autoscaler.pojo.policy.PolicyManager.deploymentPolicyListMap.containsKey(deploymentPolicy.getDeploymentPolicyID())) { <FIXE>
<FIXS> java.lang.System.out.println(s); <FIXE> <FIXS> counter += 1; <FIXE>
<FIXS> if ((propSupport) != null) { propSupport.firePropertyChange("listName", oldListName, listName); } <FIXE>
<FIXS> org.junit.Assert.assertEquals(response.getEntity().toString(), httpCode, response.getStatus()); <FIXE>
<FIXS> } while (msec > 0 ); <FIXE>
<FIXS> handler.removeCallbacksAndMessages(null); handler.postDelayed(new java.lang.Runnable() { @java.lang.Override public void run() { executeTask(); } }, 500); <FIXE>
<FIXS> int k = 0; <FIXE> <FIXS> if (k == 0) { com.example.saathi.Student c = d.getValue(com.example.saathi.Student.class); java.lang.String nameVal = c.getName(); java.lang.String emailVal = mFirebaseAuth.getCurrentUser().getEmail(); userName.setText(nameVal); userEmail.setText(emailVal); k++; } <FIXE>
<FIXS> assert e.getKey().isAbsolute(); assert e.getValue().isAbsolute(); <FIXE>
<FIXS> <FIXE>
<FIXS> public java.math.BigInteger getNum(int k, cz.tomkren.fishtron.types.Type t_NF) { <FIXE>
<FIXS> public java.lang.String getAccountsUrl(java.lang.String deploymentUrl, java.lang.String username) { <FIXE>
<FIXS> if ((toAdd != null) && (!(toAdd.equals("")))) { <FIXE>
<FIXS> com.example.maaus.template.org.opencv.android.OpenCVLoader.initAsync(org.opencv.android.OpenCVLoader.OPENCV_VERSION_3_3_0, this, mLoaderCallback); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> return null; <FIXE>
<FIXS> if (col <= ((board[0].length) - 3)) { <FIXE>
<FIXS> final boolean open = camera.open(cameraIndex); <FIXE>
<FIXS> newAccountNum = newAccountNumber(); <FIXE>
<FIXS> return new gregtech.api.interfaces.ITexture[]{ Textures.BlockIcons.MACHINE_CASINGS[mTier][(aColorIndex + 1)] , aSide != aFacing ? new gregtech.api.objects.GT_RenderedTexture(Textures.BlockIcons.OVERLAY_TELEPORTER_ACTIVE) : com.github.technus.tectech.thing.metaTileEntity.single.GT_MetaTileEntity_DebugStructureWriter.MARK }; <FIXE>
<FIXS> enterConditionalStmt(ctx.if_stmt(), ctx.stmt(), this::enterStmt); <FIXE>
<FIXS> assertEquals("ThirdLine", testListener.getNextEventAsLine().getLine()); <FIXE>
<FIXS> for (int y = 0; y < (matrix.getHeight()); y++) { for (int x = 0; x < (matrix.getWidth()); x++) { <FIXE>
<FIXS> return new org.infinispan.io.GridInputStream(file, data); <FIXE>
<FIXS> <FIXE>
<FIXS> body = body.trim(); <FIXE>
<FIXS> java.lang.String name = backupName; <FIXE> <FIXS> name = org.apache.commons.io.FilenameUtils.removeExtension(backupName); <FIXE> <FIXS> return isLocal ? new java.io.File(getBackupDir(), name) : new java.io.File(BackupConstants.RESTORE_DIR, name); <FIXE>
<FIXS> if (((mudmap2.Mudmap2.copy_places) == null) || (mudmap2.Mudmap2.copy_places.isEmpty())) return false; if (((mudmap2.Mudmap2.copy_place_locations) != null) && (layer != null)) { <FIXE>
<FIXS> com.github.fishio.logging.TxtFileHandler handler2 = new com.github.fishio.logging.TxtFileHandler(new com.github.fishio.logging.TimeStampFormat(), new java.io.File(folder.getRoot(), filename)); <FIXE> <FIXS> org.junit.Assert.assertEquals(handler, handler2); <FIXE>
<FIXS> mMaxVelocity = android.view.ViewConfiguration.get(context).getScaledMaximumFlingVelocity(); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> actionBar.setTitle("News Search"); <FIXE>
<FIXS> <FIXE>
<FIXS> if ((((_articleId) != null) || ((_classPK) != 0)) && (com.liferay.mobile.screens.context.SessionContext.isLoggedIn())) { <FIXE>
<FIXS> java.lang.System.out.println(easy.SearchA2DMatrix.searchMatrix(new int[][]{ new int[]{ 1 , 3 , 5 , 7 } , new int[]{ 10 , 11 , 16 , 20 } , new int[]{ 23 , 30 , 34 , 50 } }, 23)); <FIXE>
<FIXS> com.addressbook.thorrism.addressbook.DroidBook.hideKeyboard(mCurrentEdit, getApplicationContext()); <FIXE>
<FIXS> public java.lang.String getMultiVector() { <FIXE>
<FIXS> dayPicker.setValue(1); <FIXE> <FIXS> dayPicker.setValue(1); yearPicker.setValue(1); <FIXE>
<FIXS> aabb = aabb.expandToContain(memberLocation); <FIXE>
<FIXS> org.newdawn.slick.Image image = mock(org.newdawn.slick.Image.class); <FIXE>
<FIXS> <FIXE> <FIXS> java.lang.System.out.println(); <FIXE>
<FIXS> <FIXE>
<FIXS> return ((int) (java.lang.Math.abs(((seed) % max_exclusive)))); <FIXE>
<FIXS> try { com.mbi.EqualityAsserter asserter = new com.mbi.EqualityAsserter(); asserter.assertEquals(new org.json.JSONArray(actual.asString()), asserter.objectsToArray(expected), mode, ignore); } finally { setDefault(); } <FIXE>
<FIXS> mActivity.startActivityForResult(intent, MainActivity.REQUEST_ADD); <FIXE>
<FIXS> roi.setPosition(roiPosition); overlay.add(roi); <FIXE>
<FIXS> <FIXE> <FIXS> break; <FIXE>
<FIXS> <FIXE> <FIXS> mAudioService.executeAction(Constants.Action.ACTION_PLAY); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> if (!(queue.isEmpty())) { <FIXE>
<FIXS> batch.draw(cannonTextureRegion, ((xpos) - ((width) / 2.0F)), ((ypos) - ((height) / 2.0F)), ((width) / 2.0F), ((height) / 2.0F), width, height, 1, 1, angle, true); <FIXE>
<FIXS> java.lang.System.out.println(config); <FIXE>
<FIXS> if (com.studygoal.jisc.Managers.NetworkManager.getInstance().updateProfileImage(url)) { <FIXE>
<FIXS> if (((this.listMovies) != null) && ((this.listMovies.size()) > 0)) { if ((getItem(((getItemCount()) - 1))) == null) { this.listMovies.remove(((getItemCount()) - 1)); notifyItemRemoved(getItemCount()); } <FIXE>
<FIXS> public calendar.EventProvider newEventProvider(java.lang.String group_name, int group_id, db.Site site, db.DBConnection db) { <FIXE>
<FIXS> newTexts.put(ctx, (((s1 + "\n") + (blank)) + "retv")); <FIXE>
<FIXS> org.opendaylight.yang.gen.v1.urn.opendaylight.table.types.rev131026.table.feature.prop.type.table.feature.prop.type.wildcards.WildcardSetfield wildcardSetField = propType.getWildcardSetfield(); <FIXE>
<FIXS> this.setAdapter(); <FIXE>
<FIXS> <FIXE>
<FIXS> return distance <= ((size) / (agentIsSized ? 1 : 2)); <FIXE>
<FIXS> _comboNameBox.setSelectedBeanByName(_curAction.getDeviceName()); <FIXE> <FIXS> _actionComboNamePanel.remove(1); _actionComboNamePanel.add(_comboNameBox, null, 1); <FIXE>
<FIXS> protected boolean getKeepEditorOnClickDisabledRows(org.json.JSONObject gridElem) { <FIXE>
<FIXS> modules.add(m); <FIXE>
<FIXS> item.setIcon(getResources().getDrawable(R.mipmap.ic_star_white_24dp)); <FIXE> <FIXS> item.setIcon(getResources().getDrawable(R.mipmap.ic_star_outline_white_24dp)); <FIXE>
<FIXS> if (this.matches.isEmpty()) { return matches; } <FIXE>
<FIXS> <FIXE>
<FIXS> supportId = createSupport(literal, citationId, null); <FIXE>
<FIXS> attendance = new com.team2.android.proctor.model.input.Attendance(); <FIXE>
<FIXS> if (calendarFragment != null) calendarFragment.hideCalendarView(); <FIXE>
<FIXS> protected java.time.LocalDate parseStringToDate(java.lang.String inputDateStr, java.lang.String inputPattern, java.time.chrono.Chronology inputChronology) { <FIXE>
<FIXS> if ((httpCallback) != null) { <FIXE> <FIXS> this.httpCallback.onResolve(new com.google.gson.Gson().fromJson(t.string(), this.httpCallback.getType())); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> org.nlamah.QL.Model.Form.Abstract.FormQuestion value = ((org.nlamah.QL.Model.Form.Abstract.FormQuestion) (object)); <FIXE> <FIXS> return false; }else { if (!(super.equals(object))) { return false; } if (!(object instanceof org.nlamah.QL.Model.Form.Abstract.FormQuestion)) { return false; } return true; <FIXE> <FIXS> <FIXE>
<FIXS> return ((((((((((("ContactData{" + "id=") + (id)) + ", lastname='") + (lastname)) + '\'') + ", firstname='") + (firstname)) + '\'') + ", mobilePhone='") + (mobilePhone)) + '\'') + '}'; <FIXE>
<FIXS> <FIXE> <FIXS> return super.onOptionsItemSelected(item); <FIXE>
<FIXS> if (((currPitInfoIndex) >= 0) && ((currTeam) != null)) { <FIXE>
<FIXS> if (children != null) { for (java.io.File c : children) { r.add(new FileTreeNode(c)); } <FIXE>
<FIXS> this.update(); <FIXE>
<FIXS> <FIXE>
<FIXS> connections.remove(conn); <FIXE>
<FIXS> return (((com.blazingkin.interpreter.variables.Variable.isInteger(line)) || (com.blazingkin.interpreter.variables.Variable.isDouble(line))) || (com.blazingkin.interpreter.variables.Variable.isBool(line))) || (com.blazingkin.interpreter.variables.Variable.isString(line)); <FIXE>
<FIXS> java.lang.String accessToken = arguments.get("accessToken"); <FIXE>
<FIXS> end = ((position) > (end)) ? position : end; <FIXE>
<FIXS> java.util.List<java.lang.Integer> targetList = generateRanNumList(size, choiceRate); <FIXE>
<FIXS> private void placeFoodBlobs() { <FIXE>
<FIXS> final int num = 20; <FIXE> <FIXS> gamelogic.Square[][] grid = new gamelogic.Square[num][num]; <FIXE>
<FIXS> ShareCompat.IntentBuilder.from(activity).setType("text/plain").addEmailTo("").setSubject(title).setStream(android.support.v4.content.FileProvider.getUriForFile(activity, ((org.eyeseetea.malariacare.BuildConfig.APPLICATION_ID) + ".data.database.utils.ExportData"), attached)).setText(data).startChooser(); <FIXE>
<FIXS> protected java.lang.Boolean execute(java.lang.Object... args) throws java.lang.Exception { <FIXE> <FIXS> throw new java.lang.Exception("Cannot delete query", e); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> if ((this.arg) == null) { return new java.util.HashMap(); } <FIXE>
<FIXS> assertEquals("foo", app.items[0].name); <FIXE>
<FIXS> self.getDelegate().didChangeDrawing(self, self.getDrawingData().canUndo(), self.getDrawingData().canRedo()); <FIXE>
<FIXS> <FIXE>
<FIXS> org.apache.hadoop.util.ToolRunner.run(this, otherArgs); <FIXE>
<FIXS> javax.swing.MenuSelectionManager.defaultManager().clearSelectedPath(); <FIXE> <FIXS> <FIXE>
<FIXS> return values[((value) - 1)]; <FIXE>
<FIXS> assertEquals("azure capabilities initialized with incorrect provider", azureMock, provider); assertEquals("getCapabilities doesn't return current capabilities", capabilities, acutalCapabilities); <FIXE>
<FIXS> private void close() { <FIXE>
<FIXS> if (cat != null) { getCatImgUrl(cat); cats.add(cat); } <FIXE>
<FIXS> return matcher.find() ? java.lang.Double.valueOf(matcher.group(0)) : 0; <FIXE>
<FIXS> return 1; <FIXE>
<FIXS> if ((container) != null) container.addView(view); <FIXE>
<FIXS> handleAttack(game.opponent.choseRandomMove(game), game.player); <FIXE>
<FIXS> @java.lang.Override protected java.util.List<input.ExternalEvent> readEvents(int nrof) { <FIXE>
<FIXS> com.inquirer.models.Answer userAnswer = new com.inquirer.models.Answer(); <FIXE>
<FIXS> doExit(); <FIXE>
<FIXS> <FIXE>
<FIXS> notifyCurrentPlayerUpdated(currentPlayer, currentPlayerPosition); <FIXE>
<FIXS> <FIXE>
<FIXS> net.hazmatrobotics.lightshow.coordinators.MainCoordinator.server.start(); <FIXE>
<FIXS> java.lang.Object result = this.executeScript(script, scriptName, lineNumber); <FIXE>
<FIXS> gr8pefish.ironbackpacks.capabilities.player.PlayerDeathBackpackCapabilities.setEquippedBackpack(player, null); <FIXE>
<FIXS> if (val1 == 0) <FIXE>
<FIXS> if (block == null) { continue; } <FIXE>
<FIXS> session.setAttribute("items", items); <FIXE>
<FIXS> outToMNS.write(("Remove-Entry:" + mrn)); <FIXE>
<FIXS> connector = io.joynr.proxy.ConnectorFactory.create(dispatcher, messageSender, proxyParticipantId, result, qosSettings); <FIXE> <FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> unifyOpenTime(prizeLottery.getOpenTime()); <FIXE>
<FIXS> <FIXE>
<FIXS> public synchronized boolean removePlayer(CardGame.User user) { int removeID = -1; <FIXE> <FIXS> if (removeID != (-1)) { players.remove(removeID); return true; }else { return false; } <FIXE>
<FIXS> @org.springframework.web.bind.annotation.RequestMapping(value = "/es/saveEsData/{index}/{type}/{id}") public org.datasays.wes.demo.model.ActionResult saveEsData(@org.springframework.web.bind.annotation.PathVariable(value = "index") java.lang.String index, @org.springframework.web.bind.annotation.PathVariable(value = "type") java.lang.String type, @org.springframework.web.bind.annotation.PathVariable(value = "id", required = false) java.lang.String id, @org.springframework.web.bind.annotation.RequestBody java.lang.Object doc) { <FIXE> <FIXS> java.lang.Object newdoc = esService.index(index, type, id, doc); <FIXE>
<FIXS> private static org.neo4j.kernel.impl.query.TransactionalContext createTransactionalContext(java.lang.String query) { <FIXE>
<FIXS> java.io.File indexDir = java.nio.file.Paths.get(solrHome, coreName, "data").toFile(); <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> synchronized(openFiles) { java.nio.channels.FileChannel fc = openFiles.remove(filePath); if (fc != null) { fc.close(); } <FIXE>
<FIXS> if ((item.getSellIn()) > 0) <FIXE>
<FIXS> return new todo.javier.mera.todolist.model.Task(java.util.UUID.randomUUID().toString(), todoListId, "My Task", todo.javier.mera.todolist.model.TaskStatus.Created, new java.util.Date().getTime(), new java.util.Date().getTime(), todo.javier.mera.todolist.model.Priority.None, todo.javier.mera.todolist.model.Reminder.ON); <FIXE>
<FIXS> org.eclipse.smarthome.automation.core.internal.RuntimeRule r1 = new org.eclipse.smarthome.automation.core.internal.RuntimeRule(rule, template); <FIXE>
<FIXS> <FIXE>
<FIXS> boolean isValid = false; <FIXE> <FIXS> isValid = true; <FIXE> <FIXS> <FIXE>
<FIXS> assertTrue((k.getTotalM = (ngdVaror()) == 6)); <FIXE>
<FIXS> if (haven.GLState.Slot.dirty) { synchronized(haven.GLState.Slot.class) { if (haven.GLState.Slot.dirty) { haven.GLState.Slot.makedeps(haven.GLState.Slot.all); haven.GLState.deplist = new haven.GLState.Slot<?>[haven.GLState.Slot.all.size()]; for (haven.GLState.Slot s : haven.GLState.Slot.all) haven.GLState.deplist[s.depid] = s; haven.GLState.Slot.dirty = false; } } <FIXE>
<FIXS> java.lang.StringBuilder buf = org.eclipse.jetty.util.URIUtil.encodePath(null, path, 0); <FIXE>
<FIXS> return null; <FIXE>
<FIXS> return null; <FIXE> <FIXS> return new pl.karol202.evolution.utils.Vector2(java.lang.Float.parseFloat(vectorElement.getAttribute("x")), java.lang.Float.parseFloat(vectorElement.getAttribute("y"))); <FIXE>
<FIXS> if ((random.nextInt(100)) < (targetPartition.getChannelNonDropProbability(targetChannel))) { <FIXE>
<FIXS> assertEquals(null, doubleLinkedList.find(1)); <FIXE> <FIXS> assertEquals(3, doubleLinkedList.getSize()); assertEquals(1, doubleLinkedList.find(1).getId()); <FIXE>
<FIXS> result.set(i, ((get(i)) * factor)); <FIXE>
<FIXS> double power = ((p[i]) * (q[l])) + (b[l]); <FIXE>
<FIXS> return new org.programmatori.domotica.own.plugin.system.Value(model); <FIXE>
<FIXS> <FIXE>
<FIXS> checkResources(apps[i], false); <FIXE>
<FIXS> chineseExecute(); <FIXE>
<FIXS> ag.remove(); <FIXE>
<FIXS> this.finish(); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> private static java.lang.String getStringResponse(java.io.InputStream is) { <FIXE>
<FIXS> initRecyclerView(savedInstanceState); <FIXE>
<FIXS> n1.clusterService.removeAddress(n2.address, null); n2.clusterService.removeAddress(n1.address, null); <FIXE>
<FIXS> final T framedEdge = frameNewElementExplicit(source.getElement().addEdge(label, destination.getElement()), initializer); <FIXE>
<FIXS> for (core.restaurant.Check c : m_checks) { if ((c.getCustomer()) == customer) { c.setStatus(CheckStatusEnum.Received); c.setChange((amountPaid - cost)); <FIXE>
<FIXS> if (null != report) { return report.getDomainNames(); } <FIXE>
<FIXS> entities.obstacles.Entity e = new entities.obstacles.Entity(tModels.get(eName), 0, mData.get(eName), position, rotX, rotY, rotZ, scale, eName); <FIXE>
<FIXS> mLinesAvaliable.remove(line); <FIXE>
<FIXS> protected void initTableColumns(boolean keepColumnStatus) { <FIXE> <FIXS> initTableColumns(tree, keepColumnStatus); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> @org.gbif.occurrence.persistence.Test <FIXE> <FIXS> assertEquals(1, count); <FIXE>
<FIXS> if (this.isEmpty()) { <FIXE> <FIXS> CurrentPosY = 0; }else if (!(currentNode.nodeText.getText().equals("\n"))) { CurrentPosX = (currentNode.nodeText.getX()) + (java.lang.Math.round(currentNode.nodeText.getLayoutBounds().getWidth())); CurrentPosY = currentNode.nodeText.getY(); }else { CurrentPosX = sg.util.FastLinkedList.MARGIN; } <FIXE>
<FIXS> externalSpecification = getOrderSpecification(testInstrument, OrderCommand.SELL, 0.775); <FIXE>
<FIXS> return (k * (java.lang.Math.log((e / vm)))) + ((vm - k) * (java.lang.Math.log((1.0 - (e / vm))))); <FIXE>
<FIXS> com.fasterxml.jackson.databind.JsonNode atIotLinkPath = node.path(org.n52.shared.sensorthings.decoder.AT_IOT_NEXT_LINK); <FIXE> <FIXS> com.fasterxml.jackson.databind.JsonNode linkPath = node.path(org.n52.shared.sensorthings.decoder.NEXT_LINK); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> if (i.hasNext()) text.append(SearchUtil.SPACE_SEPARATOR); <FIXE>
<FIXS> public void initSubviews() { <FIXE> <FIXS> toggle = new android.support.v7.app.ActionBarDrawerToggle(this, drawerLayout, toolbar, R.string.navigation_drawer_open, R.string.navigation_drawer_close); <FIXE>
<FIXS> throw new com.netflix.spinnaker.fiat.providers.ProviderException(this.getClass(), e.getCause()); <FIXE>
<FIXS> private int getValidLineNumber(int line, com.intellij.openapi.editor.Document document) { int lineCount = getDocumentLineCount(document); <FIXE>
<FIXS> it.geosolutions.geostore.services.rest.model.UserList ul = geoStoreClient.getUsers(0, 100); <FIXE>
<FIXS> if ((!(canClick)) || (((android.os.SystemClock.elapsedRealtime()) - (lastClickTime)) < 200)) <FIXE>
<FIXS> if ((album) != null) { switch (view.getId()) { case R.id.tv_activity_album_info_artist_name : android.content.Intent intent = new android.content.Intent(this, com.zolotuhinartem.lastfminfo.activities.searched_artists.SearchedArtistsActivity.class); intent.putExtra(SearchedArtistsActivity.ARTIST_NAME, this.album.getArtist()); startActivity(intent); } <FIXE>
<FIXS> before.addAction(com.badlogic.gdx.scenes.scene2d.actions.Actions.sequence(com.badlogic.gdx.scenes.scene2d.actions.Actions.fadeOut(((duration) / 2)), com.badlogic.gdx.scenes.scene2d.actions.Actions.run(new java.lang.Runnable() { <FIXE>
<FIXS> value = newValue; <FIXE>
<FIXS> public void openChat(android.view.View view) { <FIXE>
<FIXS> while (!(cs.isLast())) { <FIXE>
<FIXS> if ((listToSetBottomOf.size()) < 11) { <FIXE> <FIXS> listBottom = listTopPos + 10; <FIXE>
<FIXS> <FIXE>
<FIXS> com.actemium.basicTvx_sdk.GlobalObjectManager.instance.persistanceManager.closeHttpClient(); <FIXE>
<FIXS> tail.setX(breadCrumbsList.get(length).getX()); tail.setY(breadCrumbsList.get(length).getY()); body.add(length, tail); <FIXE>
<FIXS> <FIXE>
<FIXS> int chosenPokemon = 0; <FIXE> <FIXS> break; <FIXE>
<FIXS> public int getIndexDoc(final java.lang.String filePath) { <FIXE> <FIXS> if (docs[di].getDocLoc().getPath().contains(filePath)) <FIXE>
<FIXS> transitionPairs.push(transitionPair); <FIXE> <FIXS> <FIXE>
<FIXS> if (req.getContextPath().isEmpty()) { <FIXE>
<FIXS> org.isoron.uhabits.utils.Ringtone ringtone = getRingtone(context, ringtoneUri); <FIXE>
<FIXS> document.append("name", "duplicated_code").append("occurences", process(parsers, repositoryPath)); <FIXE>
<FIXS> private void removeSavedArticle(com.rocdev.guardianreader.models.Article article) { <FIXE>
<FIXS> double res; <FIXE>
<FIXS> <FIXE>
<FIXS> return groups; <FIXE>
<FIXS> <FIXE>
<FIXS> default : break; <FIXE>
<FIXS> fout.flush(); fout.close(); <FIXE>
<FIXS> session.removeAttribute("notification"); <FIXE>
<FIXS> l.add(i, get(i)); <FIXE>
<FIXS> com.example.loan.model.LoanApplicationResult loanApplication = this.service.loanApplication(application); <FIXE>
<FIXS> prettyPrinter.reset(); <FIXE>
<FIXS> org.junit.Assert.assertEquals(false, simpleComparator.areObjectsEqual(org.opendaylight.openflowplugin.applications.statistics.manager.impl.helper.FlowComparatorFactoryTest.statsFlow, org.opendaylight.openflowplugin.applications.statistics.manager.impl.helper.FlowComparatorFactoryTest.nullFlow)); <FIXE>
<FIXS> return (blockAccess.getTileEntity(x, y, z)) != null ? getTileMeta(blockAccess.getTileEntity(x, y, z).getWorldObj(), x, y, z) : 0; <FIXE>
<FIXS> return ((((((((("EntitySet [entityTypeId=" + (entityTypeId)) + ", name=") + (name)) + ", id=") + (id)) + ", title=") + (title)) + ", description=") + (description)) + "]"; <FIXE>
<FIXS> <FIXE>
<FIXS> com.microsoftopentechnologies.intellij.helpers.azure.sdk.AzureSDKManagerImpl.apiManagerADAuth = new com.microsoftopentechnologies.intellij.helpers.azure.sdk.AzureSDKManagerADAuthDecorator((com.microsoftopentechnologies.intellij.helpers.azure.sdk.AzureSDKManagerImpl.apiManager = new com.microsoftopentechnologies.intellij.helpers.azure.sdk.AzureSDKManagerImpl())); <FIXE>
<FIXS> result -= (systemCoefficients[firstIndex][k]) * (systemCoefficients[secondIndex][k]); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> for (int j = 0; j < (SIZE_OF_NOTES_ARRAY); j++) { <FIXE>
<FIXS> mClearGLWindow.close(); <FIXE>
<FIXS> if ((!(this.manager.isRunning())) || (!(valid()))) { return ; <FIXE> <FIXS> manager.debugInfo((("Connecting to " + (this.name)) + " ...")); new de.mickare.xserver.net.ConnectionObj(manager.getSocketFactory(), host, port, this, manager); <FIXE>
<FIXS> e.printStackTrace(); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> editText.setText(0); <FIXE>
<FIXS> for (int i = lastNewLinePositionIndex; i > (-1); i--) { <FIXE>
<FIXS> inputStream.close(); <FIXE>
<FIXS> public void shuffleDeck() { <FIXE>
<FIXS> <FIXE> <FIXS> org.json.JSONObject object = array.get(0); <FIXE>
<FIXS> modelConfig.getTrain().setGridConfigFileContent(ml.shifu.shifu.util.CommonUtils.loadFileContent(modelConfig.getTrain().getGridConfigFile(), sourceType)); <FIXE>
<FIXS> mStatusBarLockedOnSecureKeyguard = (Settings.Secure.getIntForUser(resolver, Settings.Secure.STATUS_BAR_LOCKED_ON_SECURE_KEYGUARD, 0, UserHandle.USER_CURRENT)) == 1; <FIXE>
<FIXS> <FIXE>
<FIXS> }else { close(); <FIXE> <FIXS> <FIXE>
<FIXS> com.midoreigh.midopicker.CameraKitFragment.setConfig(com.midoreigh.midopicker.ImagePickerActivity.getConfig()); <FIXE>
<FIXS> <FIXE>
<FIXS> if ((mRunnables.size()) == 0) { <FIXE>
<FIXS> org.junit.Assert.assertNotNull(policyConfiguration); <FIXE>
<FIXS> if ((connection.get(new Models.LocationPair(l1, mid))) && (connection.get(new Models.LocationPair(mid, l2)))) <FIXE>
<FIXS> while ((iterator > 0) && ((array[iterator]) == null)) { <FIXE>
<FIXS> if (config.contains(ConfigProperty.EXECUTION_LOG_HISTORY)) { <FIXE> <FIXS> <FIXE>
<FIXS> if (!(this.fixed)) { this.bind(mx, my); }else { <FIXE> <FIXS> <FIXE>
<FIXS> return ((fredboat.audio.player.PlayerLimitManager.limit) < 0) || ((fredboat.audio.player.PlayerRegistry.getPlayingPlayers().size()) < (fredboat.audio.player.PlayerLimitManager.limit)); <FIXE>
<FIXS> <FIXE>
<FIXS> dbHelper.deleteUserArtist(dbHelper.getWritableDatabase(), artist.getArtistId()); <FIXE> <FIXS> mArtists.remove(position); notifyDataSetChanged(); <FIXE>
<FIXS> resolver.applyBatch(AbstractContract.CONTENT_AUTHORITY, new de.elanev.studip.android.app.backend.net.sync.ContactGroupsHandler(response).parse()); <FIXE>
<FIXS> removeDanceSequence(danceSequenceID, selectedBeatElem.getBeatPosition(), ((selectedBeatElem.getBeatPosition()) + (mDanceSequences.get(danceSequenceID).getLength()))); <FIXE>
<FIXS> int index = (key.hashCode()) % (this.valueTable.length); <FIXE>
<FIXS> public com.mycompany.dao.Doctor addDoctor(com.mycompany.dao.Doctor doctor) { <FIXE> <FIXS> return doctor; <FIXE>
<FIXS> mDrawerLayout.closeDrawers(); <FIXE> <FIXS> <FIXE>
<FIXS> java.lang.System.out.print("limits in showUser: "); <FIXE>
<FIXS> final int index = GamePanel.RANDOM.nextInt(this.keys.size()); final com.gamesbykevin.breakout.ball.Balls.Key tmp = this.keys.get(index); <FIXE>
<FIXS> if ((input[1].matches(".*[^1-9].*")) && (!(input[1].contains("0")))) { <FIXE>
<FIXS> }else { metaData.duration = (locations.get(((locations.size()) - 1)).getTimestamp()) - (locations.get(0).getTimestamp()); <FIXE> <FIXS> <FIXE>
<FIXS> org.junit.Assert.assertEquals(anotherSet, mySet); <FIXE>
<FIXS> url = addQueryParams(url, createBaseParams(), false); <FIXE>
<FIXS> <FIXE>
<FIXS> this.errorWarningUpdateListener.actionPerformed(new java.awt.event.ActionEvent(this, java.awt.event.ActionEvent.ACTION_PERFORMED, null)); <FIXE> <FIXS> this.errorWarningUpdateListener.actionPerformed(new java.awt.event.ActionEvent(this, java.awt.event.ActionEvent.ACTION_PERFORMED, null)); <FIXE> <FIXS> <FIXE>
<FIXS> startActivity(new android.content.Intent(this, com.example.xmppchatsampleproject.ChatOptionActivity.class)); <FIXE> <FIXS> <FIXE>
<FIXS> java.lang.String[] configurations = getArrayProperty("email.supported.envs", null); <FIXE> <FIXS> if ((configurations == null) || ((configurations.length) == 0)) { <FIXE>
<FIXS> <FIXE>
<FIXS> if (seconds < 0) seconds = 0; if (minutes < 0) minutes = 0; <FIXE>
<FIXS> if ((utils.GFBF.BFLexicon.contains(word)) || (!(utils.GFBF.GFLexicon.contains(word)))) <FIXE>
<FIXS> <FIXE>
<FIXS> return index.query(query.getOperands(), query.getContext().getApplication().getConfiguration().getEnabledReadSources(), query.getContext().getSelection().or(com.metabroadcast.common.query.Selection.all())); <FIXE>
<FIXS> if (isWrittenOnReturn(pv)) { return java.util.EnumSet.of(de.uni_freiburg.informatik.ultimate.modelcheckerutils.smt.predicates.CallReturnPyramideInstanceProvider.Instance.BEFORE_RETURN); }else { return java.util.EnumSet.of(de.uni_freiburg.informatik.ultimate.modelcheckerutils.smt.predicates.CallReturnPyramideInstanceProvider.Instance.BEFORE_RETURN, de.uni_freiburg.informatik.ultimate.modelcheckerutils.smt.predicates.CallReturnPyramideInstanceProvider.Instance.AFTER_RETURN); } <FIXE>
<FIXS> algorithmChanged(false); <FIXE> <FIXS> <FIXE>
<FIXS> double stdv = 1.0 / (java.lang.Math.sqrt(((grads.dims[1]) * (grads.dims[2])))); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> word += makeWord(); <FIXE>
<FIXS> if (receivedCommTuple == null) <FIXE>
<FIXS> if (editor.canPlace(vine, origin, dir)) { greymerk.roguelike.worldgen.blocks.Vine.setOrientation(vine, dir); vine.set(editor, origin); <FIXE>
<FIXS> throw new com.lagopusempire.basicupdater.DuplicateUpdateException(updates.remove(from), update); <FIXE>
<FIXS> super.onResume(savedInstanceState); <FIXE>
<FIXS> org.junit.Assert.assertEquals("note", result.getColumnName()); <FIXE>
<FIXS> org.junit.Assert.assertTrue(failureMessage, newF.getStructure().isAlternative()); <FIXE>
<FIXS> if (itemClicked == (R.id.item_Help)) { <FIXE>
<FIXS> org.junit.Assert.assertEquals(Orientation16.SSW, Orientation16.SSW.rotate(Axis.Y, 0)); <FIXE>
<FIXS> return inputMessage instanceof org.springframework.messaging.Message ? new org.springframework.integration.support.EnhancedErrorMessage(throwable, ((org.springframework.messaging.Message<?>) (inputMessage))) : new org.springframework.messaging.support.ErrorMessage(throwable); <FIXE>
<FIXS> if ((mNfcFingerprints) != null) { mNfcFingerprint = org.sufficientlysecure.keychain.ui.util.KeyFormattingUtils.convertFingerprintToHex(mNfcFingerprints); byte[] fp = new byte[20]; java.nio.ByteBuffer.wrap(fp).put(mNfcFingerprints, 0, 20); mNfcFingerprint = org.sufficientlysecure.keychain.ui.util.KeyFormattingUtils.convertFingerprintToHex(fp); } <FIXE>
<FIXS> if (!(com.therandomlabs.curseapi.Curse.isCurseProjectNoRedirect(com.therandomlabs.utils.network.NetworkUtils.getRedirectedURL(url)))) { <FIXE>
<FIXS> return ((it.unibo.alchemist.boundary.gui.view.SingleRunApp.Parameter.PARAMETER_NAME_START) + (valueNameCouple.v1())) + (valueNameCouple.v2().equals("") ? "" : (it.unibo.alchemist.boundary.gui.view.SingleRunApp.Parameter.PARAMETER_NAME_END) + (valueNameCouple.v2())); <FIXE>
<FIXS> public void setup(org.bukkit.entity.Player p, java.lang.String id, java.lang.String name, java.lang.String option, int step, org.bukkit.block.Block b) { <FIXE>
<FIXS> position = -1; <FIXE> <FIXS> <FIXE>
<FIXS> if (answer.equals(members[memberNum])) { <FIXE>
<FIXS> if ((crypto) != null) { dest.writeByteArray(crypto.iv); dest.writeByteArray(crypto.key); dest.writeInt(crypto.mode); dest.writeIntArray(crypto.numBytesOfClearData); dest.writeIntArray(crypto.numBytesOfEncryptedData); dest.writeInt(crypto.numSubSamples); } <FIXE>
<FIXS> <FIXE> <FIXS> logConnectReqeustList(); <FIXE>
<FIXS> if (!caseSensitive) <FIXE>
<FIXS> appengineButton.click(); java.util.List<com.google.cloud.tools.eclipse.appengine.libraries.model.Library> selectedLibraries = getSelectedLibrariesSorted(); org.junit.Assert.assertNotNull(selectedLibraries); org.junit.Assert.assertThat(selectedLibraries.size(), org.hamcrest.CoreMatchers.is(1)); org.junit.Assert.assertThat(selectedLibraries.get(0).getId(), org.hamcrest.CoreMatchers.is("appengine-api")); <FIXE>
<FIXS> getActivity().finish(); <FIXE>
<FIXS> org.apache.catalina.tribes.Member[] members = this.members; if ((members.length) > 0) { <FIXE> <FIXS> for (int i = 0; (i < (members.length)) && (result == null); i++) { <FIXE>
<FIXS> <FIXE>
<FIXS> private java.lang.String createFullUrl(final java.lang.String url, final java.util.Map<java.lang.String, java.lang.Object> params) { <FIXE> <FIXS> for (java.util.Map.Entry<java.lang.String, java.lang.Object> paramEntry : params.entrySet()) { fullUrl = addParameter(fullUrl, paramEntry.getKey(), paramEntry.getValue().toString()); <FIXE>
<FIXS> if ((node != null) && (node != (Node.NULL))) { <FIXE> <FIXS> } <FIXE>
<FIXS> if (!(com.joenee.web.rest.ea.EaDecrypt.isDecrypt)) { <FIXE>
<FIXS> java.lang.String projectId = tokens[0]; <FIXE>
<FIXS> <FIXE> <FIXS> return 0.5 * ((t * t) * ((((amount) + 1) * t) - (amount))); <FIXE> <FIXS> return 0.5 * ((((t -= 2) * t) * ((((amount) + 1) * t) + (amount))) + 2); <FIXE>
<FIXS> <FIXE>
<FIXS> return new com.w9jds.marketbot.classes.models.MarketHistory.Builder().setAveragePrice(history.getAveragePrice()).setHighPrice(history.getHighPrice()).setLowPrice(history.getLowPrice()).setRecordDate(history.getDate()).setVolume(history.getVolume()).build(); <FIXE>
<FIXS> if (id == null) return null; <FIXE>
<FIXS> if ((g == null) || ((g.getGlossaryState()) == null)) { }else { resumeGlossaryState(g); } <FIXE>
<FIXS> <FIXE>
<FIXS> float[] result = new float[tableColumnWidth.length]; <FIXE> <FIXS> result[i] = (tableColumnWidth[i]) + (com.itextpdf.layout.minmaxwidth.MinMaxWidthUtils.getEps()); <FIXE>
<FIXS> return clanTagProvider.getClanTag(pPlayer.getName()); <FIXE> <FIXS> java.lang.String clanTag = clanTagProvider.getClanTag(pPlayer.getName()); <FIXE>
<FIXS> protected static org.eclipse.dawnsci.analysis.api.fitting.functions.IParameter[] createParameters(int numberOfParameters) { <FIXE>
<FIXS> return new org.spongepowered.api.command.args.CommandElement[]{ org.spongepowered.api.command.args.GenericArguments.optionalWeak(org.spongepowered.api.command.args.GenericArguments.requiringPermission(org.spongepowered.api.command.args.GenericArguments.onlyOne(org.spongepowered.api.command.args.GenericArguments.player(org.spongepowered.api.text.Text.of(playerKey))), permissions.getPermissionWithSuffix("other"))) , org.spongepowered.api.command.args.GenericArguments.optional(org.spongepowered.api.command.args.GenericArguments.onlyOne(org.spongepowered.api.command.args.GenericArguments.bool(org.spongepowered.api.text.Text.of(b)))) }; <FIXE>
<FIXS> GUI.removeStone(deadStones.getY(), deadStones.getX()); <FIXE>
<FIXS> if ((acc != null) && (repositories.BCrypt.checkpw(account.getPassword(), acc.getPassword()))) { <FIXE>
<FIXS> if (!(emailFile.isDirectory())) { if (!(emailFile.isHidden())) { emailFiles.add(emailFile); } <FIXE>
<FIXS> return ; <FIXE>
<FIXS> android.app.PendingIntent sender = android.app.PendingIntent.getBroadcast(com.project.nghicv.readingbook.RBApp.getInstance(), 0, intent, PendingIntent.FLAG_CANCEL_CURRENT); <FIXE>
<FIXS> public static java.lang.String getAddPropertyDetailsData(java.lang.String address, java.lang.String propertyAge, int PropertyResidentialOrCommercial, java.lang.String typeOfProperty, java.lang.String postCode) { <FIXE>
<FIXS> return node(RL.key, node(node.key, L, RL.left), node(R.key, RL.right, R.right)); <FIXE>
<FIXS> private void setMapStyle(int style) { <FIXE>
<FIXS> <FIXE>
<FIXS> if ((timer.getTick()) > 0) { <FIXE>
<FIXS> }else { java.lang.String newAcctData = (user + " ") + pass1; connectNewUser(newAcctData); <FIXE> <FIXS> <FIXE>
<FIXS> break; <FIXE> <FIXS> break; } <FIXE>
<FIXS> this.imageUri = imageUri; <FIXE>
<FIXS> context = parent.getContext(); <FIXE>
<FIXS> <FIXE> <FIXS> (is_finish[0])++; <FIXE>
<FIXS> <FIXE>
<FIXS> if (resolver == null) { return null; } <FIXE>
<FIXS> if ((user == null) || ((mCheckList) == null)) { <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> if (temp) { <FIXE>
<FIXS> this.name = name; <FIXE>
<FIXS> assertEquals(virtualMachines.size(), 0); <FIXE>
<FIXS> if (((schedule.getAssignedEndDate()) == null) || (schedule.getAssignedEndDate().toLocalDate().isAfter(date))) { <FIXE>
<FIXS> updateChat(false); <FIXE>
<FIXS> if ((connectionPool) != null) { connectionPool.release(connection); }else { connection.close(); } connection = null; <FIXE>
<FIXS> _network.removeNode(new cofh.lib.util.position.BlockPosition(xCoord, yCoord, zCoord, d).step(d), true); <FIXE>
<FIXS> model.addAttribute("exercises", em.filterExercise(label, label, title, label, true)); <FIXE> <FIXS> model.addAttribute("exercises", em.filterExercise(label, label, label, title, false)); <FIXE>
<FIXS> builder.command().add(1, "-A"); <FIXE>
<FIXS> if (!(recursion_guard_(b, l, "cypher"))) <FIXE> <FIXS> int c = current_position_(b); <FIXE> <FIXS> if (!(empty_element_parsed_guard_(b, "cypher", c))) <FIXE> <FIXS> c = current_position_(b); <FIXE>
<FIXS> <FIXE> <FIXS> gameCamera = new com.codeclan.gfx.GameCamera(handler, 100, 200); <FIXE>
<FIXS> public boolean add(com.ivstuart.tmud.person.carried.Money money) { <FIXE> <FIXS> return true; <FIXE> <FIXS> list.add(new com.ivstuart.tmud.person.carried.Money(money)); return false; <FIXE>
<FIXS> g.drawImage(com.townrpg.core.tile.Tiles.getSprites().crop(1, 1, 1, 1), ((int) (x)), ((int) (y)), null); <FIXE>
<FIXS> if (((outputArtifact.getArtifactName()) != null) && (!(outputArtifact.getArtifactName().isEmpty()))) { <FIXE>
<FIXS> }else { currentState.put(column, new org.hibernate.ogm.datastore.spi.TupleOperation(column, value, PUT)); <FIXE> <FIXS> <FIXE>
<FIXS> de.be4.classicalb.core.parser.rules.PPredicate ifCondition = new de.be4.classicalb.core.parser.rules.ANotEqualPredicate(createIdentifier(ctName), new de.be4.classicalb.core.parser.rules.AEmptySetExpression()); <FIXE>
<FIXS> sum += (diff * diff) / length; <FIXE>
<FIXS> ctx.drawImage(com.google.gwt.dom.client.ImageElement.as(new com.google.gwt.user.client.ui.Image(url).getElement()), offsetX, offsetY, imageWidth, imageHeight); <FIXE>
<FIXS> replacePlayingSong(); <FIXE>
<FIXS> result.addAll(getSystemPropertiesFromPostTaskActionData(task.getPostTaskActionData(), relevantTransformers, task.getName())); <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> final com.carlocation.comm.messaging.AuthMessage authMsg = new com.carlocation.comm.messaging.AuthMessage(username, pwd, AuthMessage.AuthMsgType.AUTH_LOGOUT_MSG); <FIXE>
<FIXS> if ((t.getText()) != null) { values.add(java.lang.Double.parseDouble(t.getText().toString())); }else { return null; } <FIXE>
<FIXS> int time = (params[0]) + 1; <FIXE> <FIXS> <FIXE>
<FIXS> if (array == null) { <FIXE> <FIXS> android.graphics.Bitmap bitmap = convertByteArrayToBitmap(array); if (bitmap == null) { profilePic.setImageResource(defaultPic); }else { profilePic.setImageBitmap(bitmap); bitmap.recycle(); } <FIXE>
<FIXS> this.r = r; <FIXE>
<FIXS> return false; <FIXE>
<FIXS> io.fabric.sdk.android.Fabric.with(this, new com.crashlytics.android.Crashlytics()); <FIXE> <FIXS> <FIXE>
<FIXS> android.util.Log.d(interdroid.swan.crossdevice.swanplus.bluetooth.BTManager.TAG, ("added new device " + (device.getName()))); <FIXE> <FIXS> <FIXE>
<FIXS> invalidateUI(alphaValue, hexColor, true); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> if ((!(config.get(ft).isActive())) || (!(pa.isPointActive(ft)))) <FIXE> <FIXS> correspondence.add(ft); <FIXE>
<FIXS> html = html.replace("&", "&amp;"); <FIXE>
<FIXS> if (map == null) return ; <FIXE>
<FIXS> aliceserver.startup(true); <FIXE>
<FIXS> <FIXE>
<FIXS> final java.lang.String result = grammarNameGenerator.generateName(i); org.junit.Assert.assertTrue(((result.length()) <= i)); org.junit.Assert.assertTrue(((result.length()) > 0)); <FIXE>
<FIXS> <FIXE>
<FIXS> if (currentIndex < ((usedListModel.size()) - 1)) { <FIXE>
<FIXS> if (((selection) == 1) || (!(description.equals("")))) { <FIXE>
<FIXS> boolean conditionIsTrue(utilties.models.Game game, int id) { int data1 = getData(this.data1, game, id); int data2 = getData(this.data2, game, id); <FIXE>
<FIXS> java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.InputStreamReader(java.lang.System.in)); while (!(isReady(reader.readLine()))) { java.lang.System.out.print(prompt); } <FIXE>
<FIXS> if ((mapList[i][0].equals(path)) || (((mapList[i][0]) + "/").equals(path))) { <FIXE>
<FIXS> assertEquals(inTimeZone.getCalendar().getTimeInMillis(), (1000000 - (((2 * 60) * 60) * 1000))); <FIXE>
<FIXS> private Item[] toArray() { <FIXE>
<FIXS> if (!(contents.equals(""))) { contents += "\n"; } <FIXE> <FIXS> editor.putString(day, (contents + (data.substring(0, ((data.length()) - 13))))); <FIXE>
<FIXS> fromDate = null; <FIXE> <FIXS> toDate = null; <FIXE>
<FIXS> if ((table) == null) return ; <FIXE>
<FIXS> final org.springframework.cache.guava.GuavaCacheManager gcm = new org.springframework.cache.guava.GuavaCacheManager(); final com.google.common.cache.CacheBuilder<java.lang.Object, java.lang.Object> builder = com.google.common.cache.CacheBuilder.newBuilder(); <FIXE> <FIXS> <FIXE>
<FIXS> switch (requestCode) { case me.esca.fragments.CookFragment.REQUEST_EXTERNAL_STORAGE : { if (((grantResults.length) > 0) && ((grantResults[0]) == (android.content.pm.PackageManager.PERMISSION_GRANTED))) { android.content.Intent photoPickerIntent = new android.content.Intent(android.content.Intent.ACTION_PICK); photoPickerIntent.setType("image/*"); startActivityForResult(photoPickerIntent, RESULT_LOAD_IMG); } } <FIXE>
<FIXS> app.park.com.vr.VrVideoActivity.isGameOver = false; <FIXE> <FIXS> <FIXE>
<FIXS> return ; <FIXE>
<FIXS> if ((validate()) != null) { stateListener.stateChanged(false); } <FIXE>
<FIXS> mLocationOption.setOnceLocation(true); <FIXE> <FIXS> <FIXE>
<FIXS> this.view.setSelectedStudentIndex((i + 1)); <FIXE> <FIXS> this.view.setSelectedStudentIndex(0); fireStudentSelectedEvent(null); <FIXE>
<FIXS> <FIXE> <FIXS> indi.yume.tools.adapter_renderer.recycler.RendererAdapter.notifyItemRangeRemoved(fromPosition, itemCount); <FIXE>
<FIXS> <FIXE> <FIXS> android.util.Log.d(com.lognsys.kalrav.LoginActivity.TAG, ("Rest invokeFCMService KalravApplication.getInstance().getPrefs().getDevice_token() " + (com.lognsys.kalrav.util.KalravApplication.getInstance().getPrefs().getDevice_token()))); <FIXE>
<FIXS> this.pieces.put(piece.getPieceType(), typePieces); <FIXE>
<FIXS> if (o != null) { <FIXE>
<FIXS> approvalWarned = true; }else { approvalWarned = false; <FIXE>
<FIXS> private void takeFromInternalBuffer(backtype.storm.tuple.Tuple input) { <FIXE> <FIXS> process(new backtype.storm.tuple.TupleImpl(context, ((java.util.List<java.lang.Object>) (nextReady.getO())), input.getSourceTask(), input.getSourceStreamId())); <FIXE>
<FIXS> java.lang.System.out.println(("key of order changed in database " + key1)); <FIXE>
<FIXS> <FIXE>
<FIXS> t.transform(source, new javax.xml.transform.stream.StreamResult(obuf)); <FIXE>
<FIXS> list = new java.util.ArrayList<>(texts); <FIXE> <FIXS> <FIXE>
<FIXS> try (org.postgresql.core.BaseConnection c = clb.connect()) { final org.postgresql.copy.CopyManager cm = new org.postgresql.copy.CopyManager(c); <FIXE>
<FIXS> int start = (mNachoTextView.getText().length()) - (communication.length()); <FIXE>
<FIXS> <FIXE>
<FIXS> if ((id) != (other.id)) <FIXE>
<FIXS> fireInputChanged(getUiReference().getText(), index); <FIXE>
<FIXS> if ((((currValue) == null) || ((currValue) == "0")) && (c != "C")) { <FIXE>
<FIXS> java.lang.System.out.println(((("Get: " + (java.lang.Thread.currentThread().getName())) + " From ") + (bucket.getToken()))); <FIXE>
<FIXS> <FIXE>
<FIXS> new java.lang.Thread(() -> workWithSocket(socket)).start(); <FIXE> <FIXS> <FIXE>
<FIXS> agr.preparePayment(this, vendorID, vendorSecretKey, accountID, java.lang.Integer.parseInt(amount)); <FIXE>
<FIXS> synchronized(m) { for (java.util.List<org.projectfloodlight.openflow.protocol.instruction.OFInstruction> list : m.keySet()) { java.lang.Integer i = m.get(list); if ((i.intValue()) == label) { m.remove(list); break; } <FIXE>
<FIXS> org.junit.Assert.assertEquals("INSERT COINS", vendingMachine.check_display()); org.junit.Assert.assertEquals("$0.10", vendingMachine.check_coin_return()); <FIXE>
<FIXS> buf.append(org.springframework.ui.freemarker.FreeMarkerTemplateUtils.processTemplateIntoString(freemarkerConfiguration.getTemplate("fm_template.txt"), model)); <FIXE>
<FIXS> if ((moveLocation) < (this.getx())) { <FIXE> <FIXS> if ((moveLocation) > (this.getx())) { <FIXE>
<FIXS> if (resultCode == (android.app.Activity.RESULT_OK)) { loadData(); listView.getAdapter().notifyDataSetChanged(); } break; <FIXE>
<FIXS> if (o instanceof char[]) { return this.tagCode.equals(((char[]) (o))); <FIXE>
<FIXS> <FIXE>
<FIXS> while (((application.VirtualCursor.getCurrentElement(application.VirtualCursor.gridPane)) != null) && ((((javafx.scene.control.Label) (application.VirtualCursor.getCurrentElement(application.VirtualCursor.gridPane))).getText().charAt(0)) == ' ')) { <FIXE>
<FIXS> if (barcode == null) { return new int[0]; } <FIXE>
<FIXS> if ((bundle != null) && ((bundle.get("Puzzle")) != null)) { <FIXE>
<FIXS> org.junit.Assert.assertSame(fileSystem, other); <FIXE>
<FIXS> if (mapSize == 0) { out.iterator.putNextShortUnsigned(0); }else { engine.network.packet.Packet gndContent = gndData.getContentPacket(); out.iterator.putNextShortUnsigned(gndContent.getSize()); out.iterator.putNextContentPacket(gndContent); } <FIXE>
<FIXS> return ; <FIXE>
<FIXS> if ((i + 1) == (_numIterations)) { _queue.AddToQueue(message, _listener); }else { _queue.AddToQueue(message); } <FIXE> <FIXS> <FIXE>
<FIXS> java.lang.System.out.println(true); <FIXE>
<FIXS> public lv.ailab.lvtb.universalizer.conllu.UDv2Relations advSitToUD(org.w3c.dom.Node aNode) throws javax.xml.xpath.XPathExpressionException { <FIXE> <FIXS> warn(aNode); <FIXE>
<FIXS> channelMap.put(v[0], java.lang.Integer.valueOf(v[1])); <FIXE>
<FIXS> cm.setFrom(from.trim().toLowerCase()); <FIXE> <FIXS> userService.putMessage(to.toLowerCase(), cm); <FIXE>
<FIXS> fw.write((str + "\n")); <FIXE>
<FIXS> @org.junit.Test public void testPreLoadClasses_classNotFound() throws java.lang.Exception { <FIXE>
<FIXS> <FIXE>
<FIXS> }else if ((numThreads != 1) && (numThreads != 0)) { throw new org.encog.neural.networks.training.TrainingError((("The Hessian object in use(" + (this.hessian.getClass().toString())) + ") does not support multi-threaded mode.")); } <FIXE>
<FIXS> bot.sendMessage((((("Type /" + ((game.gameId) - 1)) + " success or /") + ((game.gameId) - 1)) + " fail"), game.pendingMissionPlayers.get(i).id); <FIXE>
<FIXS> if (property.isNullable()) { <FIXE>
<FIXS> toolbarsContainer.removeAllViews(); <FIXE> <FIXS> <FIXE>
<FIXS> if ((users[(number + 1)]) != null) send(new Message(Message.TYPE_DISCONNECT, number, ((users[(number + 1)]) + " disconnected"), users[(number + 1)])); users[(number + 1)] = null; <FIXE>
<FIXS> protected static boolean waitNotification() { <FIXE>
<FIXS> gnu.trove.map.TIntObjectMap<java.lang.Object> initial = org.cf.smalivm.VMTester.buildRegisterState(0, new short[1], 1, 0, 2, ((short) (66))); <FIXE>
<FIXS> int ct = 1; <FIXE>
<FIXS> net.anyflow.lannister.message.OutboundMessageStatus status = outboundMessageStatuses.get(messageId); <FIXE>
<FIXS> if (map == null) return ; <FIXE>
<FIXS> if ((par1ItemStack.getItemDamage()) == 0) { <FIXE>
<FIXS> fiches = (fiches) - (puntata); <FIXE>
<FIXS> java.lang.System.out.println(fullname); java.lang.System.out.println(address); java.lang.System.out.println(age); <FIXE>
<FIXS> android.content.Intent create = new android.content.Intent(this, com.example.csanders.getfit.Views.Create.class); create.putExtras(bundle); startActivity(create); <FIXE>
<FIXS> newScope = block.allocScope(newScope); context.pushScope(newScope); <FIXE>
<FIXS> type(s); <FIXE>
<FIXS> if (0 <= nbPools) <FIXE>
<FIXS> java.lang.Object entry) { <FIXE>
<FIXS> public org.apache.commons.math3.linear.RealMatrix getCovariance(java.util.List<? extends macrobase.datamodel.HasMetrics> data) { <FIXE> <FIXS> return new org.apache.commons.math3.stat.correlation.Covariance(ret, false).getCovarianceMatrix(); <FIXE>
<FIXS> java.lang.String idExcel) throws java.lang.Exception { java.util.List<com.trainingSystem.controller.ExcelModel> excelModels = ((java.util.List<com.trainingSystem.controller.ExcelModel>) (test.get(idExcel))); <FIXE>
<FIXS> if (downVotedTrack < (mQueueElementList.size())) { if (((((threshold) + (mQueueElementList.get(downVotedTrack).upvoteList.size())) - (mQueueElementList.get(downVotedTrack).downvoteList.size())) <= 0) || (((MainActivity.mWifiDirectActivity.ipsOnNetwork.size()) + 1) == 1)) { deleteTrack(downVotedTrack); } <FIXE>
<FIXS> java.io.ObjectOutputStream oos; <FIXE>
<FIXS> <FIXE>
<FIXS> returnString += s; <FIXE>
<FIXS> for (int a = 0; a <= targetIndex; a++) { <FIXE>
<FIXS> <FIXE>
<FIXS> if ((parameters) != null) { parameters = reusable.swapParameters(parameters); parameterCount = reusable.getParameterCount(); } <FIXE>
<FIXS> <FIXE>
<FIXS> background = new renderer.Background(0, 0, this, currentLevel.getImageData(0)); <FIXE>
<FIXS> <FIXE> <FIXS> pr.set(java.lang.String.valueOf(tmppr)); <FIXE>
<FIXS> <FIXE>
<FIXS> acelY = yForces / (mass); <FIXE>
<FIXS> <FIXE>
<FIXS> return ; <FIXE>
<FIXS> end = ((position) > (end)) ? position : end; <FIXE>
<FIXS> resultingTokens.add(newToken); <FIXE>
<FIXS> if ((this.byteChar) == 0) { <FIXE>
<FIXS> if ((toastWidget) != null) { toastWidget.flash(); } <FIXE>
<FIXS> <FIXE> <FIXS> mMulticastSocket.leaveGroup(mMulticastAddress); <FIXE> <FIXS> mMulticastSocket.close(); mMulticastSocket = null; <FIXE>
<FIXS> _sut.removeThing(thing.getId()); <FIXE>
<FIXS> playerList.remove(null); <FIXE>
<FIXS> this.body.setTransform((((spawnPosition.x) + ((getWidth()) / 2.0F)) / (com.greenbatgames.rubyred.util.Constants.PTM)), (((spawnPosition.y) + ((getHeight()) / 2.0F)) / (com.greenbatgames.rubyred.util.Constants.PTM)), 0.0F); <FIXE>
<FIXS> return em.createQuery("SELECT c from Contract c WHERE c.endDate BETWEEN :pointOne AND :pointTwo order by c.endDate desc", com.lftechnology.vyaguta.resource.entity.Contract.class).setParameter("pointOne", pointOne).setParameter("pointTwo", pointTwo).getResultList(); <FIXE>
<FIXS> if (pictures != null) { for (java.util.Map.Entry<java.lang.String, java.lang.String> entry : pictures.entrySet()) { day.addPicture(entry.getKey(), entry.getValue()); } <FIXE>
<FIXS> private static <T> java.lang.Class<T>[] getParameterTypes(java.lang.Object... propertyValues) { <FIXE>
<FIXS> com.bumptech.glide.Glide.with(this).load(imageUrl).bitmapTransform(new com.example.mjokic.quizapp.utils.GlideCircleTransformation(this)).into(((android.widget.ImageView) (findViewById(R.id.navDrawerAvatar)))); <FIXE>
<FIXS> size = y; <FIXE>
<FIXS> if ((position <= 0) || ((nodes) <= 0)) return ; <FIXE>
<FIXS> try { T result = f.apply(api); return result; } finally { api.close(); } <FIXE>
<FIXS> adapter.addFragment(ua.te.hackathon.smartcity2015.ui.intro.IntroFragment.newInstance(R.color.green)); <FIXE>
<FIXS> geogebra.common.awt.Shape shapeCommon = (shape instanceof geogebra.common.euclidian.GeneralPathClipped) ? ((geogebra.common.euclidian.GeneralPathClipped) (shape)).getGeneralPath() : shape; if (!(shapeCommon instanceof geogebra.common.awt.geogebra.web.awt.Shape)) { <FIXE> <FIXS> } <FIXE>
<FIXS> contourControl = new gov.anl.ipns.ViewTools.Components.ViewControls.CompositeContourControl(getContourPanel(), minValue, maxValue, numLevels, levels, showManualControls); <FIXE>
<FIXS> for (int i = minCharge; i <= (maxCharge); i++) { <FIXE>
<FIXS> isFlashOn = false; if (((camera) == null) || ((params) == null)) { return ; <FIXE> <FIXS> params = camera.getParameters(); params.setFlashMode(Camera.Parameters.FLASH_MODE_OFF); camera.setParameters(params); camera.stopPreview(); isFlashOn = false; imgButtonOnOff.setImageResource(R.drawable.ic_flash_off); <FIXE>
<FIXS> if ((org.talend.core.model.properties.impl.ProcessItemImpl.class) == (item.getClass())) { <FIXE>
<FIXS> if (timeRequirement < 0) { <FIXE>
<FIXS> final java.util.List<org.jocean.http.Feature> unioned = new java.util.ArrayList<>((null != features1 ? java.util.Arrays.asList(features1) : java.util.Collections.<org.jocean.http.Feature>emptyList())); <FIXE> <FIXS> if (!(unioned.contains(toadd))) { unioned.add(toadd); } <FIXE>
<FIXS> return startingText; <FIXE>
<FIXS> public java.util.List<lt.ru.lexio.db.Word> build(int wordCount, int page, java.util.Date toDate, lt.ru.lexio.ui.training.TrainingWordOrder wordOrder, lt.ru.lexio.ui.training.TrainingType trainingType) { <FIXE>
<FIXS> return next.get(k); <FIXE>
<FIXS> startResultsActivity(results); <FIXE>
<FIXS> public static com.dabsquared.gitlabjenkins.trigger.handler.merge.MergeRequestHookTriggerHandler newMergeRequestHookTriggerHandler(boolean triggerOnMergeRequest, com.dabsquared.gitlabjenkins.trigger.TriggerOpenMergeRequest triggerOpenMergeRequest, boolean skipWorkInProgressMergeRequest) { <FIXE> <FIXS> return new com.dabsquared.gitlabjenkins.trigger.handler.merge.MergeRequestHookTriggerHandlerImpl(com.dabsquared.gitlabjenkins.trigger.handler.merge.MergeRequestHookTriggerHandlerFactory.retrieveAllowedStates(triggerOnMergeRequest, triggerOpenMergeRequest), skipWorkInProgressMergeRequest); <FIXE>
<FIXS> }else { activeInstIdx = -1; return false; <FIXE> <FIXS> <FIXE>
<FIXS> ar.com.tzulberti.archerytraining.fragments.tournament.ViewSerieInformationFragment practiceTestingFragment = ar.com.tzulberti.archerytraining.fragments.tournament.ViewSerieInformationFragment.createInstance(tournamentSerie); <FIXE>
<FIXS> java.lang.Long date_firstLaunch = java.lang.System.currentTimeMillis(); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> brushDialog.getWindow().setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT)); <FIXE>
<FIXS> return hu.akarnokd.rxjava2.basetypes.Solo.onAssembly(new hu.akarnokd.rxjava2.basetypes.SoloDoOnLifecycle<T>(this, hu.akarnokd.rxjava2.basetypes.Functions.emptyConsumer(), hu.akarnokd.rxjava2.basetypes.Functions.emptyConsumer(), hu.akarnokd.rxjava2.basetypes.Functions.emptyConsumer(), Functions.EMPTY_ACTION, onAfterTerminate, hu.akarnokd.rxjava2.basetypes.Functions.emptyConsumer(), Functions.EMPTY_LONG_CONSUMER, Functions.EMPTY_ACTION)); <FIXE>
<FIXS> org.assertj.core.api.Assertions.assertThat(new org.corpus_tools.pepper.core.ModuleFitnessChecker().checkFitness(module).getFitness(FitnessFeature.HAS_SUPPLIER_CONTACT)).isEqualTo(false); <FIXE>
<FIXS> return new org.springframework.http.ResponseEntity(testRunResults, org.springframework.http.HttpStatus.OK); <FIXE>
<FIXS> return (standardsDropListValues.getElement().isOrHasChild(com.google.gwt.dom.client.Element.as(target))) || (standardsDropListValues.getElement().isOrHasChild(com.google.gwt.dom.client.Element.as(target))); <FIXE>
<FIXS> android.content.Intent dialogIntent = new android.content.Intent(ctx, com.android.anurag.notesapp.AlertDialog.class); <FIXE>
<FIXS> private boolean isDuplicateInCurrCategory(java.util.HashSet<com.transformuk.bdt.domain.CrawledContent> currContentSet, com.transformuk.bdt.domain.CrawledContent newContent) { <FIXE>
<FIXS> <FIXE>
<FIXS> for (java.lang.String s : JSQL.table.get(tableName).get(ID).keySet()) { JSQL.table.get(tableName).get(ID).put(s, null); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> finish(); <FIXE> <FIXS> finish(); <FIXE>
<FIXS> public com.example.alex.androidclient.models.DailyStatistics getDailyStatisticsForSite(int siteId, java.util.Date startDate, java.util.Date finishDate) throws org.json.JSONException { <FIXE> <FIXS> com.example.alex.androidclient.models.DailyStatistics dailyStatsForSite = null; <FIXE>
<FIXS> <FIXE>
<FIXS> if ((monkey != null) && (filer != null)) { synchronized(monkey) { long ai = MapStore.INSTANCE.get(filer, monkey, keyBytes); if (ai > (-1)) { return ((V) (values[((int) (ai))])); } <FIXE> <FIXS> <FIXE> <FIXS> return null; <FIXE>
<FIXS> public java.util.List<java.lang.Long> getMembersList() { java.util.List<java.lang.Long> memberLists = new java.util.ArrayList<java.lang.Long>(); if ((this.members.length()) <= 0) return memberLists; <FIXE> <FIXS> for (int i = 0; i < (list.length); i++) memberLists.add(java.lang.Long.parseLong(list[i])); <FIXE>
<FIXS> double degreeOfFreedom = dataset.length; <FIXE>
<FIXS> java.util.Map apple2 = new java.util.Map("2apples.txt"); java.util.Map apple10 = new java.util.Map("10apples.txt"); <FIXE> <FIXS> java.lang.System.out.println(solve2.getDist()); java.lang.System.out.println(solve10.getDist()); <FIXE>
<FIXS> if (min > max) { min = 0; max = 0; } <FIXE>
<FIXS> assertFalse(testQuestion1.generateOption(4).checkEquals(testQuestion1.getCorrectAnswer())); <FIXE>
<FIXS> org.mockito.Mockito.verify(mockApproveUserAccessModal).configure(entityBundle); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> isSwipeRefresh = false; <FIXE>
<FIXS> java.lang.String date = owo.npc.taipeitechrefined.utility.Utility.getDateString("yyyy-MM-dd", java.util.Calendar.getInstance().getTime(), context); <FIXE>
<FIXS> return (v != null) && (v.equals(e.getValue())); <FIXE>
<FIXS> return ((((this.x) <= ((other.x) + (other.sizeX))) && (((this.x) + (this.sizeX)) >= (other.x))) && ((this.y) <= ((other.y) + (other.sizeY)))) && (((this.y) + (this.sizeY)) >= (other.y)); <FIXE>
<FIXS> int[] n = new int[]{ 100 }; <FIXE>
<FIXS> <FIXE>
<FIXS> } catch (java.io.IOException e) { e.printStackTrace(); <FIXE>
<FIXS> <FIXE>
<FIXS> if (aboutTextDTO == null) aboutTextDTO = new edu.asu.spring.quadriga.dto.AboutTextDTO(); <FIXE>
<FIXS> double classifiedPositive = 0.0; double classifiedNegative = 0.0; <FIXE>
<FIXS> invalidate(); return true; }else { <FIXE> <FIXS> invalidate(); return false; } <FIXE>
<FIXS> throw new java.lang.IllegalStateException(org.sonar.batch.bootstrap.WSLoader.FAIL_MSG, serverException); <FIXE> <FIXS> <FIXE>
<FIXS> token = am.getAuthorizationToken(admin, password, ""); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> init(); <FIXE>
<FIXS> <FIXE> <FIXS> java.util.Set<java.lang.Integer> set = new java.util.HashSet<>(); <FIXE>
<FIXS> if ((selectedRows.length) == 0) return ; <FIXE>
<FIXS> <FIXE> <FIXS> javax.servlet.http.HttpServletRequest request = ((javax.servlet.http.HttpServletRequest) (req)); javax.servlet.http.HttpServletResponse response = ((javax.servlet.http.HttpServletResponse) (res)); <FIXE>
<FIXS> mClearGLWindow.setFullscreen(false); <FIXE> <FIXS> <FIXE> <FIXS> mLastWindowWidth = mClearGLWindow.getWindowWidth(); mLastWindowHeight = mClearGLWindow.getWindowHeight(); <FIXE>
<FIXS> totalFare += dropOffCharge; totalFare += distance * pricePerFifthMile; <FIXE>
<FIXS> if ((remoteVideoView) != null) { org.webrtc.VideoRenderer remouteRenderer = new org.webrtc.VideoRenderer(new com.quickblox.videochat.webrtc.view.VideoCallBacks(remoteVideoView, QBGLVideoView.Endpoint.REMOTE)); videoTrack.addRenderer(remouteRenderer); remoteVideoView.setVideoTrack(videoTrack, QBGLVideoView.Endpoint.REMOTE); android.util.Log.d("Track", "onRemoteVideoTrackReceive() is raned"); } <FIXE>
<FIXS> public java.lang.String newLoan(@cz.muni.fi.pa165.controller.RequestParam(required = false) java.lang.Long bookId, @cz.muni.fi.pa165.controller.RequestParam(required = false) java.lang.Long memberId, org.springframework.ui.Model model) { if (bookId != null) { <FIXE> <FIXS> if (memberId != null) { <FIXE>
<FIXS> parseScheduleJSON(); <FIXE>
<FIXS> moves = moves.subList(0, n); <FIXE>
<FIXS> return (((x > (main.SessionController.HITBOX_X.getFirst())) && (x < (main.SessionController.HITBOX_X.getSecond()))) && (y > (main.SessionController.HITBOX_Y.getFirst()))) && (y < (main.SessionController.HITBOX_Y.getSecond())); <FIXE>
<FIXS> Model.Grupa odabranaGrupa; if ((query.list().size()) > 0) { odabranaGrupa = ((Model.Grupa) (query.list().get(0))); }else { odabranaGrupa = null; } <FIXE>
<FIXS> org.envirocar.server.mongo.entity.MongoPasswordReset status = this.passwordResetDao.getPasswordResetStatus(user, verificationCode); <FIXE>
<FIXS> if ((arg0.end) > (arg1.end)) <FIXE> <FIXS> if ((arg1.end) > (arg0.end)) <FIXE>
<FIXS> if (!(inventoryContents[i].isEmpty())) { <FIXE>
<FIXS> toggleUserLocation(true); <FIXE>
<FIXS> private void fillCart(int elementPosition, int commandCount, java.lang.String type) { fr.upmc.ihm.restmenu.ImageItem item = getData(commandCount, type).get(elementPosition); <FIXE> <FIXS> if (inCart(elementPosition, commandCount, type)) { <FIXE>
<FIXS> <FIXE>
<FIXS> return ((numVisits) - (player1Value)) / ((numVisits) + (epsilon)); <FIXE>
<FIXS> if (newVersion >= (at.pardus.android.webview.gm.store.ScriptStoreSQLite.ScriptDbHelper.DB_SCHEMA_VERSION_2)) { db.execSQL(at.pardus.android.webview.gm.store.ScriptStoreSQLite.ScriptDbHelper.TBL_REQUIRE_CREATE); db.execSQL(at.pardus.android.webview.gm.store.ScriptStoreSQLite.ScriptDbHelper.TBL_RESOURCE_CREATE); }else { android.util.Log.e(at.pardus.android.webview.gm.store.ScriptStoreSQLite.TAG, (((("Unexpected database upgrade from version" + oldVersion) + " to ") + newVersion) + ". No known upgrade path")); <FIXE>
<FIXS> skillName[0] = "Tackle"; <FIXE> <FIXS> setButtonText(skillName[0], skillPower[0], skillAgility[0], skillSpeed[0], defaultSkill); <FIXE>
<FIXS> if (net.royqh.easypersist.utils.TypeUtils.isRangeTypeProperty(singleProperty)) { return true; <FIXE> <FIXS> return false; <FIXE>
<FIXS> collideables.stream().flatMap(( c1) -> collideables.stream().map(( c2) -> makePair(c1, c2))).filter(( pair) -> (pair.distance()) < (limit)).forEach(( pair) -> pair.collide(provider)); <FIXE>
<FIXS> <FIXE> <FIXS> i.cfUpdate(c, clear); <FIXE>
<FIXS> void execute(final java.util.List<org.sleuthkit.autopsy.ingest.IngestServiceAbstract> services, final org.sleuthkit.datamodel.Image image) { java.util.List<org.sleuthkit.datamodel.Image> images = new java.util.ArrayList<org.sleuthkit.datamodel.Image>(); <FIXE>
<FIXS> if (account == null) { return null; } <FIXE>
<FIXS> <FIXE>
<FIXS> for (int x = 0; x <= (com.waterfall.thomaswatson.theprovider.PlayerArea.blockXAmount); x++) { for (int y = 0; y < (com.waterfall.thomaswatson.theprovider.PlayerArea.blockYAmount); y++) { com.waterfall.thomaswatson.theprovider.Block block = new com.waterfall.thomaswatson.theprovider.Block(context); block.setXPosition(x); block.setYPosition(y); blocks.add(block); <FIXE> <FIXS> <FIXE>
<FIXS> return null; <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> sendMessageToRegisteredListeners(dataMessage, tekdaqc.getSerialNumber()); <FIXE>
<FIXS> if ((offset + byteCount) > (_bytes.length)) { <FIXE>
<FIXS> options.addOption(org.apache.commons.cli.Option.builder(shortOptionName.orElse(null)).longOpt(longOptionName).hasArg().required(required).desc(description).build()); <FIXE>
<FIXS> throw new com.orientechnologies.orient.core.index.OIndexException(((("Invalid key for index: " + (param[0])) + " cannot be converted to ") + (keyType)), e); <FIXE>
<FIXS> if (originAction == null) { return null; } <FIXE>
<FIXS> cloned.involvedVariables = new java.util.HashSet<java.lang.String>(); <FIXE>
<FIXS> <FIXE> <FIXS> out.writeInt(((high) - (low))); <FIXE>
<FIXS> info.setRank((1 / ((double) (nodeCount)))); <FIXE>
<FIXS> java.util.Map<java.lang.String, java.lang.String> keyValueMap = com.github.rtyley.android.screenshot.paparazzo.OnDemandScreenshotService.keyValueMapFor(logLine); <FIXE>
<FIXS> <FIXE> <FIXS> return ; <FIXE> <FIXS> org.junit.Assert.fail("bucket should have been removed"); <FIXE>
<FIXS> modelAndView.addObject("drink", drinkService.findById(id)); <FIXE>
<FIXS> stack.push(in.replaceAll(regexp, replacement)); }else { <FIXE> <FIXS> <FIXE>
<FIXS> org.magic.api.dao.impl.HsqlDAO.logger.info(((("remove " + mc) + " from ") + collection)); <FIXE>
<FIXS> setValue(parameter); <FIXE>
<FIXS> return new org.springframework.http.ResponseEntity<com.wmanual.jpa.domain.User>(user, org.springframework.http.HttpStatus.OK); <FIXE> <FIXS> return new org.springframework.http.ResponseEntity<com.wmanual.jpa.domain.User>(org.springframework.http.HttpStatus.NOT_FOUND); <FIXE>
<FIXS> private void refreshView() throws com.fsck.k9.mail.MessagingException { <FIXE>
<FIXS> java.lang.System.out.println(a); <FIXE>
<FIXS> <FIXE>
<FIXS> assert (list != null) && ((list.size()) > 0); <FIXE>
<FIXS> java.lang.String date = _dateFormatter.format(reminder.getDueDate().getTime()); <FIXE>
<FIXS> org.apache.wicket.protocol.http.CsrfPreventionRequestCycleListener.log.info("Possible CSRF attack, request URL: {}, Origin: {}, action: aborted with error {} {}", new java.lang.Object[]{ request.getRequestURL() , origin , errorCode , errorMessage }); <FIXE>
<FIXS> public void testInstallGroup() throws java.lang.Exception { <FIXE> <FIXS> mdSalMgr.installGroup(grpEntity1).get(); <FIXE> <FIXS> mdSalMgr.installGroup(grpEntity2).get(); <FIXE>
<FIXS> } catch (java.io.IOException e) { <FIXE>
<FIXS> <FIXE>
<FIXS> return null; <FIXE>
<FIXS> return rootview; <FIXE>
<FIXS> java.util.Map<java.lang.String, java.lang.Object> camera = new java.util.HashMap<>(); <FIXE>
<FIXS> <FIXE> <FIXS> }else if (!(taskState.isFinished())) { return false; } <FIXE>
<FIXS> continue; <FIXE>
<FIXS> <FIXE>
<FIXS> if ((entry.xvalue.compareTo(xvalue)) == 0) { <FIXE>
<FIXS> protected int put(final bee.creative.iam.IAMEncoder.IAMBaseListEncoder list) throws java.lang.NullPointerException { <FIXE>
<FIXS> if (emitted > 0) { rx.internal.operators.OperatorPublish.OriginSubscriber<T> origin = state.getOrigin(); if (origin != null) { long r = origin.originOutstanding.addAndGet((-emitted)); if (r <= (origin.THRESHOLD)) { origin.requestMore(((rx.internal.util.RxRingBuffer.SIZE) - (origin.THRESHOLD))); } <FIXE>
<FIXS> if ((xbox.getRawAxis(2)) != 0.0) return xbox.getRawAxis(2); <FIXE>
<FIXS> <FIXE>
<FIXS> if (vehicleLocations != null) { org.matsim.api.core.v01.Coord coord = link.getCoord(); return vehicleLocations.remove(coord.getX(), coord.getY(), vehicle); } return false; <FIXE>
<FIXS> if ((fragment.getView()) != null) { android.widget.TextView tv1 = ((android.widget.TextView) (fragment.getView().findViewById(R.id.achievementscreen_accelerometer))); tv1.setText((((((("X: " + (acc_1)) + " G, Y: ") + (acc_2)) + " G, Z: ") + (acc_3)) + " G")); } <FIXE>
<FIXS> if ((mAdvancedEditor) != null) { mAdvancedEditor.setText(ss.commentText); } <FIXE>
<FIXS> protected boolean setupPort() { reader = new SimpleRead(); reader.setCommPortId(portNum); reader.read(); reader_thread = new java.lang.Thread(reader); reader_thread.run(); if (debug_messages) java.lang.System.out.println("Port Setup Complete"); return true; <FIXE>
<FIXS> this.white_bridge.setCenter(this.position); this.whiteL.setCenter(this.position); this.whiteR.setCenter(this.position); this.redAnus.setPosition(this.position); this.redCircle.setCenter(this.position); this.whiteSquare.setCenter(this.position); <FIXE>
<FIXS> this.items.remove(item.getName()); <FIXE>
<FIXS> android.widget.ArrayAdapter<java.lang.String> arrayAdapter = new android.widget.ArrayAdapter(this, android.R.layout.simple_list_item_1, list); <FIXE>
<FIXS> shareToQQForMedia(title, summary, targetUrl, s, activity, listener); <FIXE>
<FIXS> @org.bukkit.event.EventHandler <FIXE> <FIXS> yourselvs.dungeons.sessions.Session session = new yourselvs.dungeons.sessions.Session(event.getPlayer().getUniqueId(), event.getDungeon(), event.getTime(), event.getPlayer().getLocation()); <FIXE> <FIXS> <FIXE>
<FIXS> uk.ac.ebi.pwp.structures.quadtree.client.QuadTree<org.reactome.web.diagram.data.interactors.model.DiagramInteractor> tree = interactorsTreeCache.get(resource); <FIXE> <FIXS> interactorsTreeCache.put(resource, tree); <FIXE>
<FIXS> errors.add(((((((gd.grade.name()) + ": too many ") + (c.name)) + " classes") + " on ") + (day.name))); <FIXE>
<FIXS> dataContext.clear(); <FIXE> <FIXS> <FIXE>
<FIXS> return new nben.mesh.registration.AnglePotential(new nben.mesh.registration.InfiniteWellFunction((scale / (3 * (T[0].length))), 0.0, java.lang.Math.PI), nben.mesh.registration.Util.facesToAngles(T), X); <FIXE>
<FIXS> <FIXE>
<FIXS> if ((contains(LevelArrays.MOVE_UP, currentLevel[y][x])) && (allowInput)) { (y)--; move(); startAnimation(0, 0, 0, ((com.ollum.mazecape.Level.width) / 3)); vibrator.vibrate(VIBRATE_SHORT); <FIXE>
<FIXS> <FIXE>
<FIXS> if (com.legacy.aether.common.player.PlayerAether.get(player).accessories.setInventoryAccessory(heldItem.copy())) { heldItem.shrink(1); return new net.minecraft.util.ActionResult<net.minecraft.item.ItemStack>(net.minecraft.util.EnumActionResult.SUCCESS, heldItem); } <FIXE>
<FIXS> left = add; right = add; <FIXE>
<FIXS> if ((net.minecraftforge.oredict.OreDictionary.itemMatches(stack, input, false)) && (ingredient.isItemEqual(this.ingredient))) { <FIXE>
<FIXS> @java.lang.SafeVarargs public static <T> java.util.List<T> async(com.threewks.thundr.gae.objectify.repository.AsyncResult<? extends T>... asyncs) { <FIXE> <FIXS> for (com.threewks.thundr.gae.objectify.repository.AsyncResult<? extends T> async : asyncs) { <FIXE>
<FIXS> int x = getX(); int y = getY(); <FIXE>
<FIXS> boolean expResult = true; <FIXE>
<FIXS> minWayId = wayId; <FIXE>
<FIXS> if (canEnterAll(x, y, true)) { <FIXE>
<FIXS> org.ironrhino.core.cache.CacheInterceptor temp = new org.ironrhino.core.cache.CacheInterceptor(); <FIXE> <FIXS> temp.setCacheManager(cacheManager); temp.setMutex(mutex); temp.setMutexWait(mutexWait); interceptor = temp; <FIXE>
<FIXS> if ((com.jensen.boardgames.othello.model.Othello.getValidMoves(this).length) == 0) { <FIXE>
<FIXS> ps.setInt(1, pos_index); ps.setString(2, sample_id); ps.setBytes(3, pos_array); ps.setBytes(4, base_array); <FIXE>
<FIXS> <FIXE> <FIXS> level.setIndex(currentLevel); <FIXE>
<FIXS> return java.lang.Math.round((((((double) (10)) * lvl) * (java.lang.Math.pow(1.1, lvl))) * tempmod)); <FIXE>
<FIXS> validateAndPopulateReport(hiveDataset.getTable().getCompleteName(), updateTime, rowCounts); <FIXE>
<FIXS> result = (255 - (result * (-1))) + 1; <FIXE>
<FIXS> <FIXE>
<FIXS> assertFalse(set.remove(10)); assertFalse(set.remove(10)); <FIXE>
<FIXS> if (user == null) return false; <FIXE>
<FIXS> java.lang.Long id) { <FIXE>
<FIXS> mv.addObject("json", net.media.adserver.controller.util.JsonPResponse.GSON.toJson(jsonObject)); <FIXE>
<FIXS> return ((((currTime2 > time) && ((date[dooyit.parser.DateTimeParser.DATE_INDEX_DD]) == (currDD))) && ((date[dooyit.parser.DateTimeParser.DATE_INDEX_MM]) == (currMM))) && ((date[dooyit.parser.DateTimeParser.DATE_INDEX_YY]) == (currYY))) && (time != (-1)); <FIXE>
<FIXS> <FIXE>
<FIXS> if ((movieAdapter.mSelectedItem) < 0) { return ; } <FIXE>
<FIXS> return ((this.predicates.isEmpty()) && ((this.limit) == (org.mastik.query.Query.noLimit()))) && ((this.orders) == (org.mastik.query.Query.noOrders())); <FIXE>
<FIXS> java.lang.String location = ((getMappingUrlOfController()) + "/") + (id.toString()); <FIXE>
<FIXS> loadedHtml = response.body().string(); <FIXE>
<FIXS> return germes.utils.TradeUtils.maxMinPrice(history); case HIGH : <FIXE> <FIXS> <FIXE>
<FIXS> if (!(inItems.getStackInSlot(i).isEmpty())) <FIXE>
<FIXS> if (meta != null) { co.cask.cdap.proto.NamespaceConfig config = meta.getConfig(); return (config.getSchedulerQueueName()) != null ? config.getSchedulerQueueName() : getDefaultQueue(); }else { return getDefaultQueue(); } <FIXE>
<FIXS> lastKnownCurrentPage = position; <FIXE>
<FIXS> private static int getTint(final int alpha, final int tintIndex, final net.minecraft.block.state.IBlockState state, final net.minecraft.world.World worldObj, final net.minecraft.util.math.BlockPos blockPos) { <FIXE>
<FIXS> return null; <FIXE>
<FIXS> if (!(isColliding(col, tile))) <FIXE>
<FIXS> wmToCommit.put(kwm.getTopicPartition(), new org.apache.kafka.clients.consumer.OffsetAndMetadata(kwm.getLwm().getValue())); <FIXE>
<FIXS> if (u != null) { gov.nist.auth.hit.core.domain.Account a = accountService.findByTheAccountsUsername(u.getUsername()); if (a != null) { gov.nist.hit.core.api.SessionContext.setCurrentUserId(session, a.getId()); recordLastLoggedInDate(a.getId()); } <FIXE> <FIXS> <FIXE>
<FIXS> if (((((i()) >= 0) && ((i()) < (gameMap.map.length))) && ((j) >= 0)) && ((j) < (gameMap.map[0].length))) return gameMap.map[i()][j]; <FIXE>
<FIXS> if (oTmpResult == null) continue; <FIXE>
<FIXS> com.paigeruppel.katas.wordsearch.WordSearch underTest = new com.paigeruppel.katas.wordsearch.WordSearch(new com.paigeruppel.katas.wordsearch.LetterGrid(toSearch)); <FIXE>
<FIXS> } if (false == (isSupportTransaction)) { throw new java.sql.SQLException("Transaction not supported for current database!"); } <FIXE>
<FIXS> if ((commandHistory.size()) == 0) { return ; } <FIXE>
<FIXS> while (((temp.getValue()) != pattern) || (temp != (current))) { <FIXE> <FIXS> <FIXE> <FIXS> if ((temp.getValue()) == pattern) { current = temp; }else { java.lang.System.out.println((("STRING " + pattern) + " NOT FOUND.")); } <FIXE>
<FIXS> @org.jplus.hyb.database.crud.Test <FIXE> <FIXS> fail("testShowList faild."); <FIXE> <FIXS> assertFalse(org.jplus.util.ObjectHelper.isEmpty(result)); assertTrue(((result.size()) == 5)); <FIXE>
<FIXS> private org.jdom.Element getFullConfigElement(java.lang.String filename) { <FIXE> <FIXS> org.jdom.Document doc = builder.build(filename); <FIXE>
<FIXS> if (btn.getData().equals(java.lang.Boolean.TRUE)) { <FIXE>
<FIXS> sourceOrderDM.orderLatitude = taxiDriverLocation.getLatitude(); sourceOrderDM.orderLongitude = taxiDriverLocation.getLongitude(); <FIXE>
<FIXS> insertOne(names[index], times[index], (index + 1)); <FIXE>
<FIXS> @org.bukkit.event.EventHandler(priority = org.bukkit.event.EventPriority.MONITOR, ignoreCancelled = true) <FIXE> <FIXS> if (e.getFrom().getWorld().getName().equals(e.getTo().getWorld().getName())) <FIXE>
<FIXS> java.lang.String actualKey = this.getParaNameFromRepositoryName(elem, key, basePropertyParameter); <FIXE>
<FIXS> java.util.Collections.sort(retArr); <FIXE>
<FIXS> processor(req, resp); chain.doFilter(request, response); <FIXE>
<FIXS> nes.loadROM(extractedFile.getCanonicalPath()); <FIXE> <FIXS> <FIXE>
<FIXS> ui.list.swing.DisplayFormat.data.append(java.lang.String.format(ui.list.swing.DisplayFormat.HTML_FONT_FEEDBACK_GUIDE_INFO, UserInterface.BTM.getLastFeedBack())); <FIXE>
<FIXS> onCaseDetailsNotFound.checkIfCaseIsArchived(caseId.toString()); <FIXE>
<FIXS> unit.daos.template.QACategoryDAOTEST.subCategory1 = base.AbstractTestDataCreator.createCategory("Sub1", unit.daos.template.QACategoryDAOTEST.superCategory1, "icon"); <FIXE>
<FIXS> java.util.List<siena.base.test.model.PersonUUID> people = query.fetch(2, 1); <FIXE>
<FIXS> if ((t1s == (jason.asSyntax.Literal.DefaultNS)) && (t2s == (jason.asSyntax.Literal.DefaultNS))) <FIXE> <FIXS> t1s = t1s.getNS(); t2s = t2s.getNS(); if (t1s.equals(t2s)) return true; return unifiesNoUndo(t1s, t2s); <FIXE>
<FIXS> <FIXE>
<FIXS> this.openSendAgents.put(sender, new no.runsafe.mailbox.MailSendAgent(recipient, inventory)); <FIXE>
<FIXS> <FIXE>
<FIXS> TestListReferenceBased.Node nxt = TestListReferenceBased.head.getNext(); for (int x = 1; x < index; x++) { <FIXE> <FIXS> ptr.setNext(ptr.getNext().getNext()); nxt.setNext(null); <FIXE>
<FIXS> replay(mockHostService); <FIXE>
<FIXS> efemeler.AddMembershipFunction dialog = new efemeler.AddMembershipFunction(efemeler.AddMembershipFunction.in, efemeler.AddMembershipFunction.out, efemeler.AddMembershipFunction.names); <FIXE>
<FIXS> <FIXE>
<FIXS> }else { setGraphic(null); <FIXE>
<FIXS> return escape(("Scenario: Line: " + (scenario.getLine()))); <FIXE> <FIXS> return escape(("Scenario: " + (scenario.getName()))); <FIXE>
<FIXS> return new javafx.scene.control.ListCell<repertuar.model.Film>() { <FIXE> <FIXS> <FIXE>
<FIXS> this.mPunktSelected = mPunktSelected; <FIXE> <FIXS> <FIXE>
<FIXS> setBuffer(Type.Position, 3, new float[]{ 0 , 0 , 0 }); <FIXE>
<FIXS> if (!(IS_PRIME)) { <FIXE>
<FIXS> tier(segment, root.getId(), 0); <FIXE>
<FIXS> this.Heap[((this.size)++)] = element; int current = (this.size) - 1; <FIXE>
<FIXS> <FIXE>
<FIXS> if ((mResources.length) > 0) { itemView = mLayoutInflater.inflate(R.layout.problem_images_view_pager_item, container, false); android.widget.ImageView problemImageView = ((android.widget.ImageView) (itemView.findViewById(R.id.problem_image_view))); loadImage(mResources[position], container.getContext(), problemImageView); container.addView(itemView); return itemView; }else { return null; } <FIXE>
<FIXS> fr.loria.synalp.jtransxps.XPMInimizeVars.EtatHMM eLost = alignment[t]; globalVar -= eLost.getVar(); eLost.removeOneFrame(frames[t]); globalVar += eLost.getVar(); fr.loria.synalp.jtransxps.XPMInimizeVars.EtatHMM eGain = alignment[(t + 1)]; globalVar -= eGain.getVar(); eGain.updateOneFrame(frames[t]); globalVar += eGain.getVar(); <FIXE> <FIXS> <FIXE>
<FIXS> return ; <FIXE>
<FIXS> <FIXE>
<FIXS> execute(jobBuilderCopy).actionPerformed(e); <FIXE>
<FIXS> <FIXE>
<FIXS> for (int i = 0; (questionList != null) && (i < (questionList.size())); i++) { <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> function.run(new org.dedda.bratwurst.lang.Scope()); <FIXE>
<FIXS> baseRequest.setAsyncSupported(false, null); <FIXE> <FIXS> baseRequest.setAsyncSupported(asyncSupported, null); <FIXE>
<FIXS> int read = this.read(temp, java.lang.Math.min((size - skipped), org.verapdf.cos.filters.BF_BUFFER_SIZE)); <FIXE>
<FIXS> if (item != null) { if ((this.item) == null) { <FIXE> <FIXS> }else { if ((this.item.getVersion()) < (item.getVersion())) { this.item = item; } <FIXE>
<FIXS> int[] a = new int[]{ 3 , 2 , 3 , 2 , 4 , 1 , 5 , 4 , 4 , 3 , 3 , 3 , 3 , 3 , 3 }; java.lang.System.out.println(interviewguide.array.Problem2_ArrayFindOccurMoreThanHalf.find(a)); java.lang.System.out.println(interviewguide.array.Problem2_ArrayFindOccurMoreThanHalf.findByAnAlternativeWay(a)); <FIXE>
<FIXS> public synchronized java.util.List<java.lang.String> getJobConsole(final java.lang.String buildNumber, final java.lang.String jobName) { <FIXE>
<FIXS> int y = (source.getHeight()) / 5; <FIXE>
<FIXS> toggleIndoorOutdoorButtonStatus(false); <FIXE>
<FIXS> date = com.abel.hwes.util.SwapDateAndStringUtil.StrToStartDate("2006-08-01"); <FIXE>
<FIXS> public void nextBuffer() { <FIXE>
<FIXS> <FIXE> <FIXS> case R.id.bLogout : userLocalStore.clearUserData(); userLocalStore.setUserLoggedIn(false); android.content.Intent logoutIntent = new android.content.Intent(this, com.example.elazaoui.projet.Login.class); startActivity(logoutIntent); break; <FIXE>
<FIXS> while ((inspecteeThread.getState()) != (java.lang.Thread.State.TERMINATED)) { <FIXE> <FIXS> } catch (java.lang.Exception e) { <FIXE>
<FIXS> return org.xcolab.util.json.NullsafeJsonObjectBuilder.of(super.toJson()).add("description", getDescription()).add("displayItemType", getDisplayItemType().name()).add("widgetType", getType().name()); <FIXE>
<FIXS> if (list == null) return null; <FIXE>
<FIXS> for (java.lang.String key : mExecutePool.getAllTask().keySet()) { <FIXE> <FIXS> for (java.lang.String key : mCachePool.getAllTask().keySet()) { mCachePool.removeTask(key); <FIXE>
<FIXS> <FIXE>
<FIXS> public gov.anl.aps.cdb.portal.model.db.entities.ItemElementRelationship findConnectionRelationship(java.util.List<gov.anl.aps.cdb.portal.model.db.entities.ItemElementRelationship> ierList) { <FIXE>
<FIXS> <FIXE>
<FIXS> showMaxims(loadedMaximList); <FIXE>
<FIXS> try { this.pagesInDisk = ((java.util.HashMap<java.lang.Long, com.hit.memoryunits.Page<byte[]>>) (in.readObject())); } catch (java.lang.Exception e) { } finally { in.close(); <FIXE>
<FIXS> if ((cv.getValidateTime()) < ((java.lang.System.currentTimeMillis()) - (cv.getStartTime()))) { <FIXE>
<FIXS> validateEmail(); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> assertThat(actual, org.hamcrest.core.Is.is(true)); <FIXE>
<FIXS> return nodeCount++; <FIXE>
<FIXS> if (((source == null) || (source.getClass().equals(targetClass))) || ((beanFieldMatch != null) && (beanFieldMatch.getSourceClass().equals(targetClass)))) { <FIXE>
<FIXS> binaryCalculator.multiply(); <FIXE>
<FIXS> getFragmentManager().beginTransaction().replace(R.id.fListContainer, fragment, "todo").addToBackStack("todo").commit(); <FIXE>
<FIXS> if ((this.expires) < 0) { <FIXE>
<FIXS> try { if (org.jboss.as.test.manualmode.messaging.ha.AbstractMessagingHATestCase.container.isStarted(org.jboss.as.test.manualmode.messaging.ha.AbstractMessagingHATestCase.SERVER2)) { org.jboss.as.test.manualmode.messaging.ha.AbstractMessagingHATestCase.container.stop(org.jboss.as.test.manualmode.messaging.ha.AbstractMessagingHATestCase.SERVER2); } } finally { restoreSnapshot(snapshotForServer2); <FIXE> <FIXS> try { if (org.jboss.as.test.manualmode.messaging.ha.AbstractMessagingHATestCase.container.isStarted(org.jboss.as.test.manualmode.messaging.ha.AbstractMessagingHATestCase.SERVER1)) { org.jboss.as.test.manualmode.messaging.ha.AbstractMessagingHATestCase.container.stop(org.jboss.as.test.manualmode.messaging.ha.AbstractMessagingHATestCase.SERVER1); } } finally { restoreSnapshot(snapshotForServer1); <FIXE> <FIXS> <FIXE>
<FIXS> return ((((vertexOffset) + (edgeOffset)) + (((makespan) * (node.getIndexInGraph())) * (numBinaryPropVars))) + (timeStep * (numBinaryPropVars))) + binaryIndex; <FIXE>
<FIXS> if ((this.count) > 0) <FIXE>
<FIXS> <FIXE> <FIXS> mLoadingProgressBar.setVisibility(View.VISIBLE); <FIXE>
<FIXS> if (!(pNode.isExpand())) pNode.toggle(); <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> if ((data != null) && (verboseLevel < 2)) { <FIXE>
<FIXS> <FIXE>
<FIXS> fr.inria.spirals.jtravis.helpers.BuildHelper.getBuildsFromSlugRecursively(repository.getSlug(), result, limitDate, 0, fr.inria.spirals.jtravis.helpers.BuildHelper.getEventTypes(), 0, null, (-1), false, null); <FIXE>
<FIXS> io.minio.MinioClient client = new io.minio.MinioClient(server.url("")); <FIXE>
<FIXS> assertTrue(map.containsValue(v)); <FIXE>
<FIXS> protected void setObsData() { <FIXE>
<FIXS> temp[deadDens.length] = den; <FIXE>
<FIXS> mMapHelper = new com.mredrock.cyxbs.util.MapHelper(this, mHandler); <FIXE>
<FIXS> if ((strText.length()) < 33) return false; <FIXE>
<FIXS> sb.append(line); <FIXE>
<FIXS> <FIXE>
<FIXS> if ((radioButtonChan6.isSelected()) == true) { <FIXE>
<FIXS> <FIXE>
<FIXS> add(new javax.swing.JButton(new com.ihasama.ohtu.ui.ReferenceList.EditReferenceAction("edit", dao, ref)), "wrap"); <FIXE>
<FIXS> public void bleCharacteristicRead(java.lang.String address, java.lang.String uuid, int status, byte[] value) { <FIXE>
<FIXS> <FIXE>
<FIXS> if ((mBluetoothGatt) != null) { mBluetoothGatt.setCharacteristicNotification(characteristic, enabled); android.bluetooth.BluetoothGattDescriptor descriptor = characteristic.getDescriptor(java.util.UUID.fromString(HM10Attributes.CLIENT_CHARACTERISTIC_CONFIG)); com.eveningoutpost.dexdrip.Models.UserError.Log.i(com.eveningoutpost.dexdrip.Services.DexShareCollectionService.TAG, ("Descriptor found: " + (descriptor.getUuid()))); descriptor.setValue(BluetoothGattDescriptor.ENABLE_NOTIFICATION_VALUE); mBluetoothGatt.writeDescriptor(descriptor); } <FIXE>
<FIXS> <FIXE>
<FIXS> return ovation.odata.util.CollectionUtils.makeIterable(map.entrySet()); <FIXE>
<FIXS> if (menus.isEmpty()) { <FIXE>
<FIXS> private static java.lang.String getRequiredSpaces(java.lang.String reference, java.lang.String message) { <FIXE> <FIXS> <FIXE>
<FIXS> if (!(com.spectralogic.ds3autogen.utils.ConverterUtil.hasContent(spec.getTypes()))) return ; for (final com.spectralogic.ds3autogen.api.models.Ds3Type ds3TypeEntry : spec.getTypes().values()) { final java.lang.Enum enumEntry = com.spectralogic.ds3autogen.c.converters.EnumConverter.toEnum(ds3TypeEntry); if (com.spectralogic.ds3autogen.utils.ConverterUtil.hasContent(enumEntry.getValues())) { processTemplate(enumEntry, "TypedefEnum.ftl", outputStream); <FIXE>
<FIXS> <FIXE>
<FIXS> consumer.close(); session.close(); connection.close(); <FIXE>
<FIXS> subject = new uk.ac.ebi.atlas.model.experiment.differential.DifferentialProfileComparator(true, allContrasts, allContrasts, Regulation.UP); <FIXE>
<FIXS> synchronized(data) { for (int i = 0; i < (data.size()); i++) { com.irccloud.android.data.model.Event e = data.get(i); if ((e != null) && ((e.row_type) == (com.irccloud.android.fragment.MessageViewFragment.ROW_BACKLOGMARKER))) { return i; } <FIXE>
<FIXS> if ((tag.hasKey("rfc:nextUpdate")) && ((tag.getLong("rfc:nextUpdate")) > worldTime)) { return ; <FIXE> <FIXS> com.jdlogic.ranchablefluidcows.ranchable.RanchableFC.sendPacket(fluidCow); <FIXE>
<FIXS> byte[] buffer = new byte[size]; <FIXE> <FIXS> java.lang.String result = new java.lang.String(buffer); <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE> <FIXS> motorL.setDirection(DcMotor.Direction.REVERSE); <FIXE>
<FIXS> <FIXE>
<FIXS> private com.nike.cerberus.service.StaticAssetManager.AssetResourceFile create(java.lang.String filename, java.lang.String filePath, java.lang.String rootDirectoryPath) { return new com.nike.cerberus.service.StaticAssetManager.AssetResourceFile(filename, com.nike.cerberus.service.StaticAssetManager.getRelativePath(filePath, rootDirectoryPath), com.nike.cerberus.service.StaticAssetManager.getMimeTypeForFileFromName(filename), com.google.common.collect.ImmutableList.<java.lang.Byte>builder().addAll(com.nike.cerberus.service.StaticAssetManager.getFileContents(filePath)).build()); <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> assertThat(server.getRequestHeaders().get("Authorization").startsWith("Basic"), org.hamcrest.Matchers.is(true)); <FIXE>
<FIXS> set[root_q] = root_p; <FIXE>
<FIXS> <FIXE>
<FIXS> dateTime = dateTime.plusHours(hour).plusMinutes(minutes); <FIXE>
<FIXS> return com.hearthsim.card.CharacterIndex.UNKNOWN; <FIXE>
<FIXS> if ((com.example.divyanshu.smyt.Fragments.RuntimePermissionHeadlessFragment.mCallback) != null) { if (requestCode == (com.example.divyanshu.smyt.Fragments.RuntimePermissionHeadlessFragment.READ_PERMISSION)) { if (com.example.divyanshu.smyt.Utils.PermissionUtil.verifyPermissions(grantResults)) { com.example.divyanshu.smyt.Fragments.RuntimePermissionHeadlessFragment.mCallback.onPermissionGranted(com.example.divyanshu.smyt.Fragments.RuntimePermissionHeadlessFragment.PERMISSION_TYPE); }else { android.util.Log.i("BaseActivity", "permission was NOT granted."); com.example.divyanshu.smyt.Fragments.RuntimePermissionHeadlessFragment.mCallback.onPermissionDenied(com.example.divyanshu.smyt.Fragments.RuntimePermissionHeadlessFragment.PERMISSION_TYPE); } <FIXE> <FIXS> super.onRequestPermissionsResult(requestCode, permissions, grantResults); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> edu.umass.cs.gnsclient.client.integrationtests.ServerIntegrationTest.failWithStackTrace(("Exception while creating fields in ACLCreateFields: " + e)); <FIXE>
<FIXS> try { for (java.lang.String key : value.getPropertyKeys()) { out.writeObjectField(key, value.getProperty(key)); } } finally { out.writeEndObject(); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> csv.Person a = null; parsedPersons.add(a.toPerson(line)); <FIXE>
<FIXS> org.junit.Assert.assertEquals(new com.github.javaparser.javadoc.Javadoc(com.github.javaparser.javadoc.description.JavadocDescription.parseText(("The version identifier for this Serializable class.\n" + ("Increment only if the <i>serialized</i> form of the\n" + "class changes.")))), com.github.javaparser.JavadocParser.parse(text)); <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> if (tags != null) { <FIXE>
<FIXS> protected org.modeldriven.alf.fuml.mapping.expressions.ExpressionMapping mapOperand(org.modeldriven.alf.syntax.expressions.Expression operand) throws org.modeldriven.alf.mapping.MappingError { <FIXE>
<FIXS> it.polimi.modaclouds.scalingrules.utils.CloudMLDaemon.start(it.polimi.modaclouds.scalingrules.Configuration.CLOUDML_PORT); <FIXE>
<FIXS> }else current = next; <FIXE>
<FIXS> if ((nbt.getTag("cookingItem")) != null) this.cooking = new net.minecraft.item.ItemStack(((net.minecraft.nbt.NBTTagCompound) (nbt.getTag("cookingItem")))); <FIXE>
<FIXS> de.hsbremen.battleshipextreme.model.FieldState state = board[startY][startX]; <FIXE>
<FIXS> public void removeInfoView(android.view.View view) { <FIXE>
<FIXS> if ((path.lastIndexOf("/")) > 0) { prefix = path.substring(0, path.lastIndexOf("/")); suffix = path.substring(path.lastIndexOf("/")); prefix = prefix.replaceAll("%20", " "); return prefix.concat(suffix); } return path; <FIXE>
<FIXS> child = new net.sf.memoranda.TaskImpl(new java.util.ArrayList<net.sf.memoranda.Task>()); <FIXE> <FIXS> assertEquals(child, task.getSubTask("child")); <FIXE>
<FIXS> if (((reactor.core.support.BackpressureUtils.getAndAdd(REQUESTED, this, n)) == 0) && (n == (java.lang.Long.MAX_VALUE))) { <FIXE>
<FIXS> int count = 0; <FIXE>
<FIXS> if (player != null) { if (LoginController.REALPURENAME.equals(player.getName())) { updateGameState("End Turn", true); } <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> clients[index].write(data); <FIXE>
<FIXS> <FIXE>
<FIXS> manufacturingCtx.getPojos().put(pojoClass, 1); <FIXE>
<FIXS> java.lang.String hql = ((((((((("from " + (this.tableName)) + " o where (o.status = ") + (cn.edu.ustb.sem.order.entity.OrderStatus.initial)) + " ") + "or o.processIsCheck = ") + (cn.edu.ustb.sem.order.entity.Order.PROCESS_IS_NOT_CHECKED)) + " ") + "or o.materialIsChecked = ") + (cn.edu.ustb.sem.order.entity.Order.PROCESS_IS_NOT_CHECKED)) + ") "; <FIXE>
<FIXS> <FIXE>
<FIXS> org.gearvrf.NativeComponent.setEnable(getNative(), flag); <FIXE>
<FIXS> if ((list != null) && (!(list.isEmpty()))) { <FIXE>
<FIXS> public java.lang.String spawnSouth(int offX, int offY, int height) { <FIXE> <FIXS> java.lang.String name = updateGeneratedImage(); return name; <FIXE>
<FIXS> java.lang.String errorMessage = com.nairbspace.octoandroid.exception.ErrorMessageFactory.create(mScreen.context(), ((java.lang.Exception) (e))); if (com.nairbspace.octoandroid.exception.ErrorMessageFactory.ifSslError(mScreen.context(), ((java.lang.Exception) (e)))) { <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> java.util.ArrayList<com.savelives.entityclasses.SearchQuery> temp = new java.util.ArrayList<>(); temp.add(sq); for (int i = 0; (i < ((MAX_HISTORY) - 1)) && (i < (historySearch.size())); i++) { temp.add(historySearch.get(i)); <FIXE> <FIXS> this.historySearch = temp; <FIXE>
<FIXS> if ((orientationBuffer.size()) == 0) { return null; } <FIXE>
<FIXS> <FIXE> <FIXS> resp.sendRedirect("index.html"); <FIXE>
<FIXS> protected org.eclipse.jdt.core.IType findPrimaryType(java.lang.String packageName, java.lang.String typeName) throws org.eclipse.jdt.core.JavaModelException { <FIXE>
<FIXS> <FIXE>
<FIXS> for (int i = index; i < ((accommodated) - 1); i++) { <FIXE>
<FIXS> final long secondsToRefreshCache = ((15 * 24) * 60) * ((long) (60)); <FIXE>
<FIXS> int insertCount = ((mDelegate) != null) ? mDelegate.getItemCount() : 0; <FIXE> <FIXS> <FIXE>
<FIXS> assertFalse(outViews.isEmpty()); <FIXE>
<FIXS> sb.append("{ x:").append(test.getTrust()).append(", ").append(" y:").append(test.getHealth()).append("},"); <FIXE>
<FIXS> id.co.veritrans.sdk.uiflow.utilities.SdkUIFlowUtil.showSnackbar(this, errorMessage); <FIXE>
<FIXS> wyjc.JvmType jt = convertType(code.type); <FIXE>
<FIXS> init(); <FIXE>
<FIXS> return (((ctx.inventory.select().count()) == 0) && (!(chaosTower.contains(ctx.players.local())))) || ((ctx.inventory.select().count()) == 28); <FIXE>
<FIXS> setDifficulties(); <FIXE>
<FIXS> javax.swing.JFrame.setDefaultLookAndFeelDecorated(true); <FIXE>
<FIXS> for (int i = 0; i < (this.playerIsKi.length); i++) { <FIXE>
<FIXS> if ((statement != null) && (!(statement.isClosed()))) { <FIXE>
<FIXS> private com.softserverinc.edu.entities.WorkLog getNewWorkLog(java.lang.Long issueId) { <FIXE>
<FIXS> return entry; <FIXE>
<FIXS> embeddedFile.addCompression(); <FIXE> <FIXS> <FIXE>
<FIXS> for (int i = 0; i < n; i++) { <FIXE>
<FIXS> for (int i = (roomInfoList.size()) - 1; i >= 0; i--) { <FIXE>
<FIXS> <FIXE>
<FIXS> com.ullink.slack.simpleslackapi.impl.SlackMessageHandleImpl<com.ullink.slack.simpleslackapi.replies.SlackChannelReply> handle = new com.ullink.slack.simpleslackapi.impl.SlackMessageHandleImpl<com.ullink.slack.simpleslackapi.replies.SlackChannelReply>(getNextMessageId()); <FIXE>
<FIXS> <FIXE> <FIXS> if (elements != null) { mData.addAll(elements); } <FIXE>
<FIXS> if ((version > 0) && (version < (gui.Splash.DATABASE_VERSION))) { <FIXE> <FIXS> <FIXE> <FIXS> setUserVersion(statement, Splash.DATABASE_VERSION); <FIXE>
<FIXS> java.util.Iterator<com.sb.elsinore.inputs.PhSensor> iterator = com.sb.elsinore.LaunchControl.phSensorList.iterator(); com.sb.elsinore.inputs.PhSensor tSensor; while (iterator.hasNext()) { tSensor = iterator.next(); if (tSensor.getName().equalsIgnoreCase(realName)) { iterator.remove(); return true; } } <FIXE>
<FIXS> for (int i = (stack.size()) - 1; i >= 0; i--) { stackclone.push(stack.get(i)); <FIXE>
<FIXS> private edu.neu.ccs.pyramid.dataset.MultiLabel predictBySupport(java.util.Vector vector) { <FIXE>
<FIXS> if ((tail.data) == null) return ; <FIXE>
<FIXS> java.util.List<eiteam.esteemedinnovation.armor.exosuit.ExosuitEventHandler> handlers = new java.util.ArrayList(java.util.Arrays.asList(getUpgrades(self))); <FIXE>
<FIXS> if ((!(flagMenuPictures)) && (!(flagMenuSounds))) <FIXE> <FIXS> <FIXE>
<FIXS> m_clips.get(i).setVolume(percentage); <FIXE>
<FIXS> for (int i = b - 1; i >= a; i--) { if (org.magicminds.one.util.Sorter.less(c[(i + 1)], c[i])) { <FIXE>
<FIXS> <FIXE>
<FIXS> graphEdges.add(newEdge); <FIXE>
<FIXS> <FIXE>
<FIXS> this.officeWriter.close(); <FIXE>
<FIXS> getDefinitionsOutput(source.toString(), AuraContext.Mode.PROD); <FIXE>
<FIXS> setUpAlarmManager(context); <FIXE> <FIXS> showNotifications(context); <FIXE>
<FIXS> java.lang.String response; while ((response = main.Peer.reader.readLine()) != null) { java.lang.System.out.println(response); } <FIXE>
<FIXS> java.util.List<dtu.cdio_final.shared.dto.MaterialDTO> result; <FIXE>
<FIXS> if (sender == null) return ; <FIXE>
<FIXS> mCryptoStore.saveDeviceTrackingStatuses(deviceTrackingStatuses); <FIXE>
<FIXS> java.lang.System.out.print((" | " + (i + 1))); <FIXE>
<FIXS> }else { if ((listener()) != null) listener().onConsumeFailed(); <FIXE> <FIXS> <FIXE>
<FIXS> if ((mediaPlayer) != null) { <FIXE>
<FIXS> }else { android.support.v4.app.FragmentTransaction ft = getChildFragmentManager().beginTransaction(); hfad.com.workout.StopwatchFragment stopwatchFragment = new hfad.com.workout.StopwatchFragment(); ft.replace(R.id.stopwatch_container, stopwatchFragment); ft.addToBackStack(null); ft.setTransition(FragmentTransaction.TRANSIT_FRAGMENT_FADE); ft.commit(); <FIXE> <FIXS> <FIXE>
<FIXS> solver.Polynomial output = new solver.Polynomial(); <FIXE> <FIXS> solver.Polynomial temp = new solver.Polynomial(this.getFirst()); temp.multiply(current); output.add(temp); <FIXE>
<FIXS> newSessionField.setDisable(((value || ((sessionComboBox.getValue()) == null)) || (!(sessionComboBox.getValue().equals(com.cbapps.reversi.client.LoginLayout.ITEM_NEW_SESSION))))); <FIXE>
<FIXS> ReloadViews(s); <FIXE>
<FIXS> viewHolder.nameInput.setText(""); <FIXE>
<FIXS> if ((users.size()) > 0) req.setAttribute("User", users.get(0).getName()); <FIXE>
<FIXS> if ((state.getBlock()) instanceof zmaster587.libVulpes.block.BlockOre) { zmaster587.libVulpes.api.material.Material mat = ((zmaster587.libVulpes.block.BlockOre) (state.getBlock())).ores[meta]; if (mat != null) return mat.getColor(); } <FIXE>
<FIXS> <FIXE> <FIXS> javax.sound.sampled.AudioInputStream ais = javax.sound.sampled.AudioSystem.getAudioInputStream(url); <FIXE>
<FIXS> if ((blockOf.equals(targetBlock)) && ((targetMetadata) == (-1))) <FIXE>
<FIXS> @my.epam.collections.Test <FIXE> <FIXS> list.add(1, 40); <FIXE>
<FIXS> <FIXE>
<FIXS> private void showLatLonPicker() { <FIXE>
<FIXS> msg.obj = null; <FIXE>
<FIXS> return (((((("Plan{\n" + "relation=") + (relation.getElement().toString())) + "\n, cost=") + (cost)) + "\n, assignedProviders=") + (assignedProviders.toString())) + "\n}"; <FIXE>
<FIXS> mAdapter = new com.example.andrew.prokhor.eyecare.ui.adapters.ExpandableCursorRecyclerViewAdapter(getActivity(), this); <FIXE>
<FIXS> return -1; <FIXE>
<FIXS> com.google.common.truth.Truth.assertThat(parseResult[1]).isEmpty(); <FIXE>
<FIXS> <FIXE>
<FIXS> android.content.Intent detailActivityIntent = new android.content.Intent(getActivity(), com.example.sarh2o.sunshine.DetailActivity.class).putExtra(Intent.EXTRA_TEXT, text); <FIXE>
<FIXS> settings.setProfilingEnabled(true); <FIXE>
<FIXS> return checkPerms(user, loi, perm, operation, false, false); <FIXE>
<FIXS> public T get(int index) { if ((size()) <= index) <FIXE> <FIXS> while (index > 0) { <FIXE> <FIXS> index--; <FIXE> <FIXS> return current.getData(); <FIXE>
<FIXS> com.fasterxml.jackson.databind.ObjectMapper mapper = new com.fasterxml.jackson.databind.ObjectMapper(); mapper.setDateFormat(new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSSSSS")); org.openmrs.module.outgoingmessageexceptions.OutgoingMessage outgoingMessage = mapper.readValue(message, org.openmrs.module.outgoingmessageexceptions.OutgoingMessage.class); model.addAttribute("outgoingMessage", outgoingMessage); <FIXE>
<FIXS> if (channel != null) { javax.xml.namespace.QName channelQName = com.evolveum.midpoint.util.QNameUtil.uriToQName(channel); java.lang.String return_ = channelQName.getLocalPart(); item.add(new org.apache.wicket.markup.html.basic.Label(componentId, return_)); } <FIXE>
<FIXS> } catch (java.io.IOException e) { <FIXE> <FIXS> <FIXE>
<FIXS> if (strings.contains(bmob.getPassword())) { }else { strings.add(bmob.getPassword()); } <FIXE>
<FIXS> if (((path == null) || (path.equals(""))) || (host == null)) { <FIXE>
<FIXS> if (c == null) return ; <FIXE>
<FIXS> o_linkReminderLabel.setEnabled((row != (-1))); <FIXE>
<FIXS> new com.rapplogic.aru.uploader.nordic.NordicSketchUploader().process("/Users/andrew/Documents/dev/arduino-remote-uploader/resources/RAU-328-13k.hex", "/dev/tty.usbmodemfa131", java.lang.Integer.parseInt("19200"), "????", 5, 0, 50, true, 5); <FIXE>
<FIXS> int selected = -1; if ((lw.getTag()) != null) { selected = ((java.lang.Integer) (lw.getTag())); } <FIXE> <FIXS> <FIXE>
<FIXS> if (((this.startDate) == null) || (!(this.startDate.equals(startDate)))) { <FIXE>
<FIXS> public void run() { <FIXE>
<FIXS> if (((((si) + 2) < (sn)) && ((src.charAt(((si) + 1))) == '-')) && ((src.charAt(((si) + 2))) != ']')) { <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> } if (state == null) { state = this.driveState; <FIXE>
<FIXS> if (net.minecraftforge.oredict.OreDictionary.getOres(name).isEmpty()) { <FIXE>
<FIXS> com.jme3.math.Vector2f wallDir = new com.jme3.math.Vector2f(((getStart().getX()) - (getEnd().getX())), ((getStart().getY()) - (getEnd().getY()))); <FIXE>
<FIXS> inter.put("date_of_birth", format.format(org.phenotips.studies.family.internal.JsonAdapterImpl.pedigreeDateToDate(ex.getJSONObject(dob)))); <FIXE> <FIXS> inter.put("date_of_death", format.format(org.phenotips.studies.family.internal.JsonAdapterImpl.pedigreeDateToDate(ex.getJSONObject(dod)))); <FIXE>
<FIXS> return ((java.lang.Math.log((a + b))) / (java.lang.Math.log(1.0001))) + 1; <FIXE>
<FIXS> if ((hasUnicodeChar(literal)) && (!(((((allowByTailComment) && (haastrailComment(ast))) || (isAllCharactersEscaped(literal))) || ((allowEscapesForControlCharacters) && (isOnlyUnicodeValidChars(literal, com.puppycrawl.tools.checkstyle.checks.AvoidEscapedUnicodeCharactersCheck.sUnicodeControl)))) || ((allowNonPrintableEscapes) && (isOnlyUnicodeValidChars(literal, com.puppycrawl.tools.checkstyle.checks.AvoidEscapedUnicodeCharactersCheck.sNonPrintableChars)))))) { log(ast.getLineNo(), "forbid.escaped.unicode.char"); <FIXE>
<FIXS> end = ((position) > (end)) ? position : end; <FIXE>
<FIXS> java.lang.String id) throws java.lang.Exception { <FIXE> <FIXS> retVal = invoiceDao.findById(java.lang.Long.parseLong(id)); if (retVal.getSupplierTIN().equals(PIB)) return retVal.getInvoiceItems().getInvoiceItem(); <FIXE>
<FIXS> java.util.HashMap<java.lang.Short, java.lang.Long> positions = eu.modernmt.cluster.NodeInfo.fromString(member.getStringAttribute(eu.modernmt.cluster.NodeInfo.DATA_CHANNELS_ATTRIBUTE)); <FIXE>
<FIXS> return (((this.metricName.equals(metricName)) && (this.queueName.equals(queueName))) && ((this.periodicity) == periodicity)) && ((this.queueCapacity) == queueCapacity); <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> private boolean mergeLine(java.util.List<nz.ac.auckland.alm.EmptySpace> line, nz.ac.auckland.alm.algebra.IDirection direction) { <FIXE>
<FIXS> <FIXE>
<FIXS> attachToBaseObject(i, el, false, true); <FIXE>
<FIXS> allocationEntityDataDTO.setType(allocationEntity.getType().name()); <FIXE>
<FIXS> za.org.grassroot.services.GroupLog groupLog = groupLogRepository.save(new za.org.grassroot.services.GroupLog(groupToSave.getId(), changedByuserId, za.org.grassroot.core.enums.GroupLogType.GROUP_UPDATED, 0L, description)); <FIXE>
<FIXS> <FIXE>
<FIXS> SimpleSetPerformanceAnalyzer.dastList = new SimpleSet[4]; <FIXE> <FIXS> SimpleSetPerformanceAnalyzer.dastList[3] = new CollectionFacadeSet(new java.util.HashSet<java.lang.String>()); <FIXE>
<FIXS> return ((w.start.across) + (w.length)) >= (boxes.length); <FIXE> <FIXS> return ((w.start.down) + (w.length)) >= (boxes[w.start.across].length); <FIXE>
<FIXS> if ((getRegisteredIpt()) != null) { <FIXE>
<FIXS> com.olab.smplibrary.SMPLibrary.GetPrivateContacts(context, numberOfContacts, new com.olab.smplibrary.DataResponseCallback() { <FIXE>
<FIXS> java.util.Set<java.lang.Integer> indexesToAdd; indexesToAdd = getRandomHardestCardIndexes(0.2, 6, cardsToTestIndexes); <FIXE>
<FIXS> schema.create("User").removeField("energy").removeField("maxEnergy"); oldVersion++; <FIXE>
<FIXS> <FIXE> <FIXS> this.time.set(time); <FIXE>
<FIXS> <FIXE>
<FIXS> java.lang.System.out.println(text); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> com.google.javascript.jscomp.newtypes.FunctionType result = com.google.javascript.jscomp.newtypes.FunctionType.meet(this, other); if ((this.isLoose) && (!(result.isLoose()))) { result = result.withLoose(); } return result; <FIXE>
<FIXS> com.linxonline.mallet.util.logger.Logger.println("Mapping Base directory.", Logger.Verbosity.MINOR); <FIXE>
<FIXS> g.setFont(font); <FIXE> <FIXS> g.setColor(color); <FIXE>
<FIXS> return new com.jagrosh.jdautilities.commandclient.CommandBuilder.BlankCommand(name, help, category, arguments, guildOnly, requiredRole, ownerCommand, cooldown, userPermissions, botPermissions, aliases.toArray(new java.lang.String[aliases.size()]), children.toArray(new com.jagrosh.jdautilities.commandclient.Command[children.size()]), helpBiConsumer, usesTopicTags, cooldownScope) { <FIXE>
<FIXS> if (control.isDisposed()) { return ; } <FIXE>
<FIXS> if (selStart == selEnd) { changeSpanStateBySelection(selStart); }else { changeSpanStateBySelection(selStart, selEnd); } <FIXE>
<FIXS> public javafx.scene.control.Button toButton(java.lang.String label) { javafx.scene.control.Button button = new javafx.scene.control.Button(label); <FIXE>
<FIXS> <FIXE> <FIXS> T object = instantiate(context, new java.util.HashSet<>(traversedClasses)); <FIXE>
<FIXS> return cfg.get(category, field.getName(), com.google.common.primitives.Ints.toArray(java.util.Arrays.asList(((java.lang.Integer[]) (net.minecraftforge.common.config.TypeAdapters.TypeAdapter.getObject(instance, field))))), comment); <FIXE>
<FIXS> <FIXE>
<FIXS> int year) throws java.lang.Exception { <FIXE> <FIXS> return getUserBalancesDto(user, org.votingsystem.web.currency.jaxrs.DateUtils.getYearPeriod(calendar)); <FIXE>
<FIXS> java.util.List<org.wso2.carbon.analytics.datasource.commons.Record> records = this.findRecords(matchingEvent, candidateEvents, false); <FIXE>
<FIXS> if ((expression.length()) > end) { java.lang.String quantifier = java.lang.String.valueOf(expression.charAt(end)); if (isQuantifier(quantifier)) { <FIXE>
<FIXS> if (random_instance >= (used.length)) <FIXE>
<FIXS> if ((requiredMissions) != null) { for (com.playposse.peertopeeroxygen.backend.peerToPeerOxygenApi.model.MissionBean missionBean : requiredMissions) { if (!(missionBean.getId().equals(com.playposse.peertopeeroxygen.android.widgets.RequiredMissionListView.BLANK_MISSION_ID))) { ids.add(missionBean.getId()); } <FIXE>
<FIXS> se.plushogskolan.casemanagement.model.WorkItem workItem = se.plushogskolan.restcaseservice.model.DTOWorkItem.toEntity(dtoWorkItem); <FIXE>
<FIXS> net.minecraft.entity.player.EntityPlayer caster = this.getThrower(); if (caster != null) { caster.dismountRidingEntity(); com.teaminfinity.elementalinvocations.handler.PlayerStateHandler.getInstance().getState(caster).setInvisible(false).setInvulnerable(false).setEthereal(false); } <FIXE> <FIXS> <FIXE>
<FIXS> public int getIndexFromValue(java.lang.String[] list, java.lang.String v) { <FIXE> <FIXS> if (list[i].equals(v)) <FIXE>
<FIXS> if (request == null) { return org.fogbowcloud.manager.core.plugins.localcredentails.LocalCredentialsHelper.getCredentialsPerRelatedLocalName(this.properties, LocalCredentialsHelper.FOGBOW_DEFAULTS); } <FIXE>
<FIXS> <FIXE>
<FIXS> if (ImagePosition.ABOVE_TEXT.getName().equals(imageScreenDetails.getImagePosition())) { <FIXE>
<FIXS> synchronized(key2canvasFrame) { final org.bytedeco.javacv.CanvasFrame frame = key2canvasFrame.get(canvasKey); if (frame != null) { key2canvasFrame.remove(canvasKey); javax.swing.SwingUtilities.invokeLater(new java.lang.Runnable() { @java.lang.Override public void run() { <FIXE> <FIXS> <FIXE> <FIXS> }); <FIXE> <FIXS> } <FIXE>
<FIXS> <FIXE> <FIXS> assertTrue("Two-step normalization produced wrong result", abs.getAddress().equals("file:/home/larsga/cvs-co/topicmaps/opera/geography.xtm")); <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> com.vladimircvetanov.smartfinance.message.Message.message(this, "Successful logged in."); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> java.util.ArrayList<net.sf.marineapi.nmea.util.Measurement> result = new java.util.ArrayList<net.sf.marineapi.nmea.util.Measurement>(); for (int i = 0; i < (getFieldCount()); i += net.sf.marineapi.nmea.parser.XDRParser.DATA_SET_LENGTH) { <FIXE>
<FIXS> if (sub != null) sub_strs.add(sub.toStrRepresentation()); <FIXE>
<FIXS> if ((mOnKitchenChangeListener) != null) { mOnKitchenChangeListener.onKitchenChange(mCurrentKitchen); <FIXE>
<FIXS> deck.push(new ca.claytonrogers.Common.Card(i, false, Card.Suit.values()[j])); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> setLoading(true); <FIXE>
<FIXS> if ((output.getText().trim().isEmpty()) || (!(output.getText().trim().matches(FieldType.ALPHANUMERIC.getRegex())))) { <FIXE>
<FIXS> com.example.yink.amadeus.AlarmReceiver.isPlaying = false; <FIXE>
<FIXS> public java.lang.String receive() { <FIXE>
<FIXS> assertThat(numberOfConnectorImplementations).as("should return count").isEqualTo(sConnectorImplementationDescriptors.size()); <FIXE>
<FIXS> throw new org.apache.lens.server.api.error.LensException(org.apache.lens.cube.error.LensCubeErrorCode.COULD_NOT_PARSE_EXPRESSION.getLensErrorInfo(), e, expr); <FIXE>
<FIXS> return ((procesingUnmapped) && (!(record.getReadUnmappedFlag()))) || ((!(procesingUnmapped)) && ((record.getReadUnmappedFlag()) || ((((shard.contig.referenceName) != null) && (!(shard.contig.referenceName.isEmpty()))) && (!(shard.contig.referenceName.equals(record.getReferenceName())))))); <FIXE>
<FIXS> <FIXE>
<FIXS> public java.util.ArrayList<java.lang.String> getHistoryFilePath() { <FIXE> <FIXS> java.lang.String fileContent = configurationFile.readFile(); storage.ConfigurationFileOperation.logger.info(storage.ConfigurationFileOperation.MESSAGE_READ_CONFIGURATION_FILE); <FIXE>
<FIXS> public java.awt.Component getListCellRendererComponent(javax.swing.JList<? extends it.unibz.krdb.obda.model.OBDADataSource> list, it.unibz.krdb.obda.model.OBDADataSource value, int index, boolean isSelected, boolean cellHasFocus) { <FIXE> <FIXS> java.lang.String datasourceUri = value.getSourceID().toString(); <FIXE>
<FIXS> <FIXE> <FIXS> break; <FIXE>
<FIXS> if ((genericTypes.length) > 0) { <FIXE>
<FIXS> fail("Expected exception"); <FIXE>
<FIXS> error("Expected ',' or ']' inside array"); <FIXE>
<FIXS> gpkg.close(); geopackage.GeoPackageSchemaAPITest.createTable(tableName, columnName, testFile); return new com.rgi.android.geopackage.GeoPackage(testFile, com.rgi.android.geopackage.verification.VerificationLevel.None, com.rgi.android.geopackage.GeoPackage.OpenMode.Open); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> if ((selectedItemIndex) < 0) selectedItemIndex = 0; <FIXE>
<FIXS> <FIXE> <FIXS> if ((output) != null) { output.close(); output = null; <FIXE>
<FIXS> return new io.cloudracer.LogMonitor(name, filter, layout, true); <FIXE>
<FIXS> <FIXE>
<FIXS> if ((u.sectors.size()) == 0) { <FIXE> <FIXS> return ; } <FIXE>
<FIXS> <FIXE> <FIXS> return true; <FIXE>
<FIXS> final com.google.common.base.Optional<org.opendaylight.yangtools.yang.data.api.schema.NormalizedNode<?, ?>> maybeAsSequence = org.opendaylight.yangtools.yang.data.api.schema.NormalizedNodes.findNode(segment, this.asPathChoice, this.asPathList, this.asPathSequence); <FIXE>
<FIXS> <FIXE>
<FIXS> statement.executeUpdate(("update listcollection.display_of_collection set lastCard= " + idCardInDB)); <FIXE>
<FIXS> synchronized(backlog) { for (com.iskrembilen.quasseldroid.protocol.state.IrcMessage msg : backlog) { msg.setFiltered(com.iskrembilen.quasseldroid.protocol.state.Client.getInstance().getIgnoreListManager().matches(msg)); if (!(isMessageFiltered(msg))) { if ((getMarkerLineMessage()) == (msg.messageId)) isMarkerLineFiltered = false; filteredBacklog.add(msg); }else if ((getMarkerLineMessage()) == (msg.messageId)) isMarkerLineFiltered = true; <FIXE> <FIXS> } <FIXE>
<FIXS> if ((activeAppIndex) < 0) return false; <FIXE>
<FIXS> java.lang.Integer W0 = new java.lang.Integer(arg0.getBWH().split(" ")[1].substring(1)); java.lang.Integer W1 = new java.lang.Integer(arg1.getBWH().split(" ")[1].substring(1)); <FIXE>
<FIXS> iVolume = java.lang.Integer.parseInt(currentVolume); <FIXE>
<FIXS> <FIXE> <FIXS> return properties; <FIXE>
<FIXS> if ((activeExecution) != null) { activeExecution.interrupt(); } <FIXE>
<FIXS> }else <FIXE> <FIXS> return false; <FIXE>
<FIXS> <FIXE>
<FIXS> public void addNetworkUser(java.lang.String username, java.net.InetAddress IP) { <FIXE> <FIXS> return ; <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> if (playerData.debugClaimPermissions) { return false; } <FIXE>
<FIXS> int potentialPts = ((int) (bullets)) / (GameConstants.BULLET_EXCHANGE_RATE); <FIXE>
<FIXS> <FIXE>
<FIXS> boolean equal = java.util.Arrays.equals(list.toArray(new java.lang.Object[input.length]), expected); <FIXE>
<FIXS> <FIXE>
<FIXS> java.lang.System.exit(1); <FIXE>
<FIXS> public void add(T n) { heap.add(null); <FIXE> <FIXS> while ((index > 0) && ((heap.get(getParent(index)).compareTo(n)) == 1)) { <FIXE> <FIXS> <FIXE> <FIXS> heap.set(index, n); <FIXE>
<FIXS> public java.util.List<pet.shop.api.controller.model.PetControllerModel> retrieveAllPets() { <FIXE> <FIXS> return petControllerModelList; <FIXE>
<FIXS> if (null == (reconnectFuture)) { return ; } <FIXE>
<FIXS> if (network == null) return new java.util.ArrayList<java.lang.String>(); <FIXE>
<FIXS> holder.logo.setImageResource(org.cnx.android.utils.CNXUtil.getCoverId(book, context)); <FIXE>
<FIXS> out.write(bytes, 0, bytes.length); out.write(pl, 0, pl.length); <FIXE>
<FIXS> java.util.Collections.sort(com.blocksolid.okrello.KeyResultsActivity.keyResults); <FIXE>
<FIXS> if (com.example.vietnguyen.core.utils.MU.isEmpty(note.message)) { note.delete(); }else { note.date = new java.util.Date(); note.save(); } <FIXE>
<FIXS> if (step == 0) { <FIXE> <FIXS> <FIXE> <FIXS> neutrality.MarketInfo mi = getModel().getMarketInformation((step - 1)); double mktNetInvest = mi.nspNetworkInvestment; makeNetworkInvestment(step, mktNetInvest); if (getModel().policyNSPContentAllowed) { double mktVidInvest = mi.nspVideoInvestment; makeContentInvestment(step, mktVidInvest); }else { makeContentInvestment(step, 0); } <FIXE>
<FIXS> public void setLocation(float x, float y, float z) { <FIXE>
<FIXS> @org.junit.BeforeClass public static void init() throws java.io.IOException, java.lang.InterruptedException, java.sql.SQLException { <FIXE> <FIXS> java.lang.Thread.sleep(1); <FIXE>
<FIXS> return java.lang.Double.valueOf(map1.get(key).toString()).compareTo(java.lang.Double.valueOf(map2.get(key).toString())); <FIXE>
<FIXS> if (isFavorite[0]) { <FIXE> <FIXS> isFavorite[0] = false; <FIXE> <FIXS> isFavorite[0] = true; <FIXE>
<FIXS> this.scopeEndIndex = (this.index) + (this.sourceLength); <FIXE>
<FIXS> if (lend != null) { android.content.Intent intent = new android.content.Intent(this, org.bbt.kiakoa.LendDetailsActivity.class); intent.putExtra(LendDetailsActivity.EXTRA_LEND, lend); startActivity(intent); } <FIXE>
<FIXS> offset = 0; <FIXE>
<FIXS> if ((fadeOut) != null) { fadeOut.stop(); } fadeOut = null; <FIXE>
<FIXS> charge(50); <FIXE>
<FIXS> return true; <FIXE>
<FIXS> int start = bkm.getStart(); this.content.insert(start, txt); <FIXE> <FIXS> if ((theBookmark.getStart()) >= start) { <FIXE>
<FIXS> yesResponse.setEnabled(false); <FIXE>
<FIXS> mCurrentFragment.doAdapter(true); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> ++progress; <FIXE>
<FIXS> if ((item.getItemId()) == (R.id.action_settings)) { android.content.Intent settingsIntent = new android.content.Intent(this, com.stationmillenium.android.activities.SharedPreferencesActivity.class); startActivity(settingsIntent); return true; }else return super.onOptionsItemSelected(item); <FIXE>
<FIXS> java.lang.String[] arr = new java.lang.String[dbString.size()]; for (int i = 0; i < (dbString.size()); i++) { arr[i] = dbString.get(i); } <FIXE>
<FIXS> final android.os.Handler handler = new android.os.Handler(); final java.lang.Runnable r = new java.lang.Runnable() { public void run() { mCamera.takePicture(mShutterCallback, mRawCallback, null, mJPEGCallback); } }; handler.postDelayed(r, 800); }else { mCamera.takePicture(mShutterCallback, mRawCallback, null, mJPEGCallback); <FIXE> <FIXS> <FIXE>
<FIXS> private static com.oracle.truffle.r.runtime.nodes.RSyntaxNode getArgumentNode(java.lang.Object arg) { <FIXE>
<FIXS> biz.neustar.pc.ui.manager.impl.PersonalCloudManagerImpl.LOGGER.info("In authenticate cloud name {} and csp {}", cloudName, cspCloudName); <FIXE> <FIXS> biz.neustar.pcloud.ResponseData responseData = pcRestClient.post(java.text.MessageFormat.format(UIRestPathConstants.PERSONAL_CLOUD_AUTH_API, cspCloudName, cloudName), form); <FIXE>
<FIXS> <FIXE>
<FIXS> assertEquals((-100.0), shape.getX(), 1.0E-5); assertEquals(200.0, shape.getY(), 1.0E-5); <FIXE>
<FIXS> public void getTextFromActivity() { <FIXE>
<FIXS> crac.utilityModels.TaskSearchLogger.instance.titleColumns = new java.util.ArrayList<java.lang.String>(); crac.utilityModels.TaskSearchLogger.instance.titleRows = new java.util.ArrayList<java.lang.String>(); crac.utilityModels.TaskSearchLogger.instance.values = new java.util.HashMap<java.lang.Integer, java.lang.String>(); <FIXE>
<FIXS> gui.TimePanel tp = new gui.TimePanel(new gui.GUI(false), new game.Game(), 15, new javax.swing.JLabel()); <FIXE>
<FIXS> <FIXE> <FIXS> java.io.File f = new java.io.File((((application.Controller.currentProgramFolder) + "/") + fileName)); fileSelecMap.put(fileName, parseFile(f)); <FIXE>
<FIXS> startActivityForResult(intent, 1); <FIXE> <FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> _mp.highlightChar(_pa, _x, _y); <FIXE> <FIXS> <FIXE>
<FIXS> protected java.lang.String[] removeEmptyEntries(java.lang.String[] queryParts) { <FIXE>
<FIXS> habitAdapter = new com.example.brandon.habitlogger.RecyclerViewAdapters.HabitViewAdapter(habitList, this, menuItemClickListener, buttonClickListener); <FIXE>
<FIXS> <FIXE>
<FIXS> de.volzo.miscreen.Host.getInstance().serve(((nsd.hostPort) + 1)); <FIXE>
<FIXS> <FIXE>
<FIXS> findViewById(R.id.crying_logo).setVisibility(View.GONE); <FIXE>
<FIXS> return (((((name == null) || (name.isEmpty())) || ((name.charAt(0)) == '_')) || (java.lang.Character.isLetter(name.charAt(0)))) || ((name.charAt(0)) == '?')) || ((name.charAt(0)) == '\\'); <FIXE>
<FIXS> com.Veiled.Utils.PreferencesManipulation.userPrefs = new int[]{ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 }; <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> return ((((this.id) == (Accord.Coms.drawLines12)) || ((this.id) == (Accord.Coms.drawLines6))) || ((this.six) && ((this.row) < (owning.seitenzahle)))) || ((!(this.six)) && ((this.row) <= (owning.seitenzahle))); <FIXE>
<FIXS> android.widget.EditText editText_brand = ((android.widget.EditText) (findViewById(R.id.editText_client_code))); <FIXE>
<FIXS> for (int s = 0; s < (getSpecies().size()); s++) { <FIXE>
<FIXS> this.commandBox.clickOnTextField(); assertHelpWindowOpen(this.mainMenu.openHelpWindowUsingAccelerator()); this.resultDisplay.clickOnTextArea(); assertHelpWindowOpen(this.mainMenu.openHelpWindowUsingAccelerator()); this.taskListPanel.clickOnListView(); assertHelpWindowOpen(this.mainMenu.openHelpWindowUsingAccelerator()); assertHelpWindowOpen(this.mainMenu.openHelpWindowUsingMenu()); assertHelpWindowOpen(this.commandBox.runHelpCommand()); <FIXE>
<FIXS> includePaths.remove(completionIncludePath); facade.setIncludePath(includePaths); <FIXE>
<FIXS> if (a.isSeq()) { <FIXE>
<FIXS> removeCover(true); <FIXE>
<FIXS> public void onSetSwipeBackground(com.h6ah4i.android.example.advrecyclerview.demo_ds_selection.MyDraggableSwipeableSelectableItemAdapter.MyViewHolder holder, int position, int type) { <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> java.lang.System.out.println(clientside.JukePiCmd.server.addToList(url, (list.equals("wl") ? true : false), (back.equals("b") ? false : true))); <FIXE>
<FIXS> if (((targetName) != null) && ((targetName.length()) > 0)) { <FIXE>
<FIXS> if ((packs) != null) packs.clear(); <FIXE> <FIXS> if ((groups) != null) groups.clear(); <FIXE>
<FIXS> <FIXE> <FIXS> active = false; <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> (this.phaseCounter)++; <FIXE>
<FIXS> com.gruppe4b.edivator.backend.service.Image flippingImage = com.gruppe4b.edivator.backend.service.ImagesServiceFactory.makeImageFromBlob(key); com.gruppe4b.edivator.backend.service.Transform transform = com.gruppe4b.edivator.backend.service.ImagesServiceFactory.makeHorizontalFlip(); <FIXE>
<FIXS> long numOfInstr = (teammates.client.scripts.DataGenerator.random.nextInt((((teammates.client.scripts.DataGenerator.MAX_NUM_OF_INSTRUCTOR_PER_COURSES) - (teammates.client.scripts.DataGenerator.MIN_NUM_OF_INSTRUCTOR_PER_COURSES)) + 1))) + (teammates.client.scripts.DataGenerator.MIN_NUM_OF_INSTRUCTOR_PER_COURSES); <FIXE>
<FIXS> synchronized(nl.ru.crpstudio.CrpUtil.userCache) { for (int i = 0; i < (nl.ru.crpstudio.CrpUtil.userCache.size()); i++) { nl.ru.crpstudio.UserSession oThis = nl.ru.crpstudio.CrpUtil.userCache.get(i); if ((oThis.userId.equals(sUserId)) && (oThis.sessionId.equals(sSession))) { oThis.userOkay = false; oThis.sessionId = ""; return ; } <FIXE>
<FIXS> promise.resolve(com.lwansbrough.RCTCamera.RCTCamera.getInstance().getFocalLength(options.getInt("type"))); <FIXE>
<FIXS> private java.lang.Long matchesTransaction(net.nikr.eve.jeveasset.gui.tabs.transaction.MyTransaction transaction, boolean add) { if (transaction != null) { return matches(add, transaction.getTypeID(), transaction.getCharacterID(), null, null, transaction.getLocation(), null, null, null, transaction, null); }else { return null; } <FIXE>
<FIXS> net.torocraft.minecoprocessors.processor.ProcessorTest.assertRegisters(processor, 30, 30, 0, 0); <FIXE> <FIXS> net.torocraft.minecoprocessors.processor.ProcessorTest.assertRegisters(processor, 51, 30, 0, 0); <FIXE>
<FIXS> for (int i = 2; i <= n; i++) { <FIXE> <FIXS> n /= i; <FIXE>
<FIXS> }else { return (ch == '/') && ((peekChar()) == '>'); } <FIXE>
<FIXS> if ((hovered != null) && (hovered instanceof org.reactome.web.diagram.data.interactors.model.InteractorEntity)) { hoveredInteractor = ((org.reactome.web.diagram.data.interactors.model.InteractorEntity) (hovered)); }else { <FIXE> <FIXS> } <FIXE>
<FIXS> return performMixedOperations(tree); <FIXE>
<FIXS> }else { vista.showOffline(false); } <FIXE>
<FIXS> <FIXE>
<FIXS> if ((data != null) && ((data.entrySet().size()) != 0)) { for (java.util.Map.Entry<java.lang.Integer, java.lang.Object> entry : data.entrySet()) { binding.setVariable(entry.getKey(), entry.getValue()); } binding.executePendingBindings(); <FIXE> <FIXS> <FIXE>
<FIXS> @java.lang.Override <FIXE> <FIXS> final VASL.build.module.OBA.Module mod = new VASL.build.module.OBA.Module(this); final VASL.build.module.OBA.CreateModule c = new VASL.build.module.OBA.CreateModule(this, getModuleCount(), mod.getState()); <FIXE>
<FIXS> db = null; <FIXE>
<FIXS> <FIXE>
<FIXS> operations.clear(); <FIXE>
<FIXS> if (org.structr.core.graph.search.SearchCommand.getAllSubtypesAsStringSet(entity.getType()).contains(type)) { <FIXE>
<FIXS> context.startActivity(new android.content.Intent(context, xyz.belvi.baseauth_firebase.auth.FireAuthActivity.class).putExtra(xyz.belvi.baseauth_firebase.auth.STYLE_KEY, styleRes).putExtra(xyz.belvi.baseauth_firebase.auth.CODE_LENGTH, FirebaseAuthListener.AUTH_CODE_LENGTH).putExtra(xyz.belvi.baseauth_firebase.auth.AUTH_MODE_KEY, AUTH_MODE.FIRE_BASE.name())); <FIXE>
<FIXS> if (((cartDataModelList.get(index).index) == (item.index)) && ((cartDataModelList.get(index).getId()) == (item.getId()))) { <FIXE>
<FIXS> vehicles = ((java.util.List<trackerApplication.entity.Vehicle>) (session.get(trackerApplication.entity.Vehicle.class, username))); <FIXE>
<FIXS> new org.neo4j.wrapper.LoggingService().initLogger(); <FIXE>
<FIXS> if (isEmpty) { <FIXE>
<FIXS> <FIXE> <FIXS> onSetSongs(); <FIXE>
<FIXS> org.wso2.carbon.apimgt.core.impl.AbstractAPIManager apiStore = new org.wso2.carbon.apimgt.core.impl.APIStoreImpl(org.wso2.carbon.apimgt.core.impl.AbstractAPIManagerTestCase.USER_NAME, apiDAO, null, null, null, null, null, null); <FIXE>
<FIXS> if ((mTabWidth) == 0) { mTabWidth = (mViewPager.getWidth()) / (mViewPager.getAdapter().getCount()); <FIXE> <FIXS> float translationX = (mTabWidth) * (positionOffset + position); setTranslationX(translationX); <FIXE>
<FIXS> ml.setScale(xScaling, yScaling); <FIXE>
<FIXS> org.talend.mdm.commmon.metadata.FieldMetadata fieldMetadata = org.talend.mdm.commmon.metadata.annotation.ForeignKeyProcessor.getFieldMetadata(repository, ((org.talend.mdm.commmon.metadata.ComplexTypeMetadata) (state.getReferencedType())), appInfo, path, true); <FIXE>
<FIXS> gameFrame.getGame().setCurrentPlayer(0); <FIXE>
<FIXS> return null; <FIXE>
<FIXS> world.runTick(true); <FIXE>
<FIXS> public static boolean setAutoExposureLock(boolean lock) { <FIXE> <FIXS> return true; <FIXE> <FIXS> return false; <FIXE>
<FIXS> return (intValue != null) && (intValue > (comparison)); <FIXE>
<FIXS> for (java.util.UUID job : toKill) { <FIXE>
<FIXS> android.content.Intent chooserIntent = null; chooserIntent = android.content.Intent.createChooser(getIntent, "Select Image"); <FIXE>
<FIXS> javax.swing.ImageIcon iih = new javax.swing.ImageIcon("snakehead.png"); <FIXE>
<FIXS> lowerPart.setLayoutData(new org.eclipse.swt.layout.GridData(org.eclipse.swt.SWT.FILL, org.eclipse.swt.SWT.FILL, true, true)); <FIXE>
<FIXS> return ((entries[entry]) & (1L << offset)) != 0; <FIXE>
<FIXS> bqb.must(build(filterQuery)); <FIXE>
<FIXS> }else { <FIXE>
<FIXS> return modelService.getSection(java.util.UUID.fromString(sectionIdStr), getLoggedUserId(), level); <FIXE>
<FIXS> if ((getActivity()) == null) return ; <FIXE>
<FIXS> gitRepo = org.eclipse.jgit.api.Git.cloneRepository().setURI(getOriginUrl()).setDirectory(createTempDirectory("TestGitRepo")).call(); <FIXE>
<FIXS> currentLine = currentLine.trim(); <FIXE>
<FIXS> return new org.mifosplatform.infrastructure.scheduledemail.domain.EmailMessage(externalId, group, client, staff, EmailMessageStatusType.PENDING, emailSubject, message, sourceAddress, emailAddress, campaignName); <FIXE>
<FIXS> verifyGroupExistenceViaDB(groupId); <FIXE> <FIXS> <FIXE>
<FIXS> if ((args.length) < 2) { <FIXE>
<FIXS> for (int i = 0; i < (mUserInfoViews.size()); i++) { <FIXE>
<FIXS> private void initialize() { <FIXE>
<FIXS> if (((lhs.getFirstName()) != null) || ((rhs.getFirstName()) != null)) { <FIXE>
<FIXS> <FIXE>
<FIXS> return ((BaulastenPictureFinder.PATH_RS) + (BaulastenPictureFinder.SEP)) + (file.toUpperCase()); <FIXE> <FIXS> return ((BaulastenPictureFinder.PATH) + (BaulastenPictureFinder.SEP)) + (file.toUpperCase()); <FIXE> <FIXS> return ((getFolder(number, reducedSize)) + (BaulastenPictureFinder.SEP)) + (file.toUpperCase()); <FIXE>
<FIXS> if ((summonerName == null) || ((summonerName.getName()) == null)) { return co.porkopolis.utils.FileConstants.HOME_PAGE; } <FIXE>
<FIXS> if (!(this.world.isPositionInWorld(position))) <FIXE>
<FIXS> if ((onSwipeListener) != null) { onSwipeListener.onAttemptedOnLastPage(); swipeListenerCalled = true; } <FIXE>
<FIXS> boolean expResult = false; <FIXE> <FIXS> <FIXE>
<FIXS> java.lang.String name = Player.find.byId(request().username()).name; if (!(name.equals("admin"))) { <FIXE>
<FIXS> <FIXE>
<FIXS> return partitioner; <FIXE>
<FIXS> if (classDecl.classId.equals(className)) { <FIXE>
<FIXS> @java.lang.SuppressWarnings(value = { "rawtypes" , "unchecked" }) <FIXE> <FIXS> org.osgi.framework.ServiceReference ref = ctx.getServiceReference(com.hazelcast.core.HazelcastInstance.class); <FIXE> <FIXS> return ((com.hazelcast.core.HazelcastInstance) (ctx.getService(ref))); <FIXE>
<FIXS> mListViewModel.loadNextPageZhihu(lastPosition); <FIXE>
<FIXS> <FIXE>
<FIXS> SessionBeanHomeInterceptorFactory.INIT_METHOD.remove(); SessionBeanHomeInterceptorFactory.INIT_PARAMETERS.remove(); <FIXE>
<FIXS> while (true) { this.s = ((ETPSYSTEM.ChannelValue) (this.spotcheck.channel.in().read())); java.lang.System.out.println("ProcessO - sum2: Received s through spotcheck"); ETPSYSTEM.Sum2O.repl2O rep = new ETPSYSTEM.Sum2O.repl2O(this.spotcheck, this.topa, this.read, this.s, this.ls); org.jcsp.lang.ProcessManager manager = new org.jcsp.lang.ProcessManager(rep); manager.start(); } <FIXE>
<FIXS> <FIXE>
<FIXS> synchronized(m_particleSystem) { traer.physics.Particle newParticle = m_particleSystem.makeParticle(campaignencyclopedia.display.swing.graphical.CampaignEntityGraphCanvas.PARTICLE_MASS, x, y, 0); for (int i = 0; i < (m_particleSystem.numberOfParticles()); i++) { traer.physics.Particle p = m_particleSystem.getParticle(i); if (p.equals(newParticle)) { continue; } m_particleSystem.makeAttraction(p, newParticle, campaignencyclopedia.display.swing.graphical.CampaignEntityGraphCanvas.REPULSIVE_FORCE, campaignencyclopedia.display.swing.graphical.CampaignEntityGraphCanvas.MIN_REPULSIVE_DISTANCE); <FIXE> <FIXS> return newParticle; <FIXE> <FIXS> <FIXE>
<FIXS> com.lzh.nonview.router.Router.resume(uri, extras).open(context); <FIXE>
<FIXS> cameraGUI.viewportHeight = com.packtpub.libgdx.canyonbunny.util.Constants.VIEWPORT_GUI_HEIGHT; cameraGUI.viewportWidth = ((com.packtpub.libgdx.canyonbunny.util.Constants.VIEWPORT_GUI_HEIGHT) / ((float) (height))) * ((float) (width)); <FIXE>
<FIXS> } catch (java.lang.Exception e) { <FIXE>
<FIXS> <FIXE>
<FIXS> android.view.Window window = cordova.getActivity().getWindow(); <FIXE>
<FIXS> makeMessageBox(((java.lang.String) (r[p].invoke(pet, new java.lang.Object[]{ })))); <FIXE>
<FIXS> java.lang.String line; <FIXE>
<FIXS> if ((left instanceof java.lang.String) && (right instanceof java.lang.String)) { return ((java.lang.String) (left)) + right; <FIXE>
<FIXS> if ((index > (-1)) && (index < (this.end))) { <FIXE>
<FIXS> private void openFolder(java.lang.String folderName) throws javax.mail.MessagingException { <FIXE> <FIXS> throw new javax.mail.MessagingException("Invalid folder"); <FIXE>
<FIXS> java.lang.System.out.println(b); <FIXE>
<FIXS> nodes.add(edge.from()); nodes.add(edge.to()); <FIXE>
<FIXS> prep.setString(2, plugin.getConfigManager().getDefaultRace().trim()); <FIXE>
<FIXS> org.apache.drill.exec.store.indexr.ScanWrokProvider.CacheKey key = new org.apache.drill.exec.store.indexr.ScanWrokProvider.CacheKey(scanId, scanSpec, limitScanRows, columns); <FIXE>
<FIXS> <FIXE>
<FIXS> if ((statement1) == (Statement.NULL)) { <FIXE>
<FIXS> <FIXE>
<FIXS> if ((rhs.playerId) == (this.playerId)) { return 0; }else if ((this.playerId) < (rhs.playerId)) { return -1; }else { return 1; } <FIXE>
<FIXS> return new value.IntegerValue(); <FIXE>
<FIXS> <FIXE>
<FIXS> list.addAll(java.util.Arrays.asList(0, 0, 1, 7, 1, 1)); <FIXE>
<FIXS> for (double d : series) { <FIXE> <FIXS> return java.lang.Math.sqrt((sum / ((series.size()) - 1.0))); <FIXE>
<FIXS> public static void setOmHome() { <FIXE>
<FIXS> java.lang.StringBuilder temp = new java.lang.StringBuilder(java.lang.Integer.toHexString(number)); <FIXE> <FIXS> temp.append("0").append(temp); <FIXE> <FIXS> return temp.toString(); <FIXE>
<FIXS> public int compareTo(ch.redmonkeyass.zombieInvasion.worldmap.Node other) { <FIXE>
<FIXS> saveService.saveDataValue(SaveEnum.SCENE_CODE, (-1)); <FIXE>
<FIXS> <FIXE>
<FIXS> public static <T> void serialize(T object, java.io.OutputStream resultStream, java.lang.String schemaLocation) throws javax.xml.bind.JAXBException { javax.xml.bind.JAXBContext jaxbContext = javax.xml.bind.JAXBContext.newInstance(object.getClass()); <FIXE>
<FIXS> int inputMode_i = WindowManager.LayoutParams.SOFT_INPUT_ADJUST_NOTHING; if (inputMode_s.equals("pan")) { inputMode_i = WindowManager.LayoutParams.SOFT_INPUT_ADJUST_PAN; }else if (inputMode_s.equals("resize")) { inputMode_i = WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE; } cordova.getActivity().getWindow().setSoftInputMode(inputMode_i); <FIXE>
<FIXS> <FIXE> <FIXS> channel.getWriteSetter().set(internalListener); <FIXE>
<FIXS> int startVertex = (row * numInRow) + 1; <FIXE> <FIXS> while (idxInRow < (numInRow - 1)) { addFace(currVertex, (currVertex + 1), (currVertex + numInRow)); addFace((currVertex + 1), ((currVertex + numInRow) + 1), (currVertex + numInRow)); <FIXE>
<FIXS> T object = com.robertsmieja.test.utils.junit.Internal.createObjectFromDefaultConstructor(aClass); <FIXE>
<FIXS> <FIXE>
<FIXS> org.rstudio.studio.client.workbench.views.terminal.TerminalSession newSession = new org.rstudio.studio.client.workbench.views.terminal.TerminalSession(sequence, terminalHandle, caption, title, hasChildProcs, cols, rows, uiPrefs_.blinkingCursor().getValue(), true, shellType); <FIXE>
<FIXS> boolean check2 = test2.equals("1.jpg"); <FIXE>
<FIXS> for (final T each : filteredChildren) { <FIXE>
<FIXS> throw new java.util.NoSuchElementException(); <FIXE> <FIXS> this.startDate = java.util.Optional.empty(); <FIXE>
<FIXS> throw new java.lang.NullPointerException(); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> private void show(java.lang.String address) { <FIXE>
<FIXS> <FIXE>
<FIXS> if (minutes >= 60) { <FIXE>
<FIXS> if (mName.equals(newHeroName)) return ; <FIXE>
<FIXS> intent1.putExtra(Params.BUSINESS_OWNER, true); <FIXE>
<FIXS> if ((p.getMiles()) > (ooptraining.DiscountCalculator.GOLD_LIMIT)) { discount = ooptraining.DiscountCalculator.GOLD_DISCOUNT; <FIXE> <FIXS> if ((p.getMiles()) > (ooptraining.DiscountCalculator.SILVER_LIMIT)) { discount = ooptraining.DiscountCalculator.SILVER_DISCOUNT; <FIXE>
<FIXS> compileAndLogTestSequences(result, params); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> double max = java.lang.Math.abs(((a.getY()) - (b.getY()))); <FIXE>
<FIXS> private java.util.Collection getTypedCollection(com.bagri.core.system.Schema schema, java.lang.String typePath) { for (java.util.Collection collect : schema.getCollections()) { <FIXE>
<FIXS> java.util.Date submissionDeadline = java.util.Calendar.getTime(); java.util.Date reviewDeadline = java.util.Calendar.getTime(); <FIXE>
<FIXS> <FIXE>
<FIXS> if (!(sendAndReceive(("deregister " + (id))))) { <FIXE>
<FIXS> if (playername != null) _scoreBoard.put(_panel.gameModel().step(), playername); <FIXE>
<FIXS> <FIXE>
<FIXS> calendarDate.month = (cal.get(java.util.Calendar.MONTH)) + 1; <FIXE>
<FIXS> com.liferay.portal.kernel.model.Company company = _companyLocalService.getCompanyById(portletDataContext.getCompanyId()); com.liferay.portal.kernel.model.Group companyGroup = company.getGroup(); updateImportPortletPreferencesClassPKs(portletDataContext, portletPreferences, "organizationId", com.liferay.portal.kernel.model.Organization.class, companyGroup.getGroupId()); <FIXE>
<FIXS> resolvedData.add(temp); <FIXE>
<FIXS> public void addItem(item.Item i, int count) { <FIXE> <FIXS> if (count != (-1)) { item.count = count; } <FIXE> <FIXS> items.get(loc).count += item.count; <FIXE>
<FIXS> medications = "false"; <FIXE>
<FIXS> totalBalance += 200; <FIXE> <FIXS> totalBalance += 80; <FIXE>
<FIXS> <FIXE> <FIXS> super.onDisable(); <FIXE>
<FIXS> if (!(mMemeData.isEmpty())) { android.os.Bundle args = new android.os.Bundle(); args.putSerializable(getString(R.string.photo_data_key), mMemeData); mPhotoFragment.setArguments(args); loadFragment(mPhotoFragment); } <FIXE>
<FIXS> if (x > (width - 1)) { x = width - 1; <FIXE>
<FIXS> if (isHorizontal()) { <FIXE>
<FIXS> <FIXE>
<FIXS> zeroValues = new java.util.ArrayList<java.lang.Integer>(); <FIXE>
<FIXS> if ((userLoggedInCookie == null) || ((models.User.find("byToken", userLoggedInCookie.value).first()) == null)) { <FIXE>
<FIXS> view.startDrag(android.content.ClipData.newPlainText("", ""), new android.view.View.DragShadowBuilder(), view, 0); <FIXE>
<FIXS> textView.setText(getArguments().getInt(com.moana.carsharing.base.BasePagerActivity.PlaceholderFragment.ARG_SECTION_NUMBER)); <FIXE>
<FIXS> if (scorer == 1) { <FIXE>
<FIXS> java.lang.String idFieldName, @android.support.annotation.NonNull java.lang.String id) { final int numberOfRowsUpdated = storIOSQLiteDb.internal().update(new com.pushtorefresh.storio.sqlitedb.query.UpdateQuery.Builder().table(table).where((idFieldName + "=?")).whereArgs(id).build(), contentValues); <FIXE>
<FIXS> guitests.guihandles.PersonCardHandle addedCard = taskListPanel.navigateToPerson(personToAdd.getTaskDetails().toString()); <FIXE>
<FIXS> startTime = parsedDates.get(main.java.Task.POSITION_FIRST_DATE).toLocalTime(); <FIXE>
<FIXS> tabLayout.addTab(tabLayout.newTab().setText(com.nsqre.insquare.Fragments.ProfileFragment.TAB_FAVOURITE)); <FIXE> <FIXS> <FIXE>
<FIXS> this.fetcher = new com.nutscape.mc.nunuubot.Connection.MessageFetcher(s.getInputStream(), msgQueue, bot); <FIXE>
<FIXS> public void onDataReceived(com.jacks205.spots.model.ParkingStructure[] structures) { <FIXE> <FIXS> spotsListAdapter = new com.jacks205.spots.adapters.SpotsListAdapter(this, structures); <FIXE> <FIXS> <FIXE>
<FIXS> com.myapp.handbook.HttpConnectionUtil.UploadImage(photoFile); <FIXE>
<FIXS> if (block == null) return null; <FIXE>
<FIXS> if (currentRow >= rowCount) { <FIXE>
<FIXS> mockMvc.perform(org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get("/")).andExpect(org.springframework.test.web.servlet.result.MockMvcResultMatchers.status().isOk()).andExpect(org.springframework.test.web.servlet.result.MockMvcResultMatchers.model().attribute("tasks", tasks)).andExpect(org.springframework.test.web.servlet.result.MockMvcResultMatchers.model().size(1)).andExpect(org.springframework.test.web.servlet.result.MockMvcResultMatchers.view().name("index")); <FIXE>
<FIXS> if ((keys[i]) == c) { <FIXE>
<FIXS> public static void main(java.lang.String[] args) throws java.io.IOException, java.lang.ClassNotFoundException { <FIXE> <FIXS> sconn = new java.net.ServerSocket(port); <FIXE> <FIXS> <FIXE>
<FIXS> if ((com.nectar.thesun.library.MyConstants.homenews) == null) { com.nectar.thesun.library.MyConstants.homenews = new java.util.ArrayList<>(); <FIXE> <FIXS> com.nectar.thesun.PageSlidingTabStripFragment.mcontext = getActivity().getApplicationContext(); <FIXE> <FIXS> <FIXE>
<FIXS> public java.util.Collection<net.sf.memoranda.Task> getAllSubTasks(java.lang.String taskId) { <FIXE> <FIXS> <FIXE>
<FIXS> return ((((ownerData.getLastName()) + " ") + (ownerData.getFirstName())) + " ") + (ownerData.getMiddleName()); <FIXE>
<FIXS> return (this.height) - r; <FIXE>
<FIXS> java.lang.System.exit(0); <FIXE>
<FIXS> statement.setInt(3, characteristicValue.getId()); <FIXE>
<FIXS> this.grid = new com.example.jacek.streamthegame.Grid(this.getContext(), this.nRows, this.nCols, ((getWidth()) / (this.nCols)), ((getHeight()) / (this.nRows))); <FIXE>
<FIXS> break; <FIXE>
<FIXS> assertEquals(("Got " + (m.name())), p.getContent()); <FIXE>
<FIXS> player.closeInventory(); <FIXE> <FIXS> <FIXE>
<FIXS> int result = ((getDateFrom()) != null) ? getDateFrom().hashCode() : 0; result = (31 * result) + ((getUser()) != null ? getUser().hashCode() : 0); result = (31 * result) + ((getBookInstance()) != null ? getBookInstance().hashCode() : 0); <FIXE>
<FIXS> public java.lang.String getSpeed(long size) { synchronized(this) { sum += size; } <FIXE> <FIXS> <FIXE>
<FIXS> if (done) { return ; } <FIXE>
<FIXS> de.hshannover.f4.trust.visitmeta.gui.util.RestConnection tmp = new de.hshannover.f4.trust.visitmeta.gui.util.RestConnection(getDataserviceConnection(), getName()); <FIXE>
<FIXS> long id = time; <FIXE>
<FIXS> java.lang.Object[] vector = new java.lang.Object[2]; <FIXE> <FIXS> <FIXE>
<FIXS> send(answer, response); <FIXE>
<FIXS> <FIXE>
<FIXS> return new MapPosition(x, ((y) - 1)); <FIXE> <FIXS> return new MapPosition(x, ((y) + 1)); <FIXE> <FIXS> return new MapPosition(((x) + 1), y); <FIXE> <FIXS> return new MapPosition(((x) - 1), y); <FIXE>
<FIXS> graphics.Screen screen = new graphics.Screen("Bob", true); <FIXE>
<FIXS> protected void onCreate(final android.os.Bundle savedInstanceState) { <FIXE>
<FIXS> employee.setBytes("Chaitra".getBytes()); <FIXE>
<FIXS> if ((player) != null) { if (player.isPlaying()) { player.stop(); } player.release(); <FIXE> <FIXS> <FIXE>
<FIXS> models.Rate rate = models.Rate.findByUserIdAndProjectIdAndCriteriaId(userId, projectId, criteriaId); rate.score = score; rate.update(); return rate; <FIXE>
<FIXS> if (((this.data.length) < 3) || ((this.data.length) > 11)) <FIXE>
<FIXS> <FIXE>
<FIXS> gamePanel.setCurrentTypedWordLabel(game.currentTypedWord, game.currentCorrectIndex, game.currentIndex); <FIXE>
<FIXS> <FIXE>
<FIXS> sqlServerManager.sqlDatabases().getBySqlServer(com.microsoft.azure.management.sql.SqlServerOperationsTests.RG_NAME, com.microsoft.azure.management.sql.SqlServerOperationsTests.SQL_SERVER_NAME, newDatabase); <FIXE>
<FIXS> <FIXE>
<FIXS> return traceSearch.getEventIterator(ocelotlParameters.getTrace(), ocelotlParameters.getTraceTypeConfig().getTypes(), time, eventProducers, monitor); <FIXE>
<FIXS> services.FavouriteQuoteImporter.LOGGER.debug("Parsing line: {}", line); <FIXE>
<FIXS> com.android.server.telecom.Log.v(this, "setConnectionManager, changing %s -> %s", mAttemptRecords.get(0), record); <FIXE>
<FIXS> try { <FIXE> <FIXS> <FIXE>
<FIXS> train.addHistory(station, context.getGameLogic().getPlayerManager().getTurnNumber()); <FIXE>
<FIXS> int buf = fiches; fiches = 0; return (puntata) + (buf + (puntata)); <FIXE>
<FIXS> if ((button == (org.lwjgl.glfw.GLFW.GLFW_MOUSE_BUTTON_1)) && (state == 0)) { <FIXE>
<FIXS> <FIXE> <FIXS> if (!(hasNext())) { throw new java.util.NoSuchElementException(); } <FIXE>
<FIXS> getUserDetailFromFB(); <FIXE>
<FIXS> <FIXE>
<FIXS> if ((segments) != null) for (com.smanzana.dungeonmaster.ui.app.swing.editors.StepField.RangeSegment seg : segments) { if (seg != null) out.addStep(seg.getMax(), seg.getValue()); } <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> public static int calculateScore(java.util.ArrayList<PairTime> pairTimes) { <FIXE>
<FIXS> (sp)--; <FIXE>
<FIXS> <FIXE>
<FIXS> public static int minimaxDecision(State state) { <FIXE> <FIXS> v = temp; <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> for (final org.fenixedu.ulisboa.specifications.authentication.IULisboaRedirectionHandler iuLisboaRedirectionHandler : org.fenixedu.ulisboa.specifications.authentication.ULisboaAuthenticationRedirector.handlers) { if (iuLisboaRedirectionHandler.isToRedirect(user, request)) { return iuLisboaRedirectionHandler.redirectionPath(user, request); <FIXE>
<FIXS> public org.opennms.netmgt.model.topology.BridgePort getBridgePort(java.lang.Integer nodeid) { <FIXE> <FIXS> for (org.opennms.netmgt.model.topology.BridgePort link : m_portsOnSegment) { if ((link.getNode().getId().intValue()) == (nodeid.intValue())) return link; <FIXE>
<FIXS> <FIXE>
<FIXS> redirectAttributes.addFlashAttribute("userDeleteSuccess", true); <FIXE>
<FIXS> <FIXE>
<FIXS> if ("org.apache.jmeter.control.ModuleController".equals(item.getClass().getName())) { <FIXE>
<FIXS> Item item = array[((last) - 1)]; <FIXE> <FIXS> array[((last) - 1)] = null; <FIXE> <FIXS> last = N; <FIXE>
<FIXS> java.sql.Connection con; <FIXE>
<FIXS> java.lang.String rendered = soyService.renderPlugin(pluginRegion, com.google.common.base.Optional.of(new com.jivesoftware.os.upena.deployable.region.ConfigPluginRegion.ConfigPluginRegionInput("", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", false, true, false))); <FIXE>
<FIXS> <FIXE>
<FIXS> }, param); <FIXE>
<FIXS> <FIXE>
<FIXS> if (index >= 0) { <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> boolean[] syncStates = null; <FIXE>
<FIXS> <FIXE>
<FIXS> activeMessageSource.set(null); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> com.orhanobut.tracklytics.AssertTracker.assertTrack(tracker).event("title").noTags().attribute("key1", "value1").attribute("key2", "value2").noSuperAttributes(); <FIXE>
<FIXS> coll = org.rapidoid.util.U.list(item); <FIXE> <FIXS> container.set(coll); <FIXE>
<FIXS> private static double noteToFreq(int key) { <FIXE>
<FIXS> synchronized void register(com.kk.bus.Bus bus, java.lang.Object objectToRegister, java.util.Set<java.lang.reflect.Method> subscriberMethods, com.kk.bus.DeliveryContext deliveryContext) { com.kk.bus.EventDeliverer eventDeliverer = mObjectDeliverers.get(objectToRegister); if (eventDeliverer == null) { eventDeliverer = new com.kk.bus.EventDeliverer(bus, objectToRegister, deliveryContext); mObjectDeliverers.put(objectToRegister, eventDeliverer); <FIXE> <FIXS> eventDeliverer.setSubscriberMethods(subscriberMethods); <FIXE>
<FIXS> if (image == null) { return ; } <FIXE>
<FIXS> backupTask = plugin.getServer().getScheduler().scheduleAsyncDelayedTask(plugin, new net.madmanmarkau.MultiHome.ChunkResendTask(location), 1); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> public static java.lang.String getUniqueTitle(net.minecraft.world.World world) { <FIXE>
<FIXS> if ((!(vn.toElement(VTDNav.FIRST_CHILD, AgigaConstants.HEADLINE))) || ((vn.getText()) == (-1))) { <FIXE>
<FIXS> isHeader = savedInstanceState.getBoolean("isHeader", false); <FIXE>
<FIXS> if ((getSupportActionBar()) != null) { getSupportActionBar().setDisplayHomeAsUpEnabled(true); } <FIXE>
<FIXS> if (station != null) { listener.setPlayerStates((-1), State.IS_WAIT); if ((mediaPlayer) == null) initPlayer(station.getSource()); else { if (mediaPlayer.isPlaying()) { pause(); }else { play(); } <FIXE>
<FIXS> <FIXE>
<FIXS> return num; <FIXE>
<FIXS> public boolean isHovered(int mouseX, int mouseY) { <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> edWindow.loadFrameAndShow(selectedNode); <FIXE>
<FIXS> <FIXE>
<FIXS> graph.insertEdge(root, null, name, source, target); <FIXE>
<FIXS> clientObject.set("eventType", org.eclipse.rap.clientscripting.internal.ClientListenerBindingSynchronizer.getEventType(binding)); <FIXE>
<FIXS> boolean userRemovedFromYarnPolicy = this.yarnCommonService.removeUserFromQueuePermission(policyIds[0], groupName, accountName); boolean userRemovedFromHDFSPolicy = this.hdfsAdminService.removeUserFromResourcePermission(policyIds[1], groupName, accountName); <FIXE>
<FIXS> <FIXE>
<FIXS> public synchronized int xToPixel(double x, mesquite.lib.MesquiteChart chart) { <FIXE> <FIXS> int value = (margin + (tempNum.setWithinBounds(minX, maxX, ((fieldWidth - (2 * margin)) - (markerWidth))))) - (chart.getXPixelBase()); return value; <FIXE>
<FIXS> resetPieces(); <FIXE> <FIXS> <FIXE>
<FIXS> return new soot.JastAddJ.ZipFilePart(f); <FIXE>
<FIXS> org.assertj.core.api.Assertions.assertThat(new org.corpus_tools.pepper.core.ModuleFitnessChecker().checkFitness(module).getFitness(FitnessFeature.HAS_NAME)).isEqualTo(false); <FIXE>
<FIXS> javax.servlet.http.HttpSession session = request.getSession(); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> if ((messageCode == null) || (messageCode.isEmpty())) { return "nowe orzeczenie"; } <FIXE>
<FIXS> <FIXE>
<FIXS> if (volume >= 1.0) { <FIXE> <FIXS> float newVolume = ((float) (volume + 0.01)); if (newVolume > 1.0) newVolume = ((float) (1.0)); <FIXE>
<FIXS> a.add(new java.util.LinkedHashMap()); <FIXE>
<FIXS> trafficLightsView.changeLight(TrafficLightsView.Light.RED); java.lang.Thread.sleep(this.offset); while (!(java.lang.Thread.interrupted())) { trafficLightsView.changeLight(TrafficLightsView.Light.GREEN); java.lang.Thread.sleep(greenLightDuration); <FIXE> <FIXS> java.lang.Thread.sleep(redLightDuration); } <FIXE>
<FIXS> <FIXE>
<FIXS> org.shingo.shingoeventsapp.api.InitLoader loader = new org.shingo.shingoeventsapp.api.InitLoader(org.shingo.shingoeventsapp.ui.events.EventDetailFragment.mEvent_id, getContext()); <FIXE>
<FIXS> <FIXE> <FIXS> this.currentStatus = main.java.game.ResistanceGame.GameStatus.AWAITING_MISSION_RESULT; <FIXE>
<FIXS> <FIXE>
<FIXS> temp = this.fileMap.get(fileName); <FIXE>
<FIXS> public boolean checkImpl(wjtoth.cyclicstablematching.Matching matching, wjtoth.cyclicstablematching.PreferenceSystem preferenceSystem) { wjtoth.cyclicstablematching.MatchingPS mathcingPS = new wjtoth.cyclicstablematching.MatchingPS(matching, preferenceSystem); if ((mathcingPS.size()) == 0) { return false; } boolean isInternallyBlocked = mathcingPS.isInternallyBlocked(); if (isInternallyBlocked) { return false; } java.util.List<java.util.List<java.lang.Integer>> potentialBlocks = mathcingPS.firstOrderDissatisfied(); if (checkImpl(potentialBlocks, mathcingPS, preferenceSystem)) { return true; <FIXE>
<FIXS> s += str.charAt(((len - 1) - i)); <FIXE>
<FIXS> org.apache.kafka.streams.processor.internals.RecordCollector.log.error(("Error sending record: " + metadata), exception); <FIXE>
<FIXS> int zahl = java.lang.Integer.valueOf(SoFTlib.Helper.words(input, 1, index, index)); <FIXE>
<FIXS> case org.squiddev.cobalt.Lua.OP_LEN : op = "length"; break; <FIXE> <FIXS> <FIXE>
<FIXS> for (int x = 0; x < (Game.Controllers.BoardController.BOARDSIZE); x++) { for (int y = 0; y < (Game.Controllers.BoardController.BOARDSIZE); y++) { <FIXE>
<FIXS> java.lang.String localPath = path.substring(path.indexOf("/img")); user.setPicture((("/Lavalloisir" + localPath) + pictureName)); <FIXE> <FIXS> <FIXE>
<FIXS> if ((pageNumber <= 0) || (pageNumber > (this.pages.length))) { <FIXE>
<FIXS> if ((response.getRefresh_token()) != null) { com.mcnaughton.client.SpotifyClient.refreshToken = response.getRefresh_token(); } <FIXE>
<FIXS> protected static org.matheclipse.core.interfaces.IAST sortResults(org.matheclipse.core.interfaces.IAST resultList) { <FIXE>
<FIXS> long ordinal = (((long) (java.lang.Math.ceil((cumulativeProbability * card)))) + min) - 1; <FIXE>
<FIXS> writer.write(((((de.neffez.timetrack.util.DateUtil.getTodayFormatted(TimeTrackConstants.DE_DATE)) + " ") + (timeSinceStartup.getText())) + "\n")); <FIXE>
<FIXS> if ((mCropPhoto) != null) { com.pkjiao.friends.mm.common.CommonDataStructure.UploadHeadPicResultEntry resultEntry = com.pkjiao.friends.mm.utils.Utils.uploadHeadPicBitmap(CommonDataStructure.URL_UPLOAD_HEAD_PIC, uid, mCropPhoto, mCropPhotoName); if (!(isUidExistInHeadPicDB(uid))) { insertHeadPicToHeadPicsDB(resultEntry); }else { updateHeadPicToHeadPicsDB(resultEntry); } <FIXE>
<FIXS> return ((((n.getId()) == (this.getId())) && (n.ntype.equals(this.ntype))) && (n.label.equals(this.label))) && (this.children.equals(n.children)); <FIXE>
<FIXS> timer = new edu.wpi.first.wpilibj.Timer(); <FIXE> <FIXS> <FIXE>
<FIXS> refreshToken(); <FIXE>
<FIXS> org.jdom2.Element p = buildElement(files, dirName); <FIXE>
<FIXS> listener.onPageScrolled(java.lang.Math.min(position, (count - 1)), (position < count ? positionOffset : 0), (position < count ? positionOffsetPixels : 0)); <FIXE>
<FIXS> if (task == null) { return ; } <FIXE> <FIXS> if (parentNode != null) parentNode.removeSubTask(task); <FIXE>
<FIXS> de.skuzzle.polly.sdk.eventlistener.MessageEvent e = new de.skuzzle.polly.sdk.eventlistener.MessageEvent(this, user, target, action); <FIXE>
<FIXS> if (selectedConvo != null) { codeu.chat.client.simplegui.ChatGuiFX.clientContext.conversation.setCurrent(selectedConvo); updateCurrentConversation(selectedConvo); } <FIXE>
<FIXS> <FIXE> <FIXS> org.paces.Stata.Data.DataSet stataData = new org.paces.Stata.Data.DataSet(dbg); <FIXE>
<FIXS> private static weka.core.Instances loadTestFile(java.io.File file) { <FIXE> <FIXS> loader.setFile(file); <FIXE>
<FIXS> java.lang.String string = new com.abhelly.builditbigger.EndpointsAsyncTask(getContext(), null).execute().get(); <FIXE>
<FIXS> private void init() { <FIXE>
<FIXS> <FIXE>
<FIXS> if ((((x >= 0) && (x < (this.width))) && (y >= 0)) && (y < (this.height))) { <FIXE>
<FIXS> protected void show404(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) throws java.io.IOException, javax.servlet.ServletException { <FIXE>
<FIXS> android.widget.Toast.makeText(getActivity(), R.string.error_update_student, Toast.LENGTH_SHORT).show(); <FIXE>
<FIXS> <FIXE>
<FIXS> protected org.eclipse.xtext.common.types.JvmType doFindTypeByName(java.lang.String name, boolean traverseNestedTypes) { <FIXE>
<FIXS> com.sheepit.client.hardware.gpu.GPU.devices = new java.util.LinkedList<com.sheepit.client.hardware.gpu.GPUDevice>(); <FIXE>
<FIXS> dbProperties = new java.util.Properties(); <FIXE>
<FIXS> public void onHeadingChanged(double p_heading, double p_magnetic_heading, double p_true_heading, double p_timestamp, float p_x, float p_y, float p_z, float p_accuracy) { <FIXE>
<FIXS> static void writeMap(net.openhft.chronicle.queue.ExcerptAppender appender, java.util.Map<java.lang.String, ?> map) { <FIXE> <FIXS> for (java.util.Map.Entry<java.lang.String, ?> entry : map.entrySet()) { <FIXE>
<FIXS> if (!(canMove())) return ; <FIXE>
<FIXS> mAdapter = new com.example.hasmik_n.todolist.handlers.TasksRecyclerViewAdapter(tasks); <FIXE>
<FIXS> <FIXE>
<FIXS> super.preUpdate(); <FIXE>
<FIXS> return ((server.config.properties.get("c10tArgs").length()) > 0) && (maxAge > (lastRun)); <FIXE>
<FIXS> java.lang.String label = null; <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> if (intent != null) { if (lv.kasparsj.android.util.Objects.equals(intent.getAction(), getString(R.string.action_update))) { if (screenStateReceiver.isScreenOff()) { pendingUpdateReceiver.setIsPendingUpdate(true); }else { lv.kasparsj.android.dwob.model.DailyWords.getInstance().update(); } <FIXE>
<FIXS> <FIXE>
<FIXS> callPuter(result.get(0).toLowerCase()); <FIXE>
<FIXS> return (isProductCodeValid(product)) && ((((isProductUnique(product)) && (isProductNameValid(product))) && (isCostPricePositive(product))) && (isPricePositive(product))); <FIXE>
<FIXS> if (destX == ((this.y) + 2)) { <FIXE> <FIXS> if (destX == ((this.y) + 1)) { <FIXE>
<FIXS> public boolean isAddStepsValid(java.lang.String value) { <FIXE> <FIXS> return false; <FIXE> <FIXS> return true; <FIXE> <FIXS> return true; <FIXE>
<FIXS> if (i == (android.content.pm.PackageManager.PERMISSION_DENIED)) { <FIXE>
<FIXS> public static games.strategy.triplea.ai.proAI.data.ProBattleResult callBattleCalculator(final games.strategy.engine.data.PlayerID player, final games.strategy.engine.data.Territory t, final java.util.List<games.strategy.engine.data.Unit> attackingUnits, final java.util.List<games.strategy.engine.data.Unit> defendingUnits, final java.util.Set<games.strategy.engine.data.Unit> bombardingUnits) { return games.strategy.triplea.ai.proAI.util.ProBattleUtils.callBattleCalculator(player, t, attackingUnits, defendingUnits, bombardingUnits, false); <FIXE>
<FIXS> final int max = ((_scroll.getMaximum()) - (_scroll.getMinimum())) + 1; <FIXE>
<FIXS> public static void toh(int n, char src, char aux, char dest) { <FIXE> <FIXS> com.datastructure.stack.problems.TowersOfHanoi.toh((n - 1), aux, src, dest); <FIXE>
<FIXS> com.github.onsdigital.zebedee.json.ContentDetail cloned = new com.github.onsdigital.zebedee.json.ContentDetail(this.description, this.uri, this.type); <FIXE>
<FIXS> p.map.updateDisplay(p.getWidth(), p.getHeight()); <FIXE>
<FIXS> saveToFile(filename, events); <FIXE>
<FIXS> <FIXE> <FIXS> mDownloadProgressDialog = null; <FIXE> <FIXS> new android.app.AlertDialog.Builder(this).setTitle(R.string.success).setIcon(R.drawable.ic_done_black_24dp).setMessage(R.string.download_complete).setCancelable(false).setPositiveButton(R.string.label_ok, null).show(); <FIXE>
<FIXS> java.util.List<session.Invite> myInvites = player.getInvites(); <FIXE>
<FIXS> <FIXE>
<FIXS> if (java.util.Arrays.equals(element, array)) { return true; <FIXE> <FIXS> return false; <FIXE>
<FIXS> } android.util.Log.i(edu.rit.se.wifibuddy.WifiDirectHandler.TAG, "Continuously Discover services called"); if (continueDiscovering) { android.util.Log.w(edu.rit.se.wifibuddy.WifiDirectHandler.TAG, "Services are still discovering, do not need to make this call"); <FIXE> <FIXS> android.util.Log.i(edu.rit.se.wifibuddy.WifiDirectHandler.TAG, "Calling discover and submitting first discover task"); continueDiscovering = true; discoverTasks = new java.util.ArrayList<>(); discoverServices(); submitDiscoverTask(); <FIXE>
<FIXS> public static void saveUnsavedData(android.content.Context context) { <FIXE> <FIXS> org.md2k.thoughtshakeup.QuestionAnswer.getInstance(context).add(new org.md2k.thoughtshakeup.QuestionsJSON(org.md2k.thoughtshakeup.Questions.getInstance())); <FIXE>
<FIXS> if ((value & (1 << (bit))) != 0) { <FIXE>
<FIXS> org.mockito.BDDMockito.given(propertiesParser.getArray(org.mockito.Matchers.anyString(), org.mockito.Matchers.any())).willReturn(new java.lang.String[]{ "something" , "else" , "misconfiguration" }); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> if (org.talend.core.GlobalServiceRegister.getDefault().isServiceRegistered(org.talend.core.ui.ISparkStreamingJobletProviderService.class)) { <FIXE>
<FIXS> public void setNode(model.ClassNode node) { this.node = node; titleField.setText(this.node.getTitle()); attributesArea.setText(this.node.attributesProperty().getValue()); operationsArea.setText(this.node.operationsProperty().getValue()); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> excute(testcase.Object_Description, testcase.Operation_WaitForExists, "更多选项", "10000"); <FIXE>
<FIXS> private void markPhaseTable2() { <FIXE>
<FIXS> clearLevel(); clearLevel(); clearLevel(); <FIXE>
<FIXS> java.lang.String json; <FIXE>
<FIXS> int i = 0; while (i < size) { actions[i] |= (in.read()) << 8; actions[(i++)] |= in.read(); } <FIXE>
<FIXS> public void addCampaign(java.lang.String name, java.lang.String campId) throws java.lang.Exception { <FIXE> <FIXS> com.xrtb.common.Campaign camp = com.xrtb.bidder.WebCampaign.getInstance().db.getCampaign(name, campId); <FIXE>
<FIXS> main.java.Game.stepCounter = java.lang.Math.max(0, ((main.java.Game.stepCounter) - 1)); <FIXE>
<FIXS> for (util.serialization.Serializable item : this.serializer.getItems(this)) { <FIXE>
<FIXS> java.lang.System.out.println(temp.getNext().getData()); <FIXE>
<FIXS> if (simpleName.equals(entry.getValue())) { <FIXE>
<FIXS> <FIXE> <FIXS> mUserHolder.LoadCurrentUser(currentUser.getUid()); <FIXE>
<FIXS> <FIXE>
<FIXS> busList.addBus(bus); <FIXE>
<FIXS> boolean horizontal = (checkWinHorizontal(xTurn, column)) > 4; boolean vertical = (checkWinVertical(xTurn, column)) > 4; boolean diagonal = (checkWinDiagonal(xTurn, column)) > 4; <FIXE>
<FIXS> @com.dataloom.datastore.data.controllers.RequestMapping(path = { (("/" + (ENTITY_DATA)) + "/") + (SET_ID_PATH) }, method = RequestMethod.GET, produces = { org.springframework.http.MediaType.APPLICATION_JSON_VALUE , com.dataloom.datastore.constants.CustomMediaType.TEXT_CSV_VALUE }) public java.lang.Iterable<com.google.common.collect.SetMultimap<org.apache.olingo.commons.api.edm.FullQualifiedName, java.lang.Object>> loadEntitySetData(@com.dataloom.datastore.data.controllers.PathVariable(value = SET_ID) java.util.UUID entitySetId, @com.dataloom.datastore.data.controllers.RequestParam(value = FILE_TYPE, required = false) com.dataloom.datastore.data.controllers.FileType fileType, @com.dataloom.datastore.data.controllers.RequestParam(value = TOKEN, required = false) java.lang.String token, javax.servlet.http.HttpServletResponse response) { <FIXE> <FIXS> return loadEntitySetData(entitySetId, fileType, token); <FIXE>
<FIXS> private void seekTo(int position) { <FIXE> <FIXS> intent.putExtra("SEEK_TO", position); <FIXE>
<FIXS> android.util.Log.d(com.samcodes.admob.BannerListener.TAG, "onBannerFailedToLoad"); <FIXE>
<FIXS> java.lang.String[] fields = lines.get(0).split(fieldSeparator.getText(), (-1)); <FIXE>
<FIXS> public static void main(java.lang.String[] args) { <FIXE>
<FIXS> return com.jersey.purchaseCase.controller.PurchaseCaseController.REDIRECT_ADD_COMMODITY.replace("{id}", purchaseCaseId); <FIXE>
<FIXS> if (!(currentField[i][j][0].equals(solutionField[i][j][0]))) <FIXE>
<FIXS> if ((address != null) && (address.contains(fromRules[i]))) { <FIXE>
<FIXS> co.gov.inci.evaluon.backend.models.classes.user.Evaluee.Info evaluee = new co.gov.inci.evaluon.backend.models.classes.user.Evaluee.Info(co.gov.inci.evaluon.backend.models.classes.user.Evaluee.genderById(gender.getCheckedRadioButtonId()), co.gov.inci.evaluon.backend.models.classes.user.Evaluee.disabilitiesById(disability.getCheckedRadioButtonId()), co.gov.inci.evaluon.backend.models.classes.user.Evaluee.typesById(type.getCheckedRadioButtonId()), co.gov.inci.evaluon.backend.models.classes.user.Evaluee.levelsById(level.getCheckedRadioButtonId())); <FIXE>
<FIXS> public void onSetAlarmTime(android.view.View view) { <FIXE>
<FIXS> assertArrayEquals(canvas, ((char[][]) (consoleCanvas.getCanvas()))); <FIXE>
<FIXS> price = price.add(getSubContractPrice(sub)); <FIXE>
<FIXS> return ((cz.dd4j.utils.Safe.equals(room1, other.room1)) && (cz.dd4j.utils.Safe.equals(room2, other.room2))) || ((cz.dd4j.utils.Safe.equals(room1, other.room2)) && (cz.dd4j.utils.Safe.equals(room2, other.room1))); <FIXE>
<FIXS> return sdf.format(c.getTime()); <FIXE>
<FIXS> modulesBlock.refresh(workingCopy.getAllModules(), workingCopy.getCheckedModules()); <FIXE>
<FIXS> beurten = true; <FIXE> <FIXS> <FIXE>
<FIXS> for (int i = 0; i < (headerValues.length); i++) { tvDataset.getColumns().add(tu.createColumn(i, headerValues[i])); <FIXE>
<FIXS> if (tasks != null) { for (cn.shiyanjun.ddc.scheduling.platform.component.DefaultSchedulingManager.TaskID id : tasks) { managedTaskIdToInfos.remove(id); clearedTasks.add(id); } <FIXE>
<FIXS> <FIXE>
<FIXS> sb.append(message); <FIXE>
<FIXS> dna.FastqRecord output = new dna.FastqRecord(line, line1, line3); <FIXE>
<FIXS> int bits = 3; int[] ids = new int[]{ 3 , 6 , 1 }; int firstId = 0; <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> net.torocraft.minecoprocessors.processor.ProcessorTest.assertRegisters(processor, 3, 6, 0, 0); <FIXE> <FIXS> net.torocraft.minecoprocessors.processor.ProcessorTest.assertRegisters(processor, 0, 5, 0, 0); <FIXE>
<FIXS> if (getEdges().get(i).getP1().equals(p)) { <FIXE>
<FIXS> <FIXE>
<FIXS> upTransaction.setCustomAnimations(R.anim.slide_in_top, R.anim.slide_out_bottom, R.anim.slide_in_left, R.anim.slide_out_right); <FIXE>
<FIXS> compiler.Ecriture.ecrireStringln(flux, (";iffaux " + etiquette)); compiler.Ecriture.ecrireStringln(flux, "pop ax"); compiler.Ecriture.ecrireStringln(flux, "cmp ax,FALSE"); compiler.Ecriture.ecrireStringln(flux, ("je " + etiquette)); <FIXE>
<FIXS> return ; <FIXE>
<FIXS> if ((transition.getSource()) == (transition.getDestination())) { return ; } <FIXE>
<FIXS> if (edu.iastate.symex.util.FileIO.TURN_CACHE_ON) { if (!(edu.iastate.symex.util.FileIO.fileMap.containsKey(inputFile))) edu.iastate.symex.util.FileIO.fileMap.put(inputFile, edu.iastate.symex.util.FileIO.readStringFromFileWithoutCache(inputFile)); return edu.iastate.symex.util.FileIO.fileMap.get(inputFile); }else { return edu.iastate.symex.util.FileIO.readStringFromFileWithoutCache(inputFile); } <FIXE>
<FIXS> return jdbcTemplate.update(UPDATE, student.getFirstName(), student.getLastName(), student.getEmail(), (student.isDriver() ? 1 : 0), (student.isRider() ? 1 : 0), student.getIdStudent()); <FIXE>
<FIXS> for (int i = 2; i < (genes.getNum()); i += 2) { <FIXE>
<FIXS> if ((a.ability) == (shared.roles.Jailor.EXECUTE_)) { if ((a.getTargets().size()) > (jailedTargets.size())) Exception("Cannot execute someone that isn't jailed"); <FIXE> <FIXS> if ((getPerceivedCharges()) != (shared.logic.support.rules.Rules.UNLIMITED)) if ((a.getTargets().size()) > (getPerceivedCharges())) Exception("Not enough executions for that many targets"); } <FIXE>
<FIXS> @org.junit.Test <FIXE> <FIXS> java.lang.String[] input = new java.lang.String[]{ "Foo Bar" , "fooBar" }; <FIXE>
<FIXS> public void showMessage(java.lang.String message) { <FIXE>
<FIXS> Ticket current = ((Ticket) (queue.removeMin())); <FIXE> <FIXS> java.lang.String q = (("Issue: " + current) + "\nSolution: ") + (current.getSolution()); <FIXE>
<FIXS> htw.lab04.app.MessageReceiver messageReceiver = new htw.lab04.app.MessageReceiver(socket); htw.lab04.app.MessageSender messageSender = new htw.lab04.app.MessageSender(socket); <FIXE>
<FIXS> return ((this.length()) == (other.length())) && (java.util.Arrays.equals(characters, other.characters)); <FIXE>
<FIXS> }else { java.lang.String newStatus = _statusToDisplay; storeStatusInMemory(newStatus); navigateToMainMenu(newStatus); <FIXE>
<FIXS> return ((com.progressoft.jip.ui.action.Action<T>) (newInstance)); <FIXE>
<FIXS> Client newClient = new Client(email, name, password, address, birthdate, posX, posY); <FIXE>
<FIXS> final java.math.BigDecimal creditsYear = result.get(curricularPeriod); result.put(curricularPeriod, (creditsYear != null ? creditsYear.add(credits) : credits)); <FIXE>
<FIXS> update |= updateHints(); <FIXE>
<FIXS> <FIXE>
<FIXS> if (path == null) { return false; } <FIXE>
<FIXS> private boolean isPrime(int number) { if (number == 2) { return true; } <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> }else if (entity != (calledby)) { return ; } <FIXE>
<FIXS> if (child != null) { child.draw(g); } <FIXE>
<FIXS> if ((first) == null) { throw new java.util.NoSuchElementException(); <FIXE> <FIXS> if ((first.next) != null) { Deque<Item>.Node node = first; first = first.next; first.previous = null; (size)--; return node.item; }else { <FIXE> <FIXS> <FIXE>
<FIXS> if (placemark != null) { com.squareup.otto.Bus bus = com.wozainali.manho.myapplication.bus.ZaiNaliBus.getBus(); bus.post(new com.wozainali.manho.myapplication.bus.events.ZoomToPointEvent(placemark)); bus.post(new com.wozainali.manho.myapplication.bus.events.AddMarkerEvent(placemark)); bus.post(new com.wozainali.manho.myapplication.bus.events.DrawPolygonsEvent(placemark.getPolygons())); } <FIXE>
<FIXS> for (int i = 0, count = (menuView == null) ? 0 : menuView.getChildCount(); i < count; i++) { <FIXE>
<FIXS> return !(buddyInstructionEditText.toString().equals(missionBean.getBuddyInstruction())); <FIXE>
<FIXS> this.strength = strength; <FIXE>
<FIXS> <FIXE>
<FIXS> public static java.lang.Boolean attachAssetToAccount(java.lang.String assetUuid, java.lang.String accountUuid) { <FIXE> <FIXS> <FIXE>
<FIXS> private void validateHeader(final java.lang.String[] headers) throws java.io.IOException { <FIXE>
<FIXS> assertNotNull(listeners); assertFalse(listeners.contains(jobExtensionPoint)); <FIXE>
<FIXS> <FIXE>
<FIXS> if (this.wahrscheinlichkeit()) { <FIXE>
<FIXS> private void showBoardLine(final int row) { <FIXE>
<FIXS> return com.google.common.collect.ImmutableList.copyOf(com.google.common.collect.Iterables.transform(options, new com.google.common.base.Function<com.github.rvesse.airline.model.OptionMetadata, java.lang.String>() { <FIXE>
<FIXS> } catch (javax.servlet.ServletException | java.io.IOException e) { <FIXE>
<FIXS> line = line.trim(); <FIXE>
<FIXS> <FIXE>
<FIXS> synchronized(this) { <FIXE>
<FIXS> if ((multiplier > 0) || ((bounds.getHeight()) > (com.ggwp.interiordesigner.object.Room.MINIMUM_DIMENSION))) { <FIXE>
<FIXS> if (!(c.isNA(i))) <FIXE>
<FIXS> } catch (java.lang.Exception e) { e.printStackTrace(); <FIXE>
<FIXS> break; <FIXE>
<FIXS> valueListServices().createAMultivalueClassificationMetadataInGroup(taxonomy, schemaType, "classifiedInGroupLabel", groupLabel); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> com.example.mirko.custombuttonexample.PartyCastApplication.getInstance().getCastConnectionManager().getGameManagerClient().setListener(mListener); <FIXE>
<FIXS> if (contact == null) { java.lang.System.out.println("Adding new number..."); <FIXE> <FIXS> if ((contact.getNumber()) == tel) { java.lang.System.out.println((("That number already exists for contact " + (contact.getName())) + ". Try a different one")); continue; <FIXE>
<FIXS> return null; <FIXE>
<FIXS> <FIXE>
<FIXS> break; <FIXE>
<FIXS> connectBudgetAndUser(bid, uidAsString); <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> fi.muikku.model.users.UserGroupEntity userGroupEntity = userGroupEntityController.findUserGroupEntityByDataSourceAndIdentifier(SchoolDataPyramusPluginDescriptor.SCHOOL_DATA_SOURCE, identifier, true); <FIXE>
<FIXS> model.addAttribute("showAcceptorsExtendenceButton", ((acceptors.size()) > acceptorsOnPage)); <FIXE>
<FIXS> if (dummy != null) this.graphics = dummy.graphics; <FIXE> <FIXS> } if ((this.graphics) == null) <FIXE>
<FIXS> public void makeBestMoveAccordingToAILogic(chess.domain.GameSituation game) { <FIXE>
<FIXS> break; <FIXE> <FIXS> break; <FIXE> <FIXS> break; <FIXE> <FIXS> break; <FIXE>
<FIXS> break; <FIXE>
<FIXS> if ((interval.length) == 0) { continue; } <FIXE>
<FIXS> fireIconChange(); } catch (java.lang.InterruptedException | java.util.concurrent.ExecutionException ex) { org.sleuthkit.autopsy.coreutils.Logger.getLogger(org.sleuthkit.autopsy.corecomponents.ThumbnailViewNode.class.getName()).log(java.util.logging.Level.SEVERE, "Error getting thumbnail icon", ex); } finally { <FIXE> <FIXS> <FIXE> <FIXS> swingWorker = null; <FIXE> <FIXS> <FIXE>
<FIXS> db.modifySchedule(pickedDay, java.lang.Integer.parseInt(time), "BUSY"); <FIXE>
<FIXS> if (((dateFirstDate.getValue()) != null) && ((secondDate) != null)) { <FIXE>
<FIXS> private static javafx.animation.ParallelTransition createDynamicAtTimeStep(java.lang.Double timeStep, tum.cms.sim.momentum.visualization.controller.CoreController coreController, tum.cms.sim.momentum.utility.csvData.reader.SimulationOutputReader simulationOutputReader) throws java.lang.Exception { <FIXE>
<FIXS> void printArray(int[] array) { <FIXE> <FIXS> java.lang.System.out.print(array[i]); <FIXE>
<FIXS> if (header.toUpperCase().startsWith(type.type)) { <FIXE>
<FIXS> com.jaitlapps.bestadvice.domain.list.ListRecordGroup listRecordGroup = com.jaitlapps.bestadvice.database.FavoriteManager.getInstance(getActivity()).getList(); <FIXE> <FIXS> <FIXE>
<FIXS> pr = com.cowlark.cowbel.parser.parsers.CloseParenthesisParser.parse(argumentspr.end()); <FIXE>
<FIXS> image = new javafx.scene.image.Image(getClass().getResourceAsStream("/microphone_muted.png")); <FIXE> <FIXS> image = new javafx.scene.image.Image(getClass().getResourceAsStream("/microphone.png")); <FIXE>
<FIXS> <FIXE> <FIXS> clear(); <FIXE>
<FIXS> verify(goConfigService).updateConfig(new com.thoughtworks.go.server.service.DeleteTemplateCommand("empty_template", "md5")); <FIXE>
<FIXS> progress1.setTextProgress(b.getPayout().toString()); buyButton.setText((((((b.getName()) + ":") + (b.getNumOfBuildings().toString())) + "\nBuy:") + (b.getPrice().toString()))); <FIXE>
<FIXS> com.microsoft.rest.ServiceResponse<com.microsoft.azure.management.storage.implementation.StorageAccountInner> response = this.client.getProperties(this.resourceGroupName(), this.name()); <FIXE>
<FIXS> <FIXE>
<FIXS> appMgr.setSelectedNetworks(new java.util.ArrayList(selectedNetworks)); <FIXE> <FIXS> appMgr.setSelectedNetworkViews(new java.util.ArrayList(selectedViews)); <FIXE> <FIXS> <FIXE>
<FIXS> if (grammar.getTextContent().startsWith("wfst\n")) { <FIXE>
<FIXS> if (((securityService) == null) || (!(autorIntern()))) { <FIXE> <FIXS> de.fraunhofer.igd.klarschiff.service.security.User user = securityService.getUserByEmail(this.autorEmail); <FIXE>
<FIXS> java.lang.StringBuilder sb = new java.lang.StringBuilder(); <FIXE>
<FIXS> <FIXE>
<FIXS> if ("error".equals(testcase.getStatus())) { <FIXE>
<FIXS> if (e == null) { if ((data != null) && ((data.length) != 0)) { restaurantModel = new com.example.vanne.tradish_alpha.Models.RestaurantModel(name, address, restId, data); restaurantModel.setFlag(1); restaurantModels.add(restaurantModel); updateListView(); } <FIXE>
<FIXS> md.update(sb.toString().getBytes()); <FIXE>
<FIXS> bot.delay(Global.PAUSE); leftClick(); <FIXE>
<FIXS> io.druid.indexing.jdbc.JDBCIndexTaskTest.offsets.put(0, 0); <FIXE>
<FIXS> ret = adapter.getCommandsTableItem(java.lang.String.format("= %d", cid), null, null); <FIXE>
<FIXS> threadUpdater.schedule(new ca.team4519.lib.Threader.UpdaterTask(this), (((long) (this.period)) * 1000)); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> if ((experimentFilter) != null) { getContentResolver().delete(ExperimentsProvider.CONTENT_URI, experimentFilter, null); } <FIXE>
<FIXS> return reference.equals(node.getReference()); <FIXE>
<FIXS> return !(((java.lang.Boolean) (cursorPosition)).booleanValue()); <FIXE>
<FIXS> <FIXE>
<FIXS> io.cereebro.spring.annotation.LOGGER.error(("Could not load class : " + (metadata.getReturnTypeName())), e); <FIXE>
<FIXS> if ("".equals(host)) { <FIXE> <FIXS> if ((!("false".equals(isAuthenticationNecessary))) && ("".equals(login))) { <FIXE>
<FIXS> transaction = null; <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> mapTagTemplate2.remove("SceneMetaDataFile"); <FIXE> <FIXS> mapTagTemplate1.remove("SceneMetaDataFile"); <FIXE>
<FIXS> if ((mMap) != null) { for (com.demo.arctf.arctfdemo.CapturePoint point : capturePointList) { com.google.android.gms.maps.model.Marker captureMarker = mMap.addMarker(new com.google.android.gms.maps.model.MarkerOptions().position(point.getLocation()).icon(com.google.android.gms.maps.model.BitmapDescriptorFactory.defaultMarker(BitmapDescriptorFactory.HUE_AZURE)).title(point.getName())); capturePoints.put(captureMarker, point); } <FIXE>
<FIXS> <FIXE>
<FIXS> return !(u.containsKey(i)); <FIXE>
<FIXS> public boolean compileCode(java.lang.String code, java.lang.String className) { <FIXE>
<FIXS> <FIXE>
<FIXS> public static void writePage(javax.servlet.http.HttpServletResponse response, int httpCode, java.lang.String message, org.geowebcache.stats.RuntimeStats runtimeStats, java.lang.String contentType) { <FIXE>
<FIXS> oldfirst.previous = newfirst; <FIXE>
<FIXS> GameOn = true; <FIXE>
<FIXS> return new ship.WeatherWaypoint(); <FIXE>
<FIXS> java.io.InputStream is = getUrl(urlString); java.util.HashSet<java.lang.String> marcRecords = marcxmlCollectionParser(is).iterator(); <FIXE> <FIXS> context.write(new org.apache.hadoop.io.Text(marcXml), null); <FIXE>
<FIXS> submGuiButton.setEnabled(Settings.authenticated); <FIXE>
<FIXS> org.alopex.hyperios.helix.Specimen output = new org.alopex.hyperios.helix.Specimen(true); <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> for (int i = 0; i < current_depth; ++i) { Predicates.add_entry(Depths.DEPTHS_OUTPUT, "is_lower_than", Depths.get_id_from_depth(new java.lang.Integer(i)), Depths.get_id_from_depth(new java.lang.Integer(current_depth))); } <FIXE>
<FIXS> model.login(email, password); <FIXE>
<FIXS> <FIXE>
<FIXS> @org.w2fc.geoportal.ws.aspect.AfterReturning(pointcut = "execution(* org.w2fc.geoportal.ws.GeoObjectService.createAndSaveObject(org.w2fc.geoportal.ws.model.RequestGeoObject)))", returning = "result") public void aroundCreateSoapSuccess(org.aspectj.lang.JoinPoint joinPoint, java.lang.Object result) { <FIXE>
<FIXS> if (((piece.isPlaced()) || (piece.isDestroyed())) || (piece.isFrozen())) <FIXE>
<FIXS> if ((mgrab) != null) mgrab.remove(); <FIXE>
<FIXS> public void getBalance(org.bukkit.entity.Player player) { <FIXE>
<FIXS> public static java.lang.String getCharBeforeOffset(java.lang.CharSequence str, int offset) { if (((str.length()) == 0) || (offset == 0)) <FIXE> <FIXS> return str.subSequence((offset - 1), offset).toString(); <FIXE>
<FIXS> stopProcess(control, skipIfAlive); <FIXE>
<FIXS> table.value.Value date = null; <FIXE>
<FIXS> <FIXE>
<FIXS> java.lang.System.out.println(((inventory.get(itemNumber).getName()) + " was added to cart!")); <FIXE>
<FIXS> java.io.PrintWriter prologWriter = new java.io.PrintWriter(new java.io.File((path + "edb.pl"))); <FIXE> <FIXS> <FIXE>
<FIXS> assertTrue(result.getFailure().is(notFoundError(org.innovateuk.ifs.file.domain.FileEntry.class, 456L))); <FIXE>
<FIXS> org.diachron.detection.utils.MCDUtils mcd = null; <FIXE> <FIXS> mcd = new org.diachron.detection.utils.MCDUtils(propertiesManager.getProperties(), datasetUri, true); <FIXE> <FIXS> <FIXE> <FIXS> } finally { if (mcd != null) { mcd.terminate(); } <FIXE>
<FIXS> <FIXE>
<FIXS> new com.cmpe.bounswe2015group8.westory.back.ServerRequests.RestAsyncTask(callback, org.springframework.http.HttpMethod.POST).execute(new com.cmpe.bounswe2015group8.westory.model.Requestable<com.cmpe.bounswe2015group8.westory.model.Post[]>("/api/searchByPostTitle", title, com.cmpe.bounswe2015group8.westory.model.Post[].class)); <FIXE>
<FIXS> logger.info("My {} is {}", new java.lang.Object[]{ "message" , t.getLocalizedMessage() , t }); <FIXE>
<FIXS> for (org.bukkit.entity.HumanEntity viewer : new java.util.ArrayList(inventory.getViewers())) { <FIXE>
<FIXS> <FIXE>
<FIXS> if (result) { break; } <FIXE>
<FIXS> <FIXE>
<FIXS> android.content.BroadcastReceiver broad = ((android.content.BroadcastReceiver) (param.args[0])); if (broad != null) handleBroad(broad); <FIXE> <FIXS> if (filter != null) handleFilter(filter); <FIXE>
<FIXS> int y = ((coords.charAt(1)) - 'a') + 1; <FIXE>
<FIXS> default : throw new java.lang.IllegalArgumentException(("Unknown pixel type: " + pixelType)); <FIXE> <FIXS> <FIXE>
<FIXS> this.OUTPUT.writeBytes((line + "\n")); <FIXE>
<FIXS> for (int k : list.get(i)) { <FIXE> <FIXS> } java.lang.System.out.println(); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> batchSize.incrementAndGet(); <FIXE>
<FIXS> cache = com.kot32.ksimplelibrary.cache.ACache.get(getActivity()); <FIXE>
<FIXS> android.content.Intent intent = getIntent(); <FIXE>
<FIXS> if (bundleIndex < 0) <FIXE>
<FIXS> return 0; <FIXE>
<FIXS> if (!(java.nio.file.Files.exists(item.path))) { <FIXE>
<FIXS> ipAddr = request.getHeader("X-Real-IP"); <FIXE> <FIXS> ipAddr = request.getHeader("x-forwarded-for"); <FIXE>
<FIXS> javax.imageio.ImageIO.write(this.image.getImage(), extension, new java.io.File(file.getPath())); <FIXE>
<FIXS> public int hash(String key) { <FIXE> <FIXS> case 0 : hash = additiveHash(key); <FIXE> <FIXS> case 1 : hash = rotationalHash(key); <FIXE>
<FIXS> attackInProgress = false; <FIXE> <FIXS> <FIXE>
<FIXS> org.junit.Assert.assertTrue(ancestorPath.get(i).equals((((i + 1) + ",") + (pids.get(i).getId())))); <FIXE>
<FIXS> if (value >= (end)) { <FIXE>
<FIXS> if (container != null) { container.clear(); msg.getBinaryAttachment(container); container.flip(); } <FIXE>
<FIXS> mPlayer = createPlayer(mContext.get()); <FIXE> <FIXS> mPlayer.setDataSource(mContext.get(), android.net.Uri.parse(path)); <FIXE>
<FIXS> assertEquals(git.gitChangeTypeToVCSChangeType(ct), VCSChangeType.UNKNOWN); <FIXE>
<FIXS> if ((((sender) == null) || ((sender.getBlock()) == null)) || ((sender.getBlock().getType()) != (org.bukkit.Material.COMMAND))) { <FIXE>
<FIXS> <FIXE>
<FIXS> cTemplate.createNewHtmlFile(HTMLFILE_NAME, true, "", HTMLFILE_CONTENT); <FIXE>
<FIXS> while (true) { <FIXE> <FIXS> else { return ; } <FIXE>
<FIXS> return null; <FIXE>
<FIXS> int count = 0; <FIXE> <FIXS> for (int i = 0; i < (grantResults.length); i++) { if ((grantResults[i]) == (android.content.pm.PackageManager.PERMISSION_GRANTED)) count++; } if (count == (grantResults.length)) <FIXE> <FIXS> else <FIXE> <FIXS> <FIXE>
<FIXS> viewer.getDocument(); <FIXE>
<FIXS> private algo.BSTMap<K, V>.Node findMinNode(algo.BSTMap<K, V>.Node parent) { <FIXE>
<FIXS> <FIXE>
<FIXS> return ((s != null) && ((s.trim().length()) != 0)) && ((java.lang.Boolean.parseBoolean(s.trim())) || (!("0".equals(s.trim())))); <FIXE>
<FIXS> assertEquals(bean.id, loaded.id); assertEquals(bean.name, loaded.name); <FIXE>
<FIXS> if (bm25 != null) { config.setSimilarity(bm25); } <FIXE>
<FIXS> if ((score1) > (score2)) <FIXE>
<FIXS> if ((interval >= 1) && (interval <= 2)) { <FIXE>
<FIXS> context = this; <FIXE>
<FIXS> isFilled = new boolean[model.Board.gridMaxWidth][model.Board.gridMaxHeight]; <FIXE>
<FIXS> <FIXE>
<FIXS> clickPos = scr.find(screen, icon, false); <FIXE>
<FIXS> mHandler.post(() -> { synchronized(this) { if ((mListener) != null) { mListener.onResidentOperationStateChanged(); } } }); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> }else { android.util.Log.e(com.mnubo.platform.android.sdk.api.store.impl.MnuboFileStore.TAG, "MnuboFileStore can only remove MnuboFileEntity"); <FIXE> <FIXS> <FIXE>
<FIXS> if ((this.getNavigationManager().topFragment()) instanceof com.dmcapps.navigationfragmentexample.SingleStackExample.SampleFragment) { int fragCount = ((com.dmcapps.navigationfragmentexample.SingleStackExample.SampleFragment) (this.getNavigationManager().topFragment())).getFragCount(); this.presentFragment(com.dmcapps.navigationfragmentexample.SingleStackExample.SampleFragment.newInstance("Fragment added to the Stack", (fragCount + 1))); }else { this.presentFragment(com.dmcapps.navigationfragmentexample.SingleStackExample.SampleFragment.newInstance("Fragment added to the Stack", 0)); } <FIXE>
<FIXS> org.wso2.carbon.datasource.sample.DataSourceServiceListenerComponent.logger.error("error occurred while fetching the data source.", e); <FIXE> <FIXS> org.wso2.carbon.datasource.sample.DataSourceServiceListenerComponent.logger.error("error occurred while fetching the connection.", e); <FIXE>
<FIXS> getReadService().execute(inRequstMapping, inInDto, outDtoMap); <FIXE>
<FIXS> if ((currentAdhocTickets.get(i).getBarcode()) == null ? findBarcode == null : currentAdhocTickets.get(i).getBarcode().equals(findBarcode)) { <FIXE>
<FIXS> return ((((value.startsWith("{")) || (value.startsWith("["))) || ("true".equals(value))) || ("false".equals(value))) || (springfox.documentation.swagger2.configuration.Swagger2JacksonModule.PropertyExampleSerializerMixin.PropertyExampleSerializer.JSON_NUMBER_PATTERN.matcher(value).matches()); <FIXE>
<FIXS> return new itinerary.main.State(command, new itinerary.main.Command(originalTask, CommandType.ADD, null), getAllTasks(), isValid); <FIXE>
<FIXS> if (org.embedded.browser.Chromium.chmap.containsKey(id)) org.embedded.browser.Chromium.chmap.get(id).loaded = true; <FIXE>
<FIXS> <FIXE>
<FIXS> com.android.test.qachee.QacheeData data = ((com.android.test.qachee.QacheeData) (com.qachee.QacheeManager.getInstance().get(event.place, true))); <FIXE>
<FIXS> java.lang.String prefix = getNsURIPrefix(ns); <FIXE>
<FIXS> ann.backpropagate(new com.github.jannled.lib.math.Matrix(feld, 1, feld.length), new com.github.jannled.lib.math.Matrix(alpha, 1, alpha.length)); <FIXE>
<FIXS> if ((userAgent != null) && (!(userAgent.contains("; Trident/")))) { if (((userAgent.contains("; MSIE 5")) || (userAgent.contains("; MSIE 6"))) || (userAgent.contains("; MSIE 7"))) { <FIXE>
<FIXS> return java.util.Objects.equals(this.pollStatus, other.pollStatus); <FIXE>
<FIXS> if (cmd == null) { return actionInfos; } <FIXE>
<FIXS> i++; <FIXE>
<FIXS> }else { super.setObject(statement, parameter); <FIXE>
<FIXS> return new value.IntegerValue(); <FIXE>
<FIXS> if ((httpPort != null) && (httpPort.equals(httpsPort))) { <FIXE> <FIXS> return new javax.validation.ConstraintViolation<?>[]{ }; <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> if ((sessionUtils.allowedForUserWithRole(RolesEnum.admin)) || (commentAvailabilityService.isCommentAuthorSession(commentEntity))) { <FIXE>
<FIXS> if (!(path.isEmpty())) return path.get(1).pt; else return start_pt; <FIXE>
<FIXS> if ((existingLevel != null) && (workspace != null)) { <FIXE>
<FIXS> if (!(handel.getStad().equals(positie.getStad()))) { <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> }else return false; <FIXE>
<FIXS> org.junit.Assert.assertNotNull(categoryTableModel.getValueAt(i, j)); <FIXE>
<FIXS> <FIXE>
<FIXS> java.lang.Boolean refreshScreen = testRun.bayItems[bayValue].updateValue(updatedValue, testRun.currentTestStep, context); <FIXE>
<FIXS> final com.intellij.psi.PsiFile javaFile = psiClass.getContainingFile(); if (javaFile instanceof com.intellij.psi.PsiJavaFile) { final java.lang.String psiPackageName = ((com.intellij.psi.PsiJavaFile) (javaFile)).getPackageName(); boolean _isEmpty = psiPackageName.isEmpty(); boolean _not = !_isEmpty; if (_not) { return psiPackageName; } <FIXE>
<FIXS> rootView = inflater.inflate(customLayout, container, false); <FIXE>
<FIXS> if (((config) != null) && (config.getStopOnTerminate())) { <FIXE>
<FIXS> <FIXE>
<FIXS> pianoA.setCenter(cenx, (ceny - height)); pianoB.setCenter(cenx, (ceny + height)); <FIXE>
<FIXS> private void setEndDate(int newYear, int newMonth) { <FIXE> <FIXS> calendar.set(newYear, (newMonth - 1), calendar.getActualMaximum(java.util.Calendar.DATE)); <FIXE>
<FIXS> position = -1; <FIXE> <FIXS> <FIXE>
<FIXS> if (!(com.eveningoutpost.dexdrip.Models.TransmitterData.is_new(timestamp))) { <FIXE>
<FIXS> private java.util.HashMap<java.lang.String, codingcareers.webapp.client.PageComponents.ProgressPanel> constructProgressBars() { java.util.HashMap<java.lang.String, codingcareers.webapp.client.PageComponents.ProgressPanel> progressBarCollection = new java.util.HashMap<>(); <FIXE> <FIXS> progressBarCollection.put(task, new codingcareers.webapp.client.PageComponents.ProgressPanel(task, getTaskCompleteness(task))); <FIXE>
<FIXS> parsePerson(state, str, team, row); <FIXE>
<FIXS> java.util.List<fr.epf.models.Promotion> promotions = promoDAO.findAll(); <FIXE>
<FIXS> void initVariables(int mapNumber, java.lang.String ballColor, boolean gameStarted) { <FIXE>
<FIXS> }else if (!(selectedItems.isEmpty())) { shareMultiple(selectedItems); } <FIXE>
<FIXS> if ((results.size()) < 1) <FIXE> <FIXS> if ((results.size()) < 1) <FIXE> <FIXS> if ((results.size()) < 1) <FIXE> <FIXS> if ((results.size()) < 1) <FIXE>
<FIXS> isHost = true; <FIXE> <FIXS> <FIXE>
<FIXS> Tempo.RequestHandler run = new Tempo.RequestHandler(args[0]); <FIXE>
<FIXS> return this.mapBufferImpl(bufferStateTracker, caller, target, true, offset, length, access, dispatch, glProcAddress); <FIXE>
<FIXS> return ((pieceNum + 1) * (Peer.PIECE_SIZE)) - (file.getSize()); <FIXE>
<FIXS> selectS.setLocation(((int) (event.getX())), ((int) (event.getY()))); <FIXE>
<FIXS> for (T value : getValue()) { <FIXE>
<FIXS> if (msg != null) msg.putProperty(KBRDataHasChangedMessage.PROPERTIES_METERID, mMeter.getUId()); <FIXE>
<FIXS> assertEquals(frenchAppPerson.getNom(), englishAppPerson.getName()); assertEquals(frenchAppPerson.getSurnom(), englishAppPerson.getNickname()); assertEquals(frenchAppPerson.getAge(), englishAppPerson.getAge()); <FIXE>
<FIXS> if ((index < 0) || ((searchSpace[index]) == null)) <FIXE>
<FIXS> if ((p1.getScore()) < (p2.getScore())) { <FIXE> <FIXS> if ((p1.getScore()) > (p2.getScore())) { <FIXE>
<FIXS> net.ntg.ftl.ui.TogglePanel.log.info(((("comboBox " + valueName) + ": ") + (colorComboBox.getSelectedIndex()))); <FIXE>
<FIXS> for (java.lang.Class<?> c = klass; (null != c) && ((java.lang.Object.class) != c); c = c.getSuperclass()) { <FIXE>
<FIXS> if ((this.flowInfo.getSessionService()) != null) { this.sessionService = ((org.shaolin.bmdp.workflow.spi.SessionService) (org.shaolin.bmdp.runtime.AppContext.get().getService(this.flowInfo.getSessionService()))); if ((this.sessionService) == null) { this.sessionService = new org.shaolin.bmdp.workflow.internal.DefaultFlowSessionService(); } <FIXE>
<FIXS> private void initializePurchases() { <FIXE>
<FIXS> if (damage == 0) { return !(damageEvent.isCancelled()); } <FIXE>
<FIXS> if ((getAssignedFlexoProperty()) != null) { return getAssignedFlexoProperty().getOntologicType(); } <FIXE> <FIXS> <FIXE>
<FIXS> org.testng.Assert.assertEquals(results.size(), 4); <FIXE> <FIXS> org.testng.Assert.assertEquals(value.length(), 5); <FIXE>
<FIXS> <FIXE> <FIXS> }else { getAccountFeed(); <FIXE>
<FIXS> mntm.setText(((text + "\t") + (org.nschmidt.ldparteditor.state.KeyStateManager.textTaskKeyMap.get(t)))); <FIXE>
<FIXS> player.accept(new models.visitor.ArmyCreationVisitor(map, player, RPLocation, units)); <FIXE>
<FIXS> }else if ((state) == (piano.State.isplaying)) { if (!(listOfNote.isEmpty())) { listOfNote.clear(); } state = piano.State.isrecording; return true; }else { return false; <FIXE> <FIXS> <FIXE>
<FIXS> return new java.util.ArrayList<org.wso2.carbon.event.stream.core.internal.EventStreamConfiguration>(eventStreamConfigs.values()); <FIXE>
<FIXS> org.centauri.cloud.cloud.Cloud.getLogger().error(ex.getMessage(), ex); <FIXE>
<FIXS> int year = activity.getInt("year"); int month = activity.getInt("month"); <FIXE>
<FIXS> <FIXE>
<FIXS> for (int i = 0; i < (guests.length); i++) { guests[i] = null; } <FIXE>
<FIXS> <FIXE>
<FIXS> chatty.gui.GuiUtil.showNonModalMessage(getInvoker(), "Errors", errorsInfo, javax.swing.JOptionPane.WARNING_MESSAGE, true); <FIXE>
<FIXS> int result; <FIXE> <FIXS> result = testObject.run(int.class, "countNumbers", 1); <FIXE> <FIXS> result = testObject.run(int.class, "countNumbers", 490); <FIXE>
<FIXS> while ((type != null) && (supertype != (java.lang.Object.class))) { <FIXE>
<FIXS> try (java.io.FileInputStream stream = new java.io.FileInputStream(f)) { prop.load(stream); } <FIXE>
<FIXS> V val = buckets.get(((java.lang.Math.abs(key.hashCode())) % (bucketCount))).add(key, value); <FIXE>
<FIXS> com.mediamath.terminalone.models.T1User resp; <FIXE>
<FIXS> learningAgreement.getLearningAgreementPositionen().add(new fachklassen.LearningAgreementPosition(inlandskurs, auslandskurs, learningAgreement)); <FIXE>
<FIXS> sync.FilterConfigSync.syncFilterConfigsToWorker(ip); <FIXE>
<FIXS> public static int getValidThreshold(boolean isSelected, java.lang.String text) { int threshold = -1; <FIXE>
<FIXS> throw new java.lang.IllegalArgumentException(e); <FIXE>
<FIXS> if (listView != null) { listView.setAdapter(adapter); } <FIXE>
<FIXS> <FIXE>
<FIXS> return null; <FIXE>
<FIXS> <FIXE>
<FIXS> } <FIXE>
<FIXS> <FIXE> <FIXS> if ((presenter) == null) { presenter = createPresenter(); presenterUUID = com.kvest.mvp.PresenterActivity.addPresenter(presenter); } <FIXE>
<FIXS> <FIXE>
<FIXS> twillioPhone.setSpeakerEnabled(true); <FIXE>
<FIXS> fr.sims.coachingproject.service.gcmService.RegistrationGCMIntentService.startActionRegistrationGCM(getActivity()); fr.sims.coachingproject.ui.activity.MainActivity.startActivity(getActivity()); fr.sims.coachingproject.util.SharedPrefUtil.putIsFirstLaunch(getActivity(), false); <FIXE>
<FIXS> this.matrix[this.nbMetrics][i] += this.matrix[j][i]; <FIXE>
<FIXS> if ((profile) != null) { java.lang.String text = "Currently logged in as " + (profile.getName()); message.setText(text); }else { <FIXE> <FIXS> } <FIXE>
<FIXS> java.lang.String[] split = value.toString().split("\t"); <FIXE>
<FIXS> javax.json.JsonObject response = javax.json.Json.createObjectBuilder().add("type", "register").add("sender_id", id).add("ack", (id == (-1) ? ack_error(400) : ack_ok())).build(); <FIXE>
<FIXS> if ("Submit".equalsIgnoreCase(workFlowAction)) <FIXE>
<FIXS> if (!(prover.local.LocalProver.availableProvers.contains(proverName))) prover.local.LocalProver.availableProvers.add(proverName); <FIXE>
<FIXS> <FIXE>
<FIXS> if (((props) != null) && ((props.getProperty("JOB_ID")) != null)) { <FIXE>
<FIXS> municipalityEditText.setText(registrationNumber.substring(6, registrationNumber.length())); <FIXE>
<FIXS> mLocationTextView.setText(("Here are all the restaurants near: " + location)); <FIXE> <FIXS> <FIXE>
<FIXS> if (queue == null) { return ; } <FIXE> <FIXS> this.returnAddresses.remove(message.requestUuid); <FIXE>
<FIXS> <FIXE> <FIXS> p.println("DELTA RECORDING RUNNING"); <FIXE>
<FIXS> protected static int getDialogIDfromOneUserToAnother(java.lang.String fromWho, java.lang.String toWhom) { <FIXE>
<FIXS> private void stateChangedInternal(java.lang.String state, java.util.List<eu.geekhome.asymptote.model.SyncUpdate> updates) { <FIXE>
<FIXS> findQuery.addCriteria(org.springframework.data.mongodb.core.query.Criteria.where("term").is(term.toLowerCase())); <FIXE>
<FIXS> <FIXE> <FIXS> addNewConnections(); <FIXE>
<FIXS> <FIXE> <FIXS> return true; <FIXE> <FIXS> <FIXE>
<FIXS> if (((newX >= 0) && (newX < 5)) && ((newY >= 0) && (newY < 5))) { <FIXE>
<FIXS> org.mcsg.survivalgames.points.PointQueries.cachedStats.get(player.toLowerCase()).addDeath(); <FIXE>
<FIXS> <FIXE> <FIXS> org.junit.Assert.assertEquals((-(expectedSize1)), generatedFish.getPosition().getPosX(), 1.0F); org.junit.Assert.assertEquals(expectedSize1, generatedFish.getSize(), 1.0F); org.junit.Assert.assertEquals(expectedSpeed1, generatedFish.getSpeed(), 1.0F); <FIXE>
<FIXS> public void print(char[][] map) { <FIXE> <FIXS> for (int j = 0; j < (w); j++) { java.lang.System.out.print(map[i][j]); } java.lang.System.out.println(); <FIXE>
<FIXS> if ((this.addresses.size()) == 0) return new java.util.ArrayList<>(); java.net.InetAddress[] as = this.addresses.toArray(new java.net.InetAddress[0]); <FIXE>
<FIXS> <FIXE>
<FIXS> if (h != null) { strTemperature = h; int i = strTemperature.indexOf('.'); i = java.lang.Integer.parseInt(strTemperature.substring(0, i)); if (i > (maxTemp)) maxTemp = ((byte) (i)); } <FIXE>
<FIXS> t.s.o.r.f.frost.MainActivity.sendMe = "y002?"; <FIXE> <FIXS> t.s.o.r.f.frost.MainActivity.sendMe = "y001?"; <FIXE>
<FIXS> if (!(isSubtype(subtypeI, supertypeI))) { <FIXE>
<FIXS> <FIXE>
<FIXS> if (mToken.isSessionValid()) { <FIXE>
<FIXS> public boolean contains(java.lang.String word) { <FIXE> <FIXS> boolean result = buckets[java.lang.Math.abs(((org.apache.mahout.math.MurmurHash3.murmurhash3x8632(word.toLowerCase().getBytes(), 0, word.length(), integer)) % (buckets.length)))]; if (!result) { return false; } <FIXE> <FIXS> return true; <FIXE>
<FIXS> final float maxSize = com.hazelcast.map.impl.eviction.MaxSizeChecker.getApproximateMaxSize(maxSizeConfig.getSize()); <FIXE> <FIXS> return maxSize < (((1.0F * (com.hazelcast.map.impl.eviction.MaxSizeChecker.ONE_HUNDRED_PERCENT)) * usedHeapSize) / total); <FIXE>
<FIXS> }else { return 0; <FIXE> <FIXS> <FIXE>
<FIXS> return new org.organicdesign.fp.collections.interfaces.UnmodSortedIterable() { @java.lang.Override public org.organicdesign.fp.collections.interfaces.UnmodSortedIterator iterator() { return new org.organicdesign.fp.collections.interfaces.UnmodSortedIterator() { java.util.Iterator iter = sm.entrySet().iterator(); <FIXE> <FIXS> @java.lang.Override public boolean hasNext() { return iter.hasNext(); } <FIXE> <FIXS> @java.lang.Override public java.lang.Object next() { return iter.next(); } }; <FIXE>
<FIXS> private boolean sendCommand(byte command) { <FIXE> <FIXS> return false; <FIXE>
<FIXS> if ((arrivalOffset) >= 0) { <FIXE>
<FIXS> <FIXE> <FIXS> return 1; <FIXE>
<FIXS> boolean success = com.appoxee.Appoxee.addTagsToDevice(new java.util.ArrayList<java.lang.String>(java.util.Arrays.asList(tagArray))); <FIXE> <FIXS> java.util.List<java.lang.String> tags = com.appoxee.Appoxee.getTagList(); <FIXE>
<FIXS> this.renderInterface = renderInterface; <FIXE>
<FIXS> <FIXE>
<FIXS> MinecraftForge.EVENT_BUS.register(new com.miningmark48.miscconfigs.event.EventSaplingGrowthMultiplier()); <FIXE>
<FIXS> <FIXE>
<FIXS> int size = tasks.size(); return size == 0 ? 0 : p / size; <FIXE>
<FIXS> <FIXE>
<FIXS> entity.setHealth(entity.getMaxHealth()); <FIXE>
<FIXS> return completeState; <FIXE>
<FIXS> throw new java.lang.IllegalArgumentException(("Unsupported input mimetype detected : " + apiMimeType)); <FIXE>
<FIXS> <FIXE>
<FIXS> leaderJson.put("userId", userServiceApi.USER.get(utoken).getId()); <FIXE>
<FIXS> multiHotkeyFix = true; <FIXE> <FIXS> <FIXE>
<FIXS> private void logOut() { <FIXE>
<FIXS> <FIXE>
<FIXS> up = true; <FIXE> <FIXS> down = true; <FIXE>
<FIXS> org.cloudish.borg.model.Host h = new org.cloudish.borg.model.Host(0, 0.5, 0.5, null, new java.util.HashMap<>()); <FIXE>
<FIXS> while ((xDim * (yDim - 1)) >= elements) { <FIXE>
<FIXS> delight.keyvalue.sql.tests.TestSqlStore.this.map.stop(delight.async.AsyncCommon.<delight.functional.Success>asSimpleCallback(callback)); <FIXE>
<FIXS> if ((((delegation = system.containsDelegate(methodInvocation)) != null) && ((system.getClassObject(delegation.getOriginClassName())) != null)) && (!(delegation.equals(methodInvocation)))) <FIXE>
<FIXS> while ((last == null) || (!(last.equals("END")))) { <FIXE>
<FIXS> public javax.jms.QueueConnectionFactory createConnectionFactory() { <FIXE>
<FIXS> for (com.kurtzbot.CachedMon mon : cache.getCurrent()) { g.setColor(new java.awt.Color(255, 135, 232)); g.drawOval((((int) (mon.x)) - 12), (((int) (mon.y)) - 12), 24, 24); <FIXE>
<FIXS> if ((this.getPriority()) != (compNode.getPriority())) { <FIXE>
<FIXS> if ((s.length()) < length) return s; <FIXE>
<FIXS> if ((regionItem != null) && (regionItem.getIsBought())) { <FIXE>
<FIXS> synchronized(conversations) { for (com.chat.server.conversations.Conversation conversation : conversations) { if (conversation.isEmpty()) { conversations.remove(conversation); idGenerator.returnID(conversation.getID()); com.chat.server.utils.Logger.log((("Conversation " + (conversation.getID())) + " is empty, deleting")); } <FIXE>
<FIXS> <FIXE> <FIXS> return average / ((bids.size()) - 1); <FIXE>
<FIXS> return (e1.a) < (e2.a) ? -1 : (e1.a) == (e2.a) ? (e1.y) < (e2.y) ? -1 : (e1.y) == (e2.y) ? 0 : 1 : 1; <FIXE>
<FIXS> if ((clusterService) != null) { <FIXE>
<FIXS> if (unit != null) { this.units[index] = unit; unit.setBase(this); return true; }else { return false; } <FIXE>
<FIXS> <FIXE>
<FIXS> assertTrue(java.lang.reflect.Modifier.isPrivate(ctor.getModifiers())); ctor.setAccessible(true); try { ctor.newInstance(); } catch (java.lang.ReflectiveOperationException e) { fail("Unable to instantiate!"); } <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> if ((getEpisode()) == null) { return ; } <FIXE>
<FIXS> if (writer != null) { try { writer.close(); } catch (java.lang.Throwable e) { } <FIXE>
<FIXS> if (elementsToSort > altSortThreshold) edu.mit.ita.util.Arrays.mergeSort(seq, auxSeq, lo, hi); else <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> if (contentView != null) { com.heinrichreimersoftware.materialintro.slide.Slide slide = getSlide(position); if (slide == permissionsSlide) { android.support.design.widget.Snackbar.make(contentView, R.string.label_grant_permissions, Snackbar.LENGTH_LONG).show(); }else if (slide == loginSlide) { android.support.design.widget.Snackbar.make(contentView, R.string.label_fill_out_form, Snackbar.LENGTH_LONG).show(); } } <FIXE>
<FIXS> public static java.io.File getCurrentDir() { <FIXE>
<FIXS> boolean result = (((_client.open()) && (_directoryDbCtx.open(_config.getDirDbFilePath()))) && (_notificationDbCtx.open(_config.getNotifDbFilePath()))) && (_registrator.register()); if (result) { result &= _synchronizationWorker.start(); } return result; <FIXE>
<FIXS> <FIXE>
<FIXS> holder.getTvStoryTitle().setText(story.getStoryTitle()); <FIXE> <FIXS> <FIXE>
<FIXS> return ((java.lang.Long) (dc.getRecordCount(getIntegrityType().getResultsTableName()))) > 0; <FIXE>
<FIXS> if ((((itype) == (-1)) && (((game.getNumSprites(itype)) - (game.getNumDisabledSprites(itype))) <= (limit))) && (canEnd)) { <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> java.util.Map<java.lang.Long, org.openlmis.distribution.domain.FacilityDistribution> facilityDistributionMap = facilityDistributionService.getData(distribution, true); <FIXE>
<FIXS> for (int i = 1; i <= (m_nFets); i++) { <FIXE>
<FIXS> public void causeDamage(double amount, life.grass.grasscombat.datatype.DamageType type) { <FIXE>
<FIXS> com.facebook.FacebookSdk.sdkInitialize(getApplicationContext()); <FIXE> <FIXS> <FIXE>
<FIXS> private java.lang.String getExtension(final java.lang.String filename) { final int i = filename.lastIndexOf('.'); if ((i > 0) && (i < ((filename.length()) - 1))) { return filename.substring((i + 1)).toLowerCase(); <FIXE>
<FIXS> for (Lib.summon.Awakening a : awakening) { <FIXE> <FIXS> if (a.units[i].name.equals(name)) { return hasUpgrade(rarity, a.rarityAwakened[i]); <FIXE> <FIXS> } <FIXE>
<FIXS> <FIXE>
<FIXS> if ((catalogItem.getInventoryItemList()) != null) { for (gov.anl.aps.cdb.portal.model.db.entities.Item inventoryItem : catalogItem.getInventoryItemList()) { inventoryEnforcedPropertiesController.setCurrent(inventoryItem); inventoryEnforcedPropertiesController.prepareSaveChangesMadeToEnforcedPropertiesForCurrent(); } <FIXE>
<FIXS> <FIXE>
<FIXS> public void insertLoadRecord(java.lang.String fileName, java.lang.String graph) throws com.linkedpipes.etl.executor.api.v1.LpException { <FIXE>
<FIXS> com.laboon.Player testPlayer = new com.laboon.Player(false, false, false); <FIXE>
<FIXS> return (((((((title) + ",") + (author)) + ",") + state) + ",") + (dueDate.format(formatter))) + "\n"; <FIXE>
<FIXS> listener = null; <FIXE>
<FIXS> if (inventaire.elementAt(poche).contains(obj)) { int indice = inventaire.elementAt(poche).indiceOf(obj); inventaire.elementAt(poche).contenu.elementAt(indice).ajoutQte(qte); }else { <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> return null; <FIXE> <FIXS> <FIXE>
<FIXS> java.lang.String CREATE_WIFIS_TABLE = (((((((((((("CREATE TABLE " + (com.example.iit2014094.autotaskerapp.DatabaseHandler.TABLE_WIFIS)) + "(") + (com.example.iit2014094.autotaskerapp.DatabaseHandler.KEY_ID)) + " INTEGER PRIMARY KEY,") + (com.example.iit2014094.autotaskerapp.DatabaseHandler.KEY_NAME)) + " TEXT,") + (com.example.iit2014094.autotaskerapp.DatabaseHandler.KEY_BSSID_NO)) + " TEXT,") + (com.example.iit2014094.autotaskerapp.DatabaseHandler.KEY_SILENCE)) + " TEXT,") + (com.example.iit2014094.autotaskerapp.DatabaseHandler.KEY_AUTO_SMS)) + " TEXT") + ")"; <FIXE>
<FIXS> <FIXE>
<FIXS> if (file == null) return null; <FIXE>
<FIXS> Dimension dimeCurrent = new Dimension(dime.x, y); <FIXE>
<FIXS> transaction.addToBackStack(null); <FIXE>
<FIXS> for (SCBot.Unit u : this.self.getUnits()) { <FIXE>
<FIXS> android.util.Log.i(logMessage, java.lang.Integer.toString(trapNumber)); <FIXE>
<FIXS> MainLogic.instance.setVolume(((soundBar.getValue()) / 100)); <FIXE>
<FIXS> java.lang.String accessToken = com.mapbox.mapboxsdk.Mapbox.INSTANCE.accessToken; <FIXE>
<FIXS> conn.close(); <FIXE>
<FIXS> if ((view) != null) { if (dom.bom.com.tabatasdk.rest.ResponseTaker.sendRequest(response, context, view)) { view.setListOfParcel(getParcelList(response.body().getReceiver(), response.body().getSender())); }else { view.onError(R.string.server_problem); } <FIXE>
<FIXS> this.isClosed = false; <FIXE>
<FIXS> java.lang.Class<? extends pl.karol202.paintplus.tool.ToolProperties> propertiesClass = getTool().getPropertiesFragmentClass(); <FIXE> <FIXS> propArgs.putInt("tool", getTools().getToolId(getTool())); <FIXE>
<FIXS> <FIXE>
<FIXS> boolean shouldReplicateToPassives = true; <FIXE>
<FIXS> void enqueue(org.sleuthkit.datamodel.FsContent fsContent, java.util.List<org.sleuthkit.autopsy.ingest.IngestServiceFsContent> services) { <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> if (message.isEdited()) { <FIXE>
<FIXS> <FIXE>
<FIXS> getIndex = ((getIndex) + 1) % (capacity); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> java.util.Date parsedDate = dateFormat.parse(s); <FIXE>
<FIXS> persistLearningOppInst("{'institutionId':'pomodoro.university.it','credits':'5'}", getLearningOppSpec("PU001"), getAcademicTerm(getAcademicYear("2016", "2017"), "Fall")); <FIXE>
<FIXS> <FIXE>
<FIXS> for (com.graphhopper.routing.util.FlagEncoder encoder : edgeEncoders) { <FIXE>
<FIXS> com.google.cloud.storage.Storage storage = option.getService(); <FIXE>
<FIXS> if (block == null) { return 0.0; } <FIXE>
<FIXS> db.execSQL(transcend.rockeeper.sqlite.DatabaseHelper.routes.dropTable()); db.execSQL(transcend.rockeeper.sqlite.DatabaseHelper.goals.dropTable()); db.execSQL(transcend.rockeeper.sqlite.DatabaseHelper.notes.dropTable()); db.execSQL(transcend.rockeeper.sqlite.DatabaseHelper.locations.dropTable()); db.execSQL(transcend.rockeeper.sqlite.DatabaseHelper.settings.dropTable()); <FIXE>
<FIXS> <FIXE>
<FIXS> if (lastElement != null) lastElement.click(); <FIXE>
<FIXS> setTarget(doc, cit); <FIXE>
<FIXS> return letters.toUpperCase(); <FIXE>
<FIXS> if ((activeTurnTeamId) < 0) { activeTurnTeamId = team.id; } <FIXE>
<FIXS> com.progressoft.jip.ui.menu.Menu<T> generatedMenu = generateNewMenu(menuXml.getDescription(), menuXml.getActionId(), menuXml.getSubMenuId()); <FIXE>
<FIXS> android.widget.ProgressBar spinner = ((android.widget.ProgressBar) (findViewById(R.id.progressBar))); spinner.setVisibility(View.GONE); android.widget.TextView button = ((android.widget.TextView) (findViewById(R.id.labelBeaconFoundNotififaction))); button.setVisibility(View.VISIBLE); cart.clear(); postNotification("Your meal will be prepared!"); <FIXE>
<FIXS> this.mVwoData = new com.vwo.mobile.data.VwoData(this); <FIXE>
<FIXS> <FIXE>
<FIXS> updateUI(true); <FIXE>
<FIXS> <FIXE>
<FIXS> int languageRepeatedInThisHour = 0; int languageRepeatedInTenMins; <FIXE> <FIXS> languageRepeatedInThisHour = languageMap.get(languageName); <FIXE> <FIXS> languageRepeatedInTenMins = tenMinLanguageMap.get(languageName); languageMap.put(languageName, (languageRepeatedInTenMins + languageRepeatedInThisHour)); <FIXE>
<FIXS> deletePage(org.chromium.chrome.browser.offlinepages.OfflinePageBridgeTest.BOOKMARK_ID, DeletePageResult.SUCCESS); <FIXE>
<FIXS> private boolean containsLinkedResource(java.util.List<org.eclipse.core.resources.IResource> resources) { for (int i = 0; i < (resources.size()); i++) { org.eclipse.core.resources.IResource resource = resources.get(i); <FIXE>
<FIXS> kobeissidev.autobirthday.Settings.loadContacts(getApplicationContext(), dbHandler); android.widget.Toast toast = android.widget.Toast.makeText(getApplicationContext(), "Contacts are loaded!", Toast.LENGTH_SHORT); toast.show(); setResult(0); finish(); <FIXE>
<FIXS> <FIXE> <FIXS> break; <FIXE> <FIXS> break; <FIXE>
<FIXS> edu.uw.dengz6.checkmate.TaskAllFragment.tasks.clear(); <FIXE> <FIXS> <FIXE> <FIXS> <FIXE> <FIXS> adapter.notifyDataSetChanged(); <FIXE>
<FIXS> socket.bind(new java.net.InetSocketAddress(localport)); <FIXE>
<FIXS> getSchema(); <FIXE>
<FIXS> cwa115.trongame.Map.Player remotePlayer = ((cwa115.trongame.Map.Player) (map.getItemById(playerId))); <FIXE>
<FIXS> <FIXE>
<FIXS> return (type ? (offerRepository.findByOid(sid).getUid()) == cuid : (requestRepository.findByRid(sid).getUid()) == cuid) && (this.savePayment(payment, STATE_REMIND)); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> java.lang.String source_dir = args[0]; java.lang.String dest_dir = args[1]; <FIXE>
<FIXS> }else { activity.onBackPressed(); <FIXE>
<FIXS> org.bukkit.Bukkit.getPluginManager().registerEvents(new ml.lasertag.minigame.Mechanics.PlayerJoin(this), this); <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> return new com.cloudbees.plugins.credentials.CredentialsParameterDefinition(getName(), getDescription(), value.getValue(), getCredentialType(), isRequired()); <FIXE>
<FIXS> try (org.apache.hadoop.util.AutoCloseableLock lock = dataset.acquireDatasetLock(true)) { <FIXE>
<FIXS> <FIXE>
<FIXS> if (prefs.getBoolean(Constants.IS_LOGGED_IN, false)) { <FIXE>
<FIXS> private void verifyVisibility(@javax.annotation.Nonnull final edu.umd.cs.findbugs.ba.XMethod invokedMethod) { <FIXE> <FIXS> final edu.umd.cs.findbugs.BugInstance bug = new edu.umd.cs.findbugs.BugInstance(this, "GUAVA_UNEXPECTED_ACCESS_TO_VISIBLE_FOR_TESTING", HIGH_PRIORITY); bug.addCalledMethod(this).addClassAndMethod(this).addSourceLine(this); <FIXE>
<FIXS> private void toggle(boolean toggle) { <FIXE>
<FIXS> <FIXE>
<FIXS> values.add(mapping.get(ev.getName())); <FIXE>
<FIXS> return defaultValue; <FIXE>
<FIXS> android.database.Cursor cursor = null; int count = 0; try { cursor = buildCount(); if (cursor == null) { throw new java.lang.IllegalAccessException("result has been cosumed, please do a query again."); } if (cursor.moveToFirst()) count = cursor.getInt(1); } finally { closeCursor(cursor); <FIXE> <FIXS> <FIXE>
<FIXS> init(); <FIXE>
<FIXS> if ("startDate".equals(compareCondition)) { return o1.getStartDate().compareTo(o2.getStartDate()); }else { throw new org.openlmis.referencedata.exception.ValidationMessageException(new org.openlmis.referencedata.util.Message(org.openlmis.referencedata.util.messagekeys.ProcessingPeriodMessageKeys.ERROR_INVALID_SORTING_COLUMN, compareCondition)); <FIXE>
<FIXS> int colIndex = ((int) ((lon - (westLng)) / (cellDegree))); <FIXE>
<FIXS> if (overlay != null ? !(overlay.equals(this.overlay)) : (this.overlay) == null) { <FIXE>
<FIXS> long duration = (java.lang.System.currentTimeMillis()) - (startTime); <FIXE>
<FIXS> if (move(k, spielfeld)) { spieler.get(activePlayer).remove(k); return true; } <FIXE>
<FIXS> if (!(on)) { try { serverSocket = new java.net.DatagramSocket(port); byte[] receiveData = new byte[1024]; java.lang.System.out.println(("Starting on port " + port)); on = true; run(receiveData); } catch (java.net.SocketException e) { e.printStackTrace(); } <FIXE>
<FIXS> transaction = em.merge(transaction); <FIXE>
<FIXS> java.lang.String text; <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> com.tu.accountingview.model.GroupActVO groupactVO = accountingviewBean.doGetAllValidateDetails(oneactId); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> DemoInt = Demo.getSelectedIndex(); <FIXE>
<FIXS> new mohz.m13.wicompanion.CommandFragment.SendText().execute(result.get(0)); <FIXE>
<FIXS> net.liquidpineapple.pang.screens.Screen newScreen = null; <FIXE>
<FIXS> if (!(trackBeans.isEmpty())) { com.fritzbang.theplayer.TrackBean tmp = trackBeans.get(trackToPlay); tmp.status = status; tmp.position = position; trackBeans.set(trackToPlay, tmp); android.util.Log.d(com.fritzbang.theplayer.PlaylistArrayAdapter.DEBUG_TAG, ((("AdapterPosition: " + trackToPlay) + " ") + position)); this.notifyDataSetChanged(); } <FIXE>
<FIXS> if ((errorDrawable != null) && (com.layer.ui.util.Log.isLoggable(com.layer.ui.util.Log.VERBOSE))) { <FIXE>
<FIXS> if (((znake.isRich()) == true) && ((znake.getLoopCountAfterGoldGet()) <= 1)) { <FIXE>
<FIXS> inputStream = new org.openrepose.commons.utils.io.BufferedServletInputStream(new org.openrepose.commons.utils.io.stream.LimitedReadInputStream(streamLimit, super.getInputStream())); <FIXE>
<FIXS> java.lang.String s = java.lang.String.valueOf(object).trim(); <FIXE>
<FIXS> <FIXE>
<FIXS> if (!(worldObj.isRemote)) transmitPower(); <FIXE>
<FIXS> if (bufSize == 0) return 0; <FIXE>
<FIXS> <FIXE>
<FIXS> student = new model.Student("Jacó Mario Souza", cpf, rg, date, email, address, phone1, phone2, "Milene Souza Medeiros", "Mário Souza Filho", 1); <FIXE>
<FIXS> gov.hhs.fha.nhinc.auditquerylog.nhinc.proxy.AuditQueryLogProxyWebServiceUnsecuredImpl.LOG.error((("Failed to call the web service " + (gov.hhs.fha.nhinc.nhinclib.NhincConstants.ADAPTER_AUDIT_QUERY_LOG_SERVICE_NAME)) + (ex.getLocalizedMessage())), ex); <FIXE>
<FIXS> <FIXE>
<FIXS> }else if ((this) == (lupos.engine.operators.singleinput.federated.FederatedQueryBitVectorJoin.APPROACH.ValueSubstring)) { lupos.engine.operators.singleinput.federated.FederatedQueryBitVectorJoin.approachClass = lupos.engine.operators.singleinput.federated.FederatedQueryBitVectorJoin.SubstringValueToStringHelper.class; }else { lupos.engine.operators.singleinput.federated.FederatedQueryBitVectorJoin.approachClass = lupos.engine.operators.singleinput.federated.FederatedQueryBitVectorJoin.BitVectorJoinToStringHelper.class; lupos.engine.operators.singleinput.federated.FederatedQueryBitVectorJoin.hashFunction = lupos.engine.operators.singleinput.federated.FederatedQueryBitVectorJoin.HASHFUNCTION.values()[this.ordinal()]; } <FIXE>
<FIXS> newLibraryTitle = textFieldForNewLibraryTitle.getText(); <FIXE> <FIXS> com.devprosony.Main.stdOut.println(("newLibraryTitle: " + (newLibraryTitle))); <FIXE>
<FIXS> if ((firstPos >= 0) && (firstPos < (postsIds.size()))) { return postsIds.get(firstPos); <FIXE>
<FIXS> when(projectPaginatedScanList.stream()).thenReturn(java.util.stream.Stream.empty()); <FIXE>
<FIXS> final java.util.List<io.github.data4all.model.data.PolyElement> pEs = this.getAllPolyElements(); <FIXE> <FIXS> this.deleteNodeByID(n.getOsmId()); <FIXE>
<FIXS> org.gnucash.android.ui.account.AccountsActivity.start(this); <FIXE>
<FIXS> return true; <FIXE> <FIXS> return super.onOptionsItemSelected(item); <FIXE>
<FIXS> <FIXE>
<FIXS> owner.registerClientProcessor(new at.borkowski.scovillej.prefetch.members.server.ClientProcessor(owner, serverSocket.accept())); <FIXE>
<FIXS> com.example.ssteeve.dpd_android.DPDUser.login(endPoint, username, password, mappableObject, callBack); <FIXE>
<FIXS> protected final void provision(android.support.v4.app.Fragment fragment, java.lang.String json) { <FIXE> <FIXS> <FIXE>
<FIXS> final org.opencv.core.Mat result = new org.opencv.core.Mat(); imageThresholded.convertTo(result, CvType.CV_8UC3); return result; <FIXE>
<FIXS> expected.path.add(A1); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> resize((2 * (q.length))); <FIXE>
<FIXS> com.tri.pgs.client.surface.ui.UISystem.init(comp, false, false); <FIXE>
<FIXS> holder.tvDetails.setText(mDataset[position].getDetails(holder.tvDetails.getContext())); <FIXE>
<FIXS> return new drgn.data.routes.mathematics.Line(_a, _b, (-(((_a) * (point.getLongitude())) + ((_b) * (point.getLatitude())))), point); <FIXE>
<FIXS> public void createLand(java.lang.String owner, int[] start, int[] end, int size, java.lang.String world) { sql.createLand(owner, start[0], start[1], end[0], end[1], size, world); <FIXE>
<FIXS> this.requestToServer.writeObject(new Message(MessageType.EnterTopic, null, null, roomName)); <FIXE>
<FIXS> org.junit.Assert.assertEquals(doc1ExpectedTfMap, tfMap1); org.junit.Assert.assertEquals(doc2ExpectedTfMap, tfMap2); <FIXE>
<FIXS> if (((currentItemIndex) + (com.harvest.hud_elements.HUDVars.INVENTORY_ROW_SIZE)) > ((list.size()) - 1)) { <FIXE>
<FIXS> for (java.util.Map.Entry entry : screenStringBiMap.entrySet()) { stmt.execute((((("insert into screenNameMap (screenId, screenName) values (" + (entry.getValue())) + ",'") + (entry.getKey())) + "') ON CONFLICT DO NOTHING")); } <FIXE>
<FIXS> if ((mDtvManager) != null) { mDtvManager.setMute(); } <FIXE> <FIXS> if ((mDtvManager) != null) { mDtvManager.setVolume((volume * 100)); } <FIXE>
<FIXS> for (int I = 0; I < (MainGame.items.length); I++) { <FIXE> <FIXS> java.lang.System.out.println(((("Item " + (MainGame.items[I])) + ": ") + (MainGame.itemDescrStrings[I]))); <FIXE>
<FIXS> for (; i < (start + (com.kiddos.nuktimetable.MainFragment.ScheduleAdapter.NUM_COL)); i++) { <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> } if (isUnknownTypeSerializer(ser)) { return null; <FIXE>
<FIXS> public void shutdown() { if ((sendSystem) != null) { <FIXE> <FIXS> sendSystem = null; } if ((receiveThread) != null) { <FIXE> <FIXS> receiveThread = null; } if ((combinedAudioExecutor) != null) { <FIXE> <FIXS> combinedAudioExecutor = null; } <FIXE>
<FIXS> public void onClick(boolean b) { <FIXE>
<FIXS> mScene = new org.andengine.entity.scene.Scene(); mBackground = new org.andengine.entity.scene.background.Background(0, 0, 0, 1); <FIXE> <FIXS> mBackground = new org.andengine.entity.scene.background.Background(0, 0, 0, 1); <FIXE>
<FIXS> return (board[markerPos.getPosY()][markerPos.getPosX()].getMarker(col)) != null; <FIXE>
<FIXS> SourceParsers.JAVA.parse(set, "org/spongepowered/despector/Despector.java", input); <FIXE>
<FIXS> sessionBuilder.out(oldSession, response); <FIXE> <FIXS> <FIXE>
<FIXS> private static void createSeries(org.jfree.data.xy.XYSeriesCollection seriesCollection, org.nd4j.linalg.api.ndarray.INDArray data, int offset, java.lang.String name) { <FIXE> <FIXS> <FIXE>
<FIXS> }, null); <FIXE>
<FIXS> if (((!(repository.allowsDeployment())) || (RepositoryTypeEnum.GROUP.getType().equals(repository.getType()))) || (RepositoryTypeEnum.PROXY.getType().equals(repository.getType()))) { <FIXE>
<FIXS> if ((chooseDate.get(position)) != null) <FIXE>
<FIXS> handbag = handbag.toUpperCase(); <FIXE>
<FIXS> (this.index)--; <FIXE>
<FIXS> <FIXE>
<FIXS> com.nononsenseapps.filepicker.FilePickerFragmentTest.fragment.setArgs(null, AbstractFilePickerFragment.MODE_NEW_FILE, true, false, true, false); <FIXE>
<FIXS> org.apache.sqoop.submission.spark.YarnSqoopSparkClient.yarnConfig = org.apache.sqoop.submission.spark.YarnSqoopSparkClient.generateYarnSparkConf(conf); <FIXE> <FIXS> <FIXE>
<FIXS> break; <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> if ((originalList) != null) { outState.putParcelable(org.tasks.ui.GoogleTaskListFragment.EXTRA_ORIGINAL_LIST, originalList.getStoreObject()); } if ((selectedList) != null) { outState.putParcelable(org.tasks.ui.GoogleTaskListFragment.EXTRA_SELECTED_LIST, selectedList.getStoreObject()); } <FIXE>
<FIXS> Woo.users[(((Woo.order) + 1) % (Woo.users.length))].draw(); Woo.users[(((Woo.order) + 1) % (Woo.users.length))].draw(); <FIXE>
<FIXS> <FIXE>
<FIXS> if (((this.getBlockMetadata()) & (-8)) == 0) <FIXE>
<FIXS> <FIXE>
<FIXS> for (java.lang.String segmentNo : getValidSegments(job)) { <FIXE>
<FIXS> switch (boydjohnson.SnakeGame.getGameStage()) { <FIXE>
<FIXS> if (((marketCodeField.getText()) == null) || (marketCodeField.getText().isEmpty())) { <FIXE> <FIXS> if (((dataPathField.getText()) == null) || (dataPathField.getText().isEmpty())) { <FIXE>
<FIXS> if (((mavPolarEn) == null) || (((java.lang.System.currentTimeMillis()) - (mavLastUpdatedPolarEn)) > (no.imr.geoexplorer.admindatabase.controller.MareanoController.ONEHOUR))) { <FIXE>
<FIXS> public void markDirty(mcp.mobius.betterbarrels.common.blocks.TileEntityBarrel barrel, boolean bspace) { <FIXE>
<FIXS> private void initAllCards() { <FIXE> <FIXS> <FIXE>
<FIXS> org.junit.Assert.assertEquals("$0.00", vendingMachine.check_coin_return()); org.junit.Assert.assertEquals("$0.25", vendingMachine.check_display()); <FIXE>
<FIXS> for (com.doomonafireball.repmaxcalculator.widget.RepMaxView repMaxView : mRepMaxViews) { repMaxView.clearWeight(); } <FIXE>
<FIXS> for (int i = 0; i != (multiplier.size()); i++) { <FIXE>
<FIXS> <FIXE>
<FIXS> public java.util.List<mazeADT.Cell> getNeighbors() { java.util.List<mazeADT.Cell> neighbors = new java.util.LinkedList<mazeADT.Cell>(); <FIXE>
<FIXS> if (fleePos != null) { fleePath = AStarSearch(this.getXPos(), this.getYPos(), fleePos.getXPos(), fleePos.getYPos()); } <FIXE>
<FIXS> gamePresenterNew.resetUserInfo(ConstentNew.USERPOS); <FIXE> <FIXS> <FIXE>
<FIXS> deferredCommands.clear(); <FIXE>
<FIXS> if (clazz != null) { intent.putExtra("subject", clazz.getSubject()); intent.putExtra("section", clazz.getSection()); intent.putParcelableArrayListExtra("scheduleList", ((java.util.ArrayList<? extends android.os.Parcelable>) (clazz.getListOfSchedule()))); } <FIXE>
<FIXS> com.andela.helpmebuy.utilities.Launcher.launchActivity(context, com.andela.helpmebuy.activities.UserSettingsActivity.class); <FIXE> <FIXS> com.andela.helpmebuy.utilities.Launcher.launchActivity(context, com.andela.helpmebuy.activities.HomeActivity.class); <FIXE>
<FIXS> final int index = (bs < 0) ? (-bs) - 1 : bs; <FIXE>
<FIXS> return sendMessage(MessageType.SMS, CorpNum, sender, senderName, null, content, Messages, reserveDT, adsYN, UserID); <FIXE>
<FIXS> assertFalse(fact.validateDelimitedPeriod(periods, true, true)); <FIXE>
<FIXS> url = "/"; <FIXE>
<FIXS> done = pipeline.swap(segments, null, false); <FIXE>
<FIXS> if (user == null) { return new java.util.HashSet<>(); } <FIXE>
<FIXS> if (mContainsImages) { android.text.Spanned text = getText(); <FIXE>
<FIXS> mLoadingDialog = null; <FIXE>
<FIXS> break; <FIXE>
<FIXS> <FIXE> <FIXS> if (m == null) { if (thisModelFuture != null) releaseCurrentModel(); return ; } <FIXE>
<FIXS> org.eclipse.jgit.api.Git cloneCall = cloneCommand.call(); <FIXE>
<FIXS> liquibase.database.Database database = liquibase.integration.commandline.CommandLineUtils.createDatabaseObject(this.getClass().getClassLoader(), url, null, null, null, null, null, false, false, null, null, null, null, null, null, null); <FIXE>
<FIXS> if (!(theweekend.cosmetics.ipod.Radio.queuedSongs.contains(generate))) { <FIXE>
<FIXS> break; <FIXE>
<FIXS> view = inflater.inflate(R.layout.fragment_view_team_info, container, false); <FIXE>
<FIXS> self.getDelegate().didChangeDrawing(self, self.getDrawingData().canUndo(), self.getDrawingData().canRedo()); <FIXE>
<FIXS> <FIXE>
<FIXS> java.io.File file = new java.io.File(factionmod.FactionMod.getConfigDir(), fileName); <FIXE>
<FIXS> assertEquals(0L, getBitField(db)); <FIXE>
<FIXS> <FIXE>
<FIXS> if ((resources.length) == 0) { return null; } <FIXE>
<FIXS> aux.add(this.carros.get(i)); <FIXE>
<FIXS> int index = 1; <FIXE>
<FIXS> while (!(cardList.getCards().isEmpty())) { deleteCard(cardList.getCards().get(0)); } <FIXE>
<FIXS> if (!(_mapOfColors.get(node).contains(color))) _mapOfColors.get(node).add(color); <FIXE>
<FIXS> time = new java.lang.String[0]; temp = new java.lang.String[0]; <FIXE>
<FIXS> mousePointingcolumn = pushMousePointingColumn; }else { return ; <FIXE>
<FIXS> com.springapp.model.ProductCatalogue.getProductCatalogue().removeAllProducts(); <FIXE> <FIXS> <FIXE>
<FIXS> java.lang.System.out.println("Invalid input"); <FIXE> <FIXS> <FIXE>
<FIXS> }else { super.onBrowserEvent(context, parent, value, event, valueUpdater); <FIXE>
<FIXS> <FIXE> <FIXS> java.util.HashMap<java.lang.String, java.lang.String> exifAttributes = ((java.util.HashMap<java.lang.String, java.lang.String>) (f.get(exif))); if ((exifAttributes != null) && ((exifAttributes.size()) > 0)) return exifAttributes; <FIXE> <FIXS> return null; <FIXE>
<FIXS> private java.util.List<edu.cmu.tetrad.search.IntSextad> sextadList(edu.cmu.tetrad.search.IntSextad... t) { <FIXE> <FIXS> for (int i = 0; i < (t.length); i++) { list.add(t[i]); } <FIXE>
<FIXS> cacheCountUpdater.cancel(true); <FIXE> <FIXS> <FIXE>
<FIXS> float f = sc.nextFloat(); <FIXE>
<FIXS> sqlParser.SqlParser.jj_la1_1 = new int[]{ 63242240 , 63242240 , 0 , 0 , 0 , 1048576 , 2 , 0 , 16386 , 16386 , 0 , 50593792 , 1048576 , 8192 , 0 , 8192 , 0 , 1048576 , 0 , 16386 , 16386 , 0 , 12582912 , 536870912 , 0 , 0 , 0 , 0 , 402653184 , 0 , 67239936 }; <FIXE>
<FIXS> estate.delete(estate.getType()); <FIXE>
<FIXS> com.ullink.slack.simpleslackapi.impl.SlackMessageHandleImpl<com.ullink.slack.simpleslackapi.replies.SlackChannelReply> handle = new com.ullink.slack.simpleslackapi.impl.SlackMessageHandleImpl<com.ullink.slack.simpleslackapi.replies.SlackChannelReply>(getNextMessageId()); <FIXE>
<FIXS> <FIXE>
<FIXS> data.isCoding = ((transcript) == null) ? false : transcript.isCoding(); <FIXE>
<FIXS> private void setStatusBarColor(android.support.v7.graphics.Palette palette) { <FIXE>
<FIXS> try { java.io.FileReader fr = new java.io.FileReader(new java.io.File("cities.txt")); <FIXE>
<FIXS> if (matchingBehaviorFieldValue != null) { <FIXE>
<FIXS> org.springframework.data.domain.Page<by.itechart.flowerty.model.User> pageUsers = userService.getPage(page, 1); <FIXE>
<FIXS> public void write(java.lang.String out) throws java.io.IOException { java.lang.String[] tmp = out.split("\\."); java.lang.String format = tmp[((tmp.length) - 1)]; javax.imageio.ImageIO.write(image, format, new java.io.File(out)); <FIXE>
<FIXS> if (packet != null) { out.add(packet); }else { <FIXE> <FIXS> <FIXE>
<FIXS> assertEquals("set walltime in config", org.genepattern.drm.Walltime.fromString("7-00:00:00"), drmJobSubmission.getWalltime()); <FIXE>
<FIXS> rollsSinceLastReseed = 0; <FIXE>
<FIXS> int idx = columns.simpleIdx(column); <FIXE> <FIXS> idx += base; <FIXE>
<FIXS> commonCityService.buildQueuedBuildings(org.exschool.pocketworld.controllers.city.resources.CityResourcesController.PLAYER_NAME); <FIXE> <FIXS> <FIXE>
<FIXS> return nameList.stream().map(( s) -> new pl.sda.hello.names.Name(atomicLong.getAndIncrement(), s.trim())).collect(java.util.stream.Collectors.toList()); <FIXE>
<FIXS> break; <FIXE>
<FIXS> if ((t != null) && (!(t.getText().equals("Home")))) <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> requestCycle.scheduleRequestHandlerAfterCurrent(new org.apache.wicket.request.handler.TextRequestHandler("application/json", "UTF-8", fieldJson)); <FIXE>
<FIXS> <FIXE> <FIXS> this.mLyrics = mSong.getLyrics(); this.mLyricsItems = mLyrics.getLyricsItems(); <FIXE>
<FIXS> public void convertInput() { <FIXE>
<FIXS> visualizzaPrenotazioniFragment = new com.project.is.sportlink.ui.VisualizzaPrenotazioniFragment(); <FIXE>
<FIXS> <FIXE>
<FIXS> public com.smartstudy.zhike.mylibrary.widget.BannerView setPages(java.util.List<T> datas) { <FIXE> <FIXS> pageAdapter = new com.smartstudy.zhike.mylibrary.widget.BasePageAdapter(mDatas); <FIXE>
<FIXS> if (((instance) != null) && (InstanceConstants.STATE_STOPPED.equals(instance.getState()))) { <FIXE>
<FIXS> game.setScreen(new com.mygdx.magicappgame.States.PlayScreen(game)); <FIXE>
<FIXS> return ((((((((((((((("Employee{" + "idemployee=") + (idemployee)) + ", firstName='") + (firstName)) + '\'') + ", lastName='") + (lastName)) + '\'') + ", role=") + (role.getName())) + ", password='") + (password)) + '\'') + ", cars=") + (cars)) + '}'; <FIXE>
<FIXS> main.performTagEdit(restriction, de.blau.android.easyedit.EasyEditManager.RestrictionToElementActionModeCallback.RESTRICTION_TAG, false, false); <FIXE>
<FIXS> if (isEmpty) { if (com.vezikon.popularmovies.Utils.isNetworkAvailable(getActivity())) { showProgress(true); getMovies(com.vezikon.popularmovies.fragments.MoviesFragment.TYPE_MOST_POPULAR); }else { android.widget.Toast.makeText(getActivity(), getString(R.string.error_msg_no_connection), Toast.LENGTH_LONG).show(); } <FIXE>
<FIXS> com.eucalyptus.objectstorage.metadata.DbBucketCorsManagerImpl.LOG.error(("Exception caught while deleting CORS rules for bucket " + bucketUuid), ex); <FIXE>
<FIXS> }else { adBuilder.price(java.lang.Integer.parseInt(priceWithCurrency)); <FIXE> <FIXS> <FIXE>
<FIXS> if (methods != null) { for (dictionary.APIMethod method : methods) types.add(method.getType()); return types; }else { return null; } <FIXE>
<FIXS> private static org.glassfish.jersey.internal.util.ReflectionHelper.DeclaringClassInterfacePair getType(final java.lang.Class<?> concrete, final java.lang.Class<?> iface, final java.lang.Class<?> c, final java.lang.reflect.Type[] ts) { for (final java.lang.reflect.Type t : ts) { final org.glassfish.jersey.internal.util.ReflectionHelper.DeclaringClassInterfacePair p = org.glassfish.jersey.internal.util.ReflectionHelper.getType(concrete, iface, c, t); <FIXE>
<FIXS> if (((double) (blockIn.getBlockHardness(worldIn, pos))) != 0) { <FIXE>
<FIXS> return ret.get(0)[0]; <FIXE>
<FIXS> <FIXE>
<FIXS> c = readCodePoint(); <FIXE>
<FIXS> imageService.getLacDataForGene(acc, topLevelMa, overview, false, model); <FIXE>
<FIXS> moveKnob1(java.lang.Math.abs(e.getX())); <FIXE>
<FIXS> if ((!(org.vibur.dbcp.SQLSTATE_POOL_CLOSED_ERROR.equals(e.getSQLState()))) || (!(isAllowConnectionAfterTermination()))) <FIXE>
<FIXS> selectPositions(increment(selectedRows, (-1))); <FIXE>
<FIXS> <FIXE>
<FIXS> } if ((gridProducts.getAdapter()) != null) { gridProducts.getAdapter().notifyDataSetChanged(); <FIXE>
<FIXS> java.lang.String name = with.getString("name"); <FIXE>
<FIXS> indexingTopology.util.BTreeNode node = null; <FIXE>
<FIXS> <FIXE>
<FIXS> array.append(this.arrayToString(matrix[i])); array.append(java.lang.System.lineSeparator()); <FIXE>
<FIXS> unq.tpi.desapp.grupof.model.GoodQualification goodQualification = mock(unq.tpi.desapp.grupof.model.GoodQualification.class); when(goodQualification.getPoints()).thenReturn(500); <FIXE>
<FIXS> ctx.startService(intent); <FIXE>
<FIXS> return ; <FIXE> <FIXS> return ; <FIXE>
<FIXS> <FIXE>
<FIXS> for (org.springframework.boot.loader.archive.Archive.Entry entry : archive) { <FIXE>
<FIXS> org.exoplatform.portal.gadget.core.GadgetToken token = tokenEntry.getToken(); <FIXE> <FIXS> return token; <FIXE>
<FIXS> if ((game.getBalls().getCount()) < 1) { <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> private void deleteResidualDirectory(java.util.Properties storageProperties) { <FIXE>
<FIXS> for (int x = 0; x <= (lastCard); x++) { <FIXE>
<FIXS> }else { if (!isWifiEnable) { <FIXE>
<FIXS> protected boolean onCanProcessClick(android.view.View _view) { <FIXE>
<FIXS> bomb(e); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> return ((int) (columnView.rowCount(null))); <FIXE>
<FIXS> performSeek(seekToPosition, false); <FIXE>
<FIXS> private void submitToErrorPort(java.lang.String error) { <FIXE> <FIXS> otup.setString(0, error); <FIXE>
<FIXS> }else if (tester.equals("CSV")) { ch.ice.controller.MainController.fileWriterFactory = false; } <FIXE>
<FIXS> com.game.Audio.Sounds.music.play(); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> java.util.List<org.osgi.framework.BundleListener> listeners = bundleListeners.get(bundleState); if (listeners != null) { if ((listeners.size()) > 1) listeners.remove(listener); else removeBundleListeners(bundleState); <FIXE>
<FIXS> this.images = ((java.util.List<serializers.coherence.media.Image>) (pofReader.readCollection(1, new java.util.ArrayList<serializers.coherence.media.Image>()))); <FIXE>
<FIXS> type = (roundedCorners) ? com.beardedhen.androidbootstrap.BootstrapButton.bbuttonTypeMapRounded.get(bootstrapType) : com.beardedhen.androidbootstrap.BootstrapButton.bbuttonTypeMap.get(bootstrapType); type = (type == null) ? com.beardedhen.androidbootstrap.BootstrapButton.BootstrapTypes.DEFAULT : type; <FIXE>
<FIXS> coloredNavBar = SP.getBoolean("nav_bar", true); oscuredStatusBar = SP.getBoolean("set_traslucent_statusbar", false); <FIXE>
<FIXS> if (item instanceof java.lang.String) { if (item.equals(selection)) { setSelection(i); return ; } }else { if (item == selection) { setSelection(i); return ; } <FIXE>
<FIXS> if ((animation.getLastCalledFrame()) < (sequence.frames.length)) { <FIXE>
<FIXS> if (!((isAltitudeMissing()) && ((altitude.intValue()) > 0))) { <FIXE>
<FIXS> org.launchcode.models.User user, @org.springframework.web.bind.annotation.RequestParam java.lang.String verify) { <FIXE> <FIXS> model.addAttribute(user); <FIXE>
<FIXS> if ((highScoreDeck.isEmpty()) || ((lastScoreDeck.compareTo(highScoreDeck)) < 0)) { <FIXE>
<FIXS> <FIXE>
<FIXS> } <FIXE>
<FIXS> com.ringcentral.Request request = new com.ringcentral.Request.Builder().url(((server) + endpoint)).addHeader("Authorization", authorizationHeader()).post(body).build(); <FIXE>
<FIXS> call.patch("posts/4", new com.coveros.selenified.services.Request(request)).assertEquals(201); <FIXE>
<FIXS> <FIXE> <FIXS> java.lang.System.out.println(((((("The best idea is Idea #" + (heap[0].getSeqNum())) + "/nrated at") + (heap[0].getRating())) + "here is the description: /n") + (heap[0].getDesc()))); <FIXE>
<FIXS> window.setContentPane(new grts.Main.MainPanel()); <FIXE> <FIXS> window.setDefaultCloseOperation(javax.swing.JFrame.EXIT_ON_CLOSE); <FIXE>
<FIXS> if (rule != null) { rules.add(rule); } <FIXE>
<FIXS> <FIXE>
<FIXS> if (((deposit) >= (price)) && ((stock) >= 1)) { <FIXE>
<FIXS> assert !(parameterName.isEmpty()); <FIXE>
<FIXS> public void Initialize(com.traintrax.navigation.service.mdu.MotionDetectionUnitInterface motionDetectionUnit, com.traintrax.navigation.service.TrackSwitchControllerInterface trackSwitchController, com.traintrax.navigation.service.TrainNavigationDatabaseInterface trainNavigationDatabase, com.traintrax.navigation.service.events.PublisherInterface<com.traintrax.navigation.service.TrainNavigationServiceEventSubscriber, com.traintrax.navigation.service.TrainNavigationServiceEvent> eventPublisher, com.traintrax.navigation.service.position.InertialMotionPositionAlgorithmInterface trainPositionAlgorithm, boolean useRfidTagsOnly) { <FIXE>
<FIXS> if ((controller.getSelectedUsers()) != null) { <FIXE>
<FIXS> <FIXE>
<FIXS> long expectedSum = (((A.length) + 1) * ((A.length) + 2)) / 2; long realSum = 0; <FIXE> <FIXS> realSum = realSum + (new java.lang.Long(i)); <FIXE> <FIXS> return new java.lang.Long((expectedSum - realSum)).intValue(); <FIXE>
<FIXS> java.lang.String class_name = mClassList.get(0); <FIXE> <FIXS> class_name = "," + (mClassList.get(i)); <FIXE>
<FIXS> return this._entries.put(name, entry); <FIXE>
<FIXS> private static boolean collides(int x, int y, int width, int height, java.lang.Iterable<com.polarbirds.huldra.model.world.SectionBounds> boundsList) { <FIXE> <FIXS> if (boundsFromList.collides(x, y, width, height)) { <FIXE>
<FIXS> if (((dataSourceClient) != null) && ((dataKitAPI) != null)) <FIXE> <FIXS> dataKitAPI.unsubscribe(dataSourceClient); <FIXE> <FIXS> if ((redrawer) != null) { redrawer.pause(); redrawer.finish(); } <FIXE>
<FIXS> application.showNotification(this); <FIXE>
<FIXS> <FIXE>
<FIXS> if (tempPos >= (input.length())) <FIXE> <FIXS> while (isWhitespace(c)) { <FIXE>
<FIXS> super.onBackPressed(); <FIXE> <FIXS> <FIXE>
<FIXS> java.lang.Integer j = ((java.lang.Integer) (mainTable_.getValueAt(mainTable_.convertRowIndexToModel(i), 0))); rows[i] = j; <FIXE>
<FIXS> org.assertj.core.api.Assertions.assertThat(prefs.getGuestFlag(true)).isTrue(); <FIXE>
<FIXS> switch (n.getName().toLowerCase()) { <FIXE>
<FIXS> if (type.getText().equals("int")) { <FIXE> <FIXS> if (type.getText().equals("boolean")) { <FIXE>
<FIXS> return b1; <FIXE>
<FIXS> java.util.Map<java.lang.String, java.lang.Object> params = new java.util.HashMap<>(); <FIXE> <FIXS> params.put("p_id", phone.getManufacturer().getId()); <FIXE>
<FIXS> if ((getSupportActionBar()) != null) { getSupportActionBar().setDisplayHomeAsUpEnabled(true); getSupportActionBar().setDisplayShowTitleEnabled(false); } <FIXE>
<FIXS> initCommentItem(this, comment_item, comment, mainSwatch, itemSwatch, false); <FIXE>
<FIXS> public void insertOrder(Simulator.Order order) { <FIXE>
<FIXS> if (((tokenLength) > 0) && ((termAtt.length()) > 0)) { <FIXE>
<FIXS> board.Cell temp = board[y1][x1]; board[y1][x1] = board[y2][x2]; board[y2][x2] = temp; <FIXE>
<FIXS> java.util.List<T> list = findAll(classType, session); return list; <FIXE>
<FIXS> junit.framework.Assert.assertTrue(form.getMessage(), form.getMessage().contains("User needs to specify which credentials to use.")); <FIXE>
<FIXS> java.lang.String[][] stringValues = db.readAllValues(); for (int i = 0; i < (stringValues.length); i++) { for (int j = 1; j < 7; j++) { java.lang.System.out.print(((stringValues[i][j]) + " ")); } java.lang.System.out.println(); <FIXE>
<FIXS> if (values[0].equals("17")) { <FIXE>
<FIXS> <FIXE>
<FIXS> private java.util.List<java.lang.String> getAllObjects(java.lang.String path) { java.util.List<java.lang.String> objects = new java.util.ArrayList<java.lang.String>(); <FIXE>
<FIXS> de.gocodinggroup.multiplicationtable.input.kinect.EventManager.dispatchAndWait(new de.gocodinggroup.multiplicationtable.input.kinect.KinectDepthFrameEvent(depthFrame, xyz)); <FIXE>
<FIXS> if ((getMagnification()) > zoom) { while ((getMagnification()) > zoom) zoomOut(0, 0); <FIXE> <FIXS> }else { while ((getMagnification()) < zoom) zoomIn(0, 0); <FIXE> <FIXS> if ((getMagnification()) <= 1.0) imp.repaintWindow(); <FIXE> <FIXS> <FIXE>
<FIXS> }else index++; <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> public boolean onStartNestedScroll(android.support.design.widget.CoordinatorLayout parent, android.support.design.widget.AppBarLayout child, android.view.View directTargetChild, android.view.View target, int nestedScrollAxes, int type) { if (super.onStartNestedScroll(parent, child, directTargetChild, target, nestedScrollAxes, type)) { <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> private void registerBuiltInServices(org.terracotta.passthrough.PassthroughConnection pseudoConnection) { <FIXE> <FIXS> <FIXE>
<FIXS> private void setMinDateInMs(long minDateInMs) { <FIXE>
<FIXS> void init(org.json.JSONArray data, org.apache.cordova.CallbackContext callback) throws org.json.JSONException { org.json.JSONObject params = data.getJSONObject(0); boolean isOpenMessageRoaming = params.getBoolean("isOpenMessageRoaming"); <FIXE>
<FIXS> buildObjectGraphAndInject(); <FIXE> <FIXS> <FIXE>
<FIXS> if ((((de.beacon.tom.viibenav_radiomapper.model.SensorHelper.getOrientation()) >= 0) && ((de.beacon.tom.viibenav_radiomapper.model.SensorHelper.getOrientation()) < 90)) || (((de.beacon.tom.viibenav_radiomapper.model.SensorHelper.getOrientation()) >= 270) && ((de.beacon.tom.viibenav_radiomapper.model.SensorHelper.getOrientation()) <= 360))) <FIXE>
<FIXS> <FIXE>
<FIXS> public static java.lang.String parseVersion(java.lang.String requestLine) { <FIXE>
<FIXS> <FIXE>
<FIXS> return inventory.take(entityPlayer.getCurrentEquippedItem(), this, false, true); <FIXE>
<FIXS> <FIXE>
<FIXS> public static java.lang.String createJsonStringFromInputStream(java.io.InputStream inputStream) { <FIXE>
<FIXS> @android.support.annotation.RequiresApi(api = Build.VERSION_CODES.LOLLIPOP) <FIXE> <FIXS> iv.setImageDrawable(mContext.getResources().getDrawable(mDot[1], null)); <FIXE>
<FIXS> if (procedure.getSinglepartition()) { <FIXE>
<FIXS> this.model.reinit(sourceGroups); <FIXE>
<FIXS> out.write(buffer, 0, readBytes); <FIXE>
<FIXS> <FIXE>
<FIXS> return new com.kms.cura_server.response.UserAPIResponse().successResponsewithType(user); <FIXE>
<FIXS> <FIXE>
<FIXS> java.util.LinkedList<java.lang.Long> expList = new java.util.LinkedList<java.lang.Long>(); expList = de.mpa.client.ui.dialogs.SelectExperimentDialog.showDialog(de.mpa.client.ui.ClientFrame.getInstance(), "Select experiments"); if (!(expList.isEmpty())) { <FIXE>
<FIXS> <FIXE>
<FIXS> float sf = 1; <FIXE>
<FIXS> private void pushUp(int i) { <FIXE>
<FIXS> java.util.List<quickdt.Instance> diaInstances = quickdt.Benchmarks.loadDiabetesDataset(); <FIXE> <FIXS> final java.util.List<quickdt.Instance> moboInstances = quickdt.Benchmarks.loadMoboDataset(); <FIXE>
<FIXS> sqLiteDatabase.execSQL((((((((((("CREATE TABLE " + (TABLE_PERIOD)) + "(") + (PERIOD_COLUMN_ID)) + " INTEGER PRIMARY KEY NOT NULL, ") + (PERIOD_COLUMN_SCHOOL_HOUR_NO)) + "INTEGER NOT NULL, ") + (PERIOD_COLUMN_STARTTIME)) + " TIME NOT NULL, ") + (PERIOD_COLUMN_ENDTIME)) + " TIME NOT NULL )")); <FIXE>
<FIXS> <FIXE>
<FIXS> users = service.getUserFromDb(new db_project.models.UserModel(null, null, null, nickname)); <FIXE>
<FIXS> <FIXE>
<FIXS> cal.set(java.util.Calendar.SECOND, 0); <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> requestHolder.get().setCurrentRequest(((javax.servlet.http.HttpServletRequest) (req))); <FIXE>
<FIXS> }), 0, null); <FIXE>
<FIXS> if (this.isEmpty()) { <FIXE>
<FIXS> tcpService.sendCommand(command.trim()); <FIXE> <FIXS> <FIXE>
<FIXS> return new java.util.Date(0); <FIXE> <FIXS> return new java.util.Date(0); <FIXE> <FIXS> return new java.util.Date(0); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> org.aas.ga.examples.AsciiMatcherGA ga = new org.aas.ga.examples.AsciiMatcherGA(org.aas.ga.chromo.ChromosomeFactory.createDefaultChromosomes(new org.aas.ga.genes.AsciiGene(1), input.length(), 200), 50000, 0.6, 0.4, 0.6, 0.5, input); <FIXE>
<FIXS> if ((java.lang.Integer.parseInt(spQtPack.getValue().toString())) < 3) { <FIXE>
<FIXS> if ((other.getKey()) == (key)) { if (other.getValue().equals(value)) { return 0; } return -1; <FIXE>
<FIXS> return _mem = pojo.asBytes(); <FIXE>
<FIXS> public static boolean isHexadecimal(char c) { return (((c >= '0') && (c <= '9')) || ((c >= 'A') && (c <= 'F'))) || ((c >= 'a') && (c <= 'f')); <FIXE>
<FIXS> if (n == 0) <FIXE> <FIXS> else setText(inIntTermsOfAny((n / (currentValue))), ev); <FIXE>
<FIXS> if (mFirstTimeInitialized) { mOrientationListener.disable(); } <FIXE> <FIXS> <FIXE>
<FIXS> textView.setText((((getString(R.string.display_location_text)) + ": ") + location)); <FIXE>
<FIXS> mAdapterRecyclerView.notifyDataSetChanged(); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> if (isConnected) { <FIXE>
<FIXS> thread = new java.lang.Thread(interpreter); <FIXE>
<FIXS> finish(); <FIXE>
<FIXS> if (mReceivers.contains(receiver)) { try { receiver.onEvent(this, event); } catch (java.lang.Exception e) { mReceivers.remove(receiver); if ((mExceptionBus) != null) { mExceptionBus.broadcast(e); } <FIXE>
<FIXS> synchronized(allTheThings) { return findClosestTo_Amongst(thing, allTheThings, labelRegExp); } <FIXE>
<FIXS> } catch (java.lang.NullPointerException e) { e.printStackTrace(); com.limpoxe.fairy.util.LogUtil.e("插件Application对象尚未初始化会触发NPE，如果是异步初始化插件，应等待异步初始化完成再进入插件"); <FIXE> <FIXS> <FIXE>
<FIXS> gravity.tryMoveFromPosition(position, false); <FIXE>
<FIXS> private void runIntent() { <FIXE>
<FIXS> while (true) { try { java.lang.String line = in.readLine(); map = new caffeine.world.Map(line); gui.getContentPane().setCurrentMap(map); } catch (java.io.IOException e) { java.lang.System.out.println("Read failed"); java.lang.System.exit(1); } gui.repaint(); } <FIXE>
<FIXS> report(); <FIXE>
<FIXS> if (adjust > 0) { <FIXE> <FIXS> }else if (adjust < 0) { indentLevel -= getPrefs().getIndentationSize(); } <FIXE>
<FIXS> <FIXE> <FIXS> java.util.List<twitter.entity.Privilege> userPrivileges = java.util.Arrays.asList(viewPagesPrivilege); <FIXE>
<FIXS> com.example.administrator.alarm.AlarmStorage.saveState(this, mToggleBtn.isChecked()); <FIXE>
<FIXS> model = model.selectRelation(); <FIXE>
<FIXS> com.lody.virtual.client.hook.secondary.HackServiceConnection hackConn = null; <FIXE>
<FIXS> java.lang.System.out.println(currentExtension); if (currentExtension.equals("txt")) { <FIXE> <FIXS> }else if (currentExtension.equals("cpp")) { this.sourceTypeLabel.setText("CPP Mode"); } <FIXE> <FIXS> <FIXE>
<FIXS> org.junit.Assert.assertEquals(java.math.BigInteger.valueOf(java.lang.Long.MIN_VALUE).subtract(java.math.BigInteger.valueOf(java.lang.Long.MAX_VALUE)), result); <FIXE>
<FIXS> java.lang.String bID = "0"; <FIXE>
<FIXS> if (fileList != null) { for (java.io.File file : fileList) { searchListener.onInterestingFileFound(file); addChecked(file); } <FIXE> <FIXS> if (dirs != null) { for (java.io.File dir : dirs) { roamDirectory(dir); } <FIXE>
<FIXS> notesAdmin.updateNote(tbNoteTitel.getText(), tbNoteSubTitel.getText(), taUpdateNoteText.getText(), timestampe, currentUser.getId(), "keine quelle", currentNotebook.getId(), currentNote, new com.google.gwt.user.client.rpc.AsyncCallback<java.lang.Void>() { <FIXE>
<FIXS> <FIXE>
<FIXS> org.mockito.Mockito.when(this.bankApi.getUsers(org.mockito.Matchers.any(com.cmartin.learn.mybank.api.UserFilter.class))).thenReturn(com.cmartin.learn.mybank.test.TestUtils.createUsers(2)); <FIXE> <FIXS> <FIXE>
<FIXS> if ((peek.character) == '#') { source.getNextCharacter(); } <FIXE>
<FIXS> <FIXE>
<FIXS> dest.writeString(this.label); <FIXE>
<FIXS> <FIXE>
<FIXS> public boolean borrowBook(Library lib, java.lang.String title) { <FIXE> <FIXS> return true; <FIXE> <FIXS> return false; <FIXE>
<FIXS> orderJson.put("customerId", userServiceApi.USER.get(utoken).getId()); <FIXE>
<FIXS> if (avg == 0.0) { return 0.0; } <FIXE>
<FIXS> compiler.report(com.google.javascript.jscomp.JSError.make(n, Es6ToEs3Converter.CANNOT_CONVERT, "Undecomposable expression")); <FIXE>
<FIXS> com.badlogic.poker.core.logic.Card[] cardsOnDesk = game.getTable().getCardsOnDesk(); <FIXE>
<FIXS> java.util.Iterator<?> vmIter = this.getMatchers().iterator(); <FIXE>
<FIXS> res += "Arrivee : " + (hArrivee); <FIXE>
<FIXS> string = org.wikipedia.util.StringUtil.capitalizeFirstChar(string.toLowerCase()); <FIXE>
<FIXS> return new com.raizlabs.android.dbflow.sql.language.Select().from(org.eyeseetea.malariacare.data.database.model.Tab.class).where(Tab_Table.id_program.eq(org.eyeseetea.malariacare.data.database.utils.Session.getSurveyByModule(module).getProgram().getId_program())).orderBy(Tab_Table.order_pos, true).queryList(); <FIXE>
<FIXS> if (playlistName.equals(cs446.mezzo.music.playlists.PlaylistManager.FAVOURITES)) { return mFavourites; <FIXE> <FIXS> if (mUserPlaylists.containsKey(playlistName)) { return mUserPlaylists.get(playlistName); <FIXE>
<FIXS> uri = ((getOutputUriReplace()) != null) ? applyOutputUriReplace(uri, getOutputUriReplace()) : uri; <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> new android.app.DatePickerDialog(context, dateSetListener, cal.get(java.util.Calendar.YEAR), ((cal.get(java.util.Calendar.MONTH)) + 1), cal.get(java.util.Calendar.DAY_OF_MONTH)).show(); <FIXE>
<FIXS> <FIXE>
<FIXS> if (((user.getId()) != null) && ((user.getId()) != 0)) { <FIXE>
<FIXS> squadSelectButton = mainButton.addSelectButton(this); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> long mNow = new java.util.Date().getTime(); <FIXE> <FIXS> return (result.getTime()) > mNow ? new java.util.Date(mNow) : result; <FIXE> <FIXS> return tryAllFormat ? parseUpdateDate(dateStr, false) : null; <FIXE>
<FIXS> return (type.equals(replacementType)) || (com.jetbrains.ther.typing.TheRTypeProvider.isSubtype(replacementType, type)); <FIXE>
<FIXS> public java.lang.String list(org.springframework.data.domain.Pageable pageable, org.springframework.ui.Model uiModel) { <FIXE>
<FIXS> channel.removeChannelConnection(worldIn, this); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> dbHelper.newRoute(newHistory, com.example.run.MapsActivity.mRouteNamePrefix); }else { <FIXE> <FIXS> <FIXE>
<FIXS> java.lang.Thread person = new java.lang.Thread(new com.ru.usty.elevator.Person(sourceFloor, destinationFloor, this)); <FIXE>
<FIXS> finished = true; <FIXE>
<FIXS> <FIXE>
<FIXS> if ((projectNames == null) || ((projectNames.size()) == 0)) { <FIXE>
<FIXS> if ((maps.size()) == 0) return null; <FIXE>
<FIXS> if ((org.linphone.assistant.AssistantActivity.instance()) == null) { apply.setEnabled(true); return ; } <FIXE>
<FIXS> @org.androidannotations.annotations.Click(value = R.id.fragment_bt_scan_qr) protected void scannerQrCode() { com.google.zxing.integration.android.IntentIntegrator integrator = new com.google.zxing.integration.android.IntentIntegrator(getActivity()); <FIXE>
<FIXS> return ((coordX >= (offsetX)) && (coordX < ((offsetX) + (getWidth())))) && ((coordY >= (offsetY)) && (coordY < ((offsetY) + (getHeight())))); <FIXE>
<FIXS> return storage.objects().delete(blob.getBucket(), blob.getName()).setIfMetagenerationMatch(Option.IF_METAGENERATION_MATCH.getLong(options)).setIfMetagenerationNotMatch(Option.IF_METAGENERATION_NOT_MATCH.getLong(options)).setIfGenerationMatch(Option.IF_GENERATION_MATCH.getLong(options)).setIfGenerationNotMatch(Option.IF_GENERATION_NOT_MATCH.getLong(options)); <FIXE>
<FIXS> if ((mFooterView) != null) { if (hasMore) { mFooterView.setVisibility(com.being.base.ui.widget.ptr.loadmore.VISIBLE); }else { mFooterView.setVisibility(com.being.base.ui.widget.ptr.loadmore.GONE); } <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> public void displayTestCollection(final com.google.gwt.user.client.ui.Panel testsPanel) { <FIXE>
<FIXS> menu.displayGoalGuide(); menu.setGoalFloorText(m.getGoalPosition().z); <FIXE> <FIXS> <FIXE>
<FIXS> setCurrentTileIndex(1); <FIXE> <FIXS> setCurrentTileIndex(0); setPause(false); <FIXE>
<FIXS> responseHandler.onSuccess(reqId, header, sequence, result, type, taxonRank); <FIXE>
<FIXS> finish(); }else { <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> connect(); <FIXE>
<FIXS> this.pipe.buildPipe(elevationEndPoint, computeDiameter(pipeSlope), it.blogspot.geoframe.SewerPipeDimensioning.SewerPipeDimensioning.fillCoefficient, computeVelocity()); <FIXE> <FIXS> this.pipe.buildPipe(computeElevationEndPoint(minSlope), diameter, it.blogspot.geoframe.SewerPipeDimensioning.SewerPipeDimensioning.fillCoefficient, computeVelocity()); <FIXE> <FIXS> return this.pipe; <FIXE>
<FIXS> if (!(this.body.isEmpty())) { html.append("<tbody>"); for (com.github.dandelion.datatables.core.html.HtmlRow row : this.body) { html.append(row.toHtml()); } html.append("</tbody>"); <FIXE> <FIXS> <FIXE>
<FIXS> } catch (org.neo4j.commandline.admin.IncorrectUsage | org.neo4j.commandline.admin.CommandFailed e) { <FIXE> <FIXS> throw new org.neo4j.commandline.admin.CommandFailed(throwable.getMessage(), new java.lang.RuntimeException(throwable)); <FIXE>
<FIXS> java.lang.System.out.println("Onclick choose call"); <FIXE>
<FIXS> int index = 0; <FIXE> <FIXS> stmt.setObject((++index), o); <FIXE>
<FIXS> int end = start + itemsPerPage; <FIXE>
<FIXS> pauseVideo(); <FIXE>
<FIXS> append(builder, story, false); <FIXE>
<FIXS> cB.getSelectionModel().selectedItemProperty().addListener(( v, oldValue, newValue) -> { cbl.listener(cB, tA, bP); }); <FIXE>
<FIXS> path = mobi.hsz.idea.gitignore.util.Utils.escapeChar(path, '['); path = mobi.hsz.idea.gitignore.util.Utils.escapeChar(path, ']'); <FIXE>
<FIXS> play.data.Form<models.TrackRegistration> form = play.data.Form.form(models.TrackRegistration.class); <FIXE>
<FIXS> return (method.getName().equals(("get" + (org.redisson.liveobject.core.AccessorInterceptor.getFieldNameSuffix(fieldName))))) || (method.getName().equals(("is" + (org.redisson.liveobject.core.AccessorInterceptor.getFieldNameSuffix(fieldName))))); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> return (args.length) == 1 ? matchTo(args, net.canarymod.Canary.pluginManager().getPluginNames().toArray(new java.lang.String[0])) : null; <FIXE>
<FIXS> info.schnatterer.nusic.android.activities.MainActivity.currentTab = ((info.schnatterer.nusic.android.activities.MainActivity.TabDefinition) (intent.getExtras().get(info.schnatterer.nusic.android.activities.MainActivity.EXTRA_ACTIVE_TAB))); <FIXE>
<FIXS> if (intent != null) { android.content.Intent target = intent.getParcelableExtra("notificationTarget"); if (target != null) showNotification(target); } <FIXE>
<FIXS> <FIXE>
<FIXS> java.lang.System.out.println(((com.excilys.formation.computerdb.ui.RestCLI.BASE_URL) + url)); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> return new com.alliander.osgp.dto.valueobjects.smartmetering.AmrProfileStatusCodeDto(flags); <FIXE>
<FIXS> list.add(new teammates.common.datatransfer.attributes.StudentProfileAttributes(student)); <FIXE>
<FIXS> client = new fr.pchab.AndroidRTC.WebRtcClient(this, mSocketAddress, params); <FIXE>
<FIXS> VCDLoaderTest.ExpectTraceBuilder.Event event = fEventList.get(((fCurrentEvent)++)); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> if (end) return false; <FIXE>
<FIXS> assert ((oldState.getVariables().size()) == 0) || ((mReturnState.size()) != 0); <FIXE>
<FIXS> if ((mDockBatteryLevel) != null) { mDockBatteryLevel.setBatteryStateRegistar(dockBatteryController); } <FIXE>
<FIXS> <FIXE> <FIXS> mChangeTrack = false; <FIXE> <FIXS> mChangeTrack = true; <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> if ((makeupCount) < (saveBitmap.size())) { <FIXE>
<FIXS> else startLeftPowerup(GameLogic.leftPlayerPowerup.pop()); <FIXE> <FIXS> <FIXE> <FIXS> else startRightPowerup(GameLogic.rightPlayerPowerup.pop()); <FIXE> <FIXS> <FIXE>
<FIXS> es.ugr.swad.swadroid.preferences.Preferences.initializeSelectedCourse(); <FIXE>
<FIXS> <FIXE>
<FIXS> scheduler.schedule(com.sonie.web.util.RunnableUtil.setGoodNight(com.sonie.web.util.CronJobUtil.LOG, hue), new org.springframework.scheduling.support.CronTrigger(com.sonie.web.util.DateUtil.getCronDate(hue.getScene().getGoodNight().getTime()))); <FIXE>
<FIXS> chatBuilder.setId(null); <FIXE>
<FIXS> java.lang.String passwordStr = reader.readLine('*'); <FIXE> <FIXS> passwordStr = null; <FIXE>
<FIXS> <FIXE>
<FIXS> if (gameOver) { finish(); } <FIXE>
<FIXS> camera.update(); <FIXE> <FIXS> <FIXE>
<FIXS> attrPersistence = "row"; enableGrouping = "true"; <FIXE>
<FIXS> new dto.Art.ArtBuilder("Mona lisa", constants.ArtType.PAINTING, "Leonard Di Vinci", null).build(); <FIXE>
<FIXS> request = makeRequest(3, nc.sumy.edu.webcontainer.sequrity.ServerSecurityTest.IP_VAR1); <FIXE> <FIXS> request = makeRequest(3, "93.49.37.56"); <FIXE>
<FIXS> if (item == null) { throw new java.lang.NullPointerException(); } <FIXE>
<FIXS> int score = minimax.minimax(board, true, 0); <FIXE>
<FIXS> <FIXE> <FIXS> return algoParent.getCommandDescription(); <FIXE> <FIXS> return kernel.printVariableName(label); <FIXE>
<FIXS> this.hasDecimal = (this.hasDecimal) || (digit == '.'); <FIXE>
<FIXS> do { <FIXE> <FIXS> } while ((!(board.hasWinner())) && (!(board.isFull())) ); <FIXE>
<FIXS> if ((position == 0) && ((mAdapter.getHeaderId(position)) != (android.support.v7.widget.RecyclerView.NO_ID))) { <FIXE>
<FIXS> <FIXE>
<FIXS> org.hamcrest.MatcherAssert.assertThat(expressData.getCctvUrl(), org.hamcrest.CoreMatchers.notNullValue()); org.hamcrest.MatcherAssert.assertThat(expressData.getMsg(), org.hamcrest.CoreMatchers.notNullValue()); <FIXE>
<FIXS> final com.fasterxml.jackson.databind.ObjectMapper objectMapper = new com.fasterxml.jackson.databind.ObjectMapper().setPropertyNamingStrategy(com.fasterxml.jackson.databind.PropertyNamingStrategy.CAMEL_CASE_TO_LOWER_CASE_WITH_UNDERSCORES); <FIXE>
<FIXS> edu.umass.cs.gnsclient.client.integrationtests.ServerIntegrationTest.failWithStackTrace("Problem updating field: ", e); <FIXE> <FIXS> edu.umass.cs.gnsclient.client.integrationtests.ServerIntegrationTest.failWithStackTrace("Exception when we were not expecting it ACLCreateDeeperField: ", e); <FIXE>
<FIXS> if (((weakest != null) && ((weakest.health) <= (TREE_WATERING_THRESHOLD))) && (rc.canWater(weakest.location))) { <FIXE>
<FIXS> return (((this.itemID) == itemID) && ((this.meta) == meta)) && (((this.nbt) == nbt) || (((this.nbt) != null) && (this.nbt.equals(nbt)))); <FIXE>
<FIXS> <FIXE> <FIXS> this.swipeRefreshLayout.setRefreshing(false); <FIXE>
<FIXS> activity.activityCloseLoadingBar(); <FIXE> <FIXS> <FIXE>
<FIXS> model.CleanerStatus cleanerStatus = getCleanerStatus(deviceID); <FIXE>
<FIXS> } catch (final java.lang.Throwable ignored) { <FIXE> <FIXS> return org.obicere.cc.util.Reflection.DEFINER.attemptDefine(directory, name); <FIXE>
<FIXS> playerIn.triggerAchievement(ModAchievements.achievementWandOfbuilding); if (worldIn.isRemote) { MineColonies.proxy.openBuildToolWindow(pos.offset(side)); return true; <FIXE> <FIXS> <FIXE>
<FIXS> private boolean isOwnProfile(javax.faces.context.FacesContext fctx) { if (fctx.getViewRoot().getViewId().endsWith("profile.xhtml")) { <FIXE> <FIXS> if ((sessionUser.getUserID()) == userID) { return true; <FIXE> <FIXS> return false; <FIXE>
<FIXS> bytes[0] = ((byte) (value >>> 24)); bytes[1] = ((byte) (value >>> 16)); bytes[2] = ((byte) (value >>> 8)); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> }else { if ((touchEvents.size()) > 0) { stargGame(); bluetoothModule.sendMessage(java.lang.String.valueOf(com.wanlin.androidgame.pikachuvolleyball.GameScreen.START_THAT_FUKING_GAMEEEE)); } <FIXE>
<FIXS> @juja.microservices.teams.controller.PutMapping(value = "/users/{uuid}", produces = "application/json") <FIXE> <FIXS> return org.springframework.http.ResponseEntity.ok(team); <FIXE>
<FIXS> if ((viewName != null) && (!(viewName.isEmpty()))) { <FIXE>
<FIXS> this.put(entry); <FIXE>
<FIXS> saveButton.setVisibility(View.GONE); deleteButton.setVisibility(View.GONE); <FIXE>
<FIXS> return (((x >= (view.getX())) && (x < ((view.getX()) + (view.getWidth())))) && (y >= (view.getY()))) && (y < ((view.getY()) + (view.getHeight()))); <FIXE>
<FIXS> return limit(order(selectColumns(((model.getJoinModels().size()) > 1 ? optimise(model, factory).compileJoins(model, factory) : compileSingleOrSubQuery(model, factory)), model), model), model); <FIXE>
<FIXS> nil.key = value; while ((x.key) != value) { <FIXE> <FIXS> nil.key = null; if (x == (nil)) { return null; } <FIXE>
<FIXS> oldValue = value; <FIXE>
<FIXS> if ((((x < 0) || (x >= (this.width))) || (y < 0)) || (y >= (this.height))) { <FIXE>
<FIXS> @java.lang.Override <FIXE> <FIXS> if (pathname.getName().contains(EInternalTemplate.HEADER_ADDITIONAL.toString())) { if (pathname.getName().contains(((language.getExtension()) + (org.talend.designer.codegen.config.TemplateUtil.TEMPLATE_EXT)))) { <FIXE> <FIXS> } } <FIXE>
<FIXS> public java.lang.Void doNotify() { <FIXE> <FIXS> return null; <FIXE>
<FIXS> intent.putExtra(TestWaresList.EXTRA_STORE_ID, ((int) (id))); <FIXE>
<FIXS> org.junit.Assert.assertArrayEquals(new java.lang.String[]{ org.pentaho.di.trans.steps.selectvalues.SelectValuesMetaTest.FIRST_FIELD , null }, selectValuesMeta.getSelectRename()); <FIXE>
<FIXS> get().getNode("world", "inventory", "separate").setValue(false).setComment("Toggles separate inventories between worlds."); <FIXE>
<FIXS> if (2 == (parts.length)) { parseHeaders(parts[0]); mContent = parts[1].substring(0, parts[1].lastIndexOf(Constants.CRLF)); } <FIXE>
<FIXS> <FIXE>
<FIXS> if ((pullView) != null) { <FIXE>
<FIXS> final int pinStringLength = data.toString().length(); <FIXE>
<FIXS> public boolean leaveGroup(long userId, long courseId, long courseSkuId) { <FIXE> <FIXS> if (doLeaveGroup(userId, group.getGroupId())) { <FIXE>
<FIXS> protected java.lang.String sendRequest(java.net.URL resource) throws java.lang.Exception { <FIXE>
<FIXS> org.terracotta.connection.entity.EntityRef<org.ehcache.clustered.client.internal.EhcacheClientEntity, org.ehcache.clustered.common.internal.ClusteredTierManagerConfiguration> ref = getEntityRef(client); <FIXE>
<FIXS> }else if (state.equals(Recording.STATE_DELETED)) { changeState(publishedDir, recordingId, state); changeState(unpublishedDir, recordingId, state); changeState(deletedDir, recordingId, state); } <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> return commandExecutor.writeAsync(getName(), codec, RedisCommands.SREM_SINGLE, args.toArray()); <FIXE>
<FIXS> mBrightness[pRenderLayerIndex] = ((float) (clearvolume.renderer.ClearVolumeRendererBase.clamp(pBrightness, 0, ((getBytesPerVoxel()) == 1 ? 16 : 256)))); <FIXE>
<FIXS> phone.speak(ConnectionTestMailboxMenu.MAILBOX_MENU_TEXT); <FIXE> <FIXS> org.mockito.Mockito.verify(phone).speak(ConnectionTestMailboxMenu.MAILBOX_MENU_TEXT); <FIXE>
<FIXS> ret.add(((org.Point) (cb.getValue()))); <FIXE>
<FIXS> org.apache.commons.io.FileUtils.write(new java.io.File(outputFolder, de.unidue.ltl.flextag.core.reports.crf.TtAbstractKnownUnknownWordAccuracyReport.UNKNOWN_WORDS_FINE), java.lang.String.format("%.1f", ((outvocabAccuracy) * 100))); org.apache.commons.io.FileUtils.write(new java.io.File(outputFolder, de.unidue.ltl.flextag.core.reports.crf.TtAbstractKnownUnknownWordAccuracyReport.KNOWN_WORDS_FINE), java.lang.String.format("%.1f", ((invocabAccuracy) * 100))); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> visual.setGeometry(feedbackGeometry); <FIXE>
<FIXS> if (((showProgressUntilTime) < (com.badlogic.gdx.utils.TimeUtils.millis())) && ((showProgressUntilTime) != 0)) { <FIXE> <FIXS> showProgressUntilTime = 0; <FIXE>
<FIXS> protected void onPostExecute(java.lang.Boolean result) { <FIXE> <FIXS> if (result) { android.content.Intent intent = new android.content.Intent(android.content.Intent.ACTION_SEND); intent.setType("text/plain"); intent.putExtra(Intent.EXTRA_STREAM, android.net.Uri.fromFile(targetFile)); startActivity(intent); } <FIXE>
<FIXS> toast(getString(R.string.deny_open_bluetooth)); <FIXE>
<FIXS> plugin.getLogger().log(java.util.logging.Level.SEVERE, ("Could not save config to " + (configFile)), ex); <FIXE>
<FIXS> while ((current.next) != null) { <FIXE>
<FIXS> return 0L; <FIXE>
<FIXS> if (s == null) { return null; } <FIXE>
<FIXS> channelSftp.cd("/"); <FIXE>
<FIXS> throw new com.containersol.minimesos.MinimesosException(("Could not retrieve state from Mesos Agent: " + (getName())), e); <FIXE>
<FIXS> com.github.nisrulz.sensey.ProximityDetector detector = getDetector(fakeListener, com.github.nisrulz.sensey.ProximityDetector.class); <FIXE>
<FIXS> <FIXE> <FIXS> return checkFSM(this.fsmName, seq); <FIXE>
<FIXS> assert (index > (-1)) && (index < (array.length)); <FIXE>
<FIXS> return beginDragging(v); <FIXE>
<FIXS> java.lang.StringBuilder buffer = new java.lang.StringBuilder(); <FIXE>
<FIXS> <FIXE>
<FIXS> java.lang.System.out.println((((((((((((element.date) + " ") + (element.objectNummer)) + " ") + (element.naam)) + " ") + (element.adres)) + " ") + (element.kamers)) + " ") + (element.prijs))); <FIXE>
<FIXS> java.nio.file.Files.write(this.f.toPath(), s.getBytes(), java.nio.file.StandardOpenOption.APPEND); <FIXE>
<FIXS> } catch (java.lang.Exception e) { java.lang.String msg = "Error while connecting to the ldap server."; org.apache.jackrabbit.oak.security.authentication.ldap.impl.LdapIdentityProvider.log.error(msg, e); throw new org.apache.jackrabbit.oak.spi.security.authentication.external.ExternalIdentityException(msg, e); <FIXE>
<FIXS> <FIXE>
<FIXS> return new org.deidentifier.arx.metric.v2.MetricMDNUEntropyPotentiallyPrecomputed(threshold, 0.5, function); <FIXE> <FIXS> return new org.deidentifier.arx.metric.v2.MetricMDNUNMEntropyPotentiallyPrecomputed(threshold, 0.5, function); <FIXE>
<FIXS> if ((currentUsername) != null) { xapiAgent = com.ustadmobile.nanolrs.core.endpoints.XapiAgentEndpoint.createOrUpdate(context, null, currentUsername, com.ustadmobile.core.util.UMTinCanUtil.getXapiServer(context)); } <FIXE>
<FIXS> java.lang.StringBuffer vocab = new java.lang.StringBuffer("Index Dictionary: \n"); <FIXE> <FIXS> vocab.append((s + "\n")); <FIXE> <FIXS> vocab.append(("Index Term Count: " + count)); return vocab.toString(); <FIXE>
<FIXS> assertNotNull(externalResult.getObjectId()); <FIXE>
<FIXS> if (((user.getEmail()) == null) || (!(user.getEmail().equals(email)))) { <FIXE>
<FIXS> <FIXE>
<FIXS> updateCrcs(((bitBufferLen) / 8)); <FIXE>
<FIXS> if ((mAddrLayout.getVisibility()) != (android.view.View.VISIBLE)) { com.extenprise.mapp.medico.util.Utility.collapseExpand(mAddrLayout); com.extenprise.mapp.medico.util.Utility.collapseExpand(mContLay); } <FIXE> <FIXS> <FIXE>
<FIXS> if ((20 * (java.lang.Math.log10(((getAmplitudeEMA()) / ampl)))) > 0) values.add((20 * (java.lang.Math.log10(((getAmplitudeEMA()) / ampl))))); <FIXE>
<FIXS> private boolean setupWorldEdit() { <FIXE> <FIXS> return true; <FIXE> <FIXS> return false; <FIXE>
<FIXS> it.remove(); <FIXE>
<FIXS> java.lang.System.out.print("\nPlease select the note you want to vote for (0-7):"); <FIXE>
<FIXS> return java.util.Optional.empty(); <FIXE> <FIXS> return java.util.Optional.of(registryId); <FIXE>
<FIXS> synchronized(bw) { bw.write((json + "\n")); } <FIXE>
<FIXS> <FIXE>
<FIXS> }else { switch (map1[position]) { case "d" : return false; case "e" : return false; case "f" : return false; case "g" : return false; case "h" : return false; case "i" : return false; case "3" : return false; case "5" : return false; default : return true; } <FIXE>
<FIXS> for (int i = (this.objects.size()) - 1; i >= 0; i--) { <FIXE>
<FIXS> if ((org.eclipse.titan.regressiontests.MainTestSuite.LICENSE_FILE) != null) { java.io.File licenseFile = new java.io.File(org.eclipse.titan.regressiontests.MainTestSuite.LICENSE_FILE); if ((licenseFile != null) && (licenseFile.exists())) { return true; } <FIXE> <FIXS> java.io.File licenseFile = new java.io.File(licenseFromEnv); if ((licenseFile != null) && (licenseFile.exists())) { <FIXE>
<FIXS> @java.lang.SuppressWarnings(value = "unchecked") <FIXE> <FIXS> if ((null != (canvasHandler)) && (null != target)) { <FIXE> <FIXS> return false; <FIXE>
<FIXS> fireIntervalAdded(this, oldLength, lastIndex); <FIXE>
<FIXS> case 0 : setIngedience(val); break; <FIXE>
<FIXS> if ((j != null) && (j.isDoorway())) { <FIXE>
<FIXS> if ((numSystems) <= 0) { numSystems = 0; _FormattedTF_NumSystems.setValue(new java.lang.Integer("0")); <FIXE>
<FIXS> <FIXE>
<FIXS> int index = java.lang.Math.abs(((randomNumber) % (conflicts.size()))); <FIXE>
<FIXS> java.lang.System.out.println(i); <FIXE>
<FIXS> java.lang.String query = org.eclipse.rdf4j.model.util.Models.objectString(statements.filter(identifier, ELMO.QUERY, null)).orElseThrow(() -> new org.dotwebstack.framework.config.ConfigurationException(java.lang.String.format("No <%s> statement has been found for a sparql information product <%s>.", ELMO.QUERY, backend.getIdentifier()))); <FIXE>
<FIXS> <FIXE>
<FIXS> if ((nextx) < 0) (intx)--; if ((nexty) < 0) (inty)--; <FIXE>
<FIXS> library = com.door43.translationstudio.AppContext.getLibrary(); <FIXE>
<FIXS> try { return indexes.containsKey(indexId); } finally { <FIXE> <FIXS> }else { return indexes.containsKey(indexId); <FIXE>
<FIXS> setCheckedIn(false); <FIXE>
<FIXS> <FIXE>
<FIXS> java.lang.String projectId = tokens[0]; <FIXE>
<FIXS> org.junit.Assert.assertEquals(123456789, getPart(123456789, 0, 9)); org.junit.Assert.assertEquals(23456789, getPart(123456789, 1, 9)); org.junit.Assert.assertEquals(12345678, getPart(123456789, 0, 8)); org.junit.Assert.assertEquals(345, getPart(123456789, 2, 5)); <FIXE>
<FIXS> if ((t1.getDueDate()) == null) { return (t2.getDueDate()) == null ? 0 : -1; } if ((t2.getDueDate()) == null) { return 1; } return t2.getDueDate().compareTo(t1.getDueDate()); <FIXE>
<FIXS> tail = head; <FIXE>
<FIXS> if (!(word.isEmpty())) { nb.append(java.lang.Character.toUpperCase(word.charAt(0))).append(word.substring(1)); } <FIXE>
<FIXS> <FIXE> <FIXS> java.util.List<prada.lab.android.pingo.model.Tag> tags = mTagSub.getValue(); tags.add(tag); mTagSub.onNext(tags); <FIXE>
<FIXS> int attrDataType = sysObject.getAttrDataType(attr); <FIXE>
<FIXS> if (accountsByType[i].name.equals(com.philosophicalhacker.philhackernews.PhilHackerNewsApplication.ACCOUNT_NAME)) { <FIXE>
<FIXS> if (nodeList.get(i).getID().equals(id)) { <FIXE>
<FIXS> if (!(this.streams.isEmpty())) { if (this.streams.peek().hasEntries()) { this.streams.peek().write(entry); }else { <FIXE> <FIXS> <FIXE> <FIXS> }else { throw new me.noize.chemistry.io.ChemistryIOException("Stream could not be advanced"); } <FIXE>
<FIXS> storage = temp; <FIXE>
<FIXS> difference = (-(computerBuilders)) + 1; computerBuilders = 1; <FIXE>
<FIXS> return games.strategy.triplea.ai.proAI.util.ProBattleUtils.callBattleCalculator(player, t, attackingUnits, defendingUnits, bombardingUnits); <FIXE>
<FIXS> if (e == null) { <FIXE>
<FIXS> @com.chronicle.controller.RequestMapping(value = { "/login/{id}/{password}" }, method = RequestMethod.GET, produces = { org.springframework.http.MediaType.APPLICATION_JSON_VALUE }) <FIXE> <FIXS> java.lang.Long id, @com.chronicle.controller.PathVariable java.lang.String password) { <FIXE> <FIXS> java.lang.System.out.println(user.getPassword()); java.lang.System.out.println(password); if (user.getPassword().equals(password)) { <FIXE>
<FIXS> }else { startMotor(); m_mainMotor.set(y); } <FIXE>
<FIXS> <FIXE>
<FIXS> if ((pos < 0) || (pos >= (mAdapter.getItemCount()))) return ; if (selected) { mSelectedItems.put(pos, selected); }else { mSelectedItems.delete(pos); <FIXE> <FIXS> view.setSelected(selected); <FIXE>
<FIXS> if ((com.mycompany.behear.MainActivity.mMap) == null) { com.mycompany.behear.MainActivity.mMap = ((com.google.android.gms.maps.SupportMapFragment) (getSupportFragmentManager().findFragmentById(R.id.map))).getMap(); <FIXE> <FIXS> <FIXE>
<FIXS> i++; <FIXE> <FIXS> <FIXE>
<FIXS> public synchronized void analyzeScrimmageMatch(model.BSScrimmageSet scrim) { <FIXE>
<FIXS> unpinCurrentPage(); <FIXE> <FIXS> <FIXE>
<FIXS> org.mockito.Mockito.verify(service, org.mockito.Mockito.times(1)).getWinnerOfDay(org.mockito.Matchers.any(java.util.Date.class)); <FIXE>
<FIXS> org.backmeup.model.BackMeUpUser u = (!(users.isEmpty())) ? users.get(0) : null; <FIXE>
<FIXS> frequency[i] = ((java.lang.Integer.parseInt(values[i].trim())) / (1000 * 1000)) + " Mhz"; <FIXE>
<FIXS> if (inputOperator.equals("+")) <FIXE> <FIXS> if (inputOperator.equals("-")) <FIXE> <FIXS> if (inputOperator.equals("*")) <FIXE>
<FIXS> java.math.BigDecimal i = new java.math.BigDecimal(getValue(x).toString()); java.math.BigDecimal j = new java.math.BigDecimal(getValue(y).toString()); <FIXE>
<FIXS> mItems.remove(fromPosition); mItems.add(toPosition, item); <FIXE>
<FIXS> os.write(stringBytes, 0, stringBytes.length); <FIXE>
<FIXS> message += resp; <FIXE>
<FIXS> if (file.toLowerCase().equals(fileName)) <FIXE>
<FIXS> out.writeObject(this.getData()); <FIXE>
<FIXS> assertThat(provider.getCurieInformation(new org.springframework.hateoas.Links()), hasSize(2)); assertThat(provider.getNamespacedRelFor("some"), is("some")); <FIXE>
<FIXS> return token; <FIXE>
<FIXS> return null; <FIXE>
<FIXS> tmp.add(java.lang.Integer.parseInt(s)); <FIXE>
<FIXS> if (l >= r) { return ; <FIXE> <FIXS> int m = (l + r) / 2; mergeSort(a, p, c, l, m); mergeSort(a, p, c, (m + 1), r); merge(a, p, c, l, m, r); <FIXE>
<FIXS> if (updateAccount()) { android.widget.Toast.makeText(this, "Saved", Toast.LENGTH_SHORT).show(); android.content.Intent i = new android.content.Intent(getApplicationContext(), com.polito.mad17.madmax.activities.MainActivity.class); startActivity(i); finish(); } <FIXE>
<FIXS> org.junit.Assert.assertEquals(gson.toJson(15), ru.otus.homework_08.JSON.toJSON(15)); org.junit.Assert.assertEquals(gson.toJson('c'), ru.otus.homework_08.JSON.toJSON('c')); org.junit.Assert.assertEquals(gson.toJson(true), ru.otus.homework_08.JSON.toJSON(true)); <FIXE>
<FIXS> org.junit.Assert.assertEquals(Constants.Runtime.VALID_DEMOGRAPHIC.toString(), id.getExtension()); org.junit.Assert.assertFalse(org.oscarehr.e2e.util.EverestUtils.isNullorEmptyorWhitespace(id.getRoot())); <FIXE>
<FIXS> int takeFlags = data.getFlags(); takeFlags &= (android.content.Intent.FLAG_GRANT_READ_URI_PERMISSION) | (android.content.Intent.FLAG_GRANT_WRITE_URI_PERMISSION); <FIXE>
<FIXS> if (f == null) return ; <FIXE> <FIXS> f.delete(); <FIXE>
<FIXS> VP presenter = getPresenter(v, false); <FIXE> <FIXS> <FIXE>
<FIXS> team.get(i).getAttributes().setUsed((i == (frontIndex))); <FIXE>
<FIXS> if ((slots.isEmpty()) && (buildMap.locationInBounds(loc))) { <FIXE>
<FIXS> if (!(isValidItem())) { <FIXE>
<FIXS> @org.springframework.web.bind.annotation.RequestMapping(value = "/adduser") public api.ConfirmationMessage addUser(@org.springframework.web.bind.annotation.RequestParam(value = "userTypeId") <FIXE>
<FIXS> sb.append(s).append("\n"); <FIXE>
<FIXS> return totalSize > 0 ? org.roda.wui.common.client.tools.Humanize.readableFileSize(totalSize) : ""; <FIXE>
<FIXS> w094j.ctrl8.database.Storage googleStorage = new w094j.ctrl8.database.GoogleStorage(this.file, this.gson); googleStorage.storeData(); <FIXE> <FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> half2.addUnit(new com.alvarpq.GOTF.coreGame.units.KinfolkBrave(0, 2), half1); <FIXE> <FIXS> java.lang.System.out.println(half2.getUnitAt(0, 2)); <FIXE>
<FIXS> private boolean handleMainBlocks(de.fhg.iais.roberta.syntax.codegen.CppCodeGenerationVisitor astVisitor, boolean mainBlock, de.fhg.iais.roberta.syntax.Phrase<java.lang.Void> phrase) { <FIXE>
<FIXS> org.assertj.core.api.Assertions.assertThat(new org.corpus_tools.pepper.core.ModuleFitnessChecker().checkFitness(module).getFitness(FitnessFeature.HAS_NAME)).isEqualTo(false); <FIXE>
<FIXS> com.fallingdutchman.youtuberedditbot.authentication.reddit.jraw.RedditManager.log.info(java.lang.String.format("posted comment to %s on /r/%s, with id %s", submission.getId(), submission.getSubredditName(), commentId)); <FIXE>
<FIXS> decoded = org.datacleaner.util.SecurityUtils.decodePasswordWithPrefix(org.datacleaner.util.SecurityUtilsTest.PLAIN_TEXT_VALUE); <FIXE>
<FIXS> for (int i = (effects.size()) - 1; i >= 0; i--) { effects.get(i).update(this); <FIXE> <FIXS> for (int i = (effects.size()) - 1; i >= 0; i--) { <FIXE> <FIXS> <FIXE>
<FIXS> if (o instanceof java.lang.Number) { <FIXE>
<FIXS> <FIXE>
<FIXS> if (((auctionItem.getEndDate()) != null) && (new java.util.Date().after(auctionItem.getEndDate()))) <FIXE>
<FIXS> <FIXE>
<FIXS> entity.addChild(child); <FIXE>
<FIXS> public void renderTime(final long milliseconds) { <FIXE>
<FIXS> fitTranslate(); mZoomListener.onZoomEnd(byGesture, 1, centerX, centerY); <FIXE>
<FIXS> public int execute(java.lang.String goal, java.lang.String pathToPom) { <FIXE> <FIXS> int result = cli.doMain(new java.lang.String[]{ "clean" , goal }, pathToPom, java.lang.System.out, java.lang.System.err); return result; <FIXE>
<FIXS> android.widget.Toast.makeText(fragment.getDialog().getContext(), ("Time is " + (dialog.getFormattedTime(java.text.SimpleDateFormat.getTimeInstance()))), Toast.LENGTH_SHORT).show(); <FIXE>
<FIXS> return isChunkStart(previous, null); <FIXE>
<FIXS> result.lineNumber = -1; <FIXE>
<FIXS> <FIXE>
<FIXS> layoutHelp.clip(this, summaryText, widthProperty().subtract(layoutHelp.paddingProperty), heightProperty().subtract(0.0), true); <FIXE>
<FIXS> if ((this.size()) > 1) { for (nez.expr.Expression e : this) { l.add(e); } }else { l.add(this); <FIXE>
<FIXS> if ((rand.nextInt(((5 + (enemy.getAgility())) - (getAgility())))) <= 3) { <FIXE>
<FIXS> <FIXE>
<FIXS> org.bukkit.entity.Player player = ((org.bukkit.entity.Player) (event.getOwner())); <FIXE>
<FIXS> if ((t2 != null) && (!(description_in.isEmpty()))) { <FIXE>
<FIXS> <FIXE> <FIXS> mClient.addListener(new io.github.antijava.marjio.network.ClientReceiver(mApplication)); <FIXE>
<FIXS> return getX2(Y1).getEncoded(false); <FIXE>
<FIXS> public org.gephi.io.importer.spi.FileImporter getFileImporter(org.openide.filesystems.FileObject fileObject) { if (fileObject != null) { fileObject = org.gephi.io.importer.api.ImportUtils.getArchivedFile(fileObject); org.gephi.io.importer.spi.FileImporterBuilder builder = getMatchingImporter(fileObject); if ((fileObject != null) && (builder != null)) { org.gephi.io.importer.spi.FileImporter fi = builder.buildImporter(); return fi; } <FIXE>
<FIXS> <FIXE>
<FIXS> private com.xebialabs.deployit.plugin.api.udm.Deployed<?, ?> getDeployed(java.lang.String version, java.lang.String name) { com.xebialabs.deployit.plugin.api.udm.Deployed<?, ?> puppetModule = deployed(((com.xebialabs.deployit.plugin.api.udm.Deployable) (com.xebialabs.platform.test.TestUtils.newInstance("puppet.ModuleSpec", name))), container, "puppet.Module"); <FIXE>
<FIXS> <FIXE>
<FIXS> if ((z <= (zMin)) || (java.lang.Double.isNaN(zMin))) <FIXE>
<FIXS> if (!(directDeposit)) { if ((balance) < (Checking.MIN_BAL)) { balance -= Checking.FEE; <FIXE> <FIXS> <FIXE> <FIXS> balance = (balance) + (((balance) * (Checking.APY)) / (MONTH_PER_YEAR)); <FIXE>
<FIXS> proxyPort = java.lang.Integer.parseInt(formData.getString("proxyPort")); <FIXE>
<FIXS> while ((m_exp) >= (100 * (this.getLevel()))) { <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> com.kencook.sharpspring.SharpspringRequest request = com.kencook.sharpspring.SharpspringRequestBuilder.request(1, SharpspringMethod.GET_EVENTS).where("createTimestamp").is(timestamp).build(); <FIXE>
<FIXS> final java.io.FileOutputStream fos = new java.io.FileOutputStream(photoFile); <FIXE>
<FIXS> overloadMana.rebase(0); <FIXE>
<FIXS> if ((m_bUseStaticServerInfo) && (com.helger.web.servlet.server.StaticServerInfo.isSet())) { return javax.ws.rs.core.UriBuilder.fromUri((((com.helger.web.servlet.server.StaticServerInfo.getInstance().getFullServerPath()) + "/") + (m_aUriInfo.getPath(false)))); } <FIXE>
<FIXS> <FIXE> <FIXS> org.ansj.elasticsearch.index.config.AnsjElasticConfigurator.setGlobalVar(MyStaticValue.ENV); <FIXE>
<FIXS> <FIXE>
<FIXS> return null; <FIXE>
<FIXS> return transactionManager.getTransactions(account, startDate, endDate, java.util.Arrays.asList(transactionTypes), java.util.Arrays.asList(planFactTypes), limit, offset); <FIXE>
<FIXS> <FIXE> <FIXS> throw new java.io.IOException(((errorString) + zoomRes)); <FIXE>
<FIXS> consume(Terminals.COLON); <FIXE> <FIXS> ret = new parser.ConcreteTree.TypeIdent(ident, new parser.ColonToken(), type); <FIXE>
<FIXS> this.queue.add(list.get(i)); <FIXE>
<FIXS> <FIXE>
<FIXS> long planeSize = loci.formats.FormatTools.getPlaneSize(this); <FIXE>
<FIXS> org.apache.commons.io.IOUtils.copyLarge(is, os); <FIXE>
<FIXS> slot = getSlotFromIndex(slot, index); <FIXE>
<FIXS> mDatabase.execSQL(((((("DELETE FROM " + (DBFeederContract.PersonTable.TABLE_NAME)) + " WHERE ") + (DBFeederContract.PersonTable._ID)) + " = ") + id)); <FIXE>
<FIXS> n += weight * (noise.noise2((curFrequency * x), (curFrequency * y))); <FIXE>
<FIXS> this.finalPrice = ((int) (java.lang.Math.round(((price) * (1 - discount))))); <FIXE>
<FIXS> }else { mListener.onToClick(null); <FIXE>
<FIXS> public static bolts.Task<com.dounets.vchat.net.api.ApiResponse> callInBackgroundDownloadVideo(final com.dounets.vchat.net.api.ApiRequest request, final android.content.Context context, final java.lang.String url) { <FIXE> <FIXS> return com.dounets.vchat.net.api.ApiClient.callDownloadVideo(request, context, url); <FIXE>
<FIXS> android.bluetooth.BluetoothSocket socket; <FIXE>
<FIXS> java.util.List<T> models = new java.util.ArrayList<T>(); <FIXE>
<FIXS> try { if (cursor.moveToNext()) { display = cursor.getString(0); } } finally { cursor.close(); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> public int decr(java.lang.String address, int port) { <FIXE> <FIXS> return 1; <FIXE>
<FIXS> return ((vBFS.distTo(common)) + (wBFS.distTo(common))) - 1; <FIXE>
<FIXS> player.setWakeMode(getApplicationContext(), PowerManager.PARTIAL_WAKE_LOCK); <FIXE> <FIXS> <FIXE>
<FIXS> return de.setsoftware.reviewtool.diffalgorithms.SimpleTextDiffAlgorithmTest.toPositionsInNewFile(new de.setsoftware.reviewtool.diffalgorithms.MyersSourceDiffAlgorithm().determineDiff(de.setsoftware.reviewtool.model.changestructure.ChangestructureFactory.createFileInRevision("", null, null), oldContent.getBytes("UTF-8"), de.setsoftware.reviewtool.model.changestructure.ChangestructureFactory.createFileInRevision("", null, null), newContent.getBytes("UTF-8"), "UTF-8")); <FIXE>
<FIXS> return (receiver.methodAt(((java.lang.String) (arg1.javaValue())))) != null ? ProtoObject.TRUE : ProtoObject.FALSE; <FIXE>
<FIXS> <FIXE> <FIXS> }else { _end.setNext(null); <FIXE>
<FIXS> return featureDao.hasInstance(parseId(org.n52.io.response.v1.ext.PlatformType.extractId(id)), org.n52.series.db.da.beans.FeatureEntity.class); <FIXE> <FIXS> return dao.hasInstance(parseId(org.n52.io.response.v1.ext.PlatformType.extractId(id)), org.n52.series.db.da.beans.ext.PlatformEntity.class); <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> initGridAdapter(); <FIXE> <FIXS> <FIXE>
<FIXS> java.util.Collection<prompto.declaration.IMethodDeclaration> candidates = selector.getCandidates(context, false); <FIXE>
<FIXS> dateUnitEffortListToAdjust = getAdjustedDateUnitEffortListForAssignments(dateUnitEffortListToAdjust, task); <FIXE>
<FIXS> <FIXE> <FIXS> if (addToBackStack) { <FIXE>
<FIXS> list.add(file); <FIXE>
<FIXS> if ((mVideoFilesVector.size()) > 0) { <FIXE>
<FIXS> <FIXE> <FIXS> mRendererScreen.draw(textureId, mCubeBuffer, mTextureBuffer); <FIXE>
<FIXS> <FIXE>
<FIXS> assertEquals(expectedList, actualList); <FIXE>
<FIXS> <FIXE>
<FIXS> final java.lang.String adminFromEmail = com.ext.portlet.service.ConfigurationAttributeLocalServiceUtil.getAttributeStringValue(ConfigurationAttributeKey.ADMIN_FROM_EMAIL.name(), 0L); <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> if (((id) == null) || (((finishedAt) == null) || (((java.lang.System.currentTimeMillis()) - (finishedAt)) > (sessionPendingMillis)))) { <FIXE>
<FIXS> animateGoogleMapCamera(event.getData()); <FIXE>
<FIXS> dbms.Value value; value = tuple.get(attrPosTable.get(attrName).intValue()); <FIXE>
<FIXS> <FIXE>
<FIXS> if (((getGameMgr().getGame(team)) != null) && (beaconLinks.containsKey(getGameMgr().getGame(team)))) { <FIXE>
<FIXS> eventArrived = true; <FIXE> <FIXS> <FIXE>
<FIXS> return new org.carbondata.processing.store.writer.CarbonFactDataWriterImplForIntIndexAndAggBlock(storeLocation, measureCount, mdKeyLength, tableName, fileManager, keyBlockSize, aggKeyBlock, isComplexTypes(), noDictionaryCount, carbonDataFileAttributes, databaseName, wrapperColumnSchemaList, noDictionaryCount, dimensionType, carbonDataDirectoryPath, colCardinality, segmentProperties); <FIXE>
<FIXS> <FIXE>
<FIXS> private double stdDev(java.util.LinkedList<java.lang.Double> list) { double mean = mean(list); <FIXE> <FIXS> double length = list.size(); for (double i : list) { <FIXE>
<FIXS> private javax.mail.Message[] searchMailbox(javax.mail.Folder inbox) throws javax.mail.MessagingException { <FIXE> <FIXS> return inbox.search(searchTerm); <FIXE>
<FIXS> if ((size()) == 0) return finalString; <FIXE>
<FIXS> if ((game.getContainer()) != null) { game.getContainer().setTargetFrameRate(fps); } <FIXE>
<FIXS> if ((user != null) && (user.password.equals(iPassword))) { <FIXE>
<FIXS> java.lang.String sec = java.lang.String.format("%02d", ((secUntilFinished / 1000) % 60)); java.lang.String min = java.lang.String.format("%02d", ((secUntilFinished / 1000) / 60)); <FIXE>
<FIXS> <FIXE>
<FIXS> return (fluid == null) || (fluid == (frequency.storedFluid.getFluid().getFluid())); <FIXE>
<FIXS> contributionTab.contributionManagerDialog.updateStatusPanel(contributionPanel); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> public static byte[] read(java.lang.String filePath) throws java.lang.Exception { <FIXE> <FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> mPhotoPathName = null; <FIXE>
<FIXS> if (expression != null) { final java.lang.Comparable value = valueList.get(i); final mondrian.spi.Dialect.Datatype datatype = datatypeList.get(i); sqlQuery.addWhere(mondrian.rolap.sql.SqlConstraintUtils.constrainLevel2(sqlQuery, expression, datatype, value)); } <FIXE>
<FIXS> public boolean equals(java.lang.Object obj) { <FIXE> <FIXS> if ((x) != (other.x)) { return false; } if ((y) != (other.y)) { <FIXE>
<FIXS> compiler.Ecriture.ecrireStringln(flux, ";iand"); compiler.Ecriture.ecrireStringln(flux, "pop bx"); compiler.Ecriture.ecrireStringln(flux, "pop ax"); compiler.Ecriture.ecrireStringln(flux, "and ax,bx"); compiler.Ecriture.ecrireStringln(flux, "push ax"); <FIXE>
<FIXS> if (targetPage == null) { return ; } <FIXE>
<FIXS> io.github.maddouri.intellij.OnlineSearch.action.LaunchSearchAction action = new io.github.maddouri.intellij.OnlineSearch.action.LaunchSearchAction(engine); <FIXE>
<FIXS> java.lang.String token = ((java.lang.String) (redisTemplate.boundValueOps(model.getUserId()).get())); <FIXE>
<FIXS> points = range(rect, node.lb, points); points = range(rect, node.rt, points); <FIXE>
<FIXS> hidden = true; onHide(); <FIXE> <FIXS> }else { hidden = true; onHide(); <FIXE> <FIXS> <FIXE>
<FIXS> if ((src == null) || (xAttr == null)) { <FIXE>
<FIXS> android.widget.SimpleCursorAdapter adapter = new android.widget.SimpleCursorAdapter(activity, themed_item, cursor, dataColumns, viewIDs); <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE> <FIXS> bestTime.setText(("best time: " + (bestTimeTracker))); worstTime.setText(("worst time: " + (worstTimeTracker))); <FIXE>
<FIXS> long assemblyId, @org.springframework.web.bind.annotation.RequestHeader(value = "X-Cms-User", required = false) <FIXE> <FIXS> return dManager.exportDesign(assemblyId); <FIXE>
<FIXS> <FIXE>
<FIXS> imageSources.add(org.appcelerator.titanium.view.TiDrawableReference.fromObject(getProxy(), o)); <FIXE> <FIXS> imageSources.add(org.appcelerator.titanium.view.TiDrawableReference.fromObject(getProxy(), object)); <FIXE>
<FIXS> <FIXE>
<FIXS> permissionsEditingComponent.init(permissions, oldDto); <FIXE>
<FIXS> public void onResponse(retrofit2.Call<java.util.List<com.namclu.android.deputyscheduler.models.Shift>> call, retrofit2.Response<java.util.List<com.namclu.android.deputyscheduler.models.Shift>> response) { <FIXE> <FIXS> java.util.List<com.namclu.android.deputyscheduler.models.Shift> shifts = response.body(); <FIXE>
<FIXS> if (job instanceof jenkins.model.ParameterizedJobMixIn.ParameterizedJob) { jenkins.model.ParameterizedJobMixIn.ParameterizedJob p = ((jenkins.model.ParameterizedJobMixIn.ParameterizedJob) (job)); for (com.cloudbees.jenkins.GitHubTrigger ght : hudson.Util.filter(p.getTriggers().values(), com.cloudbees.jenkins.GitHubTrigger.class)) { result.addAll(ght.getGitHubRepositories()); } <FIXE>
<FIXS> java.sql.Connection c = null; <FIXE> <FIXS> c = java.sql.DriverManager.getConnection("jdbc:sqlite:./bin/codeu/chat/codeU_db/ChatDatabase.db"); c.setAutoCommit(false); <FIXE> <FIXS> return c; <FIXE>
<FIXS> rocnikovyprojekt.FSA m = determinize(); <FIXE>
<FIXS> Main.buffer[((Main.useroffset) + 577)] = ((byte) (i + 1)); Main.buffer[((Main.useroffset) + 146248)] = ((byte) (i + 1)); <FIXE>
<FIXS> return mRepository.getCharacters(currentOffset).observeOn(mResultsThread).subscribeOn(mExecutorThread).doOnError(new rx.functions.Action1<java.lang.Throwable>() { <FIXE>
<FIXS> <FIXE>
<FIXS> stmt.executeUpdate(query); <FIXE>
<FIXS> if ((android.support.v4.content.ContextCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION)) == (android.content.pm.PackageManager.PERMISSION_GRANTED)) { <FIXE>
<FIXS> if ((url == null) || ("file".equals(url.getProtocol()))) { <FIXE>
<FIXS> if ((depth) == 1) captureElements = jaxbReader.elementChecker.isParentInfoElement(uri, localName); <FIXE>
<FIXS> tilIP.setError("Invalid IP"); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> for (int i = 1; i < 10; i++) { <FIXE>
<FIXS> if (array_elements.get(i).isBound().getValue()) { return new org.eclipse.titan.runtime.core.TitanBoolean(true); <FIXE> <FIXS> return new org.eclipse.titan.runtime.core.TitanBoolean(false); <FIXE>
<FIXS> if (!(variant.getReason().equals(""))) { <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> _alarmListener.onMessage(org.csstudio.alarm.service.internal.AlarmMessageDAL2Impl.newAlarmMessage(_pvAccess, new java.util.Date())); <FIXE>
<FIXS> protected long _daysLate(com.born2go.lazzybee.db.Card card) { if ((card.getQueue()) != (com.born2go.lazzybee.db.Card.QUEUE_REV2)) return 0; long due = card.getDue(); <FIXE> <FIXS> <FIXE>
<FIXS> offense.defense(); defense.offense(); }else { <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> if (debugPipelineMode && (evaluator instanceof org.apache.beam.runners.spark.SparkNativePipelineVisitor)) { <FIXE>
<FIXS> return io.sphere.sdk.utils.CompletableFutureUtils.exceptionallyCompletedFuture(exception); <FIXE>
<FIXS> <FIXE> <FIXS> f = new soaringcoach.analysis.DistanceAnalysis().analyse(f); <FIXE>
<FIXS> <FIXE> <FIXS> localVariable.getEnclosingScope().setVaraibleReg(localVariable.getName(), c); <FIXE>
<FIXS> for (int j = i; j < (sequence.length); j++) { <FIXE>
<FIXS> br.edu.ifsp.dsw.model.Tarefa tarefa = tarefaService.buscarPorId(id); <FIXE>
<FIXS> sp.edit().putBoolean(com.martin.martinthorneprojects.NavigationDrawerFragment.PREF_USER_LEARNED_DRAWER, true).commit(); <FIXE>
<FIXS> <FIXE>
<FIXS> this.lastOut += given; <FIXE>
<FIXS> onCalendarChangeListener.onMonthChanged(year, (month + 1)); <FIXE>
<FIXS> android.content.Context mContext = getApplicationContext(); <FIXE> <FIXS> new ru.meefik.linuxdeploy.ExecScript(mContext, command).start(); <FIXE>
<FIXS> <FIXE> <FIXS> return multipleMatchingMode; <FIXE> <FIXS> return null; <FIXE>
<FIXS> private void initGui() { <FIXE>
<FIXS> public int showMaximumIndependentSet() { <FIXE> <FIXS> clearAll(); markedVertices.addAll(graph.getVertices()); markedVertices.removeAll(cover); return markedVertices.size(); <FIXE>
<FIXS> public java.util.Map<java.lang.String, java.lang.String> deleteNode(@gov.gwssi.csc.scms.controller.user.RequestHeader(value = gov.gwssi.csc.scms.controller.user.UserController.HEADER_AUTHORIZATION) <FIXE> <FIXS> java.util.Map<java.lang.String, java.lang.String> result = nodeService.deleteNodeByNodeId(nodeId, user); return result; <FIXE>
<FIXS> return result.get(); <FIXE> <FIXS> return null; <FIXE>
<FIXS> return ""; <FIXE>
<FIXS> java.lang.String kingdom = null; <FIXE> <FIXS> kingdom = org.kingdoms.manager.game.GameManagement.getPlayerManager().getOfflineKingdomPlayer(p.getSingle(e)).getKingdomName(); <FIXE> <FIXS> return null; <FIXE>
<FIXS> org.n52.io.response.dataset.measurement.MeasurementData series = data.getSeries(metadata.getId()); <FIXE>
<FIXS> if ((triangulation) != null) { <FIXE>
<FIXS> final com.webfirmframework.wffweb.tag.html.attribute.core.AbstractAttribute attribute = child.getAttributeByName(attributeName); if ((attribute != null) && (attributeValue.equals(attribute.getAttributeValue()))) { <FIXE>
<FIXS> <FIXE>
<FIXS> org.junit.Assert.assertTrue(fetched.getEntityNames().isEmpty()); <FIXE>
<FIXS> java.lang.Object itemselected; itemselected = mthGetSelected.invoke(this); <FIXE>
<FIXS> private int getWordId(@javax.annotation.Nonnull final java.lang.String word) { <FIXE>
<FIXS> public static char[] cross(creatures.CharCreature creat1, creatures.CharCreature creat2) { <FIXE>
<FIXS> org.hamcrest.MatcherAssert.assertThat(com.ddiehl.timesincetextview.TimeSince.getFormattedDateString((((mTime) - (((7 * 24) * 60) * 60)) + 1), mTime, false, getContext()), com.ddiehl.timesincetextview.TimeSinceTextViewAndroidTest.is(getQuantityString(R.plurals.tstv_timespan_days, 6))); <FIXE>
<FIXS> long startTime = (startTimeParam == null) ? 0L : startTimeParam; long endTime = (endTimeParam == null) ? teammates.common.util.TimeHelper.now(0.0).getTimeInMillis() : endTimeParam; <FIXE>
<FIXS> int size = opened.size(); for (int i = size; i < count; i++) { <FIXE>
<FIXS> if (pos == 0) return true; <FIXE>
<FIXS> if ((suggesters) == null) { return ; } <FIXE>
<FIXS> <FIXE>
<FIXS> java.util.List<java.lang.String> rtrn = java.util.Arrays.asList(((java.lang.String) (this.props.get(lblProps))).split("\\s*,\\s*")); <FIXE>
<FIXS> <FIXE>
<FIXS> if (fragment != null) fragment.onPaletteGenerated(palette); <FIXE>
<FIXS> double wRatio = (1.0 * (this.width)) / width; double hRatio = (1.0 * (this.height)) / height; <FIXE>
<FIXS> <FIXE>
<FIXS> add(new org.dcache.webadmin.view.panels.userpanel.UserPanel("userPanel")); add(new org.dcache.webadmin.view.panels.navigation.BasicNavigationPanel("navigationPanel", this.getClass())); <FIXE>
<FIXS> result = new java.lang.String[1]; <FIXE>
<FIXS> <FIXE>
<FIXS> if ((start.length()) < 1) return start; <FIXE>
<FIXS> stopPhrase(true); <FIXE>
<FIXS> return getNearestPointInDefaultPartitionOutOfSortedMap(point, sortedResourcePoints, playerId, searchDistance, null); <FIXE>
<FIXS> if (end > (-1)) { com.reissgrvs.spotifyplaylisttool.SpotifyAPI.SpotifyAPIManager.getService().reorderPlaylistTracks(userID, playlistID, body); } <FIXE>
<FIXS> value = eval(instance); <FIXE>
<FIXS> if (pendingIntent == null) return true; <FIXE>
<FIXS> if ((scoreNow.getUsername().equals(username)) && ((scoreNow.getScore()) < score)) { <FIXE> <FIXS> <FIXE>
<FIXS> player.dispose(); <FIXE> <FIXS> <FIXE> <FIXS> rayHandler.dispose(); <FIXE>
<FIXS> private static boolean pathIsValid(java.lang.String strPath) { <FIXE>
<FIXS> if ((currentAlbumController) == null) { <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> cs.nuim.ie.workflowRunner.xpandExec.genExternalConfigruation(cs.nuim.ie.workflowRunner.xpandExec.projName, "_TranslationValidation"); <FIXE>
<FIXS> <FIXE>
<FIXS> private void read() throws java.io.IOException { int readCount = socketChannel.read(input); java.lang.System.out.println(("Read count: " + readCount)); if (readCount > 0) { state = com.flyer.netty.reactor.third.ThirdHandler.PROCESSING; com.flyer.netty.reactor.third.ThirdHandler.pool.submit(new com.flyer.netty.reactor.third.ThirdHandler.Processor(readCount)); <FIXE> <FIXS> selectionKey.interestOps(java.nio.channels.SelectionKey.OP_WRITE); selectionKey.selector().wakeup(); <FIXE>
<FIXS> java.util.concurrent.Future<org.opendaylight.yangtools.yang.common.RpcResult<java.lang.Void>> result = lfmService.removeMapping(org.opendaylight.sfc.sfc_lisp.provider.LispUtil.buildRemoveMappingInput(eid, 0)); <FIXE> <FIXS> org.opendaylight.sfc.sfc_lisp.provider.api.SfcLispFlowMappingApi.LOG.warn("Failed to REMOVE mapping for EID {} : {}", eid, e); <FIXE>
<FIXS> <FIXE> <FIXS> ++(size); <FIXE>
<FIXS> mNineCardFragment = com.kania.set2.ui.NineCardFragment.newInstance(NineCardFragment.CARD_TYPE_FILL_AS_PATTERN, true, this); <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> if (classTypes.contains(classType)) { <FIXE> <FIXS> break; } <FIXE>
<FIXS> <FIXE>
<FIXS> com.example.youngseok.myapplication.MainActivity.tMapView.setCenterPoint(cLongitude, cLatitude, false); <FIXE> <FIXS> <FIXE>
<FIXS> public void ShareData(java.lang.String content, java.lang.String title) { <FIXE> <FIXS> i.putExtra(Intent.EXTRA_TEXT, ((title + "\n") + content)); <FIXE>
<FIXS> getMenuInflater().inflate(R.menu.zone, menu); <FIXE>
<FIXS> fromSingleValue(o, openingHoursList); <FIXE>
<FIXS> notes.add(note); <FIXE> <FIXS> <FIXE>
<FIXS> return names.toArray(new java.lang.String[0]); <FIXE>
<FIXS> if (!(tagNames.containsKey(tagName))) { <FIXE>
<FIXS> <FIXE>
<FIXS> public void setNewMetric(java.lang.String newPath, java.lang.String fileName, java.lang.String metricName) { this.filePath = newPath; this.fileName = fileName; <FIXE>
<FIXS> if (!(distinctPeriods.contains(period.getDay()))) { <FIXE>
<FIXS> geoCollisionEffects(gameobject); <FIXE>
<FIXS> assertThat(actualPeriod, org.hamcrest.CoreMatchers.instanceOf(java.time.Period.class)); assertEquals(sourcePeriod, actualPeriod); <FIXE>
<FIXS> final y.ui.PanelProject pp = OpenProject(prj, filename); <FIXE>
<FIXS> return true; <FIXE>
<FIXS> super.onRestoreInstanceState(savedInstanceState); <FIXE>
<FIXS> com.jme3.math.Vector3f newPos2d = new com.jme3.math.Vector3f(newPos.x, position.y, newPos.z); <FIXE>
<FIXS> return nameIsPresent && bodyIsPresent; <FIXE>
<FIXS> return ((((((((((((((("User [user_Id=" + (user_Id)) + ", user_Username=") + (user_Username)) + ", user_Password=") + (user_Password)) + ", user_Email=") + (user_Email)) + ", google_Id=") + (google_Id)) + ", google_Username=") + (google_Username)) + ", user_UserType=") + (user_UserType.toString())) + ", user_BankBalance=") + (user_BankBalance)) + "]"; <FIXE>
<FIXS> @se.sjtu.formfoss.controller.RequestMapping(path = "/add") <FIXE> <FIXS> <FIXE>
<FIXS> public entities.Tile remove() { <FIXE> <FIXS> this.tile = parentBoard.getSquare(iIndex, ((jIndex) - 1)).remove(); <FIXE>
<FIXS> <FIXE>
<FIXS> synchronized(currentFrame) { <FIXE> <FIXS> synchronized(currentFrame) { plugin.getFileManager().appendFrame(currentFrame); } <FIXE>
<FIXS> graph.DepthFirstSearch.DepthFirstSearch_Visit(theGraph, neighbor, visited, finished); <FIXE>
<FIXS> if (((piece.cellAt(loc)) != (EMPTY)) && ((asAbs(loc).row) >= boardRows)) { return true; <FIXE> <FIXS> <FIXE>
<FIXS> view.setInput(selectedMarker, true); <FIXE>
<FIXS> net.tridentsdk.server.packet.PacketRegistry.PACKET_IDS.put(cls, identifier); <FIXE> <FIXS> net.tridentsdk.server.packet.PacketRegistry.PACKETS.put(identifier, cls); <FIXE>
<FIXS> private double average(double[] returns, java.util.function.Predicate<java.lang.Integer> filter) { <FIXE> <FIXS> for (int ii = 0; ii < (returns.length); ii++) { if (!(filter.test(ii))) <FIXE>
<FIXS> org.lovebing.reactnative.baidumap.MarkerUtil.addPolyline(mapView, option.getString("color"), option.getInt("width"), option.getArray("points")); <FIXE>
<FIXS> com.xizz.scoreoflife.util.Data.syncChecks(); <FIXE> <FIXS> <FIXE>
<FIXS> if (!(mConnectedDevices.contains(hr))) { mConnectedDevices.add(hr); } <FIXE>
<FIXS> com.example.FundigoApp.Customer.RealTime.RealTimeActivity.events_sorted_by_dist_data.clear(); <FIXE>
<FIXS> }else { QuickPlay.onHypixel = false; <FIXE>
<FIXS> definitionFactory.removeFromCache(getPath()); <FIXE>
<FIXS> if ((networkInfo.isConnected()) && (!(isConnected()))) { <FIXE>
<FIXS> <FIXE>
<FIXS> setElements(texts.toArray(new java.lang.String[size]), null, selected); <FIXE>
<FIXS> return data != (-1); <FIXE>
<FIXS> int positionX = ((int) (java.lang.Math.round(((zeroPlayerGamePackage.BoardBuilder.BOARD_WIDTH) * (java.lang.Math.random()))))); int positionY = ((int) (java.lang.Math.round(((zeroPlayerGamePackage.BoardBuilder.BOARD_HEIGHT) * (java.lang.Math.random()))))); <FIXE>
<FIXS> <FIXE>
<FIXS> com.dtolabs.rundeck.jetty.jaas.JettyCachingLdapLoginModule module = getJettyCachingLdapLoginModule(false); <FIXE>
<FIXS> java.lang.String url = Data.sampleUrls[0]; <FIXE>
<FIXS> int min; <FIXE> <FIXS> min = dateToMin(date, "00:00", nextDate); <FIXE>
<FIXS> this.convertedInput = null; <FIXE>
<FIXS> games.strategy.engine.framework.startup.ui.MainFrame.clearInstance(); <FIXE>
<FIXS> <FIXE>
<FIXS> if ((c.length()) > 0) { pkg.add(c); } <FIXE>
<FIXS> if (word != null) { show.setText(word.toString()); show.setGravity(Gravity.NO_GRAVITY); } <FIXE>
<FIXS> return (width != 0) && (height != 0); <FIXE>
<FIXS> java.lang.System.out.println(this.getX()); <FIXE>
<FIXS> }else { com.example.qmma.featuredetection.SplashActivity.Loader loader = new com.example.qmma.featuredetection.SplashActivity.Loader(); loader.execute(this); <FIXE> <FIXS> <FIXE>
<FIXS> int monthsFromStartOfContract = (websays.core.utils.JodaUtils.monthsDifference(bi.period.contractStart, bi.period.periodEnd)) + 1; <FIXE>
<FIXS> this.update(new de.prob2.ui.project.Project(this.getName(), this.getDescription(), machinesList, this.getPreferences(), this.getRunconfigurations(), this.getLocation())); <FIXE>
<FIXS> utilisateur = traiterEmail(email, utilisateur); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> model.data.CombinedDataTable copy = new model.data.CombinedDataTable(dataTables.get(1), dataTables.get(0), dataTables.get(2)); <FIXE>
<FIXS> if ((!(filterItem(message))) && (!(filtered.contains(message)))) { <FIXE>
<FIXS> return new java.io.File(videoFileUri.get(((videoFileUri.size()) - 1)).getPath()); <FIXE>
<FIXS> org.junit.Assert.assertThat("empty events list not allowed to be registered", org.jenkinsci.plugins.github.webhook.WebhookManager.forHookUrl(org.jenkinsci.plugins.github.webhook.WebhookManagerTest.HOOK_ENDPOINT).createHookSubscribedTo(java.util.Collections.<org.kohsuke.github.GHEvent>emptyList(), null).apply(active), org.hamcrest.Matchers.nullValue()); <FIXE>
<FIXS> remove(name); <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE> <FIXS> return (set.size()) == (string.length()); <FIXE>
<FIXS> com.latmod.modularpipes.data.ModularPipesPlayerData data = com.latmod.modularpipes.data.ModularPipesPlayerData.get(event.getPlayer()); event.getConfig().setGroupName(ModularPipes.MOD_ID, new net.minecraft.util.text.TextComponentString(ModularPipes.MOD_NAME)); event.getConfig().add(ModularPipes.MOD_ID, "dev_mode", data.devMode).setNameLangKey("modularpipes.config.general.dev_mode"); <FIXE>
<FIXS> return currentCell; <FIXE>
<FIXS> <FIXE>
<FIXS> latest = (list.isEmpty()) ? null : list.get(((list.size()) - 1)).getId(); <FIXE>
<FIXS> private void checkForSplitRead(final org.broadinstitute.hellbender.utils.read.GATKRead read, final java.util.List<org.broadinstitute.hellbender.tools.spark.sv.BreakpointEvidence> evidenceList) { <FIXE>
<FIXS> super.onCreateView(inflater, mMapView, savedInstanceState); <FIXE>
<FIXS> my_cvr_under_audit = -1; while (index < (my_submitted_audit_cvrs.size())) { <FIXE> <FIXS> } <FIXE>
<FIXS> this.converter = mock(org.springframework.messaging.converter.MessageConverter.class); <FIXE>
<FIXS> java.lang.System.arraycopy(elementData, (index + 1), elementData, index, (((size) - index) - 1)); elementData[((size) - 1)] = null; <FIXE>
<FIXS> oprationRowNum = x; break; <FIXE>
<FIXS> player.setDisplayName(((prefix + (org.bukkit.ChatColor.stripColor(player.getName()))) + suffix)); <FIXE>
<FIXS> while ((currentItem % (getRealCount())) != 0) { <FIXE>
<FIXS> for (int i = 1; i < ((attrN) + 1); i++) { <FIXE>
<FIXS> if (!(pageHistory.empty())) { <FIXE> <FIXS> }else { super.onBackPressed(); } <FIXE>
<FIXS> if ((savedTag) != null) { <FIXE>
<FIXS> return (((c >= '0') && (c <= '9')) || ((c >= 'A') && (c >= 'F'))) || ((c >= 'a') && (c >= 'f')); <FIXE>
<FIXS> if (getCurrentPlayer().isInJail()) { gui.setGetOutOfJailEnabled(true); }else { gui.setGetOutOfJailEnabled(false); <FIXE> <FIXS> <FIXE> <FIXS> gui.enablePlayerTurn(turn); <FIXE>
<FIXS> final java.lang.Integer numberOfPrincipalPaymentPeriods = org.apache.fineract.portfolio.loanaccount.loanschedule.domain.LoanApplicationTerms.calculateNumberOfRemainingPrincipalPaymentPeriods(this.actualNumberOfRepayments, this.getRecurringMoratoriumOnPrincipalPeriods(), this.getPrincipalGrace(), (periodNumber - 1)); <FIXE>
<FIXS> selectButton.addActionListener(this); <FIXE>
<FIXS> <FIXE>
<FIXS> private void prepareUV(com.graphicsengine.spritemesh.PropertyMapper mapper, int spriteCount, int index) { <FIXE> <FIXS> com.nucleus.geometry.MeshBuilder.prepareTiledUV(mapper, attributeData, (index + i)); <FIXE>
<FIXS> for (java.lang.String command : commands) { <FIXE>
<FIXS> <FIXE>
<FIXS> if (newTask != null) { if (newTask.isComplete()) { newTask.setComplete(false); newTask.setCompletedTS(null); }else { newTask.setComplete(true); newTask.setCompletedTS(new java.util.Date()); } newTask.setModifiedTS(new java.util.Date()); taskObjectDao.update(newTask); <FIXE> <FIXS> <FIXE>
<FIXS> org.mycat.netty.NettyServer.logger.info("nettyServer init"); <FIXE>
<FIXS> com.google.devtools.build.lib.analysis.config.BuildOptions optionsKey = buildOptions.trim(com.google.devtools.build.lib.analysis.config.BuildConfiguration.getOptionsClasses(com.google.common.collect.ImmutableList.<java.lang.Class<? extends com.google.devtools.build.lib.analysis.config.BuildConfiguration.Fragment>>of(fragmentType), ruleClassProvider)); <FIXE>
<FIXS> bnd.isChanged |= bnd.setLowerBound(x, min_y); <FIXE> <FIXS> bnd.isChanged |= bnd.setUpperBound(x, max_y); <FIXE>
<FIXS> <FIXE>
<FIXS> if (this.equals(other)) return true; if ((this.checkIn.isBefore(other.getCheckOutDate())) && (this.checkOut.isBefore(other.getCheckInDate()))) return true; return false; <FIXE>
<FIXS> <FIXE>
<FIXS> return hu.oe.nik.szfmv17t.environment.utils.CollisionDetector.rotateWorldCoords(rot, center, worldCoords); <FIXE>
<FIXS> intent.putExtra("position", itemPosition); <FIXE>
<FIXS> public java.sql.ResultSet getFromDataBase(java.lang.String query) { <FIXE>
<FIXS> while ((java.util.Arrays.binarySearch(allowed, (c = ((char) (readCharacter()))))) < 0) { <FIXE>
<FIXS> for (int i = 0; i < 3; i++) { <FIXE>
<FIXS> protected int depth(org.pg4200.datastructure.map.tree.BinaryTreeMap<K, V>.TreeNode node) { <FIXE>
<FIXS> expressionField.setText(((decimalFormat.format(valueOne)) + (currentAction))); <FIXE>
<FIXS> <FIXE> <FIXS> myIntent.putExtra(Constants.PLACA_KEY, carros.get(position).getPlaca().replaceAll(" - ", "")); <FIXE>
<FIXS> <FIXE>
<FIXS> java.lang.String k2 = ((keys.length) > 1) ? keys[1] : ""; <FIXE>
<FIXS> <FIXE>
<FIXS> org.junit.Assert.assertEquals(new java.util.ArrayList(indexDefinitions), new java.util.ArrayList(documentConfiguration.indexDefinitions())); <FIXE>
<FIXS> <FIXE>
<FIXS> db.execSQL(transcend.rockeeper.sqlite.DatabaseHelper.routes.createTable()); db.execSQL(transcend.rockeeper.sqlite.DatabaseHelper.goals.createTable()); db.execSQL(transcend.rockeeper.sqlite.DatabaseHelper.notes.createTable()); db.execSQL(transcend.rockeeper.sqlite.DatabaseHelper.locations.createTable()); db.execSQL(transcend.rockeeper.sqlite.DatabaseHelper.settings.createTable()); <FIXE>
<FIXS> private boolean isOn() { <FIXE>
<FIXS> break; <FIXE>
<FIXS> initTime = 0; <FIXE>
<FIXS> client = null; <FIXE>
<FIXS> if ((infos.getKeyword()) == null) return false; <FIXE>
<FIXS> ((org.universAAL.hw.exporter.zigbee.ha.devices.OnOffLightCallee) (onOffLigthDevices.get(sref))).unregister(); iter.remove(); <FIXE>
<FIXS> mcjty.lib.tools.ItemStackList items = mcjty.lib.tools.ItemStackList.create(); <FIXE>
<FIXS> intent.putExtra("project", mObjects.get(newPos)); <FIXE>
<FIXS> java.util.List<org.opentosca.model.instancedata.NodeInstance> nodeInstances = this.niDAO.getNodeInstances(null, null, null, nodeInstanceID); <FIXE> <FIXS> this.niDAO.setState(nodeInstances.get(0), state); <FIXE>
<FIXS> if ((org.sbolstandard.core2.GenBank.URIPrefix) != null) { <FIXE>
<FIXS> java.lang.System.out.println(status); <FIXE>
<FIXS> <FIXE> <FIXS> getSupportActionBar().setTitle("Srijan Motosports"); <FIXE>
<FIXS> if (risk.equals(value.toString())) { <FIXE>
<FIXS> <FIXE>
<FIXS> java.io.InputStream data = com.impossibl.postgres.jdbc.SQLTypeUtils.coerceToByteStream(val, attr.type, connection); <FIXE>
<FIXS> assertEquals(1, subtitles.size()); <FIXE>
<FIXS> int result = ((int) ((obj1.overlap_size) - (obj2.overlap_size))); if (result == 0) { <FIXE> <FIXS> if (result > 0) { <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> android.os.StrictMode.setVmPolicy(new android.os.StrictMode.VmPolicy.Builder().detectLeakedSqlLiteObjects().detectLeakedClosableObjects().penaltyLog().build()); <FIXE>
<FIXS> <FIXE> <FIXS> java.lang.System.out.println(("No response from client with Snake ID of " + (snake.getId()))); java.lang.System.out.println(((MainServer.currentSnakeManagerInstance.getClients().size()) + " snakes remaining")); <FIXE>
<FIXS> <FIXE>
<FIXS> return java.util.Arrays.<com.facebook.react.ReactPackage>asList(new com.facebook.react.shell.MainReactPackage(), new co.apptailor.googlesignin.RNGoogleSigninPackage(), new com.microsoft.codepush.react.CodePush("Fa0Ug7tNp1xFH9EShk5GXlBEIXCE4JbRhcGg7", getApplicationContext(), BuildConfig.DEBUG), new com.oblador.vectoricons.VectorIconsPackage(), new com.zmxv.RNSound.RNSoundPackage(), new com.futurice.rctaudiotoolkit.AudioPackage(), new com.facebook.reactnative.androidsdk.FBSDKPackage(com.talktekapp.MainApplication.mCallbackManager), new co.apptailor.googlesignin.RNGoogleSigninPackage()); <FIXE>
<FIXS> verify(invoiceDAO).create(invoice); <FIXE>
<FIXS> doThrow(new com.at.ac.tuwien.sepm.ss15.edulium.domain.validation.ValidationException("")).when(invoiceValidator).validateForCreate(invoice); <FIXE>
<FIXS> protected static org.olap4j.mdx.IdentifierNode getIdentifier(java.lang.String... identifiers) { <FIXE> <FIXS> identifier = "~" + (identifiers[0]); <FIXE> <FIXS> identifier += "_" + (identifiers[i]); <FIXE>
<FIXS> <FIXE>
<FIXS> this.gamePlayers = new java.util.ArrayList(); <FIXE>
<FIXS> this.setPosition(xCoor, yCoor); <FIXE>
<FIXS> if (k == (-1)) return -1; else if ((array.length) > 0) { if (k == 0) return -1; else { int i = project2.NonInitiator.randRange(0, k); return array[i]; } }else <FIXE> <FIXS> <FIXE>
<FIXS> java.util.Map<java.lang.String, java.lang.String> poolConfigMap = org.wso2.carbon.datasource.utils.DataSourceUtils.extractPrimitiveFieldNameValuePairs(this.config); poolConfigMap.forEach(( key, value) -> dataSourceFactoryReference.add(new javax.naming.StringRefAddr(key, value))); <FIXE>
<FIXS> final java.lang.StringBuilder builder = new java.lang.StringBuilder(); <FIXE> <FIXS> builder.append(("\n" + (command.getUsage(sender)))); <FIXE>
<FIXS> while (true) { if ((application.Controller.getInstance(0).mutexLock) == (!true)) { application.Controller.getInstance(0).mutexLock = true; application.Controller.getInstance(0).decode(); application.Controller.getInstance(0).mutexLock = false; } <FIXE>
<FIXS> <FIXE>
<FIXS> task.execute(getContext()); <FIXE>
<FIXS> return findProblems(result, file); <FIXE>
<FIXS> nodelinks.add(convertFromModel(nodeId, link)); <FIXE>
<FIXS> public int getPlayerRank() { <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> iPassword = com.orientechnologies.orient.core.security.OSecurityManager.instance().digest2String(iPassword, true); <FIXE>
<FIXS> final boolean star = !(bundle.getBoolean(Constants.STAR)); final int starDrawable = (star) ? R.drawable.ic_star_selected : R.drawable.ic_star_unselected; <FIXE> <FIXS> bundle.putBoolean(Constants.STAR, star); <FIXE>
<FIXS> for (int machineIndex = 0; machineIndex < (output.getMachinesCount()); machineIndex++) { <FIXE>
<FIXS> return true; <FIXE>
<FIXS> if ((head) != null) { builder.setDataMap(retroscope.net.protocol.ProtocolHelpers.retroMapToProtocol(dataMap, this.name, head.getTime().toLong())); } <FIXE>
<FIXS> if (!(hasAnimatedNewHighScore)) { hasAnimatedNewHighScore = true; com.syzible.irishnoungenders.utils.PulseAnimation.animateView(highScoreTV); } <FIXE>
<FIXS> updateTransactionLabel(); <FIXE>
<FIXS> if ((point != null) && (point.equalsIgnoreCase("background"))) { <FIXE>
<FIXS> <FIXE>
<FIXS> interactors.removeInteractorLink(currentResource, link); <FIXE>
<FIXS> return toHexString(response, response.length); <FIXE>
<FIXS> <FIXE>
<FIXS> final edu.hs.bremen.model.BasketEntryEntity basketEntryEntity = basketManager.getUpdatedBasketEntry(userEntity, basketEntryDto, java.lang.Boolean.TRUE); <FIXE>
<FIXS> deleteRows(); test01_addRowPass(); test01_addRowPass(); com.jayway.restassured.module.mockmvc.RestAssuredMockMvc.given().header(getHeader()).contentType("application/json").when().get("/api/restricted/session").then().statusCode(200).body("size()", org.hamcrest.core.IsEqual.equalTo(2)); <FIXE>
<FIXS> t.setVisibility(View.VISIBLE); <FIXE>
<FIXS> final com.orientechnologies.orient.object.enhancement.OObjectEntitySerializer.OObjectEntitySerializedSchema serializedSchema = com.orientechnologies.orient.object.enhancement.OObjectEntitySerializer.getCurrentSerializedSchema(); if (serializedSchema == null) return false; <FIXE>
<FIXS> <FIXE>
<FIXS> if (date == null) return null; <FIXE>
<FIXS> _btAmountll.setVisibility(View.GONE); <FIXE>
<FIXS> com.alibaba.druid.pool.DruidDataSource.this.setObjectName(objectName); com.alibaba.druid.pool.DruidDataSource.this.mbeanRegistered = true; <FIXE>
<FIXS> reset(fileName, page, false); <FIXE>
<FIXS> <FIXE> <FIXS> realMap.validatePoints(); <FIXE>
<FIXS> <FIXE>
<FIXS> (remapper = new com.arisux.mappingpatcher.Remapper(this)).start(); <FIXE>
<FIXS> if (pMatrixMode != (this.mMatrixMode)) { this.mMatrixMode = pMatrixMode; switch (this.mMatrixMode) { case PROJECTION : this.mCurrentGLMatrixStack = this.mProjectionGLMatrixStack; return ; case MODELVIEW : this.mCurrentGLMatrixStack = this.mModelViewGLMatrixStack; return ; default : throw new java.lang.IllegalArgumentException((((("Unexpected " + (org.anddev.andengine.opengl.util.GLMatrixStacks.MatrixMode.class.getSimpleName())) + ": '") + pMatrixMode) + "'.")); } <FIXE>
<FIXS> <FIXE>
<FIXS> public int getXLocation(int position, com.edulectronics.tinycircuit.Models.Components.Connectors.ConnectionPointOrientation orientation) { <FIXE>
<FIXS> private final java.lang.Float calculateRate(final java.lang.Long counterValue, final java.lang.Long durationInNs, final java.util.concurrent.TimeUnit timeUnit) { <FIXE> <FIXS> if (((counterValue != null) && (durationInNs != null)) && ((durationInNs.longValue()) > 0L)) { result = (counterValue * ((float) (java.util.concurrent.TimeUnit.NANOSECONDS.convert(1, timeUnit)))) / ((float) (durationInNs)); <FIXE>
<FIXS> com.simpledb.memtable.Memtable<java.lang.String, java.lang.String> memtable = processor.getMemTable(); java.lang.Object value = memtable.getValue(input.trim()); <FIXE>
<FIXS> android.content.Intent detailsActivityIntent = new android.content.Intent(getActivity(), br.com.dgimenes.popmovies.DetailsActivity.class); <FIXE>
<FIXS> decimals = ((int) (java.lang.Math.round(((sum * 100) - ((curSum) * 100))))); <FIXE>
<FIXS> com.testing.Cliniops.Cliniops_ReusableMethodsTest.isPass = true; <FIXE>
<FIXS> strb = new java.lang.StringBuilder(); <FIXE> <FIXS> return temp; <FIXE>
<FIXS> <FIXE>
<FIXS> createTunnelToServerBeans = false; <FIXE>
<FIXS> city = new org.apache.sis.feature.DefaultFeatureType(org.apache.sis.feature.DefaultFeatureTypeTest.name("New-City"), false, new org.apache.sis.feature.DefaultFeatureType[]{ org.apache.sis.feature.DefaultFeatureTypeTest.city() }, city.getProperty("city")); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> }else { return c.toString(c); <FIXE>
<FIXS> doMappingAndFillDepthLevel(dlCategory, ids, result); <FIXE>
<FIXS> java.lang.System.out.println(point); <FIXE>
<FIXS> org.dcxz.designdigger.app.App.getQueue().cancelAll(subTag); <FIXE>
<FIXS> if ((no > (this.booked)) && (no > 0)) { <FIXE>
<FIXS> setupAddProductButtonListener(); <FIXE>
<FIXS> if (pukGroupDto != null) { long pukGroupId = pukGroupDto.getPukGroupId(); java.util.Optional<com.pce.domain.PukGroup> pukGroupById = pukGroupService.getPukGroupById(pukGroupId); if (!(pukGroupById.isPresent())) { errors.rejectValue("pukGroupId", "pukGroup.not.exists", (("Puk Group " + pukGroupId) + " is not exists in the system, please select different one")); } <FIXE>
<FIXS> if (square == '1') { <FIXE>
<FIXS> definition.append(getName()); <FIXE>
<FIXS> if (((connection) == null) || (!(check()))) { <FIXE>
<FIXS> if (!changed) return ; <FIXE>
<FIXS> th.go.excise.edbarcode.ws.client.pcc.insert0112.client.InsertPOSO0112OperationServiceImpl.logger.error((" ############## Error Call InsertPOSO0112OperationService :" + (ex.getMessage()))); <FIXE>
<FIXS> for (int i = 0; i < (array.length); i++) { <FIXE>
<FIXS> if ((m_terminateWhenEmpty) && (m_launcher.isEmpty())) <FIXE> <FIXS> else return false; <FIXE> <FIXS> if (m_launcher.isSingleShotDone()) <FIXE> <FIXS> else return false; <FIXE>
<FIXS> java.util.List<java.lang.String> cards = new java.util.ArrayList<>(); <FIXE> <FIXS> java.util.Collections.sort(cards); <FIXE>
<FIXS> xVel += timestep * ((xForce) / (mass)); yVel += timestep * ((yForce) / (mass)); <FIXE>
<FIXS> this.current = null; <FIXE> <FIXS> if (task != null) <FIXE> <FIXS> <FIXE>
<FIXS> java.util.Collection<hslu.bda.medimemory.entity.Eat> allEatValues = new java.util.ArrayList<hslu.bda.medimemory.entity.Eat>(); <FIXE>
<FIXS> seedu.taskell.logic.commands.UndoCommand.clearCommandHistory(); <FIXE>
<FIXS> getEditableText().delete((start - 1), start); <FIXE>
<FIXS> cafe.analysis.cafe.analysis.FFT.fft(re, im, 10, (-1)); <FIXE>
<FIXS> return graphqlService.executeQuery(query, operationName, new org.ow2.proactive.scheduling.api.graphql.common.GraphqlContext(username, sessionId), decodeIntoMap(variables)); <FIXE>
<FIXS> if ((docid >= 0) && (reader != null)) { <FIXE>
<FIXS> try (net.openhft.chronicle.map.ChronicleMap map = map5()) { <FIXE>
<FIXS> for (int i = 0; i < (site[((site[0].length) - 1)].length); i++) { if (isFull(((site[0].length) - 1), i)) <FIXE>
<FIXS> if (((window) != null) && ((savedCursor) != null)) { <FIXE> <FIXS> savedCursor = null; <FIXE>
<FIXS> org.junit.Assert.assertEquals(2, result.size()); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> if ((progress) != null) { progress.dismiss(); } <FIXE>
<FIXS> <FIXE>
<FIXS> public void startTestMenuItemAction() { <FIXE>
<FIXS> <FIXE>
<FIXS> @android.annotation.TargetApi(value = Build.VERSION_CODES.LOLLIPOP) <FIXE> <FIXS> if ((mLEScanner) == null) { mLEScanner = mBluetoothAdapter.getBluetoothLeScanner(); settings = new android.bluetooth.le.ScanSettings.Builder().setScanMode(ScanSettings.SCAN_MODE_LOW_LATENCY).build(); filters = new java.util.ArrayList<>(); filters.add(new android.bluetooth.le.ScanFilter.Builder().setServiceUuid(new android.os.ParcelUuid(BluetoothServices.Advertisement)).build()); <FIXE>
<FIXS> this.title.setText(this.windowTitle); <FIXE>
<FIXS> if (!(typeSystemWritten)) { <FIXE>
<FIXS> request.setAttribute("success_message", com.foodstore.serg.controller.NO_PRODUCT); <FIXE>
<FIXS> android.widget.Toast.makeText(this, ((((((getString(R.string.version)) + (cc.haoduoyu.umaru.BuildConfig.VERSION_NAME)) + "\n\n") + (cc.haoduoyu.umaru.utils.PreferencesUtils.getAll(this))) + "\n\n") + (cc.haoduoyu.umaru.utils.SettingUtils.getAll())), Toast.LENGTH_LONG).show(); <FIXE>
<FIXS> java.lang.System.out.println(net); <FIXE>
<FIXS> if (((fallbackURL) != null) && (!(fallbackURL.equals("PROPERTY_NOT_FOUND")))) <FIXE>
<FIXS> <FIXE>
<FIXS> if (callEvent) { <FIXE>
<FIXS> <FIXE> <FIXS> javax.swing.JOptionPane.showMessageDialog(this, "Voc� se desconectou do Servidor..."); configuraBotoes(true); <FIXE>
<FIXS> if (!(move(command.charAt(i)))) { return ; } <FIXE>
<FIXS> public static double S(double t) { double count = SIRModel.getRecord(SIRModel.S_HIST, t); if (count >= 0) { <FIXE> <FIXS> double newCount = (SIRModel.S(lt)) + (SIRModel.dS(t)); <FIXE>
<FIXS> private static void close(java.sql.Statement statement) { <FIXE> <FIXS> if (statement == null) { return ; } <FIXE>
<FIXS> fileList = fileserverHandler.listFiles(UserPreferences.USERNAME, UserPreferences.USERNAME, UserPreferences.PASSWORD); <FIXE>
<FIXS> java.net.URL url = new com.weihua.newyorktimes.search.SearchUrlBuilder().setBeginDate(com.weihua.newyorktimes.search.SearchActivity.DEFAULT_SEARCH_BEGIN_DATE).setQuery((searchQuery.getText().toString().trim().equals("") ? com.weihua.newyorktimes.search.SearchActivity.DEFAULT_CATEGORY : searchQuery.getText().toString().trim())).build(); <FIXE>
<FIXS> protected boolean mouseOnMaximize() { <FIXE>
<FIXS> com.badlogic.gdx.math.Vector2 end = new com.badlogic.gdx.math.Vector2(endNode.getCellX(), endNode.getCellY()); <FIXE>
<FIXS> assertInventorySize(1, ch.dissem.bitmessage.networking.NetworkHandlerTest.nodeInventory); <FIXE>
<FIXS> date = delta.games.lotro.utils.Formats._dateTimeFormatter.parse(dateStr); <FIXE> <FIXS> date = delta.games.lotro.utils.Formats._dateFormatter.parse(dateStr); <FIXE>
<FIXS> org.zstack.network.service.eip.EipBackend bkd = getEipBackend(providerType); <FIXE>
<FIXS> public static boolean hasFormatWithClassHeader(java.lang.String text) { <FIXE>
<FIXS> java.lang.String SQL_CREATE_SHOES_TABLE = ((((((((((("CREATE TABLE " + (com.example.android.deadstock.data.ShoeContract.ShoeEntry.TABLE_NAME)) + " (") + (com.example.android.deadstock.data.ShoeContract.ShoeEntry._ID)) + " INTEGER PRIMARY KEY AUTOINCREMENT, ") + (com.example.android.deadstock.data.ShoeContract.ShoeEntry.COLUMN_SHOE_BRAND)) + " INTEGER NOT NULL, ") + (com.example.android.deadstock.data.ShoeContract.ShoeEntry.COLUMN_SHOE_NAME)) + " TEXT, ") + (com.example.android.deadstock.data.ShoeContract.ShoeEntry.COLUMN_SHOE_QUANTITY)) + " INTEGER NOT NULL DEFAULT 0, ") + (com.example.android.deadstock.data.ShoeContract.ShoeEntry.COLUMN_SHOE_PRICE)) + " INTEGER NOT NULL);"; <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> for (int i = 0; !done; i++) { <FIXE>
<FIXS> if ((tagData) != null) { long lastAutoSync = com.todoroo.andlib.utility.Preferences.getLong(((com.todoroo.astrid.actfm.TagViewActivity.LAST_FETCH_KEY) + (tagData.getId())), 0); if (((com.todoroo.andlib.utility.DateUtilities.now()) - lastAutoSync) > (com.todoroo.andlib.utility.DateUtilities.ONE_HOUR)) refreshData(false); } <FIXE>
<FIXS> return (((((("\"" + (event.getSender())) + "\" -> \"") + (((hu.bme.tmit.agile.logfilereader.model.Message) (event)).getDestination())) + "\" : ") + (event.getId())) + (((hu.bme.tmit.agile.logfilereader.model.Message) (event)).getName())) + "\n"; <FIXE>
<FIXS> <FIXE>
<FIXS> if ((eventLoopGroup) != null) { eventLoopGroup.shutdownGracefully(); } <FIXE> <FIXS> <FIXE>
<FIXS> i++; <FIXE>
<FIXS> if ((_dashboard_PageBook) == null) { return ; } <FIXE>
<FIXS> org.elasticsearch.common.settings.Settings settings = org.elasticsearch.common.settings.Settings.settingsBuilder().put("number_of_replicas", 5).build(); <FIXE>
<FIXS> int offset = ((pageNo - 1) * pageSize) + 1; <FIXE>
<FIXS> listener.onDeleteClick(item.getName(), item.getId()); <FIXE>
<FIXS> <FIXE> <FIXS> this.refreshView(controllers.CRMController.emptyErrors); <FIXE>
<FIXS> configuration.setCloudSdkPath(com.google.cloud.tools.intellij.appengine.sdk.CloudSdkService.getInstance().getSdkHomePath().toString()); <FIXE>
<FIXS> if ((str != null) && ((pattern.matcher(str)) != null)) <FIXE>
<FIXS> if (!(isDeviceOnline())) { android.util.Log.i(kelvinycchan.a12googlesheetcheck_insystem.CheckInActivity.TAG, "No network connection available."); android.widget.Toast.makeText(this, "No network connection available.", Toast.LENGTH_LONG).show(); }else { new kelvinycchan.a12googlesheetcheck_insystem.CheckInActivity.MakeRequestTask(credential).execute(); } <FIXE>
<FIXS> if (viewDragHelper.smoothSlideViewTo(dragView, (-(transformer.getOriginalWidth())), ((getHeight()) - (transformer.getMinHeightPlusMargin())))) { <FIXE>
<FIXS> <FIXE>
<FIXS> if (((pieces[i][j]) != (goalValueAt(i, j))) && ((pieces[i][j]) != 0)) { <FIXE>
<FIXS> int randomPos = ((int) ((java.lang.Math.random()) * (topCard))); <FIXE>
<FIXS> for (int coluna = 0; coluna < (matriz[0].length); coluna++) { <FIXE>
<FIXS> static java.lang.Object getEnumValue(final java.lang.Class<?> enumType, final java.lang.String name) throws java.lang.ReflectiveOperationException { <FIXE>
<FIXS> if ((com.tanghe.garben.capitalbooze.OrderFragment.totalPrice) > 0.0) { com.tanghe.garben.capitalbooze.OrderFragment.mTotalPrice.setText(java.lang.String.format(java.util.Locale.getDefault(), "€%.2f", com.tanghe.garben.capitalbooze.OrderFragment.totalPrice)); }else { com.tanghe.garben.capitalbooze.OrderFragment.totalPrice = 0.0; com.tanghe.garben.capitalbooze.OrderFragment.mTotalPrice.setText(java.lang.String.format(java.util.Locale.getDefault(), "€%.2f", com.tanghe.garben.capitalbooze.OrderFragment.totalPrice)); } <FIXE>
<FIXS> gc.getPair(1, 2); <FIXE>
<FIXS> if ((!(fileName.endsWith(com.couchbase.lite.store.ForestDBViewStore.kViewIndexPathExtension))) || (fileName.startsWith("."))) <FIXE>
<FIXS> new se.kth.csc.iprog.dinnerplanner.android.view.course.CourseTopView(findViewById(R.id.this_is_course_top_view_id), model); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> byte b = value.byteAt(i); <FIXE>
<FIXS> <FIXE>
<FIXS> java.util.Date time = new java.util.Date(java.lang.Long.parseLong(value)); return time; <FIXE>
<FIXS> if (chapterNumber > (this.bibleChapterModels.size())) { <FIXE>
<FIXS> boolean result; result = updateEvac(dbCollection, params[1], params[0]); <FIXE>
<FIXS> center.aggiorna((-1)); <FIXE>
<FIXS> protected static org.python.core.PyBuffer getViewOrError(org.python.core.PyObject b, java.lang.String fmt) { <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> nl.jqno.equalsverifier.internal.ConditionalInstantiator range = new nl.jqno.equalsverifier.internal.ConditionalInstantiator(((nl.jqno.equalsverifier.JavaApiPrefabValues.GUAVA_PACKAGE) + "Range"), false); <FIXE>
<FIXS> while (((this.index) < (this.menuSize)) && ((menu.get(tempIndex).price) >= (this.price))) { <FIXE>
<FIXS> <FIXE> <FIXS> win.successlvchao.android.moneypocket.MainActivity.checkedIndexList.clear(); win.successlvchao.android.moneypocket.MainActivity.checkBoxList.clear(); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> return requester.request(newRequest(PacketType.WRITE).putUInt64(fileOffset).putUInt32(len).putRawBytes(data, off, len)); <FIXE>
<FIXS> listener.onOpenReply(message.id, message.status, message.text); <FIXE>
<FIXS> <FIXE>
<FIXS> private java.util.ArrayList<java.lang.Integer> list_numbers_equal_values_col2(org.json.JSONArray ja_equal_words_v, java.lang.String v) { <FIXE>
<FIXS> }else { java.lang.System.exit(0); <FIXE>
<FIXS> <FIXE> <FIXS> final java.lang.String translationFileName = (fullBundleName + '_') + languageCode; <FIXE>
<FIXS> if ((root.value.compareTo(value)) >= 0) { <FIXE>
<FIXS> org.deviceconnect.android.event.EventError error = EventManager.INSTANCE.addEvent(request); if (error == (org.deviceconnect.android.event.EventError.NONE)) { setResult(response, DConnectMessage.RESULT_OK); <FIXE> <FIXS> org.deviceconnect.android.message.MessageUtils.setUnknownError(response); <FIXE>
<FIXS> if (((mMovie.getTagline()) != null) && ((mMovie.getTagline().length()) != 0)) { <FIXE>
<FIXS> if ((mCurrentPage) < (mNumberPages)) { <FIXE>
<FIXS> bottomNavigationBar.show(); <FIXE>
<FIXS> cf.addBlock(currentLoop); <FIXE>
<FIXS> if ((v.Variable()) != null) return domain.table.get(v.Variable().getText()); return new edu.utsa.fileflow.client.fileflow.VariableAutomaton(v.String().getText()); <FIXE>
<FIXS> private se.fredsfursten.donationboardplugin.PlayerInfo getOrAddPlayerInfo(org.bukkit.entity.Player player) { se.fredsfursten.donationboardplugin.PlayerInfo playerInfo = this._knownPlayers.get(player); if (playerInfo == null) { playerInfo = new se.fredsfursten.donationboardplugin.PlayerInfo(player); this._knownPlayers.put(player, playerInfo); int toLevel = this._model.getDonationLevel(0); playerInfo.demoteOrPromote(toLevel); } return playerInfo; <FIXE>
<FIXS> integrator.setBeepEnabled(true); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> private java.util.Vector calculateMeanPoint(java.util.List<? extends data.Data> dataSet) { <FIXE> <FIXS> return new java.util.Vector(meanPoint); <FIXE>
<FIXS> if (t == null) { return null; } <FIXE>
<FIXS> sender.sendMessage(((((((((((((ChatColor.GOLD) + "") + (ChatColor.MAGIC)) + "aaaaa") + (ChatColor.RED)) + player) + (ChatColor.GOLD)) + "is online!") + (ChatColor.MAGIC)) + "aaaaa") + (ChatColor.GOLD)) + "\nRejoice!")); <FIXE>
<FIXS> if (dims == null) return ; <FIXE>
<FIXS> com.greenfox.jasper.services.MainEvent levelUpEvent = new com.greenfox.jasper.services.LevelUpEvent(((java.lang.System.currentTimeMillis()) + (calculateBuildingTime(temporaryBuilding))), buildingID); <FIXE>
<FIXS> android.graphics.Bitmap ThumbImage = android.media.ThumbnailUtils.extractThumbnail(android.graphics.BitmapFactory.decodeFile(imageIDs.get(position)), 200, 200); <FIXE> <FIXS> <FIXE>
<FIXS> info(("added statsprovider of type " + type)); <FIXE>
<FIXS> if ((_primary) == null) { return null; } <FIXE>
<FIXS> java.lang.String value = steps.get(term); java.lang.String lineToAdd = ((((("\"" + term) + "\"") + ": ") + value) + ",") + "\n"; <FIXE>
<FIXS> public void onAttach(android.content.Context context) { super.onAttach(context); <FIXE> <FIXS> this.listener = ((com.urbanairship.richpush.sample.inbox.AbstractInboxFragment.Listener) (context)); <FIXE>
<FIXS> android.util.Log.i(ch.logixisland.anuto.game.GameEngine.TAG, "Starting game loop"); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> monthOfYear = monthOfYear + 1; dates = ((((java.lang.Integer.toString(dayOfMonth)) + "/") + (java.lang.Integer.toString(monthOfYear))) + "/") + (java.lang.Integer.toString(year)); <FIXE>
<FIXS> <FIXE>
<FIXS> java.lang.String name) { <FIXE> <FIXS> <FIXE>
<FIXS> static java.util.Optional<edu.cwru.eecs.clipper.Models.UserAccount> convertToUserAccount(org.bson.Document result) { <FIXE> <FIXS> if ((result != null) && (!(result.getBoolean("isDeleted", false)))) { <FIXE>
<FIXS> if (bnPos == null) { return null; }else { return bnPos.toString(); } <FIXE>
<FIXS> this.networkDoc.field(NdexClasses.ndexProperties, properties).save(); <FIXE>
<FIXS> <FIXE>
<FIXS> return scheduleOfRateService.getScheduleOfRatesByCodeAndScheduleOfCategories(query, scheduleCategoryId.toString(), estimateDate); <FIXE> <FIXS> return scheduleOfRateService.getScheduleOfRatesByCodeAndScheduleOfCategories(query, scheduleCategoryId.toString(), estimateDate); <FIXE> <FIXS> return scheduleOfRateService.getScheduleOfRatesByCodeAndScheduleOfCategories(query, scheduleCategoryId.toString(), estimateDate); <FIXE>
<FIXS> <FIXE>
<FIXS> filterAndRefresh(radioGroupLevelSelection); <FIXE>
<FIXS> if (((((avgTemp) == avgT) && ((devTemp) == devT)) && ((minTemp) == minT)) && ((maxTemp) == maxT)) { return true; } <FIXE>
<FIXS> if (boardAsString.equals(com.rijul.game.app.player.impl.Bot.INITIAL_BOARD)) { int ind = random.nextInt(com.rijul.game.app.player.impl.Bot.INITIAL_MOVES.length); return com.rijul.game.app.player.impl.Bot.INITIAL_MOVES[ind]; <FIXE> <FIXS> getOptimalResultForBoardPosition(board, 1); <FIXE>
<FIXS> float bonus = 0; <FIXE>
<FIXS> <FIXE>
<FIXS> encounters.add(encounterGenerator.nextEncounter(currentDate)); <FIXE>
<FIXS> } finally { execute("select * from sys.jobs"); assertEquals(response.rowCount(), 1L); execute("reset global stats.enabled"); <FIXE> <FIXS> <FIXE>
<FIXS> if ((mediaSession) == null) { return ; } <FIXE>
<FIXS> return ; <FIXE>
<FIXS> if ((mData[i]) instanceof ds.framework.v4.data.AbsRecyclerViewData) { invalidateData(i); <FIXE> <FIXS> <FIXE>
<FIXS> api.start(); <FIXE>
<FIXS> boolean createTask = addJournalVolume || (rpNonVplexSourceVolume && notAlreadyInTaskList); <FIXE>
<FIXS> if ((modelSet) != null) { modelSet.changeColour(model, model.currentState); lastChange = CurrentDate; } <FIXE>
<FIXS> switch (keyCode) { case android.view.KeyEvent.KEYCODE_ENTER : rightGuess(); return true; default : break; <FIXE>
<FIXS> cursor = com.example.adao1.project2.DatabaseHelper.getInstance(this).getShop(query); <FIXE>
<FIXS> b.append(cloudLevel).append("\n"); <FIXE>
<FIXS> if (forceLookup || ((hpuxVersion) == null)) { <FIXE>
<FIXS> textView2.setText(java.lang.String.valueOf(tempNum)); <FIXE>
<FIXS> org.springframework.web.servlet.ModelAndView actual = portal.result(session, "", "", "", ""); <FIXE>
<FIXS> setMilliseconds((((drawSurfaceWidth / ((float) (getAudioService().getSampleRate()))) * 1000) / 2)); <FIXE>
<FIXS> private boolean refreshUser() { <FIXE> <FIXS> return true; <FIXE> <FIXS> return false; <FIXE>
<FIXS> subgroupsQuantityLayout.setError(getString(R.string.nwinners_msg_validate_quantity, getMaximumQuantity())); <FIXE>
<FIXS> mSocket.setSoTimeout(0); <FIXE>
<FIXS> lu.requestLocation(); <FIXE> <FIXS> <FIXE>
<FIXS> return (keys.size()) > n ? keys.subList(0, n) : keys; <FIXE>
<FIXS> } catch (java.lang.ClassNotFoundException e) { return new java.lang.String(e.getMessage()); <FIXE>
<FIXS> return ((r >= 0) && (r < (array.length))) && ((c >= 0) && (c < (array[r].length))); <FIXE>
<FIXS> int newLength = net.decix.jipfix.header.SetHeader.HEADERLENGTH; <FIXE> <FIXS> newLength += record.getLength(); <FIXE> <FIXS> this.length = newLength; <FIXE>
<FIXS> private static java.lang.String loadECoreFile(final java.lang.String name) throws java.lang.Exception { assertTrue(new java.io.File(name).exists()); <FIXE> <FIXS> cruise.umple.compiler.UmpleImportModel umple = handler.readDataFromXML(name); <FIXE>
<FIXS> for (int i = 0; i < (jArray.length()); i++) { <FIXE>
<FIXS> <FIXE>
<FIXS> updateTracking(); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> startTerminal(nextTerminalSequence(), null, caption, null, true, ConsoleProcessInfo.DEFAULT_COLS, ConsoleProcessInfo.DEFAULT_ROWS, TerminalShellInfo.SHELL_DEFAULT, false, null); <FIXE>
<FIXS> skrivFil1 = new java.io.FileWriter(selectedCollection); <FIXE>
<FIXS> round = org.powertac.tournament.beans.Round.getRoundFromId(roundId, false); <FIXE>
<FIXS> private static boolean isEnabled(java.lang.String pkgName) { <FIXE> <FIXS> <FIXE>
<FIXS> return false; <FIXE>
<FIXS> <FIXE>
<FIXS> boolean needToReconcile = needToReconcile(services, units); <FIXE> <FIXS> activateDeploymentUnits(services, units); <FIXE>
<FIXS> super.onTick(gameMode); <FIXE>
<FIXS> break; <FIXE>
<FIXS> <FIXE>
<FIXS> for (int i = 2; i >= 0; i--) { <FIXE>
<FIXS> char letter; <FIXE> <FIXS> for (a = MIN; a <= MAX; a++) { <FIXE> <FIXS> java.lang.System.out.print((" " + letter)); if ((a == STOPLINE1) || (a == STOPLINE2)) java.lang.System.out.println(); } <FIXE>
<FIXS> mCharBoxes[i][j].setToolTypeAction(SpenSurfaceView.TOOL_SPEN, toolAction); <FIXE>
<FIXS> for (ru.sukharev.pathtracker.utils.orm.MapPath path : map.keySet()) { if (map.get(path)) { deletePathFromDatabase(path); mAdapter.remove(path); <FIXE> <FIXS> <FIXE>
<FIXS> if ((AutoNumber) != 1) { AutoNumber = 1; } <FIXE>
<FIXS> <FIXE> <FIXS> int length; <FIXE>
<FIXS> <FIXE> <FIXS> queryString += secret.body; queryString += "', '"; <FIXE> <FIXS> <FIXE>
<FIXS> return new org.tiogasolutions.couchace.core.api.request.PutDesignRequest(requestExecutor, designName, designBody, documentRevision); <FIXE>
<FIXS> view = new android.view.View(context); <FIXE> <FIXS> android.view.inputmethod.InputMethodManager imm = ((android.view.inputmethod.InputMethodManager) (context.getSystemService(Activity.INPUT_METHOD_SERVICE))); <FIXE>
<FIXS> boolean configChanged = ((propsHashCode) != null) && ((this.propsHashCode) != currentConfigHash); <FIXE>
<FIXS> return new org.osbot.rs07.api.map.Area[]{ org.osbot.rs07.api.map.constants.Banks.AL_KHARID , org.osbot.rs07.api.map.constants.Banks.ARDOUGNE_NORTH , org.osbot.rs07.api.map.constants.Banks.ARDOUGNE_SOUTH , org.osbot.rs07.api.map.constants.Banks.CAMELOT , org.osbot.rs07.api.map.constants.Banks.CANIFIS , org.osbot.rs07.api.map.constants.Banks.CASTLE_WARS , org.osbot.rs07.api.map.constants.Banks.CATHERBY , org.osbot.rs07.api.map.constants.Banks.DRAYNOR , org.osbot.rs07.api.map.constants.Banks.DUEL_ARENA , org.osbot.rs07.api.map.constants.Banks.EDGEVILLE , org.osbot.rs07.api.map.constants.Banks.FALADOR_EAST , org.osbot.rs07.api.map.constants.Banks.FALADOR_WEST , org.osbot.rs07.api.map.constants.Banks.GNOME_STRONGHOLD , org.osbot.rs07.api.map.constants.Banks.LUMBRIDGE_UPPER , org.osbot.rs07.api.map.constants.Banks.PEST_CONTROL , org.osbot.rs07.api.map.constants.Banks.TZHAAR , org.osbot.rs07.api.map.constants.Banks.VARROCK_EAST , org.osbot.rs07.api.map.constants.Banks.VARROCK_WEST , org.osbot.rs07.api.map.constants.Banks.YANILLE }; <FIXE>
<FIXS> <FIXE>
<FIXS> V value; do { value = lock.get(stamp); if ((expected != value) && ((value == null) || (!(expected.equals(value))))) { return false; } } while (lock.compareAndSet(value, value, stamp[0], ((stamp[0]) + 2)) ); return true; <FIXE>
<FIXS> public static void showErroDialog(android.content.Context c) { android.app.AlertDialog.Builder alert = new android.app.AlertDialog.Builder(c); <FIXE>
<FIXS> return new java.lang.String[]{ "custom" , "name" , "type" , "color" , "oracle" , "mana" , "cmc" , "power" , "toughness" , "loyalty" , "is" , "rarity" , "cube" , "artist" , "flavor" , "watermark" , "border" , "frame" , "set" }; <FIXE>
<FIXS> streamer.addStreamListener(this); <FIXE>
<FIXS> top = -((int) (java.lang.Math.round((((roundY2) - (roundY1)) / 2.0)))); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> if (((android.support.v4.app.ActivityCompat.checkSelfPermission(view.getContext(), Manifest.permission.ACCESS_FINE_LOCATION)) != (android.content.pm.PackageManager.PERMISSION_GRANTED)) && ((android.support.v4.app.ActivityCompat.checkSelfPermission(view.getContext(), Manifest.permission.ACCESS_COARSE_LOCATION)) != (android.content.pm.PackageManager.PERMISSION_GRANTED))) { <FIXE>
<FIXS> <FIXE>
<FIXS> return url.replaceAll("www.", ""); <FIXE> <FIXS> return domain.replaceAll("www.", ""); <FIXE>
<FIXS> developerController.save(new com.homelearning.model.Developer(id, readFirstNameFromInput(), readLastNameFromInput(), readSpecialtyFromInput(), readExperienceFromInput(), readSalaryFromInput())); <FIXE>
<FIXS> if ((mProfile) == null) return ; <FIXE>
<FIXS> if ((scanIndex >= 0) && (scanIndex < (ionMeasurements.size()))) { <FIXE>
<FIXS> <FIXE>
<FIXS> if (filename.isEmpty()) { return java.util.Optional.of(directory); <FIXE>
<FIXS> hash = (53 * hash) + (this.topLeft.hashCode()); hash = (53 * hash) + (this.bottomRight.hashCode()); <FIXE>
<FIXS> public void clear() { <FIXE>
<FIXS> NextTestItemL = CurrentTestItem + 1; <FIXE> <FIXS> not_end_test_all = NextTestItemL != (end_test_item); <FIXE> <FIXS> NeedTest = fec_test_items_order[NextTestItemL].test; if (NeedTest) { break; }else { NextTestItemL++; } <FIXE>
<FIXS> protected boolean setCurrentNetworkView(final org.cytoscape.view.model.CyNetworkView newView) { <FIXE> <FIXS> return false; <FIXE> <FIXS> return true; <FIXE>
<FIXS> if (!(((itemProperty().getValue()) == null) && ((beanProperty().getValue()) == null))) { <FIXE>
<FIXS> return ((int) (((key.get()) - (hbase.query1.HBaseRowKeyPartitioner.firstArticleId)) / intervalLength)); <FIXE>
<FIXS> <FIXE>
<FIXS> return ((this.getDireccionesAlternativas()) != null) && ((this.getDireccionesAlternativas().size()) > 0) ? this.getDireccionesAlternativas().get(0) : null; <FIXE>
<FIXS> if ((request == null) || ((request.table()) == (AddTableRequest.Table.DEFAULT))) return "error"; java.lang.Integer result = new cn.edu.fudan.dao.AddTableDAO(this, request).getResult(); return (result != null) && (result > 0) ? "success" : "fail"; <FIXE>
<FIXS> for (int p2 = 0; p2 < (players.size()); p2++) { <FIXE>
<FIXS> if ((android.text.TextUtils.isEmpty(uri.getScheme())) || (android.text.TextUtils.isEmpty(uri.getHost()))) { <FIXE>
<FIXS> this.data[i] = new edu.uc.rphash.tests.clusterers.KMeans2.PointND(data.get(i), 1, 0.0F); <FIXE>
<FIXS> <FIXE> <FIXS> org.fogbowcloud.blowout.core.model.Task task = chooseTaskForRunning(resource, tasks); <FIXE>
<FIXS> private static com.emergentorganization.cellrpg.tools.map.MapObject parseItem(org.w3c.dom.Node item) { <FIXE> <FIXS> com.badlogic.gdx.math.Vector2 offset = new com.badlogic.gdx.math.Vector2(); <FIXE>
<FIXS> try (java.io.BufferedWriter bw = new java.io.BufferedWriter(new java.io.FileWriter(gameFile, true))) { <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> org.springframework.amqp.core.Message message = new org.springframework.amqp.core.Message(config.getBytes("UTF-8"), properties); <FIXE>
<FIXS> public java.lang.Object invoke(java.lang.Object args) throws java.lang.Exception { <FIXE>
<FIXS> java.lang.System.out.println(com.leofesk.quicktodomanager.controller.DataBaseWorker.note.getStatus()); <FIXE>
<FIXS> <FIXE>
<FIXS> private android.graphics.Bitmap setBitmapSize(int iconId, int w) { <FIXE>
<FIXS> <FIXE>
<FIXS> for (final boolean checkedItem : checkedItems) { <FIXE> <FIXS> this.templateModel.addExcludeCol(i); <FIXE> <FIXS> i++; } <FIXE>
<FIXS> if (!(simple.util.logging.Log.isSet(options, type))) <FIXE>
<FIXS> public static void find(java.lang.String arg, java.util.List<java.lang.String> list) { <FIXE>
<FIXS> } kindCounter = 0; if (((findSameRank(((PJ5.SimplePoker.numberOfCards) - 1))) < 0) && ((kindCounter) == 3)) { java.lang.System.out.println("Three of a kind!"); kindCounter = 0; return true; } kindCounter = 0; <FIXE>
<FIXS> java.lang.String result; <FIXE>
<FIXS> if ((curr.getOwner()) != null) if (curr.getOwner().toString().equals(player)) { propertyList.add(curr.toString()); } <FIXE>
<FIXS> <FIXE> <FIXS> return false; default : <FIXE> <FIXS> <FIXE>
<FIXS> if (((getPrev()) != null) && ((getPrev()) != 0)) { <FIXE>
<FIXS> setColorFilter(a.getColorStateList(R.styleable.SVGView_carbon_filterColor)); <FIXE>
<FIXS> for (int i = 0; i < (business.getOpeningDays().size()); i++) { if (business.getOpeningDays().get(i).equals(currentTime.getDayOfWeek())) { <FIXE>
<FIXS> public void showWarningToUser(android.os.Message msg) { <FIXE>
<FIXS> doc.insertString(doc.getLength(), message, m_styles[style]); <FIXE>
<FIXS> if ((showRouteHandler) != null) { android.os.Message msg = showRouteHandler.obtainMessage(com.jstakun.gms.android.ui.AsyncTaskManager.SHOW_ROUTE_MESSAGE, filename); showRouteHandler.handleMessage(msg); } <FIXE>
<FIXS> <FIXE> <FIXS> refreshPriorities(); <FIXE>
<FIXS> return -1; <FIXE> <FIXS> return 1; <FIXE>
<FIXS> edu.berkeley.cs.StatementResult result = tx.run(deleteLinkStmt, edu.berkeley.cs.LinkStoreNeo4j.linkParams(id1, link_type, id2)); <FIXE>
<FIXS> <FIXE>
<FIXS> this.databaseEngine.search("abc"); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> com.squareup.picasso.Picasso.with(context).load(moviePoster).resize(600, 900).into(poster); <FIXE>
<FIXS> <FIXE> <FIXS> ++(com.Hook.common.RecordKeyboard.pressCount); <FIXE>
<FIXS> <FIXE> <FIXS> emitter.onNext(socket); <FIXE>
<FIXS> <FIXE> <FIXS> for (javax.resource.spi.ConnectionEventListener listener : _Listeners) listener.connectionClosed(event); <FIXE>
<FIXS> @java.lang.Override public java.lang.String toString() { <FIXE>
<FIXS> <FIXE> <FIXS> setSessionID(); <FIXE>
<FIXS> <FIXE>
<FIXS> if (((totalItemCount - 1) == lastVisisbleItemPosition) && (initialItemCount > 0)) { mInfiniteScrollListener.loadMoreData(); } <FIXE>
<FIXS> productSetPanel = new org.esa.snap.graphbuilder.rcp.dialogs.ProductSetPanel(org.esa.snap.rcp.SnapApp.getDefault().getAppContext(), null, new org.esa.snap.graphbuilder.rcp.dialogs.support.FileTable(), true, true); <FIXE>
<FIXS> out.writeInt(seed.getId()); <FIXE> <FIXS> out.writeInt(columnIdList.size()); <FIXE> <FIXS> out.writeInt(columnId); <FIXE>
<FIXS> private boolean initConnection() { <FIXE> <FIXS> return true; <FIXE> <FIXS> return false; <FIXE>
<FIXS> if (((person.getFamily()) != null) && (!(java.util.Objects.equals(person.getFamily().getId(), loadedFamily.getId())))) { throw new com.github.visola.familymenu.controller.exception.NotAuthorizedException("You don't have permission to add a person to that family."); <FIXE>
<FIXS> super.init(); <FIXE>
<FIXS> registrar.registerNBTProvider(dataProvider, blusunrize.immersiveengineering.common.blocks.wooden.TileEntityWoodenBarrel.class); <FIXE>
<FIXS> int x; int y; <FIXE> <FIXS> x = e.getX(); y = e.getY(); <FIXE>
<FIXS> Hex word = new Hex(memory[i]); <FIXE>
<FIXS> if (sequenceIndexId >= 0) { <FIXE>
<FIXS> return ((((((("Bag{" + "id=") + (id)) + ", name='") + (name)) + '\'') + ", publicKey=") + (java.util.Arrays.toString(publicKey))) + '}'; <FIXE>
<FIXS> public void deleteFavorite(int favoriteID) { <FIXE> <FIXS> db.delete(com.madgusto.gamingreminder.db.DatabaseHelper.TABLE_FAVORITES, (((com.madgusto.gamingreminder.db.DatabaseHelper.COL_ID) + " = ") + favoriteID), null); <FIXE>
<FIXS> while (!(forwardReferences.isEmpty())) { <FIXE> <FIXS> }else { call.resolveForwardReference(func); <FIXE> <FIXS> <FIXE>
<FIXS> dialog.show(); com.pitchedapps.butler.iconrequest.IconRequest.get().send(new com.pitchedapps.butler.iconrequest.IconRequest.OnRequestReady() { @java.lang.Override public void doWhenReady() { dialog.dismiss(); <FIXE> <FIXS> }); <FIXE>
<FIXS> if (edge._1.v.equals(oneEnd)) <FIXE> <FIXS> if (edge._3.v.equals(oneEnd)) <FIXE>
<FIXS> <FIXE> <FIXS> if ((mCurrentCity) != null) { cityAdapter.setSelectArea(mCurrentCity.getId()); } <FIXE>
<FIXS> vnfrService.unregisterApplication(record.get(applicationId).getInternalAppId()); <FIXE>
<FIXS> questionPager.setCurrentItem((index >= 0 ? index : (questionAdapter.getCount()) - 1)); <FIXE>
<FIXS> }else { Show_DialogBox(position); } <FIXE>
<FIXS> locale = new java.util.Locale(lang); <FIXE>
<FIXS> <FIXE> <FIXS> befores.add(token); <FIXE> <FIXS> befores.add(token1); <FIXE>
<FIXS> private static java.lang.StringBuffer generateData(java.util.List<mx.cinvestav.gdl.iot.webpage.dto.MeasureDTO> measures, java.lang.String sensorName) { <FIXE> <FIXS> <FIXE>
<FIXS> return blob != null ? blob.getBinaryStream() : null; <FIXE>
<FIXS> m_checks.add(new core.restaurant.Check(waiter, customer, choice)); <FIXE>
<FIXS> <FIXE>
<FIXS> sum += 1.0F / n; <FIXE> <FIXS> <FIXE>
<FIXS> protected void addRequestTime(long requestTime, java.util.Map<java.lang.String, java.lang.Object> map) { if ((this.includeRequestTime) && (requestTime > 0)) { final long sec = java.util.concurrent.TimeUnit.MILLISECONDS.toSeconds(requestTime); final long ms = java.util.concurrent.TimeUnit.MILLISECONDS.toMillis((requestTime - (java.util.concurrent.TimeUnit.SECONDS.toMillis(sec)))); java.lang.String time = java.lang.String.format("%01d.%03d", sec, ms); if (time != null) { map.put(ch.qos.logback.contrib.json.access.JsonLayout.REQUESTTIME_ATTR_NAME, time); <FIXE>
<FIXS> while (((this.table[hashCode]) != null) && (hashCode != hashMarker)) { <FIXE>
<FIXS> if ((page.getContent()) != null) { org.verapdf.model.impl.pd.util.PDResourcesHandler resourcesHandler = org.verapdf.model.impl.pd.util.PDResourcesHandler.getInstance(page.getResources(), page.isInheritedResources()); org.verapdf.model.impl.pd.GFPDContentStream contentStream = new org.verapdf.model.impl.pd.GFPDContentStream(page.getContent(), resourcesHandler); this.containsTransparency |= contentStream.isContainsTransparency(); contentStreams.add(contentStream); } <FIXE>
<FIXS> java.util.Calendar calendar = java.util.Calendar.getInstance(); <FIXE>
<FIXS> web.setAcceptThirdPartyCookies(android.webkit.CookieManager.getInstance(), (((!(AppData.private_mode.get())) && (AppData.accept_cookie.get())) && (AppData.accept_third_cookie.get()))); <FIXE>
<FIXS> assertCookie("Cookies[0]", cookies[0], "SID", "31d4d96e407aad42", 0, null); <FIXE>
<FIXS> float newy = (getY()) + (v * ((getHeight()) - (h.getHeight()))); h.setPosition(h.getX(), newy); <FIXE>
<FIXS> public static int getDepth(java.lang.String line) { <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> getCell().setTile(com.mkemp.mariobros.Sprites.Coin.tileSet.getTile(BLANK_COIN)); com.mkemp.mariobros.Scenes.Hud.addScore(100); <FIXE>
<FIXS> <FIXE>
<FIXS> transferFunction.setMaxOrdinates(new java.awt.geom.Point2D.Float(dataManager.getGlobalMaxVolumeValue(), 1.0F)); <FIXE>
<FIXS> notifyObservers(allGames); <FIXE>
<FIXS> if (file == null) return null; <FIXE>
<FIXS> java.lang.System.out.print("("); <FIXE>
<FIXS> try (java.io.ObjectOutputStream integrityKeyOutputStream = new java.io.ObjectOutputStream(new java.io.FileOutputStream(integrityKeyFilename))) { <FIXE>
<FIXS> testDateCal.add(java.util.Calendar.SECOND, 1); <FIXE>
<FIXS> model.addAttribute("countries", com.jobmatch.models.JobPost.getCountries()); <FIXE>
<FIXS> assertEquals(7, thread.getPosts().getPage().intValue()); <FIXE>
<FIXS> logic.authentication.Authentication.setInstanceToNull(); <FIXE> <FIXS> <FIXE>
<FIXS> this.topic = topic; <FIXE> <FIXS> <FIXE>
<FIXS> return userInfoMessageReceiver.receiveList(ru.yakovburtsev.socialnetwork.webclient.controller.AbstractUserController.FIND_USERS_SELECTOR); <FIXE>
<FIXS> <FIXE>
<FIXS> if (!(keys.isEmpty())) { if (proxyEntities) { for (java.lang.Object key : keys) { add(session.proxy(childType, ((java.io.Serializable) (key)))); } }else { addAll(session.retrieveAll(childType, keys)); <FIXE> <FIXS> <FIXE>
<FIXS> Config.data.setJSONObject(group, grp); <FIXE>
<FIXS> return dist < (radius * radius); <FIXE>
<FIXS> if (((task.getProject()) != null) && ((task.getProject().getId()) != null)) { <FIXE>
<FIXS> <FIXE>
<FIXS> if (rc) { android.util.Log.d(com.ibm.watson.developer_cloud.android.speech_to_text.v1.audio.WebSocketUploader.TAG, "Connected"); this.sendSpeechHeader(); }else { <FIXE> <FIXS> <FIXE>
<FIXS> if ((time == null) || (workQueueHeadTime >= time)) { <FIXE>
<FIXS> return 1; <FIXE> <FIXS> return -1; <FIXE>
<FIXS> return postRepository.save(post); <FIXE>
<FIXS> if (java.util.Arrays.equals(element, array)) { return true; <FIXE> <FIXS> return false; <FIXE>
<FIXS> for (java.lang.String key : config.getKeys(true)) { <FIXE>
<FIXS> android.view.ViewGroup.LayoutParams layoutParams = (view != null) ? view.getLayoutParams() : null; if ((layoutParams != null) && (layoutParams instanceof android.view.ViewGroup.MarginLayoutParams)) { <FIXE>
<FIXS> <FIXE> <FIXS> put(org.apache.ignite.math.impls.vector.ConstantVector.class, null); <FIXE>
<FIXS> drawaString(g, ALLQ[choosedSub][CurrentNum[choosedSub]], 20, 32); <FIXE>
<FIXS> <FIXE>
<FIXS> if ((event != null) && ((event.size()) > 0)) { long sequence = ringBuffer.next(); try { com.dtstack.logstash.assembly.disruptor.MapEvent mapEvent = ringBuffer.get(sequence); <FIXE> <FIXS> } finally { ringBuffer.publish(sequence); } <FIXE>
<FIXS> java.lang.Iterable<siena.base.test.model.PersonUUID> people = pm.createQuery(siena.base.test.model.PersonUUID.class).filter("n>", 1).order("n").iter(1); <FIXE>
<FIXS> java.lang.System.out.println(trainingCancer.get(3).classValue()); <FIXE> <FIXS> <FIXE>
<FIXS> public void eliminationTournament() { <FIXE> <FIXS> generatePairings(0); <FIXE>
<FIXS> <FIXE>
<FIXS> boolean isvalid = false; <FIXE> <FIXS> <FIXE>
<FIXS> if ((dataChunks[index]) == null) { dataChunks[index] = chunkReader.convertToMeasureChunk(fileReader, blockId, rawData, offSet, length, index); } <FIXE>
<FIXS> if (t == null) { if (((this.currentOwner) == null) || (!(this.currentOwner.isAlive()))) return true; else return false; <FIXE> <FIXS> if (t.isAlive()) { if ((this.currentOwner) == t) return true; else return false; }else <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> gov.hhs.fha.nhinc.properties.PropertyAccessor propAccessor = createPropertyAccessor(); sIssuer = propAccessor.getProperty(gov.hhs.fha.nhinc.callback.opensaml.HOKSAMLAssertionBuilderTest.PROPERTY_FILE_NAME, gov.hhs.fha.nhinc.callback.opensaml.HOKSAMLAssertionBuilderTest.PROPERTY_NAME); org.junit.Assert.assertEquals(gov.hhs.fha.nhinc.callback.opensaml.HOKSAMLAssertionBuilderTest.PROPERTY_VALUE_STRING, sIssuer); <FIXE>
<FIXS> private java.util.List<java.lang.Integer> getNotCheckedList() { java.util.List<java.lang.Integer> result = new java.util.ArrayList<>(); <FIXE> <FIXS> if ((checkedEntry.getValue()) == false) { <FIXE> <FIXS> } <FIXE>
<FIXS> if ((meta == null) && (codec != (org.jcodec.common.Codec.H264))) { throw new java.lang.RuntimeException("VideoCodecMeta is required upfront for all codecs but H.264"); <FIXE> <FIXS> track.addVideoSampleEntry(meta); <FIXE>
<FIXS> <FIXE>
<FIXS> result = (prime * result) + ((kagName) == null ? 0 : kagName.toLowerCase().hashCode()); <FIXE>
<FIXS> java.util.Map sortedMap = new java.util.TreeMap(com.google.common.collect.Ordering.natural()); <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> return de.hsnr.inr.sir.query.ProximityQuery.create(name); <FIXE> <FIXS> return de.hsnr.inr.sir.query.PhraseQuery.create(name); <FIXE>
<FIXS> if ((goods.amount) < 0) { return null; <FIXE> <FIXS> temp.setSignal(goods.amount); return temp; <FIXE>
<FIXS> if (servicesPresent != null) { for (org.osgi.framework.ServiceReference<?> serviceReference : servicesPresent) { sl.serviceChanged(new org.osgi.framework.ServiceEvent(org.osgi.framework.ServiceEvent.REGISTERED, serviceReference)); } <FIXE>
<FIXS> if ((p.hasPermission("multispawn.noteleport")) || ((plugin.getSpawns(p)) == null)) { <FIXE>
<FIXS> assertEquals(qResult.size(), 2); assertEquals(indexUsages(db), (idxUsagesBefore + 2)); <FIXE>
<FIXS> if (filter.equals(text)) { <FIXE>
<FIXS> amidst.map.layers.EndCityLayer.ChunkProbability result = amidst.map.layers.EndCityLayer.ChunkProbability.None; <FIXE> <FIXS> result = amidst.map.layers.EndCityLayer.ChunkProbability.Likely; break; <FIXE> <FIXS> result = amidst.map.layers.EndCityLayer.ChunkProbability.Possible; <FIXE> <FIXS> return result; <FIXE>
<FIXS> public java.lang.Object invokeMethod(java.lang.reflect.Method method, java.lang.Object object, java.lang.Object... args) { <FIXE>
<FIXS> iter.next(); iter.remove(); <FIXE>
<FIXS> public static int getIndex(edu.cmu.tetrad.graph.Endpoint endpoint) { <FIXE>
<FIXS> public static void setTeam(java.lang.Integer team) { <FIXE>
<FIXS> if (((intent.getAction()) != null) && (intent.getAction().equals(Intent.ACTION_SEARCH))) { <FIXE>
<FIXS> menu.clear(); <FIXE> <FIXS> <FIXE>
<FIXS> public void NewCookie(javax.servlet.http.HttpServletResponse response) { <FIXE>
<FIXS> if ((((infiniteinvo.inventory.BigInventoryPlayer) (this.inventory)).getUnlockedSlots()) > (this.slotIndex)) { <FIXE>
<FIXS> eventBusInterface.reportStepIgnored(); <FIXE> <FIXS> eventBusInterface.reportStepFinished(); <FIXE> <FIXS> <FIXE>
<FIXS> return checkResultImplicit(expectedType, checkDefCall(result, expr), expr); <FIXE>
<FIXS> com.edp.myesper.engine.EsperEngine.logger.error("Something went wrong while trying to delete all queries.", e); <FIXE>
<FIXS> com.thoughtworks.go.server.cache.GoCache cache = mock(com.thoughtworks.go.server.cache.GoCache.class); <FIXE> <FIXS> verifyZeroInteractions(cache); <FIXE>
<FIXS> runnable.pitch = ionium.util.MathHelper.lerp(init, end, com.badlogic.gdx.math.MathUtils.clamp(((elapsed) / ((time) <= 0 ? 1 : 0)), 0.0F, 1.0F)); <FIXE>
<FIXS> resetButtons(); resetFields(i); resetBoard(i); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> try (org.neo4j.kernel.impl.transaction.command.IndexTransactionApplier applier = new org.neo4j.kernel.impl.transaction.command.IndexTransactionApplier(indexing, org.neo4j.kernel.impl.api.index.ValidatedIndexUpdates.NONE, singletonProvider(writer))) { <FIXE>
<FIXS> } while (!(input.controladorInput(num1, 1, 3)) ); <FIXE>
<FIXS> if (!((testFiles) == null)) { for (sk.fei.stuba.xpivarcim.db.entities.assignment.TestFile f : testFiles) if (!(f.isRunTest())) output.add(f); <FIXE> <FIXS> } <FIXE>
<FIXS> java.lang.Integer resultPerPage, @org.springframework.web.bind.annotation.RequestParam(defaultValue = "DESC") org.springframework.data.domain.Sort.Direction direction, @org.springframework.web.bind.annotation.RequestParam(defaultValue = "invoice.paidDate") <FIXE> <FIXS> return this.invoiceDetailService.findByProductAndInvoiceStatus(this.productService.findOne(productId), new com.cspinformatique.kubik.model.sales.InvoiceStatus(InvoiceStatus.Types.PAID.name(), null), new org.springframework.data.domain.PageRequest(page, resultPerPage, direction, sortBy)); <FIXE>
<FIXS> <FIXE>
<FIXS> private static java.util.List<Tile> createGameBoard(final Board.Builder builder) { final Tile[] tiles = new Tile[BoardUtils.NUM_TILES]; for (int i = 0; i < (BoardUtils.NUM_TILES); i++) { tiles[i] = Tile.createTile(i, builder.boardConfig.get(i)); <FIXE> <FIXS> return java.util.Arrays.asList(tiles); <FIXE>
<FIXS> private synchronized double semestrialCorrection(final double param) { <FIXE>
<FIXS> outStream.writeObject(objeto); <FIXE>
<FIXS> <FIXE>
<FIXS> onInstantiate(index, name); <FIXE> <FIXS> <FIXE>
<FIXS> dest.writeString(this.id); <FIXE>
<FIXS> calculateReward(); copyCurrentSVIntoPrevSV(); generateCurrentStateVector(); getQfromNet(); qFunction(); resetReward(); doAction(); setTurnGunRight(robocode.util.Utils.normalRelativeAngleDegrees(enemyBearingFromGun)); <FIXE>
<FIXS> if (x < 1024) { <FIXE>
<FIXS> userData.put(UserDataFields.NEWBIE_TIMELEFT, ((newbieTask) != null ? newbieTask.getTimeleft() : 0)); <FIXE>
<FIXS> return new org.apache.jackrabbit.core.security.authorization.AbstractCompiledPermissions.Result(cAllows, cDenies, cAPrivs, cdPrivs); <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> notNullVariables.set(0); <FIXE> <FIXS> <FIXE>
<FIXS> return ; <FIXE>
<FIXS> for (int i = 0; i < (this.cards.size()); i++) { <FIXE>
<FIXS> if ((timer) != null) timer.stop(); <FIXE>
<FIXS> history.Tools.execute(null, ("d:\\cygwin\\bin\\chmod +w " + (prop.fdes.canonName))); <FIXE>
<FIXS> org.junit.Assert.assertTrue(testBookings.getLastBooking().hasEndtime()); <FIXE>
<FIXS> if (v == (prev + 1)) { <FIXE>
<FIXS> if (extra == null) continue; <FIXE>
<FIXS> break; <FIXE>
<FIXS> if (grounded != null) { java.lang.System.out.println((("{" + (grounded.getArgumentNames())) + "}")); } <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> return false; <FIXE> <FIXS> return true; <FIXE>
<FIXS> public void testNotAvailable(final com.vessel.enums.VesselEnums.TestVariation testVariation) { callbackContext.success(testVariation.toString()); <FIXE> <FIXS> public void testLoaded(java.lang.String testName, final com.vessel.enums.VesselEnums.TestVariation testVariation) { <FIXE>
<FIXS> private static void writeNBTFound(net.minecraft.nbt.NBTTagCompound nbt, net.minecraft.util.math.BlockPos pos) { <FIXE>
<FIXS> result = resultRepository.save(result); <FIXE>
<FIXS> <FIXE>
<FIXS> public void updateDefStats(boolean pic, boolean tackle, boolean loss, boolean fumblerec, boolean forcedfum, boolean sack, boolean td) { <FIXE>
<FIXS> for (java.lang.String str : codes) { try { java.lang.String html = emotion.html((((com.nju.util.Constant.EMOTION_URL) + str) + "/index.htm")); emotion.parseDoc(emotion.document(html)); } catch (java.io.IOException e) { e.printStackTrace(); } <FIXE>
<FIXS> throw new java.lang.IllegalStateException(("Constant QNAME not accessible for type" + type), e); <FIXE> <FIXS> throw new java.lang.IllegalStateException((("Class " + type) + " does not have QName defined"), e); <FIXE>
<FIXS> ShowOffer(snapshot.child("OfferSponsor").getValue().toString(), snapshot.child("OfferPictureSponsor").getValue().toString(), snapshot.child("Offer").getValue().toString(), snapshot.child("OfferPicture").getValue().toString()); <FIXE>
<FIXS> groupid.add(email); <FIXE> <FIXS> <FIXE>
<FIXS> tab[i] = size - i; <FIXE>
<FIXS> if (val == null) return fallback; <FIXE>
<FIXS> public void invoke(java.util.List<java.lang.String> args) { final java.lang.String message = args.get(0); args.remove(0); <FIXE>
<FIXS> list.add(x); <FIXE>
<FIXS> <FIXE>
<FIXS> @org.gbif.occurrence.persistence.Test <FIXE> <FIXS> assertEquals(((java.lang.Integer) (org.gbif.occurrence.persistence.OccurrencePersistenceServiceImplTest.KEY)), occ.getKey()); <FIXE> <FIXS> assertNull(test); <FIXE>
<FIXS> <FIXE>
<FIXS> enterClear(enterPressed); <FIXE> <FIXS> <FIXE>
<FIXS> this.minProtocolVersion = null; this.maxProtocolVersion = null; <FIXE>
<FIXS> return false; <FIXE>
<FIXS> final com.navercorp.pinpoint.profiler.DefaultDynamicTransformerRegistry.TransformerKey key = new com.navercorp.pinpoint.profiler.DefaultDynamicTransformerRegistry.TransformerKey(classLoader, targetClassName); final java.lang.instrument.ClassFileTransformer transformer = transformerMap.remove(key); <FIXE>
<FIXS> writer.close(); <FIXE> <FIXS> <FIXE>
<FIXS> assertThat(killResponse.rowCount(), is(0L)); <FIXE> <FIXS> assertThat(logResponse.rowCount(), is(0L)); <FIXE>
<FIXS> java.lang.System.err.println((("Tried to send an unregistered packet to Client " + (this)) + "!")); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> java.lang.Object next = getTransferPart(object, part, map); <FIXE>
<FIXS> btEnabled = resultCode == (RESULT_OK); <FIXE>
<FIXS> <FIXE> <FIXS> return conn; <FIXE>
<FIXS> if ((!(obj.equals(w))) && (controller.CollisionChecker.overlap(w, obj))) { return true; <FIXE>
<FIXS> mDownloadingCountry = mCurrentCountry; <FIXE>
<FIXS> java.lang.String systemName = null; <FIXE>
<FIXS> com.hubspot.dropwizard.guice.GuiceBundle<io.dropwizard.example.JobsApplicationConfiguration> guiceBundle = com.hubspot.dropwizard.guice.GuiceBundle.<io.dropwizard.example.JobsApplicationConfiguration>newBuilder().addModule(new io.dropwizard.example.JobsApplicationModule()).setConfigClass(io.dropwizard.example.JobsApplicationConfiguration.class).build(); <FIXE>
<FIXS> <FIXE>
<FIXS> for (int i = lastIndex; i >= index; i--) { myList[(i + 1)] = myList[i]; <FIXE>
<FIXS> int nextVal = 0; while (odometer.Odometer.isValid(digit, size)) { <FIXE>
<FIXS> edu.umass.cs.gnsclient.client.integrationtests.ServerIntegrationTest.failWithStackTrace(("Exception while reading fields in ACLNotReadOtherGuidFieldTest: " + e)); <FIXE>
<FIXS> g.drawRect(x, y, width, height); <FIXE>
<FIXS> processErrors(message.getChannelContext(), message.getErrorBuilder(), message.getError()); <FIXE>
<FIXS> headers.add("Definition URL"); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> expectedMessages.add(HubProxyInfoBuilder.ERROR_MSG_CREDENTIALS_INVALID); <FIXE>
<FIXS> recycle(write, true); <FIXE>
<FIXS> public int getFlag(int flag) { <FIXE>
<FIXS> link = matcher.group(1); if (((!(Suspectedlinks.contains(link))) && (!(CrawlerHandler.CheckIfUrlBeenCrawled(link)))) && (isValidDomain(link))) { <FIXE>
<FIXS> public javax.ws.rs.core.Response geAlltSuppress(@com.magnet.mmx.server.plugin.mmxmgmt.servlet.integration.QueryParam(value = "appId") java.lang.String appId) { <FIXE> <FIXS> public java.util.Collection<com.magnet.mmx.server.plugin.mmxmgmt.servlet.integration.PushConfigSuppressResource.PushConfigSuppressResponse> execute(java.lang.String appId) throws com.magnet.mmx.server.plugin.mmxmgmt.MMXException { <FIXE>
<FIXS> throw new java.lang.IllegalStateException(java.lang.String.format("Container Activity must implement %s", com.ksss.splintter.features.group.view.ExpenseManager.class.getSimpleName()), e); <FIXE>
<FIXS> mainWindow.removeWindow(id); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> java.nio.file.Path file = java.nio.file.Paths.get(link.get()); <FIXE> <FIXS> return org.jabref.model.util.FileHelper.expandFilenameAsPath(link.get(), directories); <FIXE>
<FIXS> if (phoneId == (-1)) { return ; } <FIXE>
<FIXS> <FIXE>
<FIXS> ctx.setTrafficBehavior((behavior == null ? org.opendaylight.yang.gen.v1.urn.opendaylight.faas.fabric.rev150930.FabricOptions.TrafficBehavior.Normal : behavior)); <FIXE>
<FIXS> protected long getNumberRecursion(long n) { <FIXE>
<FIXS> if ((em.find(models.UserImpl.class, username)) == null) { <FIXE> <FIXS> return null; <FIXE>
<FIXS> java.lang.String networkOperator = ((android.telephony.TelephonyManager) (c.getSystemService(Context.TELEPHONY_SERVICE))).getNetworkOperator(); <FIXE>
<FIXS> org.junit.Assert.assertEquals("There should be 1 finished task", 1, durInfo.getNumOfFinishedTasks()); <FIXE>
<FIXS> if (((Build.VERSION.SDK_INT) >= (Build.VERSION_CODES.LOLLIPOP)) && ((currentHeader.getTag()) != null)) { currentHeader.setTag(null); currentHeader.animate().z(0); <FIXE>
<FIXS> return false; <FIXE> <FIXS> return true; <FIXE>
<FIXS> if (((org.trakhound.www.trakhound.MyApplication.User) != null) && ((MyApplication.User.type) > 0)) <FIXE> <FIXS> if (((org.trakhound.www.trakhound.MyApplication.User) != null) && ((MyApplication.User.type) > 0)) <FIXE>
<FIXS> if (r != null) { results = r.select(" tr.productListing-odd"); resultsEven = r.select(" tr.productListing-even"); for (int j = 0; j < (resultsEven.size()); j++) { results.add(resultsEven.get(j)); } java.lang.System.out.println(((results.size()) + " Results have been returned from CanadaComputers.")); return results; }else { return null; <FIXE> <FIXS> <FIXE>
<FIXS> if ((npcm) != null) { for (net.techcable.npclib.NPC npc : npcm.getNPCs()) { java.util.UUID uuid = npcm.getNPCIdFromEntity(npc.getEntity()); despawnNPC(uuid, NpcDespawnReason.PLUGIN_DISABLED); if (isDebugEnabled()) { com.trc202.CombatTag.CombatTag.log.info(("[CombatTag] Disabling npc with ID of: " + uuid)); } <FIXE>
<FIXS> java.lang.String paths = args[0]; <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE> <FIXS> <FIXE> <FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> preferences = getSharedPreferences(com.yubico.yubioath.MainActivity.NEO_STORE, Context.MODE_PRIVATE); <FIXE>
<FIXS> s = new java.util.HashSet<Tile>(config_list.get(0)); <FIXE>
<FIXS> this.nodeStack.push(this.newNode(nodeStack.peek(), attributes)); <FIXE>
<FIXS> <FIXE>
<FIXS> charToIntMap.put('a', 0); charToIntMap.put('b', 1); charToIntMap.put('c', 2); charToIntMap.put('d', 3); charToIntMap.put('e', 4); charToIntMap.put('f', 5); charToIntMap.put('g', 6); charToIntMap.put('h', 7); <FIXE>
<FIXS> java.lang.System.out.println(this.currentUser.getUsername()); <FIXE>
<FIXS> i.putStringArrayListExtra("tuneNames", tuneNamesArray); <FIXE>
<FIXS> <FIXE>
<FIXS> if ((com.client.gui.interfaceControllers.LobbyController.serverAddress) != null) { <FIXE> <FIXS> }else { <FIXE> <FIXS> showAlert(javafx.scene.control.Alert.AlertType.ERROR, "Invalid IP address!", alertMessage); <FIXE>
<FIXS> java.lang.Integer bassTrack = ((javafx.scene.control.ComboBox<java.lang.Integer>) (event.getSource())).getValue(); <FIXE>
<FIXS> ib1.setEnabled(true); <FIXE>
<FIXS> for (java.util.Map.Entry<ch.entwine.weblounge.common.site.Site, org.osgi.framework.Bundle> entry : siteBundles.entrySet()) { if (bundle.equals(entry.getValue())) return entry.getKey(); <FIXE>
<FIXS> org.assertj.core.api.Assertions.assertThat(message).isEqualTo((((((("\n" + (com.isroot.stash.plugin.errors.YaccErrorBuilder.ERROR_BEARS)) + "\n\n") + "commit error\n") + "\n") + "another error\n") + "\n")); <FIXE>
<FIXS> if (secretKey == null) { return null; } <FIXE> <FIXS> return new com.xeiam.xchange.coinbaseex.service.CoinbaseExDigest(si.mazi.rescu.utils.Base64.decode(secretKey)); <FIXE> <FIXS> <FIXE>
<FIXS> int[] expEventSeq = new int[]{ org.jsonps.GeneralEx.TestListener.EVENT_STARTOBJ , org.jsonps.GeneralEx.TestListener.EVENT_NAME , org.jsonps.GeneralEx.TestListener.EVENT_VALUE , org.jsonps.GeneralEx.TestListener.EVENT_NAME , org.jsonps.GeneralEx.TestListener.EVENT_VALUE , org.jsonps.GeneralEx.TestListener.EVENT_NAME , org.jsonps.GeneralEx.TestListener.EVENT_VALUE , org.jsonps.GeneralEx.TestListener.EVENT_NAME , org.jsonps.GeneralEx.TestListener.EVENT_STARTARR , org.jsonps.GeneralEx.TestListener.EVENT_STARTOBJ , org.jsonps.GeneralEx.TestListener.EVENT_NAME , org.jsonps.GeneralEx.TestListener.EVENT_STARTARR , org.jsonps.GeneralEx.TestListener.EVENT_ENDARR , org.jsonps.GeneralEx.TestListener.EVENT_ENDOBJ , org.jsonps.GeneralEx.TestListener.EVENT_ENDARR , org.jsonps.GeneralEx.TestListener.EVENT_NAME , org.jsonps.GeneralEx.TestListener.EVENT_STARTOBJ , org.jsonps.GeneralEx.TestListener.EVENT_NAME , org.jsonps.GeneralEx.TestListener.EVENT_NUM , org.jsonps.GeneralEx.TestListener.EVENT_ENDOBJ , org.jsonps.GeneralEx.TestListener.EVENT_NAME , org.jsonps.GeneralEx.TestListener.EVENT_SEQ , org.jsonps.GeneralEx.TestListener.EVENT_NAME , org.jsonps.GeneralEx.TestListener.EVENT_SEQ , org.jsonps.GeneralEx.TestListener.EVENT_NAME , org.jsonps.GeneralEx.TestListener.EVENT_SEQ , org.jsonps.GeneralEx.TestListener.EVENT_ENDOBJ }; <FIXE>
<FIXS> if (((unit.values.get(0)) == 0) || (((maxValue) % (unit.values.get(0))) != 0)) { <FIXE>
<FIXS> if ((co.cask.cdap.internal.app.runtime.spark.SparkProgramWrapper.getSparkContext()) != null) { if (co.cask.cdap.internal.app.runtime.spark.SparkProgramWrapper.isScalaProgram()) { ((co.cask.cdap.api.spark.SparkContext) (co.cask.cdap.internal.app.runtime.spark.SparkProgramWrapper.getSparkContext().getOriginalSparkContext())).stop(); }else { ((co.cask.cdap.internal.app.runtime.spark.JavaSparkContext) (co.cask.cdap.internal.app.runtime.spark.SparkProgramWrapper.getSparkContext().getOriginalSparkContext())).stop(); } <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> workerGroup.shutdownGracefully(); <FIXE>
<FIXS> private int findHistoryRecord(java.lang.String placeId) { <FIXE>
<FIXS> if (((list.size()) == 0) && (pageNumber > 1)) { <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> java.lang.System.out.println(studentJdbcDAO.createStudent(st)); <FIXE>
<FIXS> <FIXE>
<FIXS> @java.lang.SuppressWarnings(value = "unchecked") <FIXE> <FIXS> if (s == ((n) - 1)) <FIXE> <FIXS> <FIXE> <FIXS> if ((rear) == (n)) <FIXE> <FIXS> <FIXE>
<FIXS> l = new Brain.TemporalLobe.Locked("LOCKED", c); <FIXE>
<FIXS> if ((compr > 0) && ((_right) != null)) <FIXE>
<FIXS> state.decacheView(position); <FIXE>
<FIXS> private void writeVariableCopy(wyil.lang.SyntaxTree.Location<wyil.lang.Bytecode.VariableAccess> loc) { <FIXE>
<FIXS> viewport = new com.badlogic.gdx.utils.viewport.FitViewport(com.platform.rider.utils.GameConstants.APP_WIDTH, com.platform.rider.utils.GameConstants.APP_HEIGHT, camera); <FIXE>
<FIXS> writeByte(byteBuffer.get(pos)); <FIXE>
<FIXS> <FIXE>
<FIXS> UI.Dialogs.QueueMonitorDialog dialog = new UI.Dialogs.QueueMonitorDialog(this, false, queueManager); <FIXE>
<FIXS> <FIXE>
<FIXS> android.view.View view = findViewById(R.id.device_detail_fragment_base_view); if (view != null) { view.setVisibility(View.GONE); } <FIXE>
<FIXS> (size)++; <FIXE>
<FIXS> public void onResume() { <FIXE>
<FIXS> } if ((itemIndex) == ((shareClipExperience.getChildrenContents().size()) - 1)) { nextBtnVisibility = android.view.View.INVISIBLE; } <FIXE>
<FIXS> textArea = ((javax.swing.JTextArea) (findElementInsideOrCreate(panel, javax.swing.JTextArea.class))); <FIXE>
<FIXS> <FIXE>
<FIXS> frame.GameFrame.puck.setPuckPos(((common.Paint.width) / 2), ((common.Paint.height) / 2)); <FIXE>
<FIXS> timber.log.Timber.e((((("Error mapping json to class '" + type) + "' with contents: '") + content) + "'")); <FIXE>
<FIXS> org.mockito.Mockito.doReturn(null).when(mBridge).nativeGetOfflineUrlByGuid(org.mockito.Mockito.anyLong(), org.mockito.Mockito.eq(item.getGuid())); <FIXE>
<FIXS> <FIXE>
<FIXS> public static int calculateInSampleSize(android.graphics.BitmapFactory.Options options, final int reqWidth, final int reqHeight) { <FIXE> <FIXS> while (((halfHeight / inSampleSize) > reqHeight) || ((halfWidth / inSampleSize) > reqWidth)) { <FIXE>
<FIXS> if (com.cards.flash.testez.EditCardFragment.hasTakenQuiz) { com.cards.flash.testez.EditCardFragment.hasTakenQuiz = false; <FIXE> <FIXS> } <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> samples.newmocking.MyClass myClassMock1 = mock(samples.newmocking.MyClass.class); whenNew(samples.newmocking.MyClass.class).withNoArguments().thenReturn(myClassMock1); <FIXE> <FIXS> verifyNew(samples.newmocking.MyClass.class).withNoArguments(); <FIXE>
<FIXS> <FIXE> <FIXS> java.lang.System.out.println("Make your move (1)Hit or (2)Stay "); <FIXE> <FIXS> <FIXE>
<FIXS> com.couchbase.lite.util.Log.d(Log.TAG_CHANGE_TRACKER, "%s: Change tracker calling changeTrackerStopped, client: %s", this, client); <FIXE> <FIXS> com.couchbase.lite.util.Log.d(Log.TAG_CHANGE_TRACKER, "%s: Change tracker not calling changeTrackerStopped, client == null", this); <FIXE>
<FIXS> nz_length = index; <FIXE> <FIXS> <FIXE>
<FIXS> this.name.getRegistrations().remove(this); } if ((name != null) && (!(name.equals(this.name)))) { name.getRegistrations().add(this); <FIXE> <FIXS> <FIXE>
<FIXS> eleScene.inSemaphore.get(1).acquire(); eleScene.outSemaphore.get(1).acquire(); eleScene.personExitsAtFloor(1); <FIXE>
<FIXS> printJets(); <FIXE>
<FIXS> <FIXE>
<FIXS> java.util.BitSet expected = new java.util.BitSet(bits.length); <FIXE>
<FIXS> java.lang.System.err.println(("Este es el mensaje" + (message))); <FIXE>
<FIXS> if (file == null) return null; <FIXE>
<FIXS> <FIXE>
<FIXS> double sum = 0; <FIXE> <FIXS> double a = ((Constants.G) * (other.mass)) * ((other.position[i]) - (position[i])); <FIXE> <FIXS> sum += deltaAccel[i]; <FIXE>
<FIXS> return java.lang.String.format((((indent + " if self.actingVersion_ < %1$d:\n") + indent) + " return %2$s\n\n"), sinceVersion, generateLiteral(encoding.primitiveType(), encoding.applicableNullValue().toString())); <FIXE>
<FIXS> boolean signed = true; <FIXE> <FIXS> signed = false; <FIXE>
<FIXS> double scale = java.lang.Math.max(java.lang.Math.abs(left), java.lang.Math.abs(right)); <FIXE>
<FIXS> com.lintech.yougo.Trip trip = new com.lintech.yougo.Trip("", "0", "0", "0", ""); <FIXE>
<FIXS> <FIXE>
<FIXS> if (!(initialized)) { <FIXE> <FIXS> if (!(initialized)) { if ((beanManager()) != null) { elResolver.setDelegate(beanManager().getELResolver()); } <FIXE>
<FIXS> return s1; <FIXE>
<FIXS> for (int i = state.nextSetBit(0); i != (-1); i = state.nextSetBit((i + 1))) { <FIXE>
<FIXS> ((com.project.locateme.mainViews.PlaceFragment) (mainViewsAdapter.getFragment(1))).updatePlaceListViewItems(); <FIXE>
<FIXS> java.lang.Class<?>[] methodParams = methodOfCurrentClass.getParameterTypes(); java.lang.Class<?> declaringClass = methodOfCurrentClass.getDeclaringClass(); <FIXE> <FIXS> return !(beanClass.getMethod(methodName, methodParams).getDeclaringClass().equals(declaringClass)); <FIXE>
<FIXS> int day) throws java.io.IOException, javax.servlet.ServletException { <FIXE>
<FIXS> <FIXE>
<FIXS> com.blazingkin.interpreter.executor.lambda.LambdaExpression le = com.blazingkin.interpreter.executor.lambda.LambdaParser.parseLambdaExpression(name.toUpperCase()); <FIXE> <FIXS> return com.blazingkin.interpreter.executor.lambda.LambdaRegistrar.runtimeDefinedLambdaExpressions.get(name.toUpperCase()).cloneWithArgs(args); <FIXE>
<FIXS> <FIXE>
<FIXS> double rotationPower = -(headingDrivePid.calculate(0, headingError)); driveSubsystem.tankDrivePowerMode((translationPower - rotationPower), (translationPower + rotationPower)); <FIXE>
<FIXS> result.add(getNameMessage()); <FIXE> <FIXS> result.add(getLocationMessage()); <FIXE>
<FIXS> public boolean verifyPermissions(int[] grantResults) { <FIXE>
<FIXS> java.lang.String NERclass = tokens.get(((ip.getSource()) - 1)).ner(); <FIXE>
<FIXS> throw rifServiceExceptionFactory.createNonExistentTaxonomyTerm(taxonomyServiceID, parentTermIdentifier); <FIXE>
<FIXS> this.board = board; <FIXE>
<FIXS> this.linkedHashSet.add(item); <FIXE>
<FIXS> org.zywx.wbpalmstar.plugin.uexLocalNotification.EAlarmReceiver.cancelAlerm(mContext, nId); <FIXE>
<FIXS> if ((!(this.getIsClosingOrClosed())) && (((sendLink.getLocalState()) == (org.apache.qpid.proton.engine.EndpointState.CLOSED)) || ((sendLink.getRemoteState()) == (org.apache.qpid.proton.engine.EndpointState.CLOSED)))) { <FIXE>
<FIXS> <FIXE>
<FIXS> respawnPlayerCorrectly(pp.getImprisonedPlayer(), pp, null); <FIXE>
<FIXS> if ("1".equals(result.getRc())) { if ("-1".equalsIgnoreCase(result.getRs())) { if (delegate != null) { delegate.completion(false); } }else { if (delegate != null) { delegate.completion(true); } <FIXE>
<FIXS> getData(); <FIXE>
<FIXS> reply = defaultValue; <FIXE>
<FIXS> synchronized(formatter) { return formatter.parse(input); } <FIXE>
<FIXS> rv.setHan(han); rv.setHu(hu); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> loginProgressBar.setVisibility(View.VISIBLE); <FIXE>
<FIXS> <FIXE>
<FIXS> if (recyclerView != null) { recyclerView.setAdapter(new com.movielist.aishwarytandon.movielist.MovieAdapter(movies, R.layout.list_item_movie, getApplicationContext())); } <FIXE>
<FIXS> video.start(); <FIXE>
<FIXS> java.lang.String msg = null; <FIXE> <FIXS> msg = ((java.lang.String) (objectInputStream.readObject())); <FIXE> <FIXS> return msg; <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> if ((data != null) && (data.getBooleanExtra("logout", false))) { <FIXE>
<FIXS> java.lang.System.arraycopy(value, 0, value, len, count); <FIXE>
<FIXS> <FIXE>
<FIXS> if ((getFixSpace().strategy().equals(IngredientSpaceStrategy.LOCAL)) || (getFixSpace().strategy().equals(IngredientSpaceStrategy.PACKAGE))) <FIXE> <FIXS> if (getFixSpace().strategy().equals(IngredientSpaceStrategy.GLOBAL)) <FIXE>
<FIXS> public java.lang.Double call(com.jt.commons.GenericRecord rec1, com.jt.commons.GenericRecord rec2) throws java.lang.Exception { <FIXE> <FIXS> return avg; <FIXE>
<FIXS> com.andela.bark.GKprManger gKprManger = new com.andela.bark.GKprManger(user, activity); <FIXE>
<FIXS> public void toHTMLTable(java.io.PrintWriter output) { <FIXE> <FIXS> output.print("<table>"); <FIXE> <FIXS> output.print(tmp.toHTMLTableRow()); <FIXE> <FIXS> output.print("</table>"); output.flush(); <FIXE>
<FIXS> <FIXE> <FIXS> org.test.framework.core.runtime.TestSuite suite = new org.test.framework.core.runtime.TestSuite(); <FIXE>
<FIXS> private void interpolateDockerfile(java.io.File dockerFile, io.fabric8.maven.docker.assembly.BuildDirs params, java.util.Properties properties, java.lang.String filter) throws java.io.IOException { java.io.File targetDockerfile = new java.io.File(params.getOutputDirectory(), dockerFile.getName()); <FIXE> <FIXS> <FIXE>
<FIXS> if (dbTeam.addDBPlayer(dbTeam.getName())) { <FIXE>
<FIXS> return org.lightadmin.core.config.domain.configuration.support.ExceptionAwareTransformer.exceptionAwareNameExtractor(nameExtractor, domainTypeBasicConfiguration).apply(value).toString(); <FIXE>
<FIXS> if (deck != null) if ((deck.getMap()) != null) for (java.util.Map.Entry<org.magic.api.beans.MagicCard, java.lang.Integer> cci : deck.getMap().entrySet()) { org.magic.api.beans.MagicCard mc = cci.getKey(); for (int i = 0; i < (cci.getValue()); i++) cards.add(mc); } <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> public static void assertEquals(java.lang.Object expected, java.lang.Object actual, java.lang.String message) { <FIXE> <FIXS> com.triangleleft.assertdialog.AssertDialog.assertTrue(condition, message); <FIXE>
<FIXS> static com.github.rinde.rinsim.ui.SimulationViewer create(org.eclipse.swt.widgets.Shell shell, final com.github.rinde.rinsim.core.Simulator sim, int pSpeedUp, boolean pAutoPlay, java.util.List<java.lang.Object> pRenderers, java.util.Map<com.github.rinde.rinsim.ui.MenuItems, java.lang.Integer> acc) { return new com.github.rinde.rinsim.ui.SimulationViewer(shell, sim, pSpeedUp, pAutoPlay, pRenderers, acc); <FIXE>
<FIXS> <FIXE>
<FIXS> public boolean canAdvance(java.lang.Integer[] counters, java.lang.Integer[] boundaries) { for (int cElem = 0; (cElem < (counters.length)) && (cElem < (boundaries.length)); ++cElem) { if (!(counters[cElem].equals(boundaries[cElem]))) <FIXE>
<FIXS> return null; <FIXE>
<FIXS> requestHTTP = new library.connect.VinhNT_HTTP(this); <FIXE>
<FIXS> gratitudeComplete += java.lang.Math.min(100, (((gratitude.length()) * 100) / (ai.victorl.toda.data.entry.Entry.MIN_ENTRY_LENGTH))); <FIXE>
<FIXS> newStatement = prepareBeforeClasses(extension, newStatement); <FIXE>
<FIXS> return new com.drewhannay.chesscrafter.models.PieceType("King", movements, null); <FIXE>
<FIXS> call.delete("posts/5", new com.coveros.selenified.services.Request(request)).assertEquals(201); <FIXE>
<FIXS> vendorAdapter.setShowSql(false); <FIXE>
<FIXS> ihtml.clear(); <FIXE> <FIXS> plainTextItem.clear(); plainTextItem.add(definitionPanel); <FIXE> <FIXS> <FIXE> <FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> parser.run(otherChord); <FIXE>
<FIXS> public void pingRequestShouldBeValid() throws java.lang.Exception { context.start(); <FIXE>
<FIXS> public codeu.chat.common.User newUser(codeu.chat.util.Uuid id, java.lang.String name, java.lang.String password, codeu.chat.common.Time creationTime) { <FIXE>
<FIXS> break; <FIXE> <FIXS> break; <FIXE>
<FIXS> <FIXE> <FIXS> android.widget.Toast.makeText(this, dialogText, duration).show(); <FIXE>
<FIXS> final de.dfki.vsm.editor.project.ProjectEditor editor = new de.dfki.vsm.editor.project.ProjectEditor(true); <FIXE>
<FIXS> <FIXE> <FIXS> m_lastSent = ((m_lastSent) + 1) % (m_modulo); m_actual = m_actual += 1; <FIXE>
<FIXS> com.himamis.retex.editor.share.model.MathArray array = new com.himamis.retex.editor.share.model.MathArray(meta, size); <FIXE> <FIXS> com.himamis.retex.editor.share.model.MathSequence field = new com.himamis.retex.editor.share.model.MathSequence(); <FIXE> <FIXS> array.setArgument(i, new com.himamis.retex.editor.share.model.MathSequence()); <FIXE>
<FIXS> assertEquals(true, c0.newRun()); <FIXE>
<FIXS> <FIXE>
<FIXS> description = ((common_name_count) + (text)) + (common_name); <FIXE>
<FIXS> <FIXE>
<FIXS> if ((chapter.getStartTimeOffset()) >= position) { <FIXE>
<FIXS> faceCentroid.add(edges.get(i).getOriginVertex()); <FIXE>
<FIXS> return !((java.lang.Double.parseDouble(this.minutes)) == ((double) (this.time.getValue()))); <FIXE>
<FIXS> replaced = provider.applyForBroadcast(onlineVoted, replaced, vote); <FIXE>
<FIXS> setValue(value); <FIXE>
<FIXS> java.util.List<controllers.DailyStat> dailyStats = controllers.DailyStat.all().from((statsCount - 5)).fetch(5); <FIXE>
<FIXS> <FIXE>
<FIXS> java.lang.System.out.println(m.toString()); <FIXE>
<FIXS> <FIXE> <FIXS> mRenderingState.inWaitingState = false; <FIXE>
<FIXS> if ((comparisonMatches != null) && ((comparisonMatches.size()) > 0)) { this.bestComparisonMatches.addAll(comparisonMatches); java.util.Collections.sort(bestComparisonMatches); lowestBestComparisonSimilarity = bestComparisonMatches.get(0).getSimilarity(); }else { lowestBestComparisonSimilarity = 0; } <FIXE>
<FIXS> org.json.JSONObject attr = new org.json.JSONObject(); session.sendTo(localStream, true, attr, token); <FIXE>
<FIXS> else if (other instanceof asteroids.model.Bullet) this.resolveCollision(((asteroids.model.Bullet) (other))); else if (other instanceof asteroids.model.MinorPlanet) this.resolveCollision(((asteroids.model.MinorPlanet) (other))); <FIXE>
<FIXS> public boolean checkForWinner() { <FIXE> <FIXS> return true; <FIXE> <FIXS> return false; <FIXE>
<FIXS> <FIXE> <FIXS> return io.demor.nuts.lib.eventbus.ListenerBus.addClz(clz).mProxy; <FIXE>
<FIXS> if ((role.getMultiplicityUpper()) != 1) { <FIXE>
<FIXS> int trueColor = color % (1 << (bitDepth)); <FIXE>
<FIXS> importer.importConcept(new org.openmrs.module.openconceptlab.CacheService(conceptService), update, oclConcept); <FIXE> <FIXS> importer.importConcept(new org.openmrs.module.openconceptlab.CacheService(conceptService), update, oclConcept); <FIXE>
<FIXS> this.biomes[((x - (this.start.getX())) + ((z - (this.start.getY())) * (this.size.getX())))] = ((net.minecraft.world.biome.BiomeGenBase) (biome)); <FIXE>
<FIXS> return splitNumericAndString(word); <FIXE>
<FIXS> private jxl.Sheet checkSheetName(jxl.Workbook workbook) throws java.io.IOException, jxl.read.biff.BiffException { <FIXE>
<FIXS> list.addAll(tileComponent.getPacketData(new java.util.ArrayList<>())); <FIXE>
<FIXS> break; <FIXE>
<FIXS> for (int i = 0; i < (str.length()); i++) <FIXE>
<FIXS> if (enabled) requestToKeep = com.sungjae.app.showmethemoney.activity.setting.ConfigurationConstants.getKeepValueMoneyKeeper(); else requestToKeep = 0; <FIXE>
<FIXS> for (int i = lowerBound; i < upperBound; i++) { <FIXE>
<FIXS> boolean res = false; try { lock.lock(); res = super.add(elem); if (res) <FIXE> <FIXS> } finally { lock.unlock(); } <FIXE>
<FIXS> if ((grid) != null) { grid.setHeightByRows(pLength); grid.setHeightMode(HeightMode.ROW); } <FIXE>
<FIXS> consumerVertex.fail(new java.lang.IllegalStateException((("Could not schedule consumer " + "vertex ") + consumerVertex), t)); <FIXE>
<FIXS> break; <FIXE> <FIXS> } if (isAllNull) { <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> holder.setName(category.name); bindToListener(holder); com.squareup.picasso.Picasso.with(context).load(category.icons.get(0).url).placeholder(R.drawable.ic_categories).into(holder.getImage()); <FIXE>
<FIXS> public static java.lang.String[] normalizeSummonerNames(java.lang.String... summonerNames) { <FIXE> <FIXS> summonerNames[i] = net.rithms.util.RiotApiUtil.normalizeSummonerName(summonerNames[i]); <FIXE>
<FIXS> <FIXE>
<FIXS> if ((user.getDisplayName()) != null) { <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> mLocationRequest.setFastestInterval(mLocationRequest.getInterval()); <FIXE>
<FIXS> (currentTimePosition)++; <FIXE> <FIXS> <FIXE>
<FIXS> cd4017be.lib.BlockItemRegistry.registerItemStack(new net.minecraft.item.ItemStack(this, 1, cd4017be.circuits.block.BlockRSPipe1.ID_Extraction), "rsp1bitO"); cd4017be.lib.BlockItemRegistry.registerItemStack(new net.minecraft.item.ItemStack(this, 1, cd4017be.circuits.block.BlockRSPipe1.ID_Injection), "rsp1bitI"); <FIXE>
<FIXS> private void setValues(java.lang.Number n) { <FIXE> <FIXS> setValues(m); <FIXE>
<FIXS> button.setText("Play"); <FIXE> <FIXS> button.setText("Pause"); <FIXE>
<FIXS> if (((java.lang.String) (districtComboBox.getSelectedItem())) == null) return ; <FIXE>
<FIXS> <FIXE>
<FIXS> slaveProcessor = new eu.europeana.harvester.cluster.slave.processing.SlaveProcessor(new eu.europeana.harvester.cluster.slave.processing.metainfo.MediaMetaInfoExtractor(PATH_COLORMAP), new eu.europeana.harvester.cluster.slave.processing.thumbnail.ThumbnailGenerator(PATH_COLORMAP), new eu.europeana.harvester.cluster.slave.processing.color.ColorExtractor(PATH_COLORMAP), mediaStorageClient); <FIXE>
<FIXS> if (gov.wa.wsdot.android.wsdot.ui.amtrakcascades.AmtrakCascadesSchedulesDetailsFragment.fromLocation.equalsIgnoreCase(gov.wa.wsdot.android.wsdot.ui.amtrakcascades.AmtrakCascadesSchedulesDetailsFragment.toLocation)) { <FIXE> <FIXS> }else { return new gov.wa.wsdot.android.wsdot.ui.amtrakcascades.AmtrakCascadesSchedulesDetailsFragment.DepartingArrivingTrainsLoader(getActivity()); } <FIXE>
<FIXS> if (((label > 0) && (label < minMatchingLabel)) && (currentColorValue == (neighbor.getColor()))) { <FIXE>
<FIXS> java.lang.String destination = java.net.URI.create(this.node.getPath()).resolve(value).getPath(); <FIXE>
<FIXS> <FIXE>
<FIXS> if (pids == null) { return ; } <FIXE>
<FIXS> if ((mReceivedPermissions) == null) { return ; } <FIXE>
<FIXS> private static void setPollution(double newPollution, net.minecraft.world.World world, net.minecraft.util.math.BlockPos chunkPos) { <FIXE>
<FIXS> protected static org.pentaho.agilebi.modeler.LogicalColumn findCorrespondingOlapColumn(org.pentaho.agilebi.modeler.LogicalColumn relationalColumn, org.pentaho.agilebi.modeler.LogicalModel olapModel) { <FIXE>
<FIXS> com.github.zaplatynski.firstspirit.modules.fsm.velocity.ModuleXmlParser parser = new com.github.zaplatynski.firstspirit.modules.fsm.velocity.ModuleXmlParser(source, target, project); <FIXE>
<FIXS> <FIXE>
<FIXS> new com.github.zhongl.ipage.KVEngineBuilder(dir).backlog(10).initialBucketSize(256).chunkCapacity(4096).flushByCount(5).flushByElapseMilliseconds(500L).build(); <FIXE>
<FIXS> generateJavaCode(); <FIXE>
<FIXS> return (((((((((((("Term: " + (term)) + " ") + "Frequency: ") + (freq)) + " ") + "Weight: ") + (weight)) + " ") + "TotalCount: ") + (totalCount)) + " ") + "Tf: ") + (termFreq); <FIXE>
<FIXS> com.github.solairerove.woodstock.domain.Answer savedAnswer = com.github.solairerove.woodstock.utils.AnswerGenerator.generateAnswer(); <FIXE> <FIXS> savedQuestion.getAnswers().add(savedAnswer); <FIXE> <FIXS> <FIXE>
<FIXS> mockMvc.perform(org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get("/index.page").locale(java.util.Locale.forLanguageTag("en-US"))).andExpect(org.springframework.test.web.servlet.result.MockMvcResultMatchers.status().isOk()).andExpect(org.springframework.test.web.servlet.result.MockMvcResultMatchers.content().string(org.hamcrest.core.StringContains.containsString("Welcome"))); <FIXE>
<FIXS> for (final java.lang.Object s : getBuffer().iterable(scope)) { <FIXE>
<FIXS> <FIXE>
<FIXS> io.reactivex.observers.TestObserver<com.github.e13mort.stf.model.device.Device> testObserver = io.reactivex.Observable.fromArray(getMock(true, true, false), getMock(true, true, true), getMock(true, false, false), getMock(false, true, false), getMock(false, false, false)).filter(new com.github.e13mort.stf.adapter.filters.AvailabilityPredicate(true)).test(); <FIXE>
<FIXS> <FIXE>
<FIXS> if (t >= 10000) { <FIXE>
<FIXS> org.junit.Assert.assertEquals((-1), detector.getSentenceEndPosition(str, 0)); <FIXE>
<FIXS> org.onosproject.ovsdb.providers.impl.CfgAdapterProviderImpl.LOG.error("{} Bridge Creation Status: {}", brInt, status); <FIXE> <FIXS> org.onosproject.ovsdb.providers.impl.CfgAdapterProviderImpl.LOG.info("createNetNetwork: node: {}, status: success", node); <FIXE>
<FIXS> <FIXE>
<FIXS> } catch (java.lang.Exception ex) { <FIXE>
<FIXS> long n; <FIXE>
<FIXS> <FIXE>
<FIXS> private void deployProcess() { <FIXE>
<FIXS> <FIXE> <FIXS> fr.close(); <FIXE>
<FIXS> if (et_note.getText().toString().trim().isEmpty()) <FIXE>
<FIXS> if ("https".equals(url.getProtocol())) { <FIXE>
<FIXS> @java.lang.Override <FIXE> <FIXS> super.onLoaded(ad); <FIXE>
<FIXS> <FIXE>
<FIXS> if (key == null) { continue; } <FIXE>
<FIXS> greenFlag = true; if ((!(colorDemo)) && (!(mGreenSeekBar.isEnabled()))) { mGreenSeekBar.setEnabled(true); } <FIXE>
<FIXS> prepareUV(mapper, 1, index); <FIXE>
<FIXS> com.android.dialer.calllog.DefaultVoicemailNotifier.sInstance = new com.android.dialer.calllog.DefaultVoicemailNotifier(context, notificationManager, com.android.dialer.calllog.DefaultVoicemailNotifier.createNewCallsQuery(context, contentResolver), com.android.dialer.calllog.DefaultVoicemailNotifier.createNameLookupQuery(context, contentResolver)); <FIXE>
<FIXS> <FIXE> <FIXS> trials.add(org.adligo.fabricate_tests.FabPackagesTrial.class); <FIXE>
<FIXS> if (index == (size())) { add(element); }else { boundsCheck(index); enlageIfNeeded(1); java.lang.System.arraycopy(array, index, array, (index + 1), ((size()) - index)); set(index, element); increasedSize(1); } <FIXE>
<FIXS> <FIXE>
<FIXS> end_time = end_time2; value = getStartTime(); <FIXE>
<FIXS> <FIXE> <FIXS> fireListeners(); <FIXE>
<FIXS> for (int i = 0; i < index; i++) { <FIXE>
<FIXS> getConfig().set(".GoodGames.Guess the Number.Highest Number", 50); getConfig().addDefault(".GoodGames.Guess the Number.Number of tries", 52); <FIXE>
<FIXS> private void showFrame() { <FIXE>
<FIXS> private void sendPartCommand(org.ukiuni.irc4j.server.ClientConnection partConnection) throws java.io.IOException { <FIXE>
<FIXS> lsa = new com.dreamproduction.lsa.LSA(com.dreamproduction.tests.LsaTest.data); <FIXE>
<FIXS> if ((((player != null) && (!(one.lindegaard.MobHunting.compatibility.CitizensCompat.isNPC(player)))) && (one.lindegaard.MobHunting.MobHunting.getPlayerSettingsmanager().getPlayerSettings(player).isLearningMode())) && (!(one.lindegaard.MobHunting.Messages.isEmpty(text)))) <FIXE>
<FIXS> private void setEventLatestState(final java.lang.Long revision) { <FIXE>
<FIXS> java.util.List<Coordinate<java.lang.Double>> test = MercatorMapping.MM(args[0], false); <FIXE>
<FIXS> java.util.List<java.lang.annotation.Annotation> mergedAnnotations = new java.util.ArrayList<java.lang.annotation.Annotation>(); <FIXE>
<FIXS> denominator.ultradns.model.DirectionalRecord record; while (true) { if (peekingIterator.hasNext()) { record = peekingIterator.peek(); if (record.isNoResponseRecord()) { peekingIterator.next(); }else { return true; } }else { return false; } } <FIXE>
<FIXS> private static java.lang.String parseFile(java.lang.String data, ConfigFileFormat configFileFormat) { <FIXE> <FIXS> convertedConfig = ConfigUtil2.parseYML(data); <FIXE>
<FIXS> public void removeContact(com.addressbook.thorrism.addressbook.Contact contact, int position) { <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> fragLen = negValue - posValue; if (((fragLen) > 0) && ((fragLen) <= 2000)) { (getCounts()[((fragLen) - 1)])++; <FIXE>
<FIXS> mHandler.postDelayed(mRunnable, ((com.joylabs.mclubtracker.transactions.user.UserInfo.getInstance().getPostinterval()) * 1000)); <FIXE>
<FIXS> float turretRateCap = (delta > 0) ? ((this.TURRET_TURN_RATE) / 1000) * delta : 0; <FIXE>
<FIXS> java.lang.System.out.println(satManMK.getIdSatManMK()); <FIXE>
<FIXS> int counter; <FIXE> <FIXS> for (inches = 1; inches <= 144; inches++) { <FIXE> <FIXS> java.lang.System.out.println((((inches + "inches is ") + meters) + "meters.")); counter++; if (counter == 12) { java.lang.System.out.println(); counter = 0; } <FIXE>
<FIXS> <FIXE>
<FIXS> throw new parser.ParseException(java.lang.String.format("Parse error on line %s, col %s. Found %s, expected %s.", dispatcher.getLine(), dispatcher.getColumn(), lookahead, token)); <FIXE>
<FIXS> private static void downloadMovieData(java.lang.String url) { <FIXE> <FIXS> response = andras.com.popularmovies.utils.MovieDataUtils.getResponseFromHttpUrl(andras.com.popularmovies.utils.MovieDataUtils.buildUrl(url)); <FIXE>
<FIXS> int i = 0; <FIXE> <FIXS> <FIXE>
<FIXS> if ((navigationEvent == (NAVIGATION_FINISHED)) && ((index) <= (urls.length))) { <FIXE>
<FIXS> if (address > (handlerBlock.getAddressEnd())) { <FIXE>
<FIXS> if (((thread1JobDone) && (thread2JobDone)) && (thread3JobDone)) { <FIXE>
<FIXS> if (level.checkHassucceeded()) { <FIXE>
<FIXS> <FIXE>
<FIXS> final int musicVolume = getConfig().getVolume(); <FIXE>
<FIXS> int size = ((chartView.data.size()) > 0) ? chartView.data.get(0).size() : 0; <FIXE>
<FIXS> timer.schedule(timerTask, delay); <FIXE>
<FIXS> CardGame.reset(); <FIXE>
<FIXS> org.junit.Assert.assertEquals(numberOfSequencesToGenerate, sgenLarger.getTotalSequencesIterated().intValue()); <FIXE>
<FIXS> if (readPage()) { <FIXE> <FIXS> if (processPageData(((int) (recordsReadInCurrentPass)))) { <FIXE> <FIXS> return checkVectorCapacityReached(); <FIXE>
<FIXS> messaging.convertAndSend("/topic/update", indent.getId()); rabbitTemplate.convertAndSend("update-indent", indent.getId()); <FIXE>
<FIXS> return ((pd.hasOption(PropertyOption.HIDDEN)) || ((!(app.isAdvancedMode())) && (pd.hasOption(PropertyOption.ADVANCED)))) || ((!(allowedPropertyNames.isEmpty())) && (!(allowedPropertyNames.contains(pd.getName())))); <FIXE>
<FIXS> if (((sourceNodes) != null) && (index < (sourceNodes.size()))) { <FIXE> <FIXS> int sinkIndex = ((sourceNodes) == null) ? index : index - (sourceNodes.size()); <FIXE>
<FIXS> if (savedInstanceState == null) { com.plorial.exoroplayer.views.FileExplorerFragment fileExplorerFragment = new com.plorial.exoroplayer.views.FileExplorerFragment(); android.app.FragmentTransaction transaction = getFragmentManager().beginTransaction(); transaction.add(R.id.fragment_container, fileExplorerFragment); transaction.addToBackStack(FileExplorerFragment.CLASS_NAME); transaction.commit(); } <FIXE>
<FIXS> assertEquals("kg", KILO(UCUM.GRAM).toString()); <FIXE>
<FIXS> <FIXE>
<FIXS> newData.put(mx.edu.cide.justiciacotidiana.v1.mongo.MongoInterface.FIELD_UPDATED, new java.util.Date()); <FIXE>
<FIXS> org.testng.Assert.assertEquals(31, dataBag.size()); <FIXE>
<FIXS> java.lang.String json; <FIXE>
<FIXS> <FIXE>
<FIXS> if ((this.ps) != null) { this.ps.close(); <FIXE>
<FIXS> if (number < 0) { <FIXE>
<FIXS> if ((contains(toAdd)) && (!(toAdd.getCategories().contains(Category.done)))) { throw new seedu.taskboss.model.task.UniqueTaskList.DuplicateTaskException(); <FIXE>
<FIXS> final org.sigmah.offline.dao.RequestManager<java.util.List<org.sigmah.shared.dto.ProjectDTO>> requestManager = new org.sigmah.offline.dao.RequestManager<java.util.List<org.sigmah.shared.dto.ProjectDTO>>(projects, callback); <FIXE>
<FIXS> if (mess.contains("&")) mess = mess.replace("&", "�"); <FIXE>
<FIXS> <FIXE>
<FIXS> gameRenderer.setForegroundColor(this.foregroundValue); <FIXE>
<FIXS> com.innovationplayground.sessionexecutiontestclient.communication.authapi.AuthProxy authProxy = new com.innovationplayground.sessionexecutiontestclient.communication.authapi.AuthProxy(); com.innovationplayground.sessionexecutiontestclient.storage.Storage storage = com.innovationplayground.sessionexecutiontestclient.storage.Storage.getInstance(getActivity()); clientAuthenticator = new com.innovationplayground.sessionexecutiontestclient.business.ClientAuthenticator(authProxy, storage); <FIXE> <FIXS> <FIXE>
<FIXS> }else { return org.apache.sis.referencing.operation.transform.LogarithmicTransform1D.NATURAL.concatenate((1 / (java.lang.Math.log(base))), offset); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> if ((args.length) == 1) { <FIXE>
<FIXS> <FIXE> <FIXS> mShowBottomLoading = true; <FIXE> <FIXS> mShowBottomLoading = false; <FIXE>
<FIXS> <FIXE>
<FIXS> return (((this.getLength()) == (cs.getLength())) && ((this.getWidth()) == (cs.getWidth()))) && ((this.getHeight()) == (cs.getHeight())); <FIXE>
<FIXS> sessions.remove(session); <FIXE> <FIXS> <FIXE>
<FIXS> int sign = (((java.lang.Double) (o.object)) >= 0) ? 1 : -1; <FIXE>
<FIXS> inVehicle.put(event.getVehicleId(), false); <FIXE>
<FIXS> case R.id.action_settings : return true; <FIXE>
<FIXS> quitarTagArbol(arbolTags, tagtemp); <FIXE>
<FIXS> <FIXE> <FIXS> if ((currentSelectedItem) != position) { alert = new android.app.AlertDialog.Builder(this).setTitle("Alert").setMessage("Block is running").setPositiveButton("OK", null).show(); } <FIXE>
<FIXS> <FIXE>
<FIXS> if ((results.size()) != 0) { for (com.hanuor.onyx.helper.Tag tag : results.get(0).getTags()) { probableTags.add(tag.getName()); } return probableTags; }else { return null; <FIXE> <FIXS> <FIXE>
<FIXS> callback.invoke(); <FIXE>
<FIXS> wxService.tagAddUsers(tagId, userIds, null); <FIXE>
<FIXS> <FIXE> <FIXS> showProgress(true); <FIXE>
<FIXS> root = new cn.ac.ucas.operator.AggregatorOperator(fields); <FIXE>
<FIXS> return ((T) (deque[(((first) - 1) % (deque.length))])); <FIXE>
<FIXS> if ((!(lastOperator.canBeMerged())) || (!(searchResult.lastOperator.canBeMerged()))) { return false; } <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> com.lftechnology.java.training.sanish.palindrome.Main.LOGGER.log(java.util.logging.Level.WARNING, "Exception : {1}", new java.lang.Object[]{ e }); <FIXE>
<FIXS> dummy.addRow(new java.lang.Object[]{ com.zhihu.matisse.internal.entity.Item.ITEM_ID_CAPTURE , com.zhihu.matisse.internal.entity.Item.ITEM_DISPLAY_NAME_CAPTURE , "" , 0 , 0 }); <FIXE>
<FIXS> int r = ((int) (((coord.getY()) - (minY)) / (cellSize))); int c = ((int) (((coord.getX()) - (minX)) / (cellSize))); <FIXE>
<FIXS> address = this.getActivity().getString(R.string.bitcoin_address); <FIXE> <FIXS> address = this.getActivity().getString(R.string.litecoin_address); <FIXE> <FIXS> net.alegen.android.netclip.util.Clipboard.getInstance(this.getActivity()).setClipboardText(address); <FIXE>
<FIXS> synchronized(this.mActiveGenerators) { for (java.lang.String className : this.mActiveGenerators) { try { active.add(((java.lang.Class<? extends com.audacious_software.passive_data_kit.generators.Generator>) (java.lang.Class.forName(className)))); } catch (java.lang.ClassNotFoundException e) { } <FIXE>
<FIXS> r.accept(civ, ((org.objectweb.asm.ClassReader.SKIP_FRAMES) | (org.objectweb.asm.ClassReader.SKIP_CODE))); <FIXE>
<FIXS> pokerController.startGame(0); <FIXE>
<FIXS> <FIXE>
<FIXS> if ((currVocab.getSpeech()) != null) { <FIXE>
<FIXS> assertEquals(Form.MAIN, f.getName()); assertEquals(Form.ADVANCED, advancedF.getName()); <FIXE>
<FIXS> <FIXE>
<FIXS> void startElement(java.lang.String uri, java.lang.String localName, java.lang.String qName, long attributePointer, int attributeCount) throws org.xml.sax.SAXException { <FIXE>
<FIXS> return quantifier(de.uni_freiburg.informatik.ultimate.eprequalityaxiomsadder.FORALL, new de.uni_freiburg.informatik.ultimate.logic.TermVariable[]{ qvar1 , qvar2 }, term("=>", term(mNewEqualsSymbol, qvar1, qvar2), term(mNewEqualsSymbol, qvar2, qvar1))); <FIXE>
<FIXS> int ori_i = (index - 1) / (dimension()); <FIXE>
<FIXS> return null; <FIXE>
<FIXS> org.openstack.atlas.service.domain.services.impl.AccountLimit dbLimit = accountLimitRepository.getByAccountIdAndType(accountLimit.getAccountId(), accountLimit.getLimitType()); if (dbLimit != null) { throw new org.openstack.atlas.service.domain.exceptions.BadRequestException(((("A limit for the Limit Type " + (dbLimit.getLimitType().getName().toString())) + " already exists for the account id ") + (dbLimit.getAccountId()))); <FIXE>
<FIXS> return true; <FIXE>
<FIXS> timeChosen = calendar; <FIXE>
<FIXS> break; <FIXE>
<FIXS> log.debug(java.lang.String.format("Component '%s' input size '%d' target => '%s'", src.getName(), (input != null ? input.size() : 0), targetName)); <FIXE>
<FIXS> if ((null == (rootView)) || (cacheContentData)) { <FIXE>
<FIXS> java.util.ArrayList<com.bmesta.powermode.Particle> tempParticles = new java.util.ArrayList(particles); <FIXE>
<FIXS> <FIXE>
<FIXS> if (com.frdfsnlght.inquisitor.PlayerStats.isStatsPlayer(player)) { com.frdfsnlght.inquisitor.PlayerStats.PlayerState state = com.frdfsnlght.inquisitor.PlayerStats.playerStates.get(player.getName()); if (state != null) { com.frdfsnlght.inquisitor.PlayerStats.onPlayerMove(player, player.getLocation()); state.lastLocation = to; state.lastTime = java.lang.System.currentTimeMillis(); } <FIXE>
<FIXS> boolean privacy = requestObject.getBoolean("privacy"); <FIXE>
<FIXS> if (((this) != (ee.ioc.phon.android.speechutils.ContinuousRawAudioRecorder.SessionStartPointer.mBeginningOfBufferPosition)) && ((mSessionStartPointerMillis) < (ee.ioc.phon.android.speechutils.ContinuousRawAudioRecorder.SessionStartPointer.mBeginningOfBufferPosition.getSessionStartPointerMillis()))) <FIXE>
<FIXS> com.jennbowers.library.models.User fromUser = userRepo.findByUsername(username); com.jennbowers.library.models.User toUser = userRepo.findOne(id); <FIXE>
<FIXS> if ((org.droidplanner.android.utils.Utils.getAppVersionCode(context)) > (mAppPrefs.getSavedAppVersionCode())) { <FIXE>
<FIXS> <FIXE>
<FIXS> float randomVelx = ((random.nextFloat()) * 2.0F) - 1.0F; float randomVely = ((random.nextFloat()) * 2.0F) - 1.0F; return new com.dumbpug.crossbowknight.particles.ExplosionParticle(emitterDetails.positionX, emitterDetails.positionY, randomVelx, randomVely, level); <FIXE>
<FIXS> anchorText.append(new java.lang.String(ch, start, length)); <FIXE>
<FIXS> if ((this.variables) == null) { return null; } for (int i = (this.variables.size()) - 1; i >= 0; i--) { final dyvil.tools.compiler.ast.field.IVariable variable = this.variables.get(i); if ((variable.getName()) == name) { return variable; <FIXE>
<FIXS> <FIXE>
<FIXS> return maxEggGroupID + 1; <FIXE>
<FIXS> <FIXE>
<FIXS> int actualHours = weekday * 5; <FIXE>
<FIXS> if (isWhite()) { <FIXE> <FIXS> <FIXE> <FIXS> }else { if (((start.rank()) == 2) && ((target.rank()) == 1)) return true; } <FIXE>
<FIXS> if (((mMap) != null) && ((myRoute.size()) > 0)) { <FIXE>
<FIXS> return withItem.withAmount(withItem.getAmount()); <FIXE>
<FIXS> holder.data = photo; <FIXE>
<FIXS> <FIXE>
<FIXS> this.loadingDialog.setMessage(("Downloading: " + (lstToDownload))); <FIXE>
<FIXS> model.Bubble bubble = new model.Bubble(getX(), getY(), 0, 0, 0, 0, facingRight, levelController); <FIXE>
<FIXS> org.terracotta.connection.entity.EntityRef<org.ehcache.clustered.client.internal.EhcacheClientEntity, org.ehcache.clustered.common.internal.ClusteredTierManagerConfiguration> ref = getEntityRef(client); <FIXE>
<FIXS> java.lang.System.out.println(("list vor Abschnitt " + list)); <FIXE> <FIXS> java.lang.System.out.println(((((("list nach Abschnitt von" + i) + "bis") + j) + "ist") + abschnitt)); <FIXE>
<FIXS> setValue(v); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> return (host.equals(rhs.host)) && (name.equals(rhs.name)); <FIXE>
<FIXS> if ((activity) instanceof com.engstuff.coloriphornia.interfaces.HideInfoListener) { ((com.engstuff.coloriphornia.interfaces.HideInfoListener) (activity)).onHideInfoInvoked(false); } <FIXE>
<FIXS> <FIXE>
<FIXS> if (keys == null) { return ; } <FIXE>
<FIXS> mPlayerListAdapter = new io.github.sdsstudios.ScoreKeeper.Adapters.PlayerListAdapter(editable, mRelativeLayout, this); <FIXE>
<FIXS> vectorDataNode.setPermanent(false); <FIXE>
<FIXS> return this.getName().equals(newStylist.getName()); <FIXE>
<FIXS> } finally { em.close(); <FIXE>
<FIXS> bw.write(((ctx.expressionName().getText()) + ".get(")); <FIXE>
<FIXS> com.example.testme.server.broadcast.Broadcaster.broadcast(getUI().getSession().getSession().getId(), username, false); <FIXE>
<FIXS> <FIXE>
<FIXS> path = null; <FIXE>
<FIXS> if ((last_date == null) || (!(last_date.equals(birthdate)))) { <FIXE>
<FIXS> TestController.tests(10, "p", ((TestController.root) + (TestController.files[i])), i, TestController.maxValues[i]); <FIXE> <FIXS> <FIXE>
<FIXS> models.amGame g = new models.amGame(); models.spGame g2 = new models.spGame(); <FIXE>
<FIXS> public static void restoreDensity(android.content.Context context) { <FIXE>
<FIXS> java.lang.System.out.println(bugVecList.size()); <FIXE> <FIXS> java.lang.System.out.println(codeVecList.size()); <FIXE>
<FIXS> this.deleteOlderMapThumbnails(mapLayerMetadata); <FIXE> <FIXS> <FIXE>
<FIXS> double ret = 0.0; <FIXE> <FIXS> return java.lang.Math.sqrt((ret / (real.length))); <FIXE>
<FIXS> if ((score[(currentHole - 1)]) >= (com.manleysoftware.michael.discgolfapp.Model.Player.maxScoreAllowable)) { <FIXE>
<FIXS> if (i < 0) return false; <FIXE> <FIXS> return i == 0; <FIXE>
<FIXS> return new seedu.address.commons.core.Version(java.lang.Integer.parseInt(versionMatcher.group(1)), java.lang.Integer.parseInt(versionMatcher.group(2)), java.lang.Integer.parseInt(versionMatcher.group(3)), ((versionMatcher.group(4)) != null)); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> org.junit.Assert.assertEquals(java.sql.Timestamp.valueOf("2013-03-27 23:18:40.123456"), result.get("five")); <FIXE>
<FIXS> final java.util.Set<java.lang.String> beanNames = this.viewNameToBeanNamesMap.get(viewName); <FIXE>
<FIXS> private com.tut.beans.Utilisateur traiterEmail(java.lang.String email, com.tut.beans.Utilisateur utilisateur) { <FIXE> <FIXS> return utilisateur; <FIXE>
<FIXS> if (fieldValue.equals(user.getName())) { <FIXE>
<FIXS> step = camera.getParameters().getExposureCompensationStep(); EV = java.lang.Math.max(step, ((step) * (camera.getParameters().getExposureCompensation()))); <FIXE>
<FIXS> if ((this.startTime) <= (-1)) { this.pauseTime = com.badlogic.gdx.utils.TimeUtils.millis(); this.startTime = (pauseTime) - runtime; }else { this.startTime = (com.badlogic.gdx.utils.TimeUtils.millis()) - runtime; } <FIXE>
<FIXS> java.io.File dirToOpen; <FIXE>
<FIXS> this.solve((nb - 1), source, auxiliary, destination); <FIXE> <FIXS> this.solve((nb - 1), auxiliary, destination, source); <FIXE>
<FIXS> <FIXE> <FIXS> int i = 0; while (i < (trainers.size())) { if (trainers.get(i).getEmail().equals(emailEntered)) { return trainers.get(i); <FIXE> <FIXS> i++; } <FIXE>
<FIXS> if (low >= high) <FIXE> <FIXS> return list; <FIXE>
<FIXS> playRoundViews.writeContentToViews(playRoundContent); <FIXE> <FIXS> <FIXE>
<FIXS> if ((this.text) == null) this.text = this.placeholder; <FIXE>
<FIXS> result = true; <FIXE>
<FIXS> java.lang.String movieId = ((params.length) > 0) ? java.lang.String.valueOf(params[0]) : "293660"; <FIXE>
<FIXS> if (pageIndex > ((allSearchResults.size()) - 1)) { pageIndex = (allSearchResults.size()) - 1; } <FIXE>
<FIXS> <FIXE>
<FIXS> mCallback.mapTypeSelected(GoogleMap.MAP_TYPE_HYBRID); <FIXE> <FIXS> mCallback.mapTypeSelected(GoogleMap.MAP_TYPE_TERRAIN); <FIXE>
<FIXS> <FIXE>
<FIXS> if ((traceDataProvider[index]) != null) { <FIXE>
<FIXS> for (int j = 0; j < (a[i].length); j++) { <FIXE>
<FIXS> java.util.HashMap<java.lang.String, java.lang.Object> nodeProperties = new java.util.HashMap<java.lang.String, java.lang.Object>(); <FIXE>
<FIXS> private void generateSmallToast(java.lang.String info) { <FIXE>
<FIXS> collapseView(lastExpandedPosition, true, false); <FIXE>
<FIXS> return folder.search(getSearchTerm(lastParseDate, true)); <FIXE>
<FIXS> <FIXE> <FIXS> case 2 : return publicGroupFragment; <FIXE>
<FIXS> com.intellij.psi.PsiFile psiFile = mock(com.intellij.psi.PsiFile.class); when(psiFile.getText()).thenReturn(text); when(psiFile.getChildren()).thenReturn(new com.intellij.psi.PsiElement[]{ mock(com.intellij.psi.PsiElement.class) }); <FIXE>
<FIXS> if (light == 0) { break; } <FIXE>
<FIXS> if (containsFilter && containsIgnore) { <FIXE>
<FIXS> java.lang.Double futureChange = calculateFutureChange(timePoints[i]); return com.alphatica.genotick.genotick.RobotData.createData(list, name, futureChange); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> public static void post(java.lang.String url, java.lang.String requestBodyString, com.chinamobile.iot.onenet.OneNetApiCallback callback) { <FIXE>
<FIXS> private boolean synchronizeFounders() { <FIXE> <FIXS> return syncServerFounderUpdates(maxVersion, serverMaxVersion); <FIXE>
<FIXS> <FIXE>
<FIXS> mGoogleApiClient = new com.google.android.gms.common.api.GoogleApiClient.Builder(this).addApi(Nearby.MESSAGES_API, new com.google.android.gms.nearby.messages.MessagesOptions.Builder().setPermissions(NearbyPermissions.BLE).build()).addConnectionCallbacks(this).enableAutoManage(this, this).build(); <FIXE>
<FIXS> request.addHeader("User-Agent", Manager.USER_AGENT); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> java.lang.String playerId = robotSnapshot.getName(); <FIXE>
<FIXS> <FIXE>
<FIXS> return newId != (-1); <FIXE>
<FIXS> public static <T> void serialize(T object, java.io.OutputStream resultStream) throws javax.xml.bind.JAXBException { javax.xml.bind.JAXBContext jaxbContext = javax.xml.bind.JAXBContext.newInstance(object.getClass()); <FIXE>
<FIXS> <FIXE>
<FIXS> if (null != (mStatusList.statusList)) { <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> editor = new org.semanticweb.ontop.protege.panels.DatasourceParameterEditorPanel(getOWLEditorKit()); <FIXE>
<FIXS> android.util.Log.d("HUSTLE", ("refresh on " + tabPosition)); <FIXE>
<FIXS> private static void sendResultWithDns(int result_code, java.lang.String dns1, java.lang.String dns2) { <FIXE> <FIXS> <FIXE>
<FIXS> ic.commitText(java.lang.String.valueOf(automata.execute(new int[]{ -1 , D_RIGHT , -1 , D_RIGHT , -1 }, ic)), 1); <FIXE>
<FIXS> D descriptor = ((D) (callableDescriptor.getOriginal())); <FIXE>
<FIXS> io.github.pr0methean.betterrandom.prng.RandomTestUtils.checkStream(prng, 42, prng.longs((1L << 40), (1L << 42)), (-1), (1L << 40), (1L << 42), alwaysCheckEntropy()); <FIXE>
<FIXS> if ((temp.getValue()) > 0) { return temp; } return null; <FIXE>
<FIXS> <FIXE>
<FIXS> for (int xPixel = 0; xPixel < (this.width); ++xPixel) { for (int yPixel = 0; yPixel < (this.height); ++yPixel) { <FIXE>
<FIXS> if (!(line.isEmpty())) { final int start = getLineStart(line); if (indentLevel.isGreaterThan(start)) { logChildError(lineNum, start, indentLevel); } <FIXE>
<FIXS> public static void msgNearby(org.bukkit.entity.Player p, java.lang.String msg) { <FIXE>
<FIXS> return ((org.payn.chsm.io.ModelBuilder) (org.payn.chsm.io.ModelLoader.createObjectInstance(builderElem.getFile(pathRoot), classPath, java.lang.String.format("Builder %s", classPath)))); <FIXE>
<FIXS> data.addEntity(new org.online.etl.model.abstractions.Entity(currentId, ((long) (i)), "", "String", "", null)); <FIXE>
<FIXS> java.util.Map<java.lang.String, java.lang.Object> map = com.liferay.portal.kernel.servlet.SessionErrors._getMap(session, null, true); <FIXE>
<FIXS> public java.util.Map<java.lang.String, src.Node> updateNodeInMap(src.Node n, java.util.Map<java.lang.String, src.Node> map) { <FIXE> <FIXS> return map; <FIXE>
<FIXS> public org.json.JSONObject toJson() { <FIXE>
<FIXS> public static java.util.Set<me.newyith.util.Point> getPointsConnected(me.newyith.util.Point origin, java.util.Set<me.newyith.util.Point> originLayer, java.util.Set<org.bukkit.Material> wallBlocks, java.util.Set<org.bukkit.Material> returnBlocks, int rangeLimit, java.util.Set<me.newyith.util.Point> ignorePoints, java.util.Set<me.newyith.util.Point> searchablePoints) { <FIXE>
<FIXS> protected void processExtensionsDependencies() throws org.apache.maven.plugin.MojoExecutionException { <FIXE>
<FIXS> java.lang.System.out.println(result); <FIXE>
<FIXS> builder.editMethod("fromObject", "java.lang.Object").injectInterceptor("com.navercorp.pinpoint.plugin.json.lib.interceptor.JsonLibMethodInterceptor").group(com.navercorp.pinpoint.plugin.json.lib.JsonLibPlugin.GROUP); builder.editMethod("toBean", "net.sf.json.JSONObject").injectInterceptor("com.navercorp.pinpoint.plugin.json.lib.interceptor.JsonLibMethodInterceptor").group(com.navercorp.pinpoint.plugin.json.lib.JsonLibPlugin.GROUP); builder.editMethod("toString").injectInterceptor("com.navercorp.pinpoint.plugin.json.lib.interceptor.JsonLibMethodInterceptor").group(com.navercorp.pinpoint.plugin.json.lib.JsonLibPlugin.GROUP); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> presenter.displayItemsAsMenuOptions(menuOptions); <FIXE>
<FIXS> if (isStalemateForPlayer || isStalemateForOpponent) { <FIXE>
<FIXS> <FIXE>
<FIXS> buttonToChange.setIcon(null); <FIXE> <FIXS> if (myPlayerController.getPlayer1Name().equals(playerNameOnSpot)) { buttonToChange.setIcon(black_icon); }else if (myPlayerController.getPlayer2Name().equals(playerNameOnSpot)) { buttonToChange.setIcon(red_icon); } <FIXE>
<FIXS> <FIXE>
<FIXS> fragmentTransaction.addToBackStack(title); <FIXE> <FIXS> <FIXE>
<FIXS> if ((playerController.getPlayerList().size()) > 0) { (turn)--; } <FIXE>
<FIXS> private static boolean rauswerfen(int neuesFeld, int spielerNummer) { <FIXE> <FIXS> return true; <FIXE> <FIXS> return false; <FIXE>
<FIXS> existingProducts.set(holder.getAdapterPosition(), existingProduct); <FIXE> <FIXS> <FIXE>
<FIXS> private eu.europeana.corelib.definitions.edm.beans.FullBean retrieveRecord(java.lang.String europeanaId, java.lang.Integer hierarchyTimeout) throws eu.europeana.corelib.edm.exceptions.MongoDBException, eu.europeana.corelib.edm.exceptions.MongoRuntimeException, eu.europeana.corelib.neo4j.exception.Neo4JException { <FIXE> <FIXS> eu.europeana.corelib.definitions.edm.beans.FullBean result = searchService.findById(europeanaId, false, (hierarchyTimeout == null ? 0 : hierarchyTimeout)); <FIXE>
<FIXS> resetShareFragment(); <FIXE>
<FIXS> init(); <FIXE>
<FIXS> loading = false; <FIXE>
<FIXS> aOpenChallenges = new com.example.vikramjeet.challengerapp.adapters.ChallengeArrayAdapter(getActivity(), challenges, this); <FIXE>
<FIXS> java.lang.String opb = interpreter.getStack().popString(); <FIXE> <FIXS> <FIXE>
<FIXS> int p2Total = p2.getTotalVotesSite(voteSite); <FIXE>
<FIXS> us.kbase.narrativemethodstore.ValidationResults vr = us.kbase.narrativemethodstore.db.test.ValidatorTest.validate(8, null); <FIXE>
<FIXS> com.ctrip.zeus.util.RollingTrafficStatus.extractStubStatus(com.ctrip.zeus.util.RollingTrafficStatus.getDelta(stubStatus, lastStubStatus), trafficStatus, stubStatus); <FIXE>
<FIXS> while (((stack.size()) > 0) && ((stack.peek().parentCompound) == topOfItemStack)) { <FIXE> <FIXS> } <FIXE>
<FIXS> <FIXE>
<FIXS> if (uuid == null) { <FIXE>
<FIXS> localStorage.writeBack(commonKey, record, tx); <FIXE>
<FIXS> try { java.util.List<org.bukkit.entity.Entity> out = me.badbones69.blockparticles.Api.getNearbyEntities(loc, range, range, range); if (!(out.isEmpty())) { for (org.bukkit.entity.Entity e : out) { if (e instanceof org.bukkit.entity.LivingEntity) { org.bukkit.entity.LivingEntity en = ((org.bukkit.entity.LivingEntity) (e)); if (en instanceof org.bukkit.entity.Player) { return true; } <FIXE> <FIXS> } catch (java.lang.Exception e) { <FIXE>
<FIXS> if (user.getPassword().equals(password)) { <FIXE>
<FIXS> if (!(size.isValid().type.equals(new AST.AST_TYPE_TERM(TYPES.INT)))) { <FIXE>
<FIXS> int[] play = new int[]{ 5 , 8 , 2 , 3 , 1 , 5 , 0 }; java.lang.System.out.println(RightWingGame.solveGameRecursively(play, RightWingGame.DEFAULT_VALUE, RightWingGame.DEFAULT_VALUE, RightWingGame.DEFAULT_VALUE)); <FIXE>
<FIXS> <FIXE>
<FIXS> _currentBldg = bldg; <FIXE> <FIXS> <FIXE>
<FIXS> private void setupAuthenticatedModel(java.lang.String results, org.springframework.ui.ModelMap model) { <FIXE>
<FIXS> return null; <FIXE>
<FIXS> if (data != null) { page.put(data); com.concurrent.sdk.transfer.ConcurrentWriteTransfer.logger.info("memoryPage put data|{}, page size|{}", data, page.size()); } <FIXE>
<FIXS> if ((shouldShowAppodealAdBanner) && (((ru.aviasales.template.ui.adapter.AdAdapter.APPODEAL_BANNER_POSITION) + (shouldShowAsBanner ? 1 : 0)) < position)) { <FIXE> <FIXS> } <FIXE>
<FIXS> <FIXE>
<FIXS> return ((((((("Rect [" + (x0)) + ", ") + (y0)) + "][ w:") + ((x1) - (x0))) + ", h:") + ((y1) - (y0))) + "]"; <FIXE>
<FIXS> <FIXE>
<FIXS> if (!(o instanceof org.yccheok.jstock.engine.Industry)) { <FIXE>
<FIXS> <FIXE>
<FIXS> return iterator(connection, sql, lazycat.series.jdbc.PreparedStatementSetters.newIgnoreJdbcTypeSetter(parameters, typeHandlerRegistry, typeConverter), rowMapper); <FIXE>
<FIXS> if ((bc.getHDP()) == null) return ; <FIXE>
<FIXS> java.lang.System.out.println((((((parentIdentity) + ": Total traffic on ") + (label)) + ": ") + (traffic))); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> return org.opendaylight.yangtools.yang.binding.InstanceIdentifier.builder(org.opendaylight.yang.gen.v1.urn.opendaylight.genius.idmanager.rev160406.IdPools.class).child(org.opendaylight.yang.gen.v1.urn.opendaylight.genius.idmanager.rev160406.id.pools.IdPool.class, new org.opendaylight.yang.gen.v1.urn.opendaylight.genius.idmanager.rev160406.id.pools.IdPoolKey(poolName)).child(org.opendaylight.yang.gen.v1.urn.opendaylight.genius.idmanager.rev160406.id.pools.id.pool.IdEntries.class, new org.opendaylight.yang.gen.v1.urn.opendaylight.genius.idmanager.rev160406.id.pools.id.pool.IdEntriesKey(idKey)).build(); <FIXE>
<FIXS> <FIXE>
<FIXS> java.util.Map<java.lang.String, java.lang.Integer> blacklistedVW = new java.util.HashMap<java.lang.String, java.lang.Integer>(); <FIXE>
<FIXS> <FIXE>
<FIXS> while ((ms == (msec)) && ((this.syncCount) == 0)) { <FIXE> <FIXS> (this.syncCount)--; <FIXE>
<FIXS> android.view.TextureView view) { <FIXE> <FIXS> applyScale(view, xScale, yScale); <FIXE>
<FIXS> if ((mIsTwoPaneLayout) && (savedInstanceState == null)) { <FIXE>
<FIXS> resultsMap.put("aMethod(c, x)", new java.lang.String[][]{ new java.lang.String[]{ "charX" , "charY" , "inCall" } , new java.lang.String[]{ "charX" , "charY" , "inCall" } }); <FIXE>
<FIXS> if ((mTrack) != null) { android.content.Intent i = new android.content.Intent(); i.setAction(org.y20k.trackbook.ACTION_TRACK_UPDATED); i.putExtra(org.y20k.trackbook.EXTRA_TRACK, mTrack); i.putExtra(org.y20k.trackbook.EXTRA_LAST_LOCATION, mCurrentBestLocation); android.support.v4.content.LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(i); } <FIXE>
<FIXS> Exam01.IDCard.arr = new java.lang.String[Exam01.IDCard.str.length()]; for (int i = 0; i < (Exam01.IDCard.str.length()); i++) { <FIXE>
<FIXS> callbackContext.sendPluginResult(convertToPluginResult(databaseError, false)); <FIXE>
<FIXS> android.util.Log.e("RESULT", (((com.sample.Employee) (object.get(0))) + "")); <FIXE>
<FIXS> if ((p2Index) < 0) { <FIXE> <FIXS> if (((p2Index) < 10) && ((p2Index) > 7)) { <FIXE>
<FIXS> checkIfExist(pathDest); <FIXE>
<FIXS> protected void initiateGeocode(java.lang.String address, int tag) { <FIXE>
<FIXS> if (!(PADepTuple.srl.equals(srl))) <FIXE>
<FIXS> public boolean setColor(java.awt.Color color) { if ((((this.color) != null) && (this.color.equals(color))) || (((this.color) == null) && (color == null))) return false; <FIXE> <FIXS> return true; <FIXE>
<FIXS> public void testGetZoneName(final java.lang.String requestHostname, final java.util.List<java.lang.String> serviceBaseDomains, final java.util.List<java.lang.String> serviceConfigHeaders, final java.lang.String subdomainValue) { <FIXE>
<FIXS> oldlist = pers.zylo117.spotspotter.fileprocessor.FIndexReader.getFIndex(false); final java.util.List<java.lang.String> newlist = pers.zylo117.spotspotter.fileprocessor.FIndexReader.getFIndex(true); <FIXE>
<FIXS> return ((((null != (result)) || ((io.netty.handler.codec.http.HttpResponseStatus.OK) != (status))) || (null != (messenger.getRedirectTo()))) || (null != (content))) || (null != (file)); <FIXE>
<FIXS> if ((externalNum.length()) <= 50) <FIXE>
<FIXS> feed.onLocationChanged(event); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> java.util.List<com.intellij.plugins.haxe.model.HaxeParameterModel> _parameters = new java.util.ArrayList<com.intellij.plugins.haxe.model.HaxeParameterModel>(); <FIXE> <FIXS> <FIXE>
<FIXS> generator.writeStringField("type", value.getType().getName()); <FIXE>
<FIXS> transferStrategyBuilder.withMasterObjectList(masterObjectList).withRangesForBlobs(com.spectralogic.ds3client.helpers.util.PartialObjectHelpers.mapRangesToBlob(masterObjectList.getObjects(), partialRanges)); <FIXE>
<FIXS> mMultiListMessage.setVisibility(View.VISIBLE); <FIXE>
<FIXS> jet.draw(canvas); <FIXE>
<FIXS> symjava.symbolic.utils.FuncClassLoader<symjava.bytecode.BytecodeVecFunc> fcl = new symjava.symbolic.utils.FuncClassLoader<symjava.bytecode.BytecodeVecFunc>(); <FIXE>
<FIXS> if (root == null) return 0; <FIXE>
<FIXS> <FIXE> <FIXS> }else { java.util.List<data.analytics.smart.traffic.model.Car> carList = waitinglist.get(from); carList.add(car); waitinglist.put(from, carList); java.lang.System.out.println((("Car from " + from) + "has to wait in line")); <FIXE>
<FIXS> assertEquals("Expecting emtpy list", 0, drmJob.getCommandLine().size()); <FIXE>
<FIXS> this.fieldScope = (this.classTreeNode.getVarSymbolTable().getCurrScopeLevel()) - 1; this.methodScope = (this.classTreeNode.getMethodSymbolTable().getCurrScopeLevel()) - 1; <FIXE>
<FIXS> service.updateToDo(taskThing); <FIXE>
<FIXS> private void generateMappingColumns(java.util.Map<model.data.DataColumn, java.lang.String> mappingNewNameToOldColumns) { for (java.util.Map.Entry<model.data.DataColumn, java.lang.String> entry : mappingNewNameToOldColumns.entrySet()) { model.data.DataColumn newColumn = new model.data.DataColumn(entry.getValue(), null, entry.getKey().getType()); <FIXE> <FIXS> mappingColumns.put(entry.getKey(), newColumn); <FIXE>
<FIXS> onRelease(); <FIXE>
<FIXS> <FIXE>
<FIXS> java.lang.Object[] lands = com.essentials.mcoldlife.main.CustomConfig.getArray(reference.FILE_LANDS, reference.CONFIG_FOLDER.toString(), reference.PATH_LANDS); <FIXE> <FIXS> for (java.lang.Object land : lands) { com.mcoldlife.objects.OLLand l = new com.mcoldlife.objects.OLLand(land.toString()); com.mcoldlife.objects.RPGManager.addLand(land.toString(), l); <FIXE>
<FIXS> public static java.lang.String getCurrentTitle(android.content.Context context, boolean preparing) { return context == null ? "" : (br.com.carlosrafaelgn.fplay.playback.Player.localSong) == null ? context.getText(R.string.nothing_playing).toString() : !preparing ? br.com.carlosrafaelgn.fplay.playback.Player.localSong.title : ((context.getText(R.string.loading)) + " ") + (br.com.carlosrafaelgn.fplay.playback.Player.localSong.title); <FIXE>
<FIXS> if (!(registration.getInstance().equals(instance))) { <FIXE>
<FIXS> testScriptFile(SCRIPT_TEXT, argList, EXPECTED_PATTERN, true); <FIXE>
<FIXS> if ((mGroups.get(groupPosition)) != null) mListener.onDeleteBpmClick(mGroups.get(groupPosition).children.get(childPosition).getId(), groupPosition, childPosition); <FIXE>
<FIXS> <FIXE> <FIXS> return (("/" + (org.opendaylight.netconf.sal.rest.doc.impl.BaseYangSwaggerGenerator.RESTCONF_DRAFT)) + "/operations") + context; <FIXE> <FIXS> return ("/" + dataStore) + context; <FIXE>
<FIXS> java.lang.String returnString = "(" + (this.operator.toString()); <FIXE> <FIXS> returnString = (returnString + " ") + (subTermIterator.next().toString()); <FIXE>
<FIXS> <FIXE> <FIXS> dataList.add(HttpHeaders.LINE_SEPARATOR_BYTES); <FIXE>
<FIXS> <FIXE>
<FIXS> int sleepTime = ((com.afunx.ble.blelitelib.operation.BleWriteCharacterisitcNoResponsePacketOperation2.lastTimestamp) == 0) ? 0 : (com.afunx.ble.blelitelib.operation.BleWriteCharacterisitcNoResponsePacketOperation2.PACKET_INTERVALS[select]) - ((int) ((java.lang.System.currentTimeMillis()) - (com.afunx.ble.blelitelib.operation.BleWriteCharacterisitcNoResponsePacketOperation2.lastTimestamp))); <FIXE>
<FIXS> <FIXE>
<FIXS> mMap.moveCamera(com.google.android.gms.maps.CameraUpdateFactory.newLatLngZoom(loyola, ((float) (15.5)))); <FIXE>
<FIXS> MatlabUtil.printMatlabArray(l, elementsPerLine, out); <FIXE>
<FIXS> <FIXE>
<FIXS> com.github.bwsoft.iris.message.GroupObject aFigureObj = fuelFiguresGroup.getGroupObject(i); <FIXE>
<FIXS> foundUsers = com.shooting_stars.project.logic.SearchLogic.findUsers(name, surname, country, city, dateOfBirthMin, dateOfBirthMax, page); usersAmount = com.shooting_stars.project.logic.SearchLogic.countUsers(name, surname, country, city, dateOfBirthMin, dateOfBirthMax); <FIXE>
<FIXS> setSelectedImage(((org.openstreetmap.josm.plugins.mapillary.MapillaryImage) (getSelectedImage())).previous(), true); <FIXE>
<FIXS> org.junit.Assert.assertEquals(java.lang.Double.valueOf((-3.0)), magic.compiler.Reader.read("-3.0").getValue()); org.junit.Assert.assertEquals(java.lang.Double.valueOf(3.0E9), magic.compiler.Reader.read(".3e10").getValue()); org.junit.Assert.assertEquals(java.lang.Double.valueOf((-3.0E9)), magic.compiler.Reader.read("-0.3e10").getValue()); <FIXE>
<FIXS> array[last] = item; (N)++; last = N; <FIXE>
<FIXS> <FIXE>
<FIXS> updatedAt = findPath(root, r.updatedAt.getMetadata().getName()); <FIXE>
<FIXS> return getMemoryAddress(pc, address); <FIXE>
<FIXS> if ((parent) != null) { <FIXE> <FIXS> }else { for (semantic.Table t : parent.children) { if (t.getSymbol(0).getName().equals(name)) return t; } <FIXE>
<FIXS> answer += s.charAt(i); <FIXE>
<FIXS> org.exist.collections.Collection.LOG.error(e.getMessage(), e); <FIXE>
<FIXS> listener.onLongPress(mostRecentX, mostRecentY); <FIXE>
<FIXS> <FIXE>
<FIXS> this.shortURL = short_link.encodeLongURL(); <FIXE> <FIXS> this.insertFactory.insertShortLink(hashURL, this.shortURL, this.row); <FIXE>
<FIXS> <FIXE>
<FIXS> this.setVisible(false); <FIXE> <FIXS> <FIXE>
<FIXS> if ((null == e) && (null != userList)) { <FIXE>
<FIXS> while ((currentElement instanceof com.intellij.psi.PsiWhiteSpace) || (currentElement instanceof com.intellij.psi.PsiComment)) { <FIXE>
<FIXS> enterresult = true; <FIXE> <FIXS> <FIXE>
<FIXS> if (((shot.getStartFrame()) <= frame) && ((shot.getEndFrame()) > frame)) { <FIXE>
<FIXS> if (clearDriver) { State.THREAD_DESIRED_CAPABILITY_MAP.clearWebDriverForThread(true); <FIXE>
<FIXS> public static org.alien4cloud.tosca.model.definitions.PropertyDefinition buildPropDef(java.lang.String type, org.alien4cloud.tosca.model.definitions.PropertyDefinition entrySchema, boolean required) { <FIXE> <FIXS> propertyDefinition.setEntrySchema(entrySchema); <FIXE>
<FIXS> public double getInterest() { <FIXE> <FIXS> return balance; <FIXE>
<FIXS> <FIXE> <FIXS> game.setTargetFrameRate(60); <FIXE>
<FIXS> this.config.set((((manager.getPluginName()) + "_COMMENT_") + (comments)), comment); <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> android.util.Log.d(com.crazyroba.RobaActivityInstrumentationTestCase2.TAG, (("Roba random sleep " + (sleepTime / 1000)) + " s")); <FIXE>
<FIXS> }else { ipMmatch.setIpProtocol(ipProtocol); <FIXE>
<FIXS> boolean c = true; <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> falsePositive[i] += (correct) ? 0.0 : 1.0; <FIXE>
<FIXS> org.mockito.Mockito.verify(a, org.mockito.Mockito.times(1)).publicMethod(); <FIXE>
<FIXS> final android.content.Context context = this.cordova.getActivity().getApplicationContext(); <FIXE>
<FIXS> assertTrue(expected.containsAll(cells)); assertTrue(cells.containsAll(expected)); <FIXE>
<FIXS> <FIXE>
<FIXS> java.lang.String userLogged, @org.springframework.web.bind.annotation.RequestParam(value = "loggedIn", defaultValue = "", required = false) <FIXE> <FIXS> java.lang.System.out.println(("loggedIn: " + loggedIn)); if ((loggedIn.isEmpty()) || (loggedIn.equals(null))) { return new org.springframework.web.servlet.ModelAndView("fireBase"); } java.lang.System.out.println(("userLogged: " + userLogged)); if ((userLogged.equals(null)) || (userLogged.isEmpty())) { <FIXE> <FIXS> return new org.springframework.web.servlet.ModelAndView("location", "userloggedin", userLogged); <FIXE>
<FIXS> if ((pixelWidth) == 0) pixelWidth = 50; if ((pixelHeight) == 0) pixelHeight = 50; setBitmap(createErrorBitmap(pixelWidth, pixelHeight)); <FIXE>
<FIXS> yDirRightHip.enterMoCapData(commandList[16], proxy, initTime, false); <FIXE> <FIXS> yDirRightHip.enterMoCapData(commandList[16], proxy, initTime, true); <FIXE>
<FIXS> assert (index) >= (binIndices[ib]); uk.ac.starlink.ttools.plot2.layer.BinBag.Bin bin = createBin(index, binValues[ib]); (index)++; if (((ib) == (nbin - 1)) || ((index) == (binIndices[((ib) + 1)]))) { <FIXE>
<FIXS> <FIXE> <FIXS> writeLog("DEPOSIT", userId, "", value); <FIXE>
<FIXS> java.lang.Integer[] elems = new java.lang.Integer[]{ -76 , 45 , 66 , 3 , null , 54 , 33 }; <FIXE>
<FIXS> com.yahoo.sketches.frequencies.ItemsSketch<java.lang.String> sketch1 = new com.yahoo.sketches.frequencies.ItemsSketch((1 << (com.yahoo.sketches.frequencies.Util.LG_MIN_MAP_SIZE))); <FIXE>
<FIXS> gameEngine.fillSlots(automat); reply.automats.add(automat); <FIXE>
<FIXS> int minNum = (java.lang.Integer.parseInt(timeParts[1])) % 10; oneHourTimerDelay = ((60 - secNum) + (60 * (60 - minNum))) * 1000; <FIXE>
<FIXS> public boolean clickOnMoreOptions(main.Task1Project.Item item) { <FIXE> <FIXS> return true; <FIXE> <FIXS> return false; <FIXE>
<FIXS> y = (yC) - ((simulation.Car.HEIGHT) / 2); <FIXE>
<FIXS> java.lang.String file = browseFile(); if (file != null) { Editor.currentFile = file; <FIXE>
<FIXS> final com.orientechnologies.orient.core.record.impl.ODocument cfg = getNodeConfigurationByUuid(iMember.getUuid(), true); <FIXE>
<FIXS> if (myCookie != null) { myCookie.setMaxAge(0); com.servlet.EnterServlet.sessionTable.remove(com.util.SessionUtil.getSessionId(myCookie.getValue())); response.addCookie(myCookie); } <FIXE> <FIXS> <FIXE>
<FIXS> if ((hexStatus) != null) { hexStatus.setMemoryMode(memoryMode); } <FIXE>
<FIXS> xInput.setText(java.lang.Integer.toString(((int) (event.getSceneX())))); yInput.setText(java.lang.Integer.toString(((int) (event.getSceneY())))); <FIXE>
<FIXS> <FIXE>
<FIXS> public static <T, V> java.util.Comparator<T> propertyComparator(java.lang.String propertyName, V... propertyValues) { <FIXE>
<FIXS> }).start(); <FIXE>
<FIXS> final java.lang.String s = fr.emn.atlanmod.uml.casestudy.rewrite.OCL.gen(e.getType()); <FIXE>
<FIXS> <FIXE>
<FIXS> assertThat(chksumChannel.getChecksum(), equalTo(expectedChecksum)); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> response.getWriter().write(updateUrl); <FIXE>
<FIXS> if ((null != column) && ((column.getValue()) != null)) { <FIXE> <FIXS> }else { value = column.toString(); } <FIXE>
<FIXS> int n = reservedQueue.size(); while (n > 0) { <FIXE> <FIXS> n--; <FIXE>
<FIXS> return fromLotus(getDelegate().getCalendar(toLotus(db)), NotesCalendar.SCHEMA, this); <FIXE>
<FIXS> java.util.List<siena.base.test.model.PersonLongAutoID> people = pm.createQuery(siena.base.test.model.PersonLongAutoID.class).filter("id>=", siena.base.test.BaseAsyncTest.LongAutoID_CURIE.id).order("id").fetch(); <FIXE>
<FIXS> public boolean onOptionsItemSelected(final android.view.MenuItem item) { <FIXE> <FIXS> default : return super.onOptionsItemSelected(item); <FIXE> <FIXS> <FIXE>
<FIXS> if (!(o instanceof simfinder.FieldValue)) { return false; } if (!(header.equals(((simfinder.FieldValue) (o)).getHeader()))) { return false; } if (!(value.equals(((simfinder.FieldValue) (o)).getValue()))) { return false; } return true; <FIXE>
<FIXS> <FIXE>
<FIXS> public void exportBasicTmx() throws java.lang.Exception { <FIXE> <FIXS> com.vistatec.ocelot.tm.okapi.TestOkapiTmxWriter.assertExportedTmxFilesEqual(testFile, com.vistatec.ocelot.tm.okapi.TestOkapiTmxWriter.class.getResourceAsStream("export_tmx_test_goal.tmx")); <FIXE>
<FIXS> public void run() { <FIXE>
<FIXS> com.tencent.bugly.beta.Beta.enableHotfix = false; <FIXE>
<FIXS> path = l.remove(0).toString(); <FIXE>
<FIXS> this.questions = new com.raizlabs.android.dbflow.sql.language.Select().from(org.eyeseetea.malariacare.data.database.model.Question.class).where(Question_Table.id_header.eq(this.getId_header())).orderBy(Question_Table.order_pos, true).queryList(); <FIXE>
<FIXS> return s.append(text); <FIXE>
<FIXS> <FIXE>
<FIXS> if (origSelectedBoardBlok == null) { return null; } <FIXE>
<FIXS> assertNull(handler.addBlankPageIfOdd(new org.sejda.sambox.pdmodel.common.PDRectangle(10, 10))); <FIXE> <FIXS> assertNotNull(handler.addBlankPageIfOdd(new org.sejda.sambox.pdmodel.common.PDRectangle(10, 10))); <FIXE>
<FIXS> java.util.Collection<java.lang.String> ids = new java.util.ArrayList<>(); <FIXE>
<FIXS> return buffer.getInt(); <FIXE>
<FIXS> stack.remove(this); <FIXE>
<FIXS> <FIXE>
<FIXS> if ((bitmap != null) && ((md) != null)) { md.putBitmap(MediaMetadataCompat.METADATA_KEY_ART, bitmap); nb.setLargeIcon(bitmap); } <FIXE>
<FIXS> return !(isWallBlockingPlayerPath(player, xPos, yPos, orientation)); <FIXE>
<FIXS> root.removeNode(v, null); root = null; <FIXE> <FIXS> } if (((size) - 1) < 0) { size = 0; }else { <FIXE>
<FIXS> NotLabelledVertices.remove(v); <FIXE>
<FIXS> verify(nl.tudelft.contextproject.Main.getInstance(), times(1)).getCurrentGame(); verify(mockedGame, times(1)).addEntity(any(nl.tudelft.contextproject.model.entities.Pitfall.class)); <FIXE>
<FIXS> java.lang.reflect.Field field = this.fields.get(name); <FIXE>
<FIXS> <FIXE>
<FIXS> public void selectedButtonStyleLower(javafx.scene.control.Button button) { <FIXE>
<FIXS> <FIXE>
<FIXS> public int modifyField(java.lang.String field, java.lang.String[] value, java.lang.Long id) { <FIXE>
<FIXS> if (toParent != null) { toParent.value().set(net.objectof.actof.porter.IPorterUtil.unqualify(ported.getKey(), toParent), ported.getValue()); <FIXE> <FIXS> <FIXE>
<FIXS> if ((idVNFCI == null) || (idVNFCI.equals(vnfcInstance.getId()))) <FIXE>
<FIXS> ru.semiot.platform.apigateway.utils.Credentials c = new ru.semiot.platform.apigateway.utils.Credentials(id, login, password, role); <FIXE>
<FIXS> displayBoard(player, status); <FIXE>
<FIXS> return (org.talend.dataprep.schema.xls.XlsUtils.getColumnsNumberLastCell(secondPart)) + 1; <FIXE>
<FIXS> <FIXE>
<FIXS> com.cv4j.rxjava.RxImageData.bitmap(mBitmap).addFilter(filter).into(holder.image); <FIXE>
<FIXS> stats.setTackling(com.whippy.tas.premier.util.Utils.getGaussian(40, 40)); <FIXE>
<FIXS> java.lang.System.out.println(((("Purchase successful! You have bought" + quantity) + " ") + (itemSet[index].getName()))); <FIXE> <FIXS> <FIXE>
<FIXS> return (first.evaluate()) - (last.evaluate()); <FIXE>
<FIXS> client.disconnect(); <FIXE> <FIXS> <FIXE>
<FIXS> binaryCalculator.add(); <FIXE>
<FIXS> public static void showDialog(android.content.Context context, int title, int message, int positiveMsg, int negativeMsg, android.content.DialogInterface.OnClickListener okListener) { com.shuruta.sergey.ftpclient.ui.DialogFactory.showDialog(context, context.getString(title), context.getString(message), positiveMsg, negativeMsg, okListener, new android.content.DialogInterface.OnClickListener() { <FIXE>
<FIXS> <FIXE>
<FIXS> tw.kewang.cwb.Cwb.LOG.debug("getFutureWeatherByTown: {}, {}", geocode, date.toString()); <FIXE>
<FIXS> public static javax.swing.JPanel createLabeledTextBox(java.lang.String label, int length) { <FIXE> <FIXS> javax.swing.JTextField text = new javax.swing.JTextField(length); <FIXE>
<FIXS> boolean _exists = false; if (_file != null) { _exists = _file.exists(); } <FIXE>
<FIXS> userInfo.setAvatar(resultInfo.data.getAvatar()); <FIXE>
<FIXS> first.next = new LinkedList.Item<>(t, first, null); last = first.next; <FIXE> <FIXS> last.next = new LinkedList.Item<>(t, last, null); last = last.next; <FIXE>
<FIXS> if (target instanceof com.navercorp.pinpoint.plugin.thrift.field.getter.TNonblockingTransportFieldGetter) { org.apache.thrift.transport.TNonblockingTransport inTrans = ((com.navercorp.pinpoint.plugin.thrift.field.getter.TNonblockingTransportFieldGetter) (target))._$PINPOINT$_getTNonblockingTransport(); if (inTrans != null) { if (inTrans instanceof com.navercorp.pinpoint.plugin.thrift.field.accessor.SocketFieldAccessor) { return ((com.navercorp.pinpoint.plugin.thrift.field.accessor.SocketFieldAccessor) (inTrans))._$PINPOINT$_getSocket(); }else { if (isDebug) { logger.debug("Invalid target object. Need field accessor({}).", com.navercorp.pinpoint.plugin.thrift.field.accessor.SocketFieldAccessor.class.getName()); } <FIXE>
<FIXS> this.reviewID = (profile) + (oldReviews.size()); <FIXE>
<FIXS> if ((portGroup == null) || ((portGroup != null) && (portGroup.equals(mask.getPortGroup())))) { <FIXE>
<FIXS> return (com.helger.commons.equals.EqualsHelper.equals(m_sErrorMessage, rhs.m_sErrorMessage)) && (m_aSuccessValue.equals(rhs.m_aSuccessValue)); <FIXE>
<FIXS> parseObjectMetadata(jp); <FIXE> <FIXS> } <FIXE>
<FIXS> points *= b.getMultiplier(); <FIXE>
<FIXS> java.lang.String id; <FIXE>
<FIXS> if (source != null) { for (java.lang.String key : source.keySet()) { if (!(containsKey(key))) { put(key, source.get(key)); } <FIXE>
<FIXS> if ((command_type != null) && (!(command_type.isEmpty()))) { <FIXE>
<FIXS> java.lang.String filePath = ((m_chosenDir) + (java.io.File.separator)) + (hookString); <FIXE>
<FIXS> if (newActivity && ((this.id) != null)) { link.save(); <FIXE>
<FIXS> char unicode = this.toUnicode.charAt(i); <FIXE>
<FIXS> if (open()) { portState = org.openhab.binding.dsmr.internal.DSMRPort.PortState.AUTO_DETECT; autoDetectTS = java.lang.System.currentTimeMillis(); } <FIXE>
<FIXS> return elFactory.createValueExpression(elContext, expression, java.lang.Object.class); <FIXE>
<FIXS> if (((((Spinner_A1_Choice) != null) && ((Spinner_A2_Choice) != null)) && ((Spinner_D1_Choice) != null)) && ((Spinner_D2_Choice) != null)) { setPaths(Spinner_A1_Choice, Spinner_A2_Choice, Spinner_D1_Choice, Spinner_D2_Choice); onDraw(tempCanvas); } <FIXE> <FIXS> <FIXE>
<FIXS> mIntent = new android.content.Intent(this, com.myos.myos.Salon.class); <FIXE> <FIXS> <FIXE>
<FIXS> db.execSQL(("CREATE TABLE `blacklist` (" + ((((((((" `id` INTEGER PRIMARY KEY AUTOINCREMENT," + " `scientificName` varchar(255) NOT NULL,") + " `navn` varchar(255) NOT NULL,") + " `risiko` varchar(255) NOT NULL,") + " `taxonID` int(11) NOT NULL,") + " `canEat` tinyint(1) NOT NULL DEFAULT '0',") + " `family` varchar(255) NOT NULL,") + " `image` int(11) NOT NULL") + ")"))); <FIXE>
<FIXS> <FIXE>
<FIXS> java.lang.reflect.Field[] fields = indi.yume.tools.autosharedpref.util.ReflectUtil.getDeclaredFields(clazz); <FIXE>
<FIXS> summaryMap.put(key.toString(), summary); <FIXE>
<FIXS> java.lang.String file = readLine("save as: "); <FIXE>
<FIXS> public static void main(java.lang.String[] arguments) throws java.lang.Exception { <FIXE> <FIXS> Avans.DesignPatterns2.Main.createTokenList(tokenList, "..\\JarkHunt\\src\\script2.txt"); <FIXE>
<FIXS> if (((Build.VERSION.SDK_INT) >= (Build.VERSION_CODES.JELLY_BEAN)) && (((android.support.v4.app.ActivityCompat.checkSelfPermission(this, Manifest.permission.CAMERA)) != (android.content.pm.PackageManager.PERMISSION_GRANTED)) || ((android.support.v4.app.ActivityCompat.checkSelfPermission(this, Manifest.permission.VIBRATE)) != (android.content.pm.PackageManager.PERMISSION_GRANTED)))) { <FIXE>
<FIXS> long ret = atoi(str.trim()); <FIXE>
<FIXS> } finally { sockets.remove(socket); <FIXE> <FIXS> <FIXE>
<FIXS> zj.remote.baselibrary.util.PreferenceUtils.putString(Config.KEY_USER, mLoginUserEdt.getText().toString(), this); zj.remote.baselibrary.util.PreferenceUtils.putBoolean(Config.KEY_ISLOGIN, true, this); zj.remote.baselibrary.util.PreferenceUtils.putString(Config.KEY_PASS, mLoginPassEdt.getText().toString(), this); <FIXE> <FIXS> <FIXE>
<FIXS> public void exitApplication() { <FIXE>
<FIXS> response += java.lang.String.format("%s\n", order); <FIXE>
<FIXS> while (((root) == null) && (future.channel().isOpen())) { <FIXE>
<FIXS> <FIXE>
<FIXS> resize((2 * (arr.length))); <FIXE>
<FIXS> if (((BotParser.mRound) == 1) || ((BotParser.mRound) == 2)) { <FIXE> <FIXS> } if ((BotParser.mRound) >= 3) { winAns = BotParser.mField.checkWin(BotParser.mBotId); if (winAns != 9) return winAns; <FIXE> <FIXS> winAns = BotParser.mField.checkWin(BotParser.mBotIdE); if (winAns != 9) return winAns; <FIXE> <FIXS> int move = new java.util.Random().nextInt(7); return move; <FIXE>
<FIXS> public java.lang.Long save(de.jordsand.birdcensus.core.BirdCount instance) { <FIXE> <FIXS> long id = db.insert(BirdCountContract.BirdCount.TABLE_NAME, null, converter.extractBirdCountTableData(instance)); <FIXE> <FIXS> return id; <FIXE>
<FIXS> <FIXE>
<FIXS> for (dependency.ADependency obj : this.df) { attrJoint.addAttributes(obj.getAntecedent()); attrJoint.addAttributes(obj.getConsequent()); <FIXE>
<FIXS> <FIXE> <FIXS> body.add(new java.awt.Point((((Global.WIDTH) / 2) - 1), (-2))); <FIXE>
<FIXS> if (!(fList[idx].isFile())) { <FIXE> <FIXS> java.lang.String namefile = sogrn; return new akayerov.getsnils.IpraFile(fList[((idx)++)].getAbsolutePath(), sogrn, namefile); } (idx)++; <FIXE>
<FIXS> if (bundleContext == null) { return false; } <FIXE>
<FIXS> java.lang.String function = ((("function " + (this.getName())) + "(") + (this.params)) + ") {\n"; <FIXE>
<FIXS> org.pentaho.metastore.api.IMetaStore metaStore = mock(org.pentaho.metastore.api.IMetaStore.class); <FIXE> <FIXS> verify(metaStoreFactory, never()).getElementNames(); assertEquals(expectedNames, namedClusterManager.listNames(metaStore)); <FIXE>
<FIXS> if ((candidates.isEmpty()) && ((info) == null)) { <FIXE>
<FIXS> return new org.exoplatform.task.dao.TaskQuery((condition != null ? ((org.exoplatform.task.dao.condition.AggregateCondition) (condition.clone())) : null), getOrderBy(), ((projectIds) != null ? new java.util.ArrayList<java.lang.Long>(projectIds) : null), assignee); <FIXE>
<FIXS> if (isAdded) { tds.TaskTree.increaseTaskListSize(); tds.TaskTree.pushAddToStorage(task); } <FIXE>
<FIXS> synchronized(callbacks) { if ((callbacks.size()) > 0) { for (java.lang.ref.WeakReference<com.V2.jni.callback.ChatRequestCallback> wf : callbacks) { if ((wf.get()) == null) { continue; } wf.get().OnSendTextResultCallback(eGroupType, nGroupID, nFromUserID, nToUserID, sSeqID, nResult); <FIXE> <FIXS> <FIXE>
<FIXS> return rx.Observable.just(rejasupotaro.mds.data.models.Pokemons.allPokemonNames(query)); <FIXE>
<FIXS> <FIXE>
<FIXS> if (configurationElement != null) { for (org.eclipse.core.runtime.IConfigurationElement configurationElementChild : configurationElement.getChildren(parameter)) { if ((configurationElementChild.getAttribute(parameter)) != null) { return configurationElementChild.getAttribute(parameter); } <FIXE>
<FIXS> public android.content.SharedPreferences storeScores(java.util.List scores) { <FIXE> <FIXS> return prefs; <FIXE>
<FIXS> if (mSkillIds.isEmpty()) return null; <FIXE>
<FIXS> if (!(allKeszitmeny.isEmpty())) { keszitmenyID = allKeszitmeny.get(0).getId(); } if (!(allKiszereles.isEmpty())) { kiszerelesID = allKiszereles.get(0).getId(); } <FIXE>
<FIXS> if (!(living instanceof org.spongepowered.api.entity.ArmorEquipable)) { return false; } <FIXE>
<FIXS> java.lang.String groupPrefix = (((getGroup()) == null) || (getGroup().isEmpty())) ? "" : (getGroup()) + groupDelimiter; <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> if ((com.feilong.core.util.Validator.isNullOrEmpty(maxIndexPages)) || (maxIndexPages <= 0)) { <FIXE>
<FIXS> <FIXE>
<FIXS> for (java.lang.Object cluster : clusters) { Point aux = ((Cluster) (cluster)).getCentroid(); <FIXE>
<FIXS> private java.lang.String saveUser(org.springframework.ui.Model model, @org.springframework.web.bind.annotation.ModelAttribute(value = "userStub") @javax.validation.Valid <FIXE> <FIXS> <FIXE>
<FIXS> for (io.relayr.websocket.WebSocketCallback socketCallback : mTopicCallbacks.get(topic)) <FIXE>
<FIXS> if (cause != null) cause.printStackTrace(); <FIXE>
<FIXS> <FIXE>
<FIXS> if (j < (n)) { <FIXE>
<FIXS> if (bHandshakeResponse) { <FIXE>
<FIXS> return ((mValue) - 32) / 1.8F; <FIXE> <FIXS> return ((mValue) * 1.8F) + 32; <FIXE>
<FIXS> closeTooltip(); <FIXE>
<FIXS> return forestry.core.worldgen.WorldGenHelper.generateBranches(world, rand, wood, startPos.add(0, ((height) - 1), 0), girth, 0.15F, 0.25F, ((height) / 4), 1, 0.25F); <FIXE>
<FIXS> public void pingResponseDataPartShouldContainPingForConfigurationResponse() throws java.lang.Exception { context.start(); <FIXE>
<FIXS> return -1; <FIXE> <FIXS> return 1; <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> importer.importConcept(new org.openmrs.module.openconceptlab.CacheService(conceptService), update, oclConcept); <FIXE> <FIXS> importer.importConcept(new org.openmrs.module.openconceptlab.CacheService(conceptService), update, oclConcept); <FIXE>
<FIXS> power = ((3.05 + (4.577 * speed)) + ((0.01798 * speed) * speed)) + (((2.038E-5 * speed) * speed) * speed); <FIXE>
<FIXS> resultActivityError = ((resultActivityError) + " : ") + (e.getMessage()); <FIXE>
<FIXS> java.lang.System.out.print((response + " ")); <FIXE>
<FIXS> <FIXE>
<FIXS> protected boolean checkBlock(org.w3c.dom.Node node) { <FIXE>
<FIXS> if ((s == null) || ((s.deadline) > (nanos))) <FIXE>
<FIXS> java.math.BigDecimal b = java.math.BigDecimal.valueOf(num1); <FIXE>
<FIXS> if (inputStr == null) inputStr = ""; <FIXE>
<FIXS> if (charSequence != null) { java.util.List<java.lang.String> results = findSuggestions(charSequence.toString()); <FIXE>
<FIXS> <FIXE> <FIXS> repaint(); revalidate(); <FIXE>
<FIXS> new edu.stanford.epad.epadws.models.ProjectToSubjectToStudy().deleteObjects(("study_id=" + (study.getId()))); <FIXE>
<FIXS> <FIXE>
<FIXS> final long runtime = ((args.length) > 0) ? java.lang.Long.parseLong(args[0]) : com.awesome.BaseExamplePeriod.DEFAULT_RUN_TIME_MSEC; <FIXE>
<FIXS> if ((data != null) && (!(data.getStringExtra(it.jaschke.alexandria.AddBook.ISBN_RESULT).equals("-1")))) { <FIXE>
<FIXS> <FIXE>
<FIXS> org.walkersguide.utils.POIPreset preset = settingsManager.getPOIPreset(settingsManager.getPresetIdInRouterFragment()); if ((((currentLocation) == null) || ((currentCompassValue) < 0)) || (preset == null)) { <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> if ((agents.size()) > 0) { for (Agents.Agent agent : agents) { if ((agent.food) <= 0) { GameLogic.Position deathPlace = agent.position; agents.remove(agent); tiles[deathPlace.x][deathPlace.y].agents.remove(agent); } <FIXE>
<FIXS> java.lang.System.out.println(data.getStatus()); <FIXE>
<FIXS> frogger.ObstacleRow<frogger.Car> car1 = new frogger.ObstacleRow((-75), 150, 500, 50, 2, 500, new java.util.ArrayList<>(), 2, 3, java.awt.Color.BLACK); <FIXE>
<FIXS> if (((demoData) != null) && ((demoData.size()) == 0)) { float centerX = viewWidth / 2; float centerY = viewHeight / 2; float deltaX = viewWidth / ((float) (de.peterloos.beziersplines.utils.ControlPointsHolder.NumDemoEdges)); float deltaY = viewHeight / ((float) (de.peterloos.beziersplines.utils.ControlPointsHolder.NumDemoEdges)); demoData = de.peterloos.beziersplines.utils.ControlPointsHolder.getDemoRectangle(centerX, centerY, deltaX, deltaY); } <FIXE>
<FIXS> files.add(new omnikryptec.util.AdvancedFile(true, ME, path_name)); <FIXE>
<FIXS> com.untappedkegg.rally.data.DbUpdated.updated_insert(parser); <FIXE>
<FIXS> if (newVal == null) <FIXE> <FIXS> if (oldVal == null) <FIXE>
<FIXS> <FIXE>
<FIXS> this.id = ((int) (con.createQuery(sql, true).addParameter("name", this.name).addParameter("email", this.email).executeUpdate().getKey())); <FIXE>
<FIXS> public void setDimensions() { <FIXE>
<FIXS> new com.raccoonapps.pricemanager.app.client.task.ProductsUpdateTask(null, productsFile, storeFile, false, getApplicationContext()).execute(); <FIXE>
<FIXS> boolean isMyOwnMsg = !(newItem.isIncomingMessage()); <FIXE>
<FIXS> return userDao.update(user); <FIXE>
<FIXS> tuples.add(new cascading.tuple.TupleEntry(iter.next())); <FIXE>
<FIXS> if ((org.gtlp.yasb.SoundActivity.soundPlayerInstance.get()) != null) { if ((SoundActivity.seekBar) != null) { SoundActivity.seekBar.setMax(org.gtlp.yasb.SoundActivity.soundPlayerInstance.get().getDuration()); SoundActivity.seekBar.setProgress(org.gtlp.yasb.SoundActivity.soundPlayerInstance.get().getCurrentPosition()); } if ((SoundActivity.timeText) != null) { SoundActivity.timeText.setText(SoundActivity.soundPlayerInstance.get().getFormattedProgressText()); } <FIXE>
<FIXS> newMocha.setAmtCoffee("a"); <FIXE>
<FIXS> java.lang.String[] possibleTitles = new java.lang.String[]{ leg.routeShortName , leg.route , leg.routeId }; <FIXE>
<FIXS> xs[(offset + i)] = ((java.lang.Number) (fn.invoke(xs[(offset + i)], ys.unsafeGet(i)))).doubleValue(); <FIXE>
<FIXS> return dot; <FIXE>
<FIXS> for (int i = 0; i < (zip.length()); i++) { <FIXE>
<FIXS> ca.nrc.cadc.caom2.artifact.resolvers.MastResolverTest.log.info(("IllegalArgumentException thrown as expected. Test passed.: " + expected)); <FIXE>
<FIXS> arr = arr2; <FIXE>
<FIXS> if ((inventory.get(i).getStatus()) == 1) { <FIXE>
<FIXS> synchronized(this.plugin.playersToCheck) { for (org.bukkit.entity.Player player : this.plugin.playersToCheck) { if (!(this.plugin.checkWorld(player.getWorld().getName()))) { player.sendMessage(("This world is currently restricted.\n" + (DimRestrictor.plugin.info(player.getWorld().getName())))); net.kaikk.mc.DimRestrictor.DimRestrictor.teleportPlayer(player, player.getLocation()); } this.plugin.playersToCheck.remove(player); <FIXE> <FIXS> <FIXE>
<FIXS> @org.junit.Test public void testNextExecutionEveryTwoWeeksStartingWithFirstDayOfYear() { <FIXE> <FIXS> com.cronutils.model.time.ZonedDateTime expected = now.plusDays((15 - dayOfMostRecentPeriod)); <FIXE>
<FIXS> public boolean ParseJSONObject() { <FIXE> <FIXS> return true; <FIXE> <FIXS> return false; <FIXE>
<FIXS> if ((module) != null) for (java.awt.Component c : getComponents()) { c.setForeground(color); } <FIXE> <FIXS> <FIXE>
<FIXS> return x - 1; <FIXE>
<FIXS> if ((queryResult != null) && (!(queryResult.isEmpty()))) { <FIXE>
<FIXS> parentMessageId = subject.substring(pos); <FIXE>
<FIXS> java.lang.String id = classToBeanMap.get(pluginClass.getName()); <FIXE>
<FIXS> <FIXE>
<FIXS> if (placeGuess != null) { placeGuess = placeGuess.trim(); } <FIXE>
<FIXS> return commandList_.getHelpArgumentList().contains(arguments[0]); <FIXE>
<FIXS> public java.lang.String setFakeHash() { <FIXE> <FIXS> return this.hash.trim(); <FIXE>
<FIXS> m.setId(getNewId()); <FIXE>
<FIXS> private void postConvert(short[] inPixels, byte[] outPixels, int begin, int end) { <FIXE> <FIXS> int p = begin; while (p < end) { short f = inPixels[(p++)]; <FIXE> <FIXS> } <FIXE>
<FIXS> ((org.bukkit.entity.Damageable) (e.getEntity())).damage(e.getDamage(), e.getDamager()); <FIXE>
<FIXS> desc.appendText("%s: not Brand -> %.2f", cand, mismatchScore.asDouble()); <FIXE>
<FIXS> if ((packet.length) <= 20) <FIXE>
<FIXS> if (key != null) { text.append(key); text.append(": "); } <FIXE>
<FIXS> if (!(helper.CalendarHelper.getDateTimeString(datetime).toLowerCase().equals(dateTimeString.toLowerCase()))) { <FIXE>
<FIXS> if (e instanceof java.io.IOException) { throw ((java.io.IOException) (e)); } <FIXE>
<FIXS> return net.es.oscars.helpers.RequestedVlanFlowE.builder().junctions(junctions).pipes(pipes).minPipes(minPipes).maxPipes(maxPipes).containerConnectionId(connectionId).build(); <FIXE>
<FIXS> <FIXE>
<FIXS> }else if (decl instanceof wyal.util.Declaration.Named.Macro) { wyal.util.Declaration.Named.Macro md = ((wyal.util.Declaration.Named.Macro) (decl)); return expandMacroBody(md, arguments.getOperands()); }else { return null; } <FIXE>
<FIXS> <FIXE>
<FIXS> return ((o instanceof West.Math.ComplexNumber) && (((West.Math.ComplexNumber) (o)).real.equals(real))) && (((West.Math.ComplexNumber) (o)).imag.equals(imag)); <FIXE>
<FIXS> <FIXE> <FIXS> game.batch.begin(); game.batch.draw(sprite_title, 0, 0); <FIXE>
<FIXS> <FIXE>
<FIXS> org.opendatakit.tables.utils.ImportExportDialog.newInstance(ImportExportDialog.EXPORT_IN_PROGRESS_DIALOG, this); org.opendatakit.tables.tasks.ExportTask task = new org.opendatakit.tables.tasks.ExportTask(appName, this); <FIXE>
<FIXS> public java.lang.Object loggedInUser() { <FIXE> <FIXS> return new com.codecool.neighbrotaxi.model.SerializableSessionStorage(sessionStorage); <FIXE> <FIXS> return sessionStorage.getLoggedInUser(); <FIXE>
<FIXS> android.bluetooth.le.ScanSettings settings = new android.bluetooth.le.ScanSettings.Builder().setScanMode(ScanSettings.SCAN_MODE_LOW_POWER).build(); <FIXE>
<FIXS> if (!(getChildren().contains(closeButton))) { <FIXE> <FIXS> } <FIXE>
<FIXS> else { blueInvLabel.setVisible(false); redInvLabel.setVisible(false); } <FIXE>
<FIXS> a.put(error.toJSON()); <FIXE>
<FIXS> importMenuItem.addActionListener(( ae) -> new diplom.importexport.ImportExportSwingFrame("импорт/кспорт данных")); <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> if ((paddle.width) < 75) { <FIXE>
<FIXS> <FIXE>
<FIXS> @net.smartcosmos.dao.things.impl.Test <FIXE> <FIXS> assertFalse(response.isEmpty()); <FIXE> <FIXS> assertTrue(((("Expected " + expectedSize) + " but received ") + actualSize), (actualSize == expectedSize)); <FIXE>
<FIXS> private int getStartIndex() { <FIXE>
<FIXS> <FIXE>
<FIXS> out.append(job).append("\t").append(mappedJobs.get(job)[0]).append("\t").append(mappedJobs.get(job)[1]).append("\n"); <FIXE>
<FIXS> recyclerView.setAdapter(new com.xiaofeng.androidlibs.TagAdapter(com.xiaofeng.androidlibs.DemoUtil.generate(1, 3, 13))); <FIXE>
<FIXS> <FIXE>
<FIXS> if ((rc) != null) { rc.stop(); pauseTime = java.lang.System.currentTimeMillis(); totalForgroundTime = (tinydb.getLong("TotalForegroundTime", 0)) + ((pauseTime) - (resumeTime)); tinydb.putLong("TotalForegroundTime", totalForgroundTime); } <FIXE>
<FIXS> if ((v.getId()) == (R.id.upload_files_btn_upload)) { new com.owncloud.android.ui.activity.UploadFilesActivity.CheckAvailableSpaceTask().execute(((mBehaviourSpinner.getSelectedItemPosition()) == 0)); <FIXE>
<FIXS> private java.lang.Long matchesContract(net.nikr.eve.jeveasset.gui.tabs.contracts.MyContractItem contractItem, boolean add) { if (contractItem != null) { return matches(add, contractItem.getTypeID(), (contractItem.getContract().isForCorp() ? contractItem.getContract().getIssuerCorpID() : contractItem.getContract().getIssuerID()), null, null, contractItem.getContract().getLocations(), null, null, null, null, contractItem); }else { return null; } <FIXE>
<FIXS> super.onBackPressed(); <FIXE>
<FIXS> current = current.getNext(); <FIXE>
<FIXS> direct = mmt.uit.placehelper.services.SearchPlace.getDirection(curLoc.getLat(), curLoc.getLng(), plDetail.getGeometry().getLocation().getLat(), plDetail.getGeometry().getLocation().getLng(), params[0]); <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> return super.produce(subType, com.oculusinfo.factory.UberFactory.getFactoryType()); <FIXE>
<FIXS> if ((((grantResults.length) > 0) && ((grantResults[0]) == (android.content.pm.PackageManager.PERMISSION_GRANTED))) && ((grantResults[1]) == (android.content.pm.PackageManager.PERMISSION_GRANTED))) { <FIXE>
<FIXS> if ((diaVirada) > (diaVencimento)) { dataCobranca.add(java.util.Calendar.MONTH, 1); } <FIXE>
<FIXS> android.util.Log.v(com.plugin.gcm.NotificationService.TAG, ("registration error -> No Register callback - webview: " + (getWebView()))); <FIXE>
<FIXS> <FIXE>
<FIXS> if ((t != null) && (!(derivedPermissions.contains(t)))) { <FIXE>
<FIXS> <FIXE> <FIXS> ResidenceList.put(newResidence.toLowerCase(), res); <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> org.hamcrest.MatcherAssert.assertThat(com.ddiehl.timesincetextview.TimeSince.getFormattedDateString(((mTime) - ((((30 * 365) * 24) * 60) * 60)), mTime, false, getContext()), com.ddiehl.timesincetextview.TimeSinceTextViewAndroidTest.is(getQuantityString(R.plurals.tstv_timespan_years, 30))); <FIXE>
<FIXS> com.sogilis.ReactNativeBluetooth.BluetoothAction disconnectAction = new com.sogilis.ReactNativeBluetooth.BluetoothAction(DEVICE_DISCONNECTED, deviceId, eventEmitter) { <FIXE>
<FIXS> int result = ((t1) != null) ? t1.hashCode() : 0; <FIXE>
<FIXS> junit.framework.Assert.assertTrue(adapter.getAlbumList().contains("Hallo Welt!")); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> ExtractKeyterms(); <FIXE>
<FIXS> java.util.Set<domain.ContractOption> currentIncOptions = option.getIncompatibleOptions(); java.util.Set<domain.ContractOption> removingOptions = new java.util.HashSet(currentIncOptions); <FIXE> <FIXS> java.util.Set<domain.ContractOption> newOptions = new java.util.HashSet(newIncOptions); <FIXE> <FIXS> for (domain.ContractOption newOption : newOptions) { <FIXE>
<FIXS> public boolean isManaTurn(int turnNum) { <FIXE>
<FIXS> public java.lang.String actionSignup() { <FIXE>
<FIXS> com.oracle.truffle.api.object.Shape oldShape = obj.getShape(); com.oracle.truffle.api.object.Shape newShape = oldShape.createSeparateShape(obj.getShape().getSharedData()).replaceProperty(oldShape.getProperty(som.vmobjects.SReflectiveObject.ENVIRONMENT), com.oracle.truffle.api.object.Property.create(som.vmobjects.SReflectiveObject.ENVIRONMENT, oldShape.allocator().constantLocation(value), 0)); <FIXE>
<FIXS> java.lang.System.out.println((result - 1)); <FIXE>
<FIXS> public static java.lang.String encrypt(java.lang.String algorithm, java.lang.String clearText) { <FIXE>
<FIXS> if (!(diffY.contains(cell.y))) { diffY.add(cell.y); <FIXE>
<FIXS> if (a1 != a2) { <FIXE>
<FIXS> public static void print(int[] o) { <FIXE> <FIXS> for (int elem : o) { <FIXE>
<FIXS> parentNode = this.session.getRootNode(); <FIXE>
<FIXS> java.util.Map<java.lang.String, java.lang.Object> result = new java.util.HashMap<>(); <FIXE>
<FIXS> venue.setText(task.getVenue().getValue()); <FIXE>
<FIXS> }else { this.advance(timeToFirstCollision); this.resolveCollision(collistionListener); java.lang.System.out.println(timeToFirstCollision); this.evolve((time - timeToFirstCollision), collistionListener); <FIXE> <FIXS> <FIXE>
<FIXS> return false; <FIXE>
<FIXS> new org.jboss.tools.fuse.reddeer.projectexplorer.CamelProject(org.jboss.tools.fuse.ui.bot.test.ProjectLocalRunTest.PROJECT_NAME).runCamelContext(); <FIXE>
<FIXS> --(size); <FIXE> <FIXS> <FIXE>
<FIXS> payment = new model.Payment(service, 1, 1, 1); <FIXE>
<FIXS> <FIXE>
<FIXS> location = new Model.Location(x, y); <FIXE>
<FIXS> load(); <FIXE>
<FIXS> return this.releaseBug(stack, world, player, hand, releasePoint) ? new net.minecraft.util.ActionResult<net.minecraft.item.ItemStack>(net.minecraft.util.EnumActionResult.SUCCESS, stack) : new net.minecraft.util.ActionResult<net.minecraft.item.ItemStack>(net.minecraft.util.EnumActionResult.FAIL, stack); <FIXE>
<FIXS> objUserDAO = new UserDAO(); <FIXE>
<FIXS> if (getSharedPreferences(CONST.PREFS, com.brainmurphy.roomhack.MODE_PRIVATE).getBoolean(CONST.IS_LOGGED_IN, false)) { <FIXE>
<FIXS> layoutComponent(component, "100%", 1, Alignment.MIDDLE_RIGHT); <FIXE>
<FIXS> public void setExtendedIngredients() { <FIXE>
<FIXS> assert (connection.current()) != null : "cannot call remote functions without a connected client in context"; <FIXE>
<FIXS> value += component.calculateComponentValue(draughtsState, isWhitePlayer, depth, value); <FIXE>
<FIXS> T builtInService = getBuiltInService(configuration); <FIXE>
<FIXS> <FIXE>
<FIXS> if ((!(isUnsubscribed())) && (((count)++) < (limit))) { boolean stop = (count) == (limit); <FIXE>
<FIXS> if (!(developerId.equals(product.getDeveloperId()))) { <FIXE>
<FIXS> <FIXE> <FIXS> for (int i = 0; i < 17; i++) <FIXE> <FIXS> for (int i = 0; i < (jj_2_rtns.length); i++) <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> afterCopyDocumentFolder = new org.alfresco.repo.policy.JavaBehaviour(this, "onCopyComplete", Behaviour.NotificationFrequency.TRANSACTION_COMMIT); <FIXE>
<FIXS> return ((((getPresenceRole()) == (peer_p.getPresenceRole())) && ((getFeature().getEOpposite()) == (peer_p.getFeature()))) && ((getElementMatch()) == (peer_p.getValueMatch()))) && ((getValueMatch()) == (peer_p.getElementMatch())); <FIXE>
<FIXS> clientportal.EnrollCustomerPage.Goto().selectTemplate(BrandedMessagingTests.templateName).verifyPreviewImage(BrandedMessagingTests.imageID, true).selectTemplate(BrandedMessagingTests.templateName).verifyPreviewImage(BrandedMessagingTests.imageID, false); <FIXE>
<FIXS> shoot(Type.BULLET, Direction.DOWN); <FIXE>
<FIXS> i = i + 1; <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> return ((((command == (INDEX_ADD)) || (command == (INDEX_EDIT))) || (command == (INDEX_DELETE))) || (command == (INDEX_COMPLETE))) || (command == (INDEX_INCOMPLETE)); <FIXE>
<FIXS> if (((antiCSRFToken.sessionID) != null) && (antiCSRFToken.sessionID.equals(sessionID))) { <FIXE>
<FIXS> <FIXE>
<FIXS> io.particle.android.sdk.utils.EZ.runOnMainThread(toastRunnable); <FIXE>
<FIXS> private static java.lang.String getImports() { <FIXE>
<FIXS> return (of.getEgo().getId().equals(subset.getEgo().getId())) && (of.alters.containsAll(subset.alters)); <FIXE>
<FIXS> com.charlesmadere.hummingbird.networking.Api.hydrateFeed(body, null, listener); <FIXE>
<FIXS> <FIXE>
<FIXS> public void retrieveName() throws java.lang.Exception { <FIXE> <FIXS> pingproject.web.ManagedBeans.PingWebBeanTest.spy.retrieveName(); <FIXE>
<FIXS> mockMvc.perform(get(com.cinema.controller.rest.CustomerControllerTest.CUSTOMER_GET_ALL).accept(MediaType.APPLICATION_JSON)).andDo(org.springframework.test.web.servlet.result.MockMvcResultHandlers.print()); <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> this.getSCIMAttributes(userName, claims); <FIXE>
<FIXS> return new emcshop.scraper.EmcSession(username, password, connection.getCookieStore()); <FIXE>
<FIXS> server.startup(true); <FIXE>
<FIXS> currentState = State.IS_WAIT; listener.setPlayerStates((-1), State.IS_WAIT); <FIXE> <FIXS> <FIXE>
<FIXS> moviePoster = null; <FIXE>
<FIXS> if (!(fragmentMediator.backPressWebView())) { edu.rutgers.css.Rutgers.utils.LogUtils.LOGV(edu.rutgers.css.Rutgers.ui.MainActivity.TAG, ("Back button pressed. Leaving top component: " + (edu.rutgers.css.Rutgers.utils.AppUtils.topHandle(this)))); super.onBackPressed(); } <FIXE>
<FIXS> adapter.setShowLoading(((shots.size()) >= (com.jiuzhang.guojing.dribbbo.dribbble.Dribbble.COUNT_PER_LOAD))); <FIXE>
<FIXS> if ((this.dc) != null) try { log.info("Closing connection."); this.dc.close(); log.info("Connection close."); } catch (final java.io.IOException e) { log.error(e.getLocalizedMessage()); log.error("Impossible to close connection."); } <FIXE>
<FIXS> int[][] out = new int[_buffer.length][_buffer[0].length]; for (int i = 0; i < (_buffer.length); i++) for (int j = 0; j < (_buffer[0].length); j++) <FIXE>
<FIXS> crawl.run(); <FIXE>
<FIXS> loadScene(scale, translation); <FIXE>
<FIXS> LogicHW1.out.println(("Сх. акс. " + (i + 1))); <FIXE>
<FIXS> <FIXE>
<FIXS> if ((appBarLayout != null) && ((mItem) != null)) { <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> if (temp >= (weights[((weights.length) - 1)])) return 1; return 0; <FIXE>
<FIXS> return score; <FIXE>
<FIXS> if (playerTeam != null) player.setDisplayName(((((playerTeam.getPrefix()) + playerName) + (playerTeam.getSuffix())) + (org.bukkit.ChatColor.RESET))); else player.setDisplayName(playerName); <FIXE>
<FIXS> if ((this.y) == (that.y)) { return 0; } <FIXE>
<FIXS> runner.run(testPage); <FIXE>
<FIXS> sendSimplePostRequest(3, null); readSimplePostResponse(false); <FIXE>
<FIXS> return execute(Method.GET, Regions.INSTANCE.region(bucketName), bucketName, objectName, headerMap, queryParamMap, null, 0); <FIXE>
<FIXS> com.google.common.base.Preconditions.checkNotNull(key); com.google.common.base.Preconditions.checkNotNull(value); <FIXE>
<FIXS> private java.lang.Long captchaHashCalculation(java.lang.String value) { <FIXE> <FIXS> return java.lang.Long.valueOf(hash); <FIXE>
<FIXS> <FIXE>
<FIXS> stmt.executeQuery(); <FIXE>
<FIXS> return org.apache.commons.lang3.tuple.Pair.of(org.geneontology.minerva.util.IdStringManager.getId(individual), individual); <FIXE>
<FIXS> if (roiData != null) { if ((roiData.size()) > 0) { setFields(); notifyRoiListeners(roiData); if (defaultCheckBox.isSelected()) { notifyRoiListeners(chosenPath); } this.setVisible(false); }else { errorText.setText("Error loading: File not found!"); <FIXE> <FIXS> <FIXE>
<FIXS> java.lang.System.arraycopy(values, 0, padded, 0, padded.length); <FIXE>
<FIXS> if (git_aptra.SearchApplicant.DialogSearchApplicantApplication.vacancy.equals("Bitte ausw�hlen")) { <FIXE>
<FIXS> removeDuplicatedTrigger(listener.getTriggers()); <FIXE> <FIXS> <FIXE>
<FIXS> VCDLoaderTest.ExpectTraceBuilder.Event event = fEventList.get(((fCurrentEvent)++)); <FIXE>
<FIXS> float[] array = new float[0]; <FIXE>
<FIXS> com.google.common.base.Preconditions.checkNotNull(observer, "observer"); <FIXE> <FIXS> com.google.common.base.Preconditions.checkArgument(verifySource(observer), "Observer is not the right type!"); <FIXE>
<FIXS> if (((!(o instanceof java.lang.String)) && (!(o instanceof java.lang.Integer))) && (!(o instanceof java.lang.Double))) { <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> java.lang.System.out.println(doc.toString()); <FIXE>
<FIXS> throw new com.stormpath.sdk.servlet.filter.oauth.OAuthException(err, msg, e); <FIXE>
<FIXS> <FIXE> <FIXS> org.openmrs.mobile.activities.LoginActivity.mLastURL = result.getUrl(); <FIXE>
<FIXS> asm_array.add(new backend.Compiler.asm_line(raw_lines[line_i])); <FIXE> <FIXS> <FIXE>
<FIXS> if (!(this.numbers.isEmpty())) { int mid = (this.numbers.size()) / 2; if ((mid % 2) == 1) { this.medianOfAllNumbers = this.numbers.get(mid); }else { this.medianOfAllNumbers = ((this.numbers.get((mid - 1))) + (this.numbers.get(mid))) / 2.0; } <FIXE>
<FIXS> <FIXE>
<FIXS> if (!(t.get(OdetailTable.ID).pnos.contains(t.get(PartTable.ID)))) <FIXE>
<FIXS> if ((subject != null) && (subject.coincide(bookedRange))) { <FIXE>
<FIXS> return create(data(), new int[]{ 1 , 1 }, new int[]{ 1 , 1 }, (applyOffset ? (offset) + i : i)); <FIXE>
<FIXS> net.torocraft.minecoprocessors.processor.ProcessorTest.assertRegisters(processor, 2, 2, 0, 0); <FIXE> <FIXS> net.torocraft.minecoprocessors.processor.ProcessorTest.assertRegisters(processor, 0, 2, 0, 0); <FIXE>
<FIXS> if (com.ai.dubbo.ext.vo.BaseInfo.class.getName().equals(clazz.getSuperclass().getName())) { <FIXE>
<FIXS> server.Server.addAsk(user, models.trade.Stock.valueOf(item), qty, price, null); <FIXE>
<FIXS> java.util.Set<java.lang.Integer> targetCourses = new java.util.HashSet<>(); <FIXE> <FIXS> if (com.sevendragons.practice.leetcode.medium.coursesschedule.Solution.isCourseContainedInPrerequisites(prerequisitePerCourse, targetCourses, course)) { <FIXE>
<FIXS> model.put("page", new be.nille.blog.web.controller.post.PostsPage(posts, categories, null)); <FIXE>
<FIXS> public rifServices.businessConceptLayer.HealthCode transformTaxonomyTermIntoHealthCode(rifServices.taxonomyServices.TaxonomyTerm term) { if (term == null) { return null; } <FIXE>
<FIXS> java.lang.String translation = cn.nukkit.Server.getInstance().getLanguage().translateString("chat.type.achievement", player.getDisplayName(), ((cn.nukkit.utils.TextFormat.GREEN) + (this.getMessage())), null); <FIXE>
<FIXS> ActivityRecognitionPlugin.Activity.ActivityType = "NotConfidentEnough"; <FIXE>
<FIXS> java.util.List<com.foodie.app.entities.Activity> businessActivities = com.foodie.app.database.Converters.cursorToActivityList(localDB.getActivity(new java.lang.String[]{ id }, new java.lang.String[]{ com.foodie.app.entities.Activity.ACTIVITY_BUSINESS_ID })); <FIXE>
<FIXS> }else { iv.setImage(hArrow); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> for (byte b = this.state.sfrs.A.getValue(); b != 0; b = ((byte) (b & (b - 1)))) <FIXE>
<FIXS> return new org.json.JSONObject(); <FIXE>
<FIXS> <FIXE> <FIXS> net.minecraft.block.state.IBlockState state = this.world.getBlockState(this.pos); this.world.notifyBlockUpdate(this.pos, state, state, 3); <FIXE>
<FIXS> vm.selectAllWithSameColours(sels, true); <FIXE>
<FIXS> <FIXE> <FIXS> done = true; <FIXE>
<FIXS> <FIXE> <FIXS> tmpTwoCMPProjection_beq.set(i, 0, 1.0); <FIXE>
<FIXS> rawTextPanel = getMainFrame().getRawTextPanel(); imagePanel = getMainFrame().getImagePanel(); jnPanel = getMainFrame().getJNPanel(); <FIXE>
<FIXS> java.nio.ByteBuffer byteBuffer = java.nio.ByteBuffer.allocate(((java.lang.Long.BYTES) * 2)); <FIXE>
<FIXS> if (checkOutside && ((y < 0) || (y > (getHeight())))) { return null; <FIXE>
<FIXS> return ((((((((((((("\n" + (this.ueberschrift)) + (this.unterueberschrift)) + "AKZ: ") + (this.aktenzeichen)) + "Datum: ") + (this.datum)) + "Rechtsbereich: ") + (this.rechtsbereich)) + "Vergehen: ") + (this.vergehen)) + "Strafmass: ") + (this.strafmass)) + "Gruende: ") + (this.gruende); <FIXE>
<FIXS> org.junit.Assert.assertEquals("There should be no finished tasks, yet", 0, numOfFinishedTasks, 0); <FIXE> <FIXS> org.junit.Assert.assertEquals("There should be 1 finished task now", 1, numOfFinishedTasks, 0); <FIXE>
<FIXS> this.maxcommom = 1; <FIXE>
<FIXS> return (db.delete(RemindyContract.ExtraTable.TABLE_NAME, ((RemindyContract.ExtraTable.COLUMN_NAME_REMINDER_FK.getName()) + " =?"), new java.lang.String[]{ java.lang.String.valueOf(reminderId) })) > 0; <FIXE>
<FIXS> if ((((((destX) + (error)) >= x) && (((destX) - (error)) <= x)) && (((destY) + (error)) >= y)) && (((destY) - (error)) <= y)) { <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> if (((pairs.size()) == 1) && ((ip) != null)) <FIXE>
<FIXS> public static org.vitrivr.cineast.core.config.Config loadConfig(java.lang.String name) { <FIXE> <FIXS> return null; <FIXE> <FIXS> return config; <FIXE>
<FIXS> timerThread.start(); <FIXE>
<FIXS> throw new java.lang.IllegalArgumentException("the text is null"); <FIXE>
<FIXS> buttonConnect.setEnabled(true); <FIXE>
<FIXS> db.addReading(new database.Reading(java.lang.System.currentTimeMillis(), application.processingService.getAcc1X(), application.processingService.getAcc1Y(), application.processingService.getAcc1Z(), application.processingService.getAcc2X(), application.processingService.getAcc2Y(), application.processingService.getAcc2Z(), app.edi.palmprothesismotionmonitoring.MainActivity.actionType)); <FIXE>
<FIXS> this.remove(object); break; <FIXE>
<FIXS> if (start <= end) { org.fife.ui.rsyntaxtextarea.DocumentRange range = new org.fife.ui.rsyntaxtextarea.DocumentRange(start, end); list.add(range); } <FIXE>
<FIXS> checkConnection(); theView.setVisible(false); theCAView = new gomoku.CreateAccountView(); theCAView.setVisible(true); caController = new gomoku.CreateAccountController(theCAView, theConnection, theView); theConnection.setCreateAccountController(caController); <FIXE>
<FIXS> @java.lang.Deprecated public void addTimeIconToAlarm(long id) { <FIXE> <FIXS> notifyAll(jsonNotification); <FIXE>
<FIXS> java.util.List<java.lang.String> list = dbc.getAllDocIds(); for (java.lang.String lists : list) { <FIXE>
<FIXS> if ((world()) == null) return ; <FIXE>
<FIXS> <FIXE>
<FIXS> public int getMaxHitpointsStamina() { return ((int) (java.lang.Math.ceil(((((double) (this.getWeight())) * ((double) (this.getToughness()))) / 50)))); <FIXE>
<FIXS> <FIXE>
<FIXS> long id; if ((realm.where(com.louiscarrese.clopecounter.model.Jour.class).count()) > 0) { id = (realm.where(com.louiscarrese.clopecounter.model.Jour.class).maximumInt("id")) + 1; }else { id = 1; } <FIXE>
<FIXS> mil.nga.giat.mage.sdk.datastore.user.Team createdTeam; <FIXE>
<FIXS> <FIXE>
<FIXS> com.individual.thinking.traitorstown.game.CardService.Effects.put(type, existingEffect.get()); return existingEffect.get(); }else { effectRepository.save(effect); com.individual.thinking.traitorstown.game.CardService.Effects.put(type, effect); return effect; <FIXE> <FIXS> <FIXE>
<FIXS> protected void start(org.osgi.framework.BundleContext bundleContext) throws java.lang.Exception { <FIXE>
<FIXS> io.inkstand.scribble.rules.jcr.util.XMLContentHandler.LOG.info("text: '{}'", trimmedText); this.textStack.push(trimmedText); <FIXE>
<FIXS> if (from == lastPos) <FIXE> <FIXS> else if ((from < lastPos) && (to >= lastPos)) moveToPosition((lastPos - 1)); else if ((from > lastPos) && (to <= lastPos)) moveToPosition((lastPos + 1)); <FIXE>
<FIXS> if (((resumptionToken) == null) || (resumptionToken.isEmpty())) { <FIXE>
<FIXS> <FIXE>
<FIXS> org.junit.Assert.assertNotNull(retval); <FIXE>
<FIXS> return java.lang.String.valueOf(location.getLongitude()); <FIXE>
<FIXS> private <T> java.lang.Object getFieldValue(T classObject, java.lang.reflect.Field field) throws org.wso2.carbon.config.ConfigurationException { <FIXE> <FIXS> throw new org.wso2.carbon.config.ConfigurationException(java.lang.String.format(java.util.Locale.ENGLISH, "Error in obtaining value for field %s in %s", field.getName(), classObject.getClass())); <FIXE>
<FIXS> if (child != null) { child.setOnTouchListener(null); child.setX(0); child.setY(0); child.setRotation(0); removeView(child); lastRemovedView = child; } <FIXE>
<FIXS> if (file == null) { file = new io.pelle.mango.client.FileVO(); setValue(file); } <FIXE>
<FIXS> net.minecraftforge.fluids.FluidStack fluidStack = ((this.tank[0]) != null) ? this.tank[0].getFluid() : null; <FIXE>
<FIXS> return (((((((getName()) + " ") + (getCurrentWins())) + ":") + (getCurrentLosses())) + " ") + (java.lang.Math.round(generateRatio()))) + '%'; <FIXE>
<FIXS> if (aip.equals(org.roda.wui.client.common.actions.AipActions.NO_AIP_OBJECT)) { <FIXE>
<FIXS> public java.util.concurrent.Future<?> enqueue(com.hortonworks.streamline.streams.notification.Notifier notifier, com.hortonworks.streamline.streams.notification.Notification notification) { <FIXE> <FIXS> return future; <FIXE>
<FIXS> <FIXE>
<FIXS> if (((queue.size()) == 0) || (isPlaying)) { <FIXE> <FIXS> }else { mediaPlayer = new javafx.scene.media.MediaPlayer(queue.poll()); mediaPlayer.play(); isPlaying = true; mediaPlayer.setOnEndOfMedia(() -> { isPlaying = false; }); } <FIXE>
<FIXS> if (((((props.length) > 0) && ((props[0]) != null)) && ("mappings".equals(props[0].name()))) && (FieldType.OBJECT.equals(props[0].type()))) { <FIXE>
<FIXS> assertNotNull(apps); assertEquals(1, apps.size()); assertEquals("searched-app1", apps.iterator().next().getId()); <FIXE>
<FIXS> if (f.name.equals(user)) { return true; } <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> } catch (java.lang.Exception e) { com.psk.pms.service.FileServiceImpl.LOGGER.info("Something went wrong!!", e); <FIXE>
<FIXS> MaRzAgent.SuffixNode[] nodes = ((MaRzAgent.SuffixNode[]) (hashFringe.values().toArray(new MaRzAgent.SuffixNode[hashFringe.size()]))); <FIXE>
<FIXS> if (((lastJoke) != null) && (joke != null)) { <FIXE>
<FIXS> messaging.convertAndSend("/topic/update", indent.getId()); rabbitTemplate.convertAndSend("update-indent", indent.getId()); <FIXE>
<FIXS> return java.util.Collections.singleton(findSourceFieldByName(byOptionArgument, enrichmentField, true)); <FIXE>
<FIXS> this.connected = true; <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> return newNode; <FIXE>
<FIXS> status = org.dataaccessioner.Migrator.STATUS_INITIALIZING; <FIXE>
<FIXS> return context.getString(R.string.run_label, java.lang.Integer.toString(((mRun.getRunIndex()) + 1))); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> com.intellij.perlplugin.PerlInternalParser.parseAllSources(progressIndicator); <FIXE>
<FIXS> com.taobao.weex.appfram.prerender.IPreRenderCache.Entry entry = mInternalCache.get(targetUrl); <FIXE>
<FIXS> org.exist.storage.DBBroker.LOG.trace(java.lang.String.format("%s: popSubject(%s) from: %s %s", getId(), getCurrentSubject().getName(), java.lang.Thread.currentThread(), org.exist.util.Stacktrace.top(java.lang.Thread.currentThread().getStackTrace(), 10))); <FIXE>
<FIXS> com.marc.collections.SkipList<java.lang.Integer> mySkipList = new com.marc.collections.SkipList(4); <FIXE>
<FIXS> for (lowerIndex = 0; ((lowerIndex) < (histogram.length)) && (count < (lowerCount)); (lowerIndex)++) { <FIXE> <FIXS> <FIXE> <FIXS> for (upperIndex = lowerIndex; ((upperIndex) < (histogram.length)) && (count < (upperCount)); (upperIndex)++) { <FIXE> <FIXS> <FIXE>
<FIXS> java.lang.String tool = getResources().getString(getTool().getName()); <FIXE>
<FIXS> validateInput(SidesjTextField, LengthjTextField); <FIXE>
<FIXS> intentFromGameActivity = getIntent(); <FIXE>
<FIXS> if (result.contains("access_token")) { <FIXE>
<FIXS> q.remove(tt); <FIXE>
<FIXS> edu.vt.ece5574.agents.Robot robot = new edu.vt.ece5574.agents.Robot(state, java.lang.String.valueOf(agentsInBld.size()), id, pos.getX(), pos.getY()); <FIXE>
<FIXS> if (com.darkhouse.gdefence.GDefence.getInstance().user.getLevelAvailable(((firstButtonInt) + i))) { levels[i].unLock(); }else { <FIXE> <FIXS> <FIXE>
<FIXS> if ((end) != null) { <FIXE>
<FIXS> messageConversationLabel.setText(("Conversation: " + (owningConversation == null ? "" : owningConversation.title))); <FIXE>
<FIXS> private java.lang.String getJoinPointClassName(final org.aspectj.lang.ProceedingJoinPoint currentJoinPoint) { <FIXE>
<FIXS> }else { slaves.add(sn); <FIXE>
<FIXS> <FIXE>
<FIXS> currentScene = battle; <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> init(); <FIXE>
<FIXS> context.preExecuteUnder(this, this, block); <FIXE>
<FIXS> public static edu.byu.nlp.crowdsourcing.MultiAnnModelBuilders.MultiAnnModelBuilder initModelBuilderWithBaselineInit(edu.byu.nlp.crowdsourcing.MultiAnnModelBuilders.MultiAnnModelBuilder builder, edu.byu.nlp.crowdsourcing.PriorSpecification priors, edu.byu.nlp.data.types.Dataset data, org.apache.commons.math3.random.RandomGenerator rnd) { <FIXE>
<FIXS> holder.ivRemove.setTag(mDates.get(position)); <FIXE>
<FIXS> <FIXE>
<FIXS> java.lang.Object _call(railo.runtime.PageContext pc, railo.runtime.type.Collection.Key key, railo.runtime.type.Struct namedArgs, java.lang.Object[] args, boolean superAccess) throws railo.runtime.exp.PageException { railo.runtime.component.Member member = getMember(pc, key, false, superAccess); <FIXE> <FIXS> return onMissingMethod(pc, (-1), member, key.getString(), args, namedArgs, superAccess); <FIXE>
<FIXS> new com.kacper.popularmovies.FetchMovieVolley(this).getRequest(actualSortingOrder, this); <FIXE>
<FIXS> if ((app.allowStylebar()) && ((titleBarPanel) != null)) { <FIXE>
<FIXS> <FIXE>
<FIXS> net.minecraftforge.fml.client.FMLClientHandler.instance().connectToServer(this.currentScreen, serverData); <FIXE>
<FIXS> org.apache.drill.common.expression.PathSegment.ArraySegment seg = ((index) < 0) ? new org.apache.drill.common.expression.PathSegment.ArraySegment(null) : new org.apache.drill.common.expression.PathSegment.ArraySegment(index); <FIXE>
<FIXS> if (value == null) { applyInitialValue(attribute, true); } <FIXE>
<FIXS> for (graph.undirectedGraph.UGNode n : adjList.values()) <FIXE>
<FIXS> <FIXE>
<FIXS> if ((armor > 0) && (armor < 20)) { <FIXE>
<FIXS> while ((builder.length()) < length) { builder.append(se.rupy.http.Event.BASE_58[java.lang.Math.abs(((se.rupy.http.Event.random.nextInt()) % (se.rupy.http.Event.BASE_58.length)))]); } <FIXE>
<FIXS> themeable.Themeable.bound = false; <FIXE>
<FIXS> switch (type) { case "proj" : io.hops.hopsworks.common.dao.project.Project proj = projectFacade.find(id); info = new io.hops.hopsworks.common.project.MoreInfoDTO(proj); break; case "ds" : <FIXE> <FIXS> break; } <FIXE>
<FIXS> return java.lang.Math.log((((documents.size()) / 1) + count)); <FIXE>
<FIXS> public static java.lang.String hmacSHA256(byte[] secret, java.lang.String message) { <FIXE> <FIXS> javax.crypto.spec.SecretKeySpec secret_key = new javax.crypto.spec.SecretKeySpec(secret, "HmacSHA256"); <FIXE>
<FIXS> return startTimes.isEmpty() ? null : startTimes.get(0); <FIXE>
<FIXS> break; <FIXE>
<FIXS> assertEquals(expectedPartial, uiSchemaJsonObj.toString(), false); <FIXE>
<FIXS> if (i < (props.size())) <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> throw new java.lang.IndexOutOfBoundsException((((("Index " + index) + " isn't in range (0 - ") + ((size) - 1)) + ")")); <FIXE> <FIXS> for (int i = 0; i <= index; i++) { <FIXE> <FIXS> return item.value; <FIXE>
<FIXS> private void expandType(java.lang.String type) { <FIXE>
<FIXS> private java.lang.String listToConfig(java.util.ArrayList<mars.client.Module> list) { <FIXE>
<FIXS> return true; <FIXE>
<FIXS> else if ((kv.mMainPageIndex) >= (kv.mPages.length)) kv.mMainPageIndex = (kv.mPages.length) - 1; <FIXE>
<FIXS> heightMeasureSpec = de.dmxcontrol.widget.MeasureSpec.makeMeasureSpec(sizeHeight, de.dmxcontrol.widget.MeasureSpec.getMode(heightMeasureSpec)); <FIXE>
<FIXS> public static void showMessage(android.content.Context context, java.lang.String title, java.lang.String message, android.content.DialogInterface.OnClickListener okListener) { <FIXE>
<FIXS> if (((mCatalystSettings) == null) || (!(mCatalystSettings.isAnimationFpsDebugEnabled()))) { <FIXE>
<FIXS> if ((references == null) || ((references.length) == 0)) { return null; } <FIXE>
<FIXS> java.lang.Object result = null; java.lang.Exception error = null; <FIXE> <FIXS> result = call.run(params.toArray()); } catch (java.lang.Exception e) { error = e; } if (error != null) sendCallback(callbackId, error.getMessage(), null); else <FIXE> <FIXS> <FIXE>
<FIXS> update(); <FIXE>
<FIXS> @org.gbif.occurrence.persistence.Test @org.gbif.occurrence.persistence.Ignore(value = "Identifiers removed from persistence until needed") <FIXE> <FIXS> assertEquals(((java.lang.Integer) (org.gbif.occurrence.persistence.OccurrencePersistenceServiceImplTest.KEY)), occ.getKey()); assertEquals(0, occ.getIdentifiers().size()); <FIXE>
<FIXS> return ((startOfWindow.compareTo(item)) <= 0) && ((endOfWindow.compareTo(item)) >= 0); <FIXE>
<FIXS> <FIXE>
<FIXS> throw new java.io.IOException(e); <FIXE>
<FIXS> if ((spaceShip) == null) return ; <FIXE>
<FIXS> for (uk.ac.bbsrc.tgac.miso.core.data.DetailedSample current = uk.ac.bbsrc.tgac.miso.core.util.LimsUtils.deproxify(start.getParent()); current != null; current = uk.ac.bbsrc.tgac.miso.core.util.LimsUtils.deproxify(current.getParent())) { <FIXE> <FIXS> @java.lang.SuppressWarnings(value = "unchecked") T result = ((T) (current)); return result; <FIXE>
<FIXS> public static void spannableEmoticonFilterFromFile(final android.widget.TextView tv_content, java.lang.String filePath, java.lang.String content) { <FIXE> <FIXS> android.text.Spannable spannable = com.sj.androidemoji.EmojiDisplayFromFIle.spannableFilter(tv_content.getContext(), filePath, spannableStringBuilder, content, com.sj.androidemoji.MainActivity.getFontHeight(tv_content), null); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> if (((prevVersionVulnMap) != null) && (prevVersionVulnMap.containsKey(cveName))) { <FIXE> <FIXS> if ((cveDB) != null) { cveDB.updateVulnerability(vuln); } <FIXE>
<FIXS> if ((getPlayerId()) == (com.google.sprint1.GameState.getState().myPlayerID)) checkCollisions(); if ((geometry.getTranslation().getZ()) <= 0.0F) { disable(); } <FIXE> <FIXS> <FIXE>
<FIXS> mTextView_Result.setText((((inputTemperature + (course.labs.permissionsapp.ConverterActivity.CELSIUS_STATEMENT_CONST)) + convertedTemperature) + (course.labs.permissionsapp.ConverterActivity.FAHRENHEIT_STATEMENT_CONST))); <FIXE> <FIXS> <FIXE>
<FIXS> currentHours = (currentHours.startsWith("0")) ? currentHours.substring(1) : currentHours; return java.lang.Integer.valueOf(currentHours); <FIXE>
<FIXS> auth.hci.adscanner.controller.GPSTracker gps = new auth.hci.adscanner.controller.GPSTracker(this); <FIXE>
<FIXS> scheduleDetailIntent.putExtra("schedule_id", mMessagesDataResponseList.get(position).getId()); <FIXE>
<FIXS> GetPositionsAndTypes(); <FIXE>
<FIXS> factory.setDataSource(dataSource()); <FIXE> <FIXS> <FIXE>
<FIXS> if (com.minecraftmarket.util.Log.debug) { com.minecraftmarket.util.Log.log((((" ------------- " + " MinecraftMarket Debug ") + name) + " ------------- ")); com.minecraftmarket.util.Log.log((" " + s)); com.minecraftmarket.util.Log.log(" -------------------------------------------------------------------- "); <FIXE> <FIXS> } <FIXE>
<FIXS> java.util.List<java.lang.Integer> numbers = new java.util.ArrayList<java.lang.Integer>(); <FIXE>
<FIXS> <FIXE>
<FIXS> client.Client client = new client.Client(tcpClient, responseDelay, this); <FIXE>
<FIXS> <FIXE>
<FIXS> public static void applyToText(java.lang.CharSequence charSequence, android.graphics.Typeface typeface, int start, int end) { <FIXE> <FIXS> android.text.Spannable spannable = ((android.text.Spannable) (charSequence)); spannable.setSpan(cat.ppicas.customtypeface.CustomTypefaceSpan.getInstance(typeface), start, end, Spanned.SPAN_INCLUSIVE_INCLUSIVE); <FIXE> <FIXS> <FIXE>
<FIXS> visitGeneral(node); return false; <FIXE>
<FIXS> <FIXE> <FIXS> dragging = false; <FIXE>
<FIXS> if (o == null) <FIXE> <FIXS> if (o instanceof net.osmand.plus.quickaction.QuickAction) { net.osmand.plus.quickaction.QuickAction action = ((net.osmand.plus.quickaction.QuickAction) (o)); if ((type) != (action.type)) return false; if ((id) != (action.id)) return false; return true; }else <FIXE> <FIXS> <FIXE>
<FIXS> return new me.noize.chemistry.io.TimeRange(this.getStart(), time); <FIXE>
<FIXS> <FIXE>
<FIXS> return destPlatform; <FIXE>
<FIXS> java.lang.String toRet = null; <FIXE> <FIXS> else return "the " + nounLemma; <FIXE>
<FIXS> <FIXE> <FIXS> com.mongodb.DBObject textIndex = new com.mongodb.BasicDBObject("message", "text"); textIndex.put("link", "text"); textIndex.put("name", "text"); DS.mop.getCollection("post").createIndex(textIndex); <FIXE>
<FIXS> <FIXE> <FIXS> return randomNum; <FIXE>
<FIXS> if (sim < low) { <FIXE>
<FIXS> if (key.startsWith(k)) { <FIXE> <FIXS> if (key.endsWith(k)) { <FIXE>
<FIXS> if (blankY >= ((this.dimensions()) - 1)) { <FIXE>
<FIXS> break; <FIXE>
<FIXS> final java.util.List<eu.europa.fisheries.uvms.rules.service.mapper.fact.FaCatchFact> faCatchFacts = activityMapper.generateFactsForFaCatch(faAct, false); <FIXE>
<FIXS> java.lang.String id = xaurora.io.IDGenerator.instanceOf().GenerateID(xaurora.communication.ChromeServer.getURL(text), xaurora.communication.ChromeServer.TYPE_FULL_TEXT); <FIXE> <FIXS> java.lang.System.out.println(java.lang.String.valueOf(text)); <FIXE>
<FIXS> return str; <FIXE>
<FIXS> dataMagnetic.add(new java.util.ArrayList<java.lang.Integer>()); dataOrientation.add(new java.util.ArrayList<java.lang.Integer>()); dataAccelerate.add(new java.util.ArrayList<java.lang.Integer>()); dataGyroscope.add(new java.util.ArrayList<java.lang.Integer>()); dataGravity.add(new java.util.ArrayList<java.lang.Integer>()); <FIXE>
<FIXS> private java.lang.StringBuilder buildHtmlHeadLink() { <FIXE> <FIXS> return html; <FIXE>
<FIXS> userAdded.add(in.nextLine()); <FIXE>
<FIXS> <FIXE>
<FIXS> if (!(sendAndReceive(("disconnect " + (id))))) { <FIXE>
<FIXS> (iteration)++; end = -1; terminated = (kernelsToRun.isEmpty()) && (runningThreads.isEmpty()); <FIXE> <FIXS> <FIXE>
<FIXS> if (value != null) { value += content; <FIXE> <FIXS> put(key, value); <FIXE>
<FIXS> public static com.gmail.trentech.pjc.core.SQLManager get(org.spongepowered.api.plugin.PluginContainer plugin) { <FIXE> <FIXS> com.gmail.trentech.pjc.core.SQLManager.sqlManagers.put(plugin.getId(), sqlManager); <FIXE> <FIXS> return com.gmail.trentech.pjc.core.SQLManager.sqlManagers.get(plugin.getId()); <FIXE>
<FIXS> cz.cuni.mff.d3s.perf.Benchmark.defaultEventSet = -1; <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> if (((Context.LAYOUT_INFLATER_SERVICE.equals(name)) == true) && ((com.smartnsoft.droid4me.support.v7.app.SmartAppCompatActivity.getWindow()) != null)) { <FIXE>
<FIXS> <FIXE> <FIXS> largeLightWidgets.get(0).setValue(sum); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> applyForce(coh); <FIXE>
<FIXS> mTracks.get(trackIdx).setConnectedPrev(false); for (int i = trackIdx + 1; i < (mTracks.size()); i++) { <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> target.sendMessage(tag.concat(line)); <FIXE>
<FIXS> return (((((((("message[sender: " + (getData().getSender())) + "; receivers: ") + (getData().getReceivers())) + "; performative: ") + (getData().getPerformativeName())) + "; content: ") + (getData().getContent())) + "; content") + "]"; <FIXE>
<FIXS> if (!(miniFields.isEmpty())) { addProfileFieldForDetailsPage(); } <FIXE>
<FIXS> @java.lang.Override <FIXE> <FIXS> if (!(forbiddenRulesSpecs.contains(o))) { forbiddenRulesSpecs.add(o); } <FIXE>
<FIXS> if (playerInventory[col][1].toString().equals(object)) { <FIXE>
<FIXS> buildingScenarios.put(scenarioName, buildingScenario); <FIXE>
<FIXS> executePrivilegeRequest(entity, principal, request); <FIXE>
<FIXS> public io.cattle.platform.core.model.Account createProjectForUser(io.cattle.platform.api.auth.Identity identity) { io.cattle.platform.core.model.Account project = authDao.createProject(((identity.getName()) + (io.cattle.platform.core.constants.ProjectConstants.PROJECT_DEFAULT_NAME)), null); <FIXE>
<FIXS> <FIXE>
<FIXS> double difference = deposited - finalDeposit; if (difference != 0) { <FIXE> <FIXS> } <FIXE>
<FIXS> private void setMonthOnAction(javafx.scene.layout.HBox box, java.time.LocalDateTime start, java.time.LocalDateTime end) { <FIXE> <FIXS> createDayView(start, end); <FIXE>
<FIXS> public void getPerlVersionCallsProcessBuilderFactory() { <FIXE> <FIXS> jsr223.perl.utils.PerlVersionGetter perlVersionGetter = new jsr223.perl.utils.PerlVersionGetter(processBuilderUtilitiesMock, factory); perlVersionGetter.getPerlVersion(); <FIXE>
<FIXS> int i = 0; <FIXE> <FIXS> while (i < nameCount) { n[i] = preamble + (++i); <FIXE>
<FIXS> <FIXE>
<FIXS> this.dataTree.setEditable(false); <FIXE>
<FIXS> co.cask.cdap.data2.datafabric.dataset.DatasetsUtil.getOrCreateDataset(dsFramework, co.cask.cdap.store.DefaultNamespaceStore.APP_META_INSTANCE_ID, "table", DatasetProperties.EMPTY, DatasetDefinition.NO_ARGUMENTS, null); table = dsCache.getDataset(co.cask.cdap.store.DefaultNamespaceStore.APP_META_INSTANCE_ID.getId()); <FIXE>
<FIXS> } catch (java.lang.IllegalAccessException ignored) { ignored.printStackTrace(); } catch (java.lang.reflect.InvocationTargetException ignored) { <FIXE>
<FIXS> if ((stoneBlocks + boardBlocksCount) >= (Board.WIDTH_IN_BLOCKS)) { <FIXE>
<FIXS> if (r.employeeEmail.equals(userEmail)) <FIXE>
<FIXS> if (metaObject != null) { if (metaObject.getChildren().containsKey(fieldName)) { result = metaObject.getChildren().get(fieldName).getType().getSecondary(); } <FIXE>
<FIXS> private void readIfNeeded(io.netty.channel.ChannelHandlerContext ctx) { <FIXE> <FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> lanecover = (lanecover < 0) ? 0 : lanecover > 1 ? 1 : lanecover; <FIXE>
<FIXS> int numOfSchedules = 0; if (trackingData != null) { trackingData.addMessageStatus(MessageStatus.SCHEDULED_TO_SEND); numOfSchedules = trackingData.numberOfScheduledDeliveries.incrementAndGet(); if (org.wso2.andes.kernel.OnflightMessageTracker.log.isDebugEnabled()) { org.wso2.andes.kernel.OnflightMessageTracker.log.debug(((("message id= " + messageID) + " scheduled. Pending to execute= ") + numOfSchedules)); } <FIXE>
<FIXS> T ret = ((T) (queue[((--(tail)) % (queue.length))])); <FIXE>
<FIXS> if (applyTotal < 5) { <FIXE>
<FIXS> new com.bmriv.android.streamify.QueryArtistTask(mArtistAdapter, this).execute(query); <FIXE>
<FIXS> public static java.lang.String formatRange(java.lang.String source, com.intellij.openapi.util.TextRange range, org.jetbrains.kotlin.psi.KtPsiFactory psiFactory, java.lang.String fileName) { <FIXE> <FIXS> return org.jetbrains.kotlin.formatting.KotlinFormatterUtils.formatRange(ktFile, rootBlock, org.jetbrains.kotlin.formatting.KotlinFormatterUtils.settings, source, range); <FIXE>
<FIXS> org.junit.Assert.assertEquals(this.file.toString(), pdf.toString()); <FIXE>
<FIXS> byte id = 1; <FIXE> <FIXS> id++; ATMServer.Worker worker = new ATMServer.Worker(clientConnection, functions, clientData, id); <FIXE>
<FIXS> protected void clearDataSource(final boolean clearTargetState) { <FIXE>
<FIXS> <FIXE>
<FIXS> static boolean tableExists(org.jdbdt.DB db, java.lang.String tableName) { <FIXE>
<FIXS> public java.util.List<java.lang.Long> getSolutionProjects(long id) { java.util.List<java.lang.Long> projects = new java.util.ArrayList<>(); <FIXE> <FIXS> projects.add(java.lang.Long.parseLong(team.get("id").toString())); <FIXE>
<FIXS> java.lang.Thread t = new java.lang.Thread() { @java.lang.Override public void run() { dialog.setVisible(true); } }; t.start(); <FIXE>
<FIXS> return ((((((((("" + (((("# The NPCs to open the GUI for Race Selection. \n" + "# NPC names have to be the real names of the NPCs.\n") + "# The Gui will open even if the GUI is disabled in Race Secion.\n") + "# String List: a list of NPC names.\n") + "# default: [] \n")) + (npc_select_race)) + ": []\n\n") + "# The NPCs to open the GUI for Class Selection. \n") + "# NPC names have to be the real names of the NPCs.\n") + "# The Gui will open even if the GUI is disabled in Class Secion.\n") + "# String List: a list of NPC names.\n") + "# default: [] \n") + (npc_select_class)) + ": []\n\n"; <FIXE>
<FIXS> public void printTmpDictionary() { <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> if (ppPanel.getOptDatabaseSelected()) { <FIXE>
<FIXS> if ((!(nmct.jaspernielsmichielhein.watchfriends.helper.AuthHelper.isUserLoggedIn(this))) || (nmct.jaspernielsmichielhein.watchfriends.helper.AuthHelper.isTokenExpired(this))) { <FIXE>
<FIXS> solution.score += eval.getGameStateScore(newGs, i); <FIXE>
<FIXS> <FIXE> <FIXS> org.md2k.utilities.Report.Log.d(org.md2k.ema_scheduler.notifier.NotifierManager.TAG, "before runnableSubscribe.."); handlerSubscribe.post(runnableSubscribe); <FIXE>
<FIXS> @org.springframework.transaction.annotation.Transactional public java.lang.Boolean updateBillingSystem(final java.lang.String serviceCode, final java.util.Set<org.egov.collection.integration.models.BillReceiptInfo> billReceipts) throws org.egov.infra.exception.ApplicationRuntimeException { <FIXE>
<FIXS> <FIXE>
<FIXS> private source.Node<T> find(T key, source.Node<T> node) { <FIXE> <FIXS> int comparison = key.compareTo(node.key); <FIXE> <FIXS> return find(key, node.rightChild); <FIXE> <FIXS> return find(key, node.leftChild); <FIXE>
<FIXS> if (childCount < (com.daprlabs.cardstack.SwipeDeck.NUMBER_OF_CARDS)) { for (int i = childCount; i < (com.daprlabs.cardstack.SwipeDeck.NUMBER_OF_CARDS); ++i) { addNextCard(); } for (int i = 0; i < (getChildCount()); ++i) { positionItem(i); } <FIXE>
<FIXS> <FIXE>
<FIXS> return ((((this.endHour) == (another.startHour)) && ((this.endMinute) == (another.startMinute))) && ((this.startHour) == (another.endHour))) && ((this.startMinute) == (another.endMinute)); <FIXE>
<FIXS> if (other instanceof asteroids.model.Ship) { <FIXE> <FIXS> }else if (other instanceof asteroids.model.Bullet) { this.resolveCollision(((asteroids.model.Bullet) (other))); }else { other.resolveCollision(this); } <FIXE>
<FIXS> if (((minAge) <= (baeAge)) && ((maxAge) >= (baeAge))) { creepFactor = false; }else { <FIXE> <FIXS> <FIXE>
<FIXS> default : break; <FIXE>
<FIXS> criteria.setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY); <FIXE> <FIXS> <FIXE>
<FIXS> criteria.add(org.hibernate.criterion.Restrictions.eq("name", name)); <FIXE>
<FIXS> <FIXE> <FIXS> result[i] = arrayToRemoveFrom[(i + tmp)]; <FIXE>
<FIXS> displayErrorMessage(((java.lang.String) (value))); <FIXE>
<FIXS> assertHaveNull(1, null); <FIXE>
<FIXS> private void process(backtype.storm.tuple.Tuple t) { <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> return new edu.ksu.operatingsystems.javaos.util.Pair<java.lang.Integer, java.lang.String>(value, result); <FIXE>
<FIXS> <FIXE>
<FIXS> public android.widget.Button getAttendeeNameButton() { <FIXE>
<FIXS> if (!(configState)) { currentConfiguration = ""; configState = true; break; } <FIXE>
<FIXS> <FIXE>
<FIXS> if (res instanceof org.eclipse.core.resources.IFile) return ((org.eclipse.core.resources.IFile) (res)); <FIXE> <FIXS> <FIXE> <FIXS> return null; <FIXE>
<FIXS> this.setBounds(10, (((displayPanel.getBounds().height) - (panelSize.height)) - 10), panelSize.width, panelSize.height); <FIXE>
<FIXS> param.add(new net.sf.memoranda.TaskImpl(new java.util.ArrayList<net.sf.memoranda.Task>())); param.add(new net.sf.memoranda.TaskImpl(new java.util.ArrayList<net.sf.memoranda.Task>())); <FIXE> <FIXS> assertEquals(param, task.getSubTasks()); <FIXE>
<FIXS> java.util.Map<org.nusco.narjillos.creature.Narjillo, java.util.Set<org.nusco.narjillos.shared.things.Thing>> narjillosToCollidedFood; synchronized(narjillos) { narjillosToCollidedFood = calculateCollisions(narjillos); } <FIXE>
<FIXS> <FIXE>
<FIXS> if ((exist(object.getId())) && (existOwner(object.getId(), userid))) { <FIXE>
<FIXS> setStatusIcon(CommonImages.INSTANCE.error(), true, true); <FIXE>
<FIXS> return new value.IntegerValue(); <FIXE>
<FIXS> mapOptions.center(new com.lynden.gmapsfx.javascript.object.LatLong(47.6097, (-122.3331))).overviewMapControl(false).panControl(false).rotateControl(false).scaleControl(false).streetViewControl(false).zoomControl(true).zoom(16); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> com.orca.projectx.Data.mAccount = new com.orca.projectx.Account(); <FIXE>
<FIXS> for (int i = start; i <= end; i++) <FIXE>
<FIXS> return ns == null ? null : new org.eclipse.ecf.mgmt.identity.NamespaceMTO(ns.getName(), ns.getDescription(), ns.getScheme(), ns.getSupportedSchemes(), org.eclipse.ecf.mgmt.identity.host.IdentityFactoryManager.convertClassArrayToNameArray(ns.getSupportedParameterTypes())); <FIXE>
<FIXS> return pw.phylame.ycl.io.PathUtils.mimeMap.get().getProperty(ext, pw.phylame.ycl.io.PathUtils.UNKNOWN_MIME); <FIXE>
<FIXS> android.os.StrictMode.setVmPolicy(new android.os.StrictMode.VmPolicy.Builder().detectAll().penaltyLog().build()); <FIXE>
<FIXS> <FIXE>
<FIXS> if (((compassDirection) == null) || ((getTarget()) == null)) { <FIXE>
<FIXS> assertEquals(((java.lang.Integer) (0)), answer.getNumber()); <FIXE>
<FIXS> android.app.NotificationManager nm = ((android.app.NotificationManager) (getSystemService(getApplicationContext().NOTIFICATION_SERVICE))); nm.cancel(apier.com.lifttrak.RunWorkout.uniqueID); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> legacyPreferencesService = context.registerService(org.eclipse.core.internal.preferences.exchange.ILegacyPreferences.class, new org.eclipse.core.internal.preferences.legacy.InitLegacyPreferences(), new java.util.Hashtable<java.lang.String, java.lang.String>()); <FIXE>
<FIXS> e.setLine(0, ((org.bukkit.ChatColor.DARK_GRAY) + "== ATM ==")); e.setLine(1, ((((org.bukkit.ChatColor.GREEN) + "> ") + (org.bukkit.ChatColor.DARK_GRAY)) + "Withdraw")); <FIXE>
<FIXS> return adaptiveExerciseParser.parseFromJson(json); <FIXE>
<FIXS> assertBlockData(redYellowBlock, CellColour.YELLOW, CellColour.RED); <FIXE> <FIXS> assertBlockData(greenPurpleBlock, CellColour.PURPLE, CellColour.GREEN); <FIXE> <FIXS> assertBlockData(blueGreenBlock, CellColour.GREEN, CellColour.BLUE); <FIXE>
<FIXS> final int EMPTY_STACK_VALUE = 0; <FIXE>
<FIXS> application.util.DataBaseConnection dataBaseConncetion = new application.util.DataBaseConnection(); <FIXE> <FIXS> alert.setHeaderText(dataBaseConncetion.SaveCallendarEntries(mainApp.getCallendarEntriesObservableList())); <FIXE>
<FIXS> commentStatus = createStatus(IStatus.WARNING, org.talend.metadata.managment.ui.i18n.Messages.getString("PropertiesWizardPage.EmptyDescWarning")); <FIXE> <FIXS> commentStatus = createOkStatus(); <FIXE>
<FIXS> <FIXE>
<FIXS> if ("Reference".equals(tr.getCode())) <FIXE>
<FIXS> java.lang.String report_name = com.caxpy.bi.utility.BiUtility.saveReport(report, groupid); <FIXE>
<FIXS> outStream.write(this.b, this.offset, this.len); <FIXE>
<FIXS> java.lang.String id) throws gov.nist.healthcare.tools.hl7.v2.igamt.lite.web.exception.DataNotFoundException { <FIXE>
<FIXS> org.assertj.core.api.Assertions.assertThat(new org.corpus_tools.pepper.core.ModuleFitnessChecker().checkFitness(importer).getFitness(FitnessFeature.IS_IMPORTABLE)).isEqualTo(false); <FIXE>
<FIXS> java.util.Calendar c = java.util.Calendar.getInstance(); c.set(java.util.Calendar.YEAR, year); c.set(java.util.Calendar.MONTH, java.util.Calendar.DECEMBER); c.set(java.util.Calendar.DAY_OF_MONTH, 31); int ordinalDay = c.get(java.util.Calendar.DAY_OF_YEAR); int weekDay = (c.get(java.util.Calendar.DAY_OF_WEEK)) - 1; <FIXE>
<FIXS> org.broad.igv.ui.IGV.getInstance().groupAlignmentTracks(org.broad.igv.sam.AlignmentTrack.GroupOption.TAG, tag, null); <FIXE>
<FIXS> adapter.setSelected(true); <FIXE>
<FIXS> public void hangUp() { <FIXE>
<FIXS> if ((jp.getCurrentToken()) != (com.fasterxml.jackson.core.JsonToken.END_ARRAY)) { <FIXE>
<FIXS> while (nbObjectsSoFar < index) { <FIXE>
<FIXS> org.junit.Assert.assertThat(dh.property.getValue(), org.hamcrest.CoreMatchers.is(org.hamcrest.CoreMatchers.equalTo(property.getValue()))); <FIXE>
<FIXS> <FIXE>
<FIXS> long id = ((java.lang.Long) (super.getNewValue())); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> if ((end_time) != null) { value = ((getStartTime()) + " - ") + (getEndTime()); }else { value = getStartTime(); } <FIXE>
<FIXS> for (int i = 0; i <= 1; i++) { for (int j = 0; j <= 1; j++) { <FIXE>
<FIXS> when(input.isMoveUp()).thenReturn(true); when(levelController.causesCollision(any(java.lang.Double.class), any(java.lang.Double.class), any(java.lang.Double.class), any(java.lang.Double.class))).thenReturn(true); <FIXE>
<FIXS> tabLayout.getTabAt(3).setIcon(R.mipmap.share); tabLayout.getTabAt(1).setIcon(R.mipmap.profile); tabLayout.getTabAt(2).setIcon(R.mipmap.setting); <FIXE>
<FIXS> protected static void addMethodUse(java.util.Set<com.github.juanmf.java2plant.structure.Relation> relations, java.lang.Class<?> fromType, java.lang.reflect.Type fromParameterType, java.lang.reflect.Method m) { <FIXE> <FIXS> com.github.juanmf.java2plant.Parser.addUse(relations, fromType, fromParameterType, m, name); <FIXE>
<FIXS> return index + 1; <FIXE>
<FIXS> return ok(index.render(admin)); <FIXE>
<FIXS> if (facilityName.contains(facility.getValue())) { <FIXE>
<FIXS> if ((java.lang.Double.valueOf(wRangeMaxValue.getText())) < (minRange)) <FIXE> <FIXS> maxRange = java.lang.Double.valueOf(wRangeMaxValue.getText()); <FIXE>
<FIXS> if (minutes > 0) { java.lang.Runnable vibrationRunnable = new java.lang.Runnable() { @java.lang.Override public void run() { setVibrationStart(_vibrationStrength, 1000); } }; alarmHandler.postDelayed(vibrationRunnable, java.util.concurrent.TimeUnit.MINUTES.toMillis(minutes)); }else setVibrationStart(_vibrationStrength, 1000); <FIXE>
<FIXS> android.content.Intent profile = new android.content.Intent(this, com.example.navigationdrawer.Accueil.class); startActivity(profile); break; case 2 : <FIXE> <FIXS> case 3 : <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> private void getMemberIDFromUser() { <FIXE>
<FIXS> Nick.setHint(""); <FIXE> <FIXS> <FIXE>
<FIXS> dispatch.execute(adminService.removeCandidate(candidate.getId()), new com.arcbees.bourseje.client.AdminRestCallback<java.lang.Void>() { <FIXE>
<FIXS> java.lang.System.out.println(main.java.com.marist.mscs721.RoomScheduler.findRoomIndex(rooms, test)); <FIXE> <FIXS> inputCheck = true; <FIXE>
<FIXS> public static java.lang.String getJobCoordinationZkPath(org.apache.samza.config.Config config) { <FIXE>
<FIXS> openSession(); <FIXE> <FIXS> java.lang.String hql = "FROM PaymentsHistory WHERE wallet =" + (clientWallet.getId()); <FIXE>
<FIXS> fingerprintingComponent.showImage(fingerprintImage); <FIXE> <FIXS> <FIXE>
<FIXS> ir.mbaas.sdk.MBaaS.init(this, null, null, null, false); <FIXE>
<FIXS> <FIXE>
<FIXS> if (((this.getAirline().getImage()) + (increasment * (this.getEfficiency()))) <= 100) { <FIXE>
<FIXS> if (studentList != null) { studentCollection.getStudentPersonal().addAll(studentList); return studentCollection; }else { return null; } <FIXE>
<FIXS> java.util.ArrayList<java.lang.Runnable> dependentStopped() { assert java.lang.Thread.holdsLock(this); <FIXE> <FIXS> return new java.util.ArrayList<java.lang.Runnable>(); <FIXE> <FIXS> return tasks; <FIXE>
<FIXS> public lampkicking.model.Game play(lampkicking.model.InputData inputData) { <FIXE> <FIXS> return game; <FIXE>
<FIXS> if (((PythonInterpreter.interpreter.get()) == null) || ((PythonInterpreter.interpreter.get().currentFrame.size()) == 0)) <FIXE>
<FIXS> mDatabase.getReference((("beacon/" + (item.devAddress)) + "/")).child("isLost").setValue(false); mDatabase.getReference("lost_items/").child(item.devAddress).removeValue(); item.isLost = false; <FIXE>
<FIXS> op.delete(); <FIXE>
<FIXS> if (s == null) return null; <FIXE>
<FIXS> <FIXE>
<FIXS> return new org.exist.xquery.functions.array.ArrayType(context, tail); <FIXE>
<FIXS> this.sprites[ligne][colonne] = new view.Sprite(image, (colonne * (SET_SIZE)), (ligne * (SET_SIZE))); <FIXE> <FIXS> this.sprites[(ligne + 1)][colonne] = sprite; <FIXE>
<FIXS> <FIXE>
<FIXS> if (!(matcher.isCompatible(candidate.filter))) { <FIXE> <FIXS> if ((candidate.version.versionCode) <= bestVersionCode) { <FIXE>
<FIXS> task.setName(nameEdit.getText().toString().trim()); task.setDescription(descriptionEdit.getText().toString().trim()); <FIXE>
<FIXS> _prev.screen.layer.setVisible(false); <FIXE> <FIXS> <FIXE>
<FIXS> edu.umass.cs.gnsclient.client.integrationtests.ServerIntegrationTest.failWithStackTrace(("Problem adding read field: " + e)); <FIXE> <FIXS> edu.umass.cs.gnsclient.client.integrationtests.ServerIntegrationTest.failWithStackTrace(("Exception when we were not expecting it ACLCreateDeeperField: " + e)); <FIXE>
<FIXS> parentFragment.setPageSaved(success); <FIXE>
<FIXS> <FIXE> <FIXS> currentPos = new int[(kb.getAttributeList().size()) - 1]; for (int i = 0; i < (currentPos.length); i++) currentPos[i] = 0; <FIXE>
<FIXS> return ur != null ? idAsString(ur.id) : null; <FIXE>
<FIXS> if (portBindings == null) { return ; } for (org.arquillian.cube.docker.impl.client.config.PortBinding portBinding : portBindings) { final int randomPrivatePort = generateRandomPrivatePort(); portBinding.setBound(randomPrivatePort); <FIXE>
<FIXS> int i = index - (info.getRightShift()); if (i < 0) { i = 26 + i; } i = i % 26; <FIXE>
<FIXS> private io.minio.HttpResponse executePut(java.lang.String bucketName, java.lang.String objectName, java.util.Map<java.lang.String, java.lang.String> headerMap, java.util.Map<java.lang.String, java.lang.String> queryParamMap, byte[] data, int length) throws io.minio.ErrorResponseException, io.minio.InternalException, io.minio.InvalidBucketNameException, io.minio.NoResponseException, java.io.IOException, org.xmlpull.v1.XmlPullParserException { <FIXE> <FIXS> return executePut(bucketName, objectName, headerMap, queryParamMap, Regions.INSTANCE.region(bucketName), data, length); <FIXE>
<FIXS> org.bouncycastle.util.Arrays.fill(buffer, ((byte) (0))); <FIXE> <FIXS> <FIXE>
<FIXS> if ((confLdapAuth != null) && (!(confLdapAuth.isEmpty()))) { <FIXE>
<FIXS> if ((currentFragment) == (ru.neurotech.hrvstress.views.MainView.PAGE_INDEX.MULTIPLE.ordinal())) { <FIXE>
<FIXS> dragSortController.setSortEnabled(false); <FIXE>
<FIXS> public int getYLocation(int position, com.edulectronics.tinycircuit.Models.Components.Connectors.ConnectionPointOrientation orientation) { <FIXE> <FIXS> return (getRow(position)) * (cellSize); <FIXE>
<FIXS> nameFriend = false; <FIXE>
<FIXS> y = (this.y) + 1; else <FIXE> <FIXS> <FIXE>
<FIXS> if (properties == null) { properties = new net.minecraft.nbt.NBTTagCompound(); } <FIXE>
<FIXS> g.fill3DRect(x, y, binWidth, height, true); <FIXE> <FIXS> <FIXE>
<FIXS> resList.add(i, ((xList.get(i)) * (yList.get(i)))); <FIXE>
<FIXS> mNotificationBar.showTemporaryInverse(message); <FIXE>
<FIXS> <FIXE>
<FIXS> for (int i = 0; i < (list.size()); ++i) { <FIXE>
<FIXS> return method.getResponseBodyAsStream(); <FIXE>
<FIXS> if ((task.isSuccessful()) == false) { <FIXE> <FIXS> code = -1; }else { <FIXE> <FIXS> <FIXE>
<FIXS> org.junit.Assert.assertEquals(2, count.intValue()); <FIXE>
<FIXS> if (Constants.BUG_CATEGORY.equals(reader.getLocalName())) { <FIXE>
<FIXS> if (value == null) { return null; } <FIXE>
<FIXS> if (clazz.isInstance(settingData)) { <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> if ((mils % 1000) == 0) { int minsRemaining = ((int) (mils)) / 60000; int secsRemaining = (((int) (mils)) / 1000) % 60; java.lang.String time = ((java.lang.Integer.toString(minsRemaining)) + ":") + (java.lang.String.format("%02d", secsRemaining)); timeRemaining.setText(time); } <FIXE>
<FIXS> if ((tile != null) && (tile.getEffectiveMaterialSide().isEmpty())) <FIXE>
<FIXS> <FIXE>
<FIXS> goToSceneOverView(v, true); <FIXE>
<FIXS> if ((guiRunTimer) == null) { guiRunTimer = new javax.swing.Timer(15, new java.awt.event.ActionListener() { @java.lang.Override public void actionPerformed(java.awt.event.ActionEvent e) { if (simController.isRunning()) simController.tick(); } }); guiRunTimer.setRepeats(true); guiRunTimer.start(); } <FIXE>
<FIXS> return matchesType(splitString.getNthElement(2)); <FIXE>
<FIXS> private org.eclipse.dawnsci.analysis.api.metadata.IDiffractionMetadata getMeta(uk.ac.diamond.scisoft.analysis.processing.operations.twod.DiffractionMetadataImportModel mod, org.eclipse.dawnsci.analysis.api.dataset.ILazyDataset parent, java.lang.String name) { <FIXE> <FIXS> org.eclipse.dawnsci.analysis.api.metadata.IDiffractionMetadata md = uk.ac.diamond.scisoft.analysis.io.NexusDiffractionCalibrationReader.getDiffractionMetadataFromNexus(mod.getFilePath(), parent, name); <FIXE>
<FIXS> edu.umass.cs.gnsclient.client.integrationtests.ServerIntegrationTest.failWithStackTrace(("Exception creating ALL_GUIDS access for Barney's cell: " + e)); <FIXE> <FIXS> edu.umass.cs.gnsclient.client.integrationtests.ServerIntegrationTest.failWithStackTrace(("Exception when we were not expecting it in ACLPartTwo: " + e)); <FIXE>
<FIXS> org.universAAL.android.utils.RAPIManager.registerInThread(getApplicationContext(), ((java.lang.String) (newValue))); <FIXE>
<FIXS> return edu.cmu.tetrad.graph.GraphUtils.randomGraphRandomForwardEdges(((parameters.getInt("numMeasures")) + (parameters.getInt("numLatents"))), parameters.getInt("numLatents"), (((parameters.getInt("avgDegree")) * (parameters.getInt("numMeasures"))) / 2), parameters.getInt("maxDegree"), parameters.getInt("maxIndegree"), parameters.getInt("maxOutdegree"), parameters.getBoolean("connected")); <FIXE>
<FIXS> sum = -1000; <FIXE>
<FIXS> for (int scan = 0; scan < (floors.size()); scan++) { <FIXE>
<FIXS> if (org.apache.camel.util.ObjectHelper.isOverridingMethod(getType(), proposedMethod, alreadyRegisteredMethod, false)) { <FIXE> <FIXS> if (org.apache.camel.util.ObjectHelper.isOverridingMethod(getType(), alreadyRegisteredMethod, proposedMethod, false)) { <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> selectedAxioms = new java.util.HashSet<org.semanticweb.owlapi.model.OWLAxiom>(); <FIXE>
<FIXS> <FIXE> <FIXS> while (index < (size())) { T data = get(index); if (data != null) { contents = ((((contents + "[ ") + index) + " ]\t= ") + data) + "\n"; } <FIXE> <FIXS> <FIXE>
<FIXS> @java.lang.Override public org.openqa.selenium.remote.DesiredCapabilities setCapabilities() { <FIXE>
<FIXS> <FIXE>
<FIXS> if ((this.moduleToClassPathLocations) != null) { java.util.List<org.eclipse.jdt.internal.core.builder.ClasspathLocation> l = this.moduleToClassPathLocations.get(moduleName); if (l == null) { l = new java.util.ArrayList<>(); this.moduleToClassPathLocations.put(moduleName, l); } l.add(cp); <FIXE> <FIXS> <FIXE>
<FIXS> val.put(com.myapps.ekutarnia.trackmytourney.MyDBHandler.COLUMN_T_SDATE, tourney.getStartDate().getTime()); val.put(com.myapps.ekutarnia.trackmytourney.MyDBHandler.COLUMN_T_EDATE, tourney.getEndDate().getTime()); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> java.util.Iterator<model.player.Player> it = getPlayers().iterator(); <FIXE>
<FIXS> for (int i = 0; i < (data.length); i++) { str = (((str + "\n") + i) + ": ") + (data[i]); <FIXE>
<FIXS> @java.lang.Override <FIXE> <FIXS> tts.setLanguage(java.util.Locale.US); <FIXE>
<FIXS> while (curr != null) { <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> return "To calculate Angular Velocity, you need either of these sets of measurements: Angle and Time <p>Linear Velocity and Radius <p>Arc Length, Angle, and Linear Velocity <p>Time, Radius, and Arc Length</p></p></p></p>"; <FIXE> <FIXS> return "To calculate Linear Velocity, you need either of these sets of measurements: <p>Arc Length and Time <p>Angular Velocity and Radius <p>Arc Length, Angle, and Angular Velocity <p>Time, Radius, and Angle</p></p></p></p>"; <FIXE> <FIXS> return "To calculate Radius, you need either of these sets of measurements: <p>Linear Velocity and Angular Velocity <p>Arc Length and Angle <p>Arc Length, Time, and Angular Velocity <p>Time, Angle, and Linear Velocity</p></p></p></p>"; <FIXE> <FIXS> return "To calculate Time, you need either of these sets of measurements: <p>Angular Velocity and Angle <p>Linear Velocity and Arc Length <p>Radius, Angle, and Linear Velocity <p>Angular Velocity, Radius, and Arc Length</p></p></p></p>"; <FIXE> <FIXS> return "To calculate Arc Length you need either of these sets of measurements: <p>Time and Linear Velocity <p>Angle and Radius <p>Radius, Time, and Angular Velocity <p>Angular Velocity, Angle, and Angular Velocity</p></p></p></p>"; <FIXE> <FIXS> return "To calculate Angle, you need either of these sets of measurements: <p>Angular Velocity and Time <p>Radius and Arc Length <p>Arc Length, Angular Velocity, and Linear Velocity <p>Time, Radius, and Linear Velocity</p></p></p></p>"; <FIXE> <FIXS> return ""; <FIXE>
<FIXS> if (u != null) { <FIXE>
<FIXS> timer = new android.os.CountDownTimer(2000, 1000) { <FIXE>
<FIXS> public static java.lang.String[] getParams(final java.util.Map<java.lang.String, java.lang.String> valueNameParamsMap) { <FIXE>
<FIXS> <FIXE>
<FIXS> player1.setCapture(blackMove); <FIXE>
<FIXS> java.net.URL url = findResource(name); <FIXE>
<FIXS> net.minecraft.util.IIcon icon = getHostIcon(world, x, y, z); <FIXE>
<FIXS> <FIXE>
<FIXS> @org.testng.annotations.Test(dataProvider = "noHeadersNorDomainDataProvider") <FIXE> <FIXS> org.testng.Assert.assertEquals(subdomain, null); <FIXE>
<FIXS> for (int j = 0; j < ((org.nd4j.linalg.api.shape.Shape.rank(shapeInformation)) - 1); j++) { <FIXE>
<FIXS> callIntent.setData(android.net.Uri.parse(sitePhoneNumber)); <FIXE>
<FIXS> result.add(new com.xz.data.prepare.RawData(i, null)); <FIXE>
<FIXS> private javax.swing.ImageIcon getPokemonIcon(java.lang.String pokemonImageString) { <FIXE>
<FIXS> java.lang.Integer ret = net.wequick.small.util.ReflectAccelerator.invoke(net.wequick.small.util.ReflectAccelerator.sAddAssetPath, assets, path); if (ret == null) return 0; <FIXE>
<FIXS> com.intellij.psi.PsiElement[] moduleKeywords = org.intellij.xquery.psi.impl.XQueryPsiImplUtil.findChildrenOfType(topmostElement, XQueryTypes.K_MODULE); <FIXE>
<FIXS> if ((logger) != null) logger.debug(("Scheduler ServiceImpl: queuing job " + (job.toString()))); <FIXE>
<FIXS> if (line >= (armorStands.size())) { <FIXE>
<FIXS> for (int y = 0; y < 9; y++) { <FIXE> <FIXS> newGrid[x][y] = type; <FIXE>
<FIXS> if ((totalItemCount) <= 1) { <FIXE>
<FIXS> switch (roomType) { case 'I' : roomCost = (HospitalMVC.Patient.icRoomRate) * (days); break; case 'P' : <FIXE> <FIXS> break; default : <FIXE> <FIXS> break; } <FIXE>
<FIXS> view.setText(items.get(pos).getText()); <FIXE>
<FIXS> public void setOutcomingPortletCandidate(final org.vaadin.addons.portallayout.gwt.client.portlet.PortletChrome portletWidget) { <FIXE> <FIXS> final com.vaadin.client.ComponentConnector pc = com.vaadin.client.Util.findConnectorFor(portletWidget.getContentWidget()); if ((incomingPortletCandidate) == pc) { incomingPortletCandidate = null; <FIXE> <FIXS> outcomingPortletCandidate = pc; <FIXE>
<FIXS> private com.example.nils.grocerylist.Item findBestItem(java.util.ArrayList<com.example.nils.grocerylist.Item> list) { <FIXE> <FIXS> switch (mode) { case 1 : return healthLogic.getCheapestItem(); case 2 : return healthLogic.getHealthiestItem(); default : return null; <FIXE> <FIXS> <FIXE>
<FIXS> strTemperature = h; <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> if ((mRemoteTrackTime) != null) { mRemoteTrackTime.unregister(); } <FIXE>
<FIXS> if (items[num][0].toLowerCase().equals(name.toLowerCase())) { <FIXE>
<FIXS> java.lang.System.out.println(("Registered " + (block.getRegistryName()))); <FIXE>
<FIXS> createTxChain(chain); <FIXE>
<FIXS> }else if ((neuroMLDocument) != null) { for (org.neuroml.model.Projection proj : neuroMLDocument.getNetwork().get(0).getProjection()) { projIds.add(proj.getId()); } <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> camera.setPreviewDisplay(holder); <FIXE>
<FIXS> <FIXE>
<FIXS> vector.Vector<logic.example.Example> examples = (clauses.isEmpty()) ? new vector.Vector() : clauses.getFirst().getLogicBase().getExamples(); <FIXE>
<FIXS> public synchronized void next() { <FIXE> <FIXS> super.next(); <FIXE> <FIXS> <FIXE>
<FIXS> return count.get(o2).compareTo(count.get(o1)); <FIXE>
<FIXS> dao.FilmDb filmDb = new dao.FilmDb(); if (!(id.equals("null"))) { <FIXE> <FIXS> filmDb = ((dao.FilmDb) (session.createQuery(("from FilmDb f where f.id=" + id)).list().get(0))); <FIXE> <FIXS> model.addAttribute("film", filmDb); <FIXE>
<FIXS> session.close(); <FIXE>
<FIXS> buddyname = ((android.widget.TextView) (v.findViewById(R.id.BuddyName))).getText().toString(); macAddr = ((android.widget.TextView) (v.findViewById(R.id.MacAddress))).getText().toString(); <FIXE>
<FIXS> EventBus.instance.post(new com.reactnativenavigation.events.ScreenChangedEvent(getCurrentScreenStack().peek().getScreenParams())); <FIXE> <FIXS> <FIXE>
<FIXS> java.lang.Object obj = field.get(instance); int c = ((java.lang.Integer) (obj)); <FIXE>
<FIXS> chisaiIndicator.setVisibility(TextView.INVISIBLE); <FIXE> <FIXS> <FIXE>
<FIXS> score = 0; <FIXE>
<FIXS> protected void selectItem(int position) { <FIXE>
<FIXS> if ((versionOfPlugin.getMinorVersion()) < (this.getMinorVersion())) { <FIXE>
<FIXS> private void addAllNumbers() { <FIXE>
<FIXS> <FIXE>
<FIXS> if ((index < (controllers.length)) && (index > 0)) { <FIXE>
<FIXS> public void onValueChange(final com.google.gwt.event.logical.shared.ValueChangeEvent<java.lang.String> event) { this.setDirty(true); final org.gwtbootstrap3.client.ui.TextBox box = ((org.gwtbootstrap3.client.ui.TextBox) (event.getSource())); final org.gwtbootstrap3.client.ui.FormGroup group = ((org.gwtbootstrap3.client.ui.FormGroup) (box.getParent())); this.validate(param, box, group); <FIXE>
<FIXS> <FIXE> <FIXS> setVideoRateParams(profile, 1); mMediaRecorder.setVideoSize(videoSize.width(), videoSize.height()); <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE> <FIXS> android.bluetooth.BluetoothDevice device = connectDevice; BroadcastResult(Constants.MBOTSERVICE_DISCONNECT_RESULT_ACTION, Constants.BLUETOOTH_DEVICE, device); Cleanup(); serialAdapter.Shutdown(); <FIXE>
<FIXS> if (((threshold) == (-1)) || (sum > (threshold))) <FIXE>
<FIXS> com.compomics.denovogui.io.PepNovoModificationFile.fillModIdMap(); com.compomics.denovogui.io.PepNovoModificationFile.invertedModIdMap = new java.util.HashMap<java.lang.String, java.lang.String>(); for (java.util.Map.Entry<java.lang.String, java.lang.String> entry : com.compomics.denovogui.io.PepNovoModificationFile.modIdMap.entrySet()) { com.compomics.denovogui.io.PepNovoModificationFile.invertedModIdMap.put(entry.getValue(), entry.getKey()); <FIXE>
<FIXS> <FIXE> <FIXS> }else { for (int edge : gridEntry.getEdges()) { edgeCache.put(edge, gridEntry); } <FIXE>
<FIXS> <FIXE> <FIXS> org.paces.Stata.JSON.StataJSON.toJSON(x); <FIXE>
<FIXS> public void backNavigation() { <FIXE>
<FIXS> clone.addChainedProvider(factory.clone(required)); <FIXE>
<FIXS> public void signUp(java.lang.String uname, java.lang.String email, java.lang.String pass) { <FIXE>
<FIXS> public void makeSmall() { <FIXE>
<FIXS> return (((((record.get(options.getChr())) + ":") + (record.get(options.getPos()))) + (record.get(options.getRef()))) + ">") + (record.get(options.getAlt())); <FIXE>
<FIXS> if (cameraAdapter.isEmpty()) return ; <FIXE>
<FIXS> <FIXE> <FIXS> tc.postForResponseCode("location/update"); <FIXE> <FIXS> return 0; <FIXE>
<FIXS> public static java.lang.String readHeaderString(byte[] buffer) { <FIXE>
<FIXS> xDif = 0; yDif = 0; <FIXE>
<FIXS> pizzas.add(new com.preproduction.delivery.domain.OrderDetails(pizza, 1, this)); <FIXE>
<FIXS> gui.Controller.getPlayer().replaceWeapon(1, new items.Gun(g.fireRate(), g.MAX_AMMO, g.spareAmmo(), g.RELOAD_FACTOR, false)); <FIXE>
<FIXS> return new at.ezylot.IncrementalBallGame.MovableCircle(x, y, radius, javafx.scene.paint.Paint.valueOf(color), new java.util.Random().nextInt(359), Main.RootStage); <FIXE>
<FIXS> for (com.esotericsoftware.kryonet.adapters.Listener<? super T> listener : listeners) { listener.idle(connection); <FIXE>
<FIXS> return this.mapBufferImpl(0, bufferName, true, true, offset, length, access, dispatch, glProcAddress); <FIXE>
<FIXS> private java.lang.String encode(java.lang.String input) { <FIXE> <FIXS> <FIXE> <FIXS> int ascii = ((int) (first5.charAt(i))); <FIXE> <FIXS> return java.lang.String.valueOf(java.lang.Long.parseLong(rtn)); <FIXE>
<FIXS> assertEquals(1, messages.size()); <FIXE>
<FIXS> short result = ((short) (array[(pos + 1)])); <FIXE> <FIXS> result |= ((short) (array[pos])) & 255; <FIXE>
<FIXS> listener.onDone(name); <FIXE>
<FIXS> private boolean confirmDeleteProjects(java.util.List<org.eclipse.core.resources.IResource> resources) { <FIXE>
<FIXS> if ((mScrollPositionManager) != null) { mScrollPositionManager.saveToPreferences(this, org.wordpress.android.ui.WPDrawerActivity.SCROLL_POSITION_ID); } <FIXE>
<FIXS> if ((in_front == null) || ((in_front != null) && ((getFrontVehicleDistance(in_front)) >= (2 * (Lane.min_car_distance))))) { <FIXE>
<FIXS> if (mirw.isMergedInto(mirw.parseCommit(commit), mirw.parseCommit(accepted))) { <FIXE>
<FIXS> for (java.lang.String bPos : bPawns) <FIXE>
<FIXS> if ((hp) <= 0) { hp = 0; } <FIXE> <FIXS> if ((stamina) <= 0) { stamina = 0; } <FIXE>
<FIXS> java.lang.Long currentNumber = numberOfNgrams.get(s); <FIXE> <FIXS> currentNumber = 1L; <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> models.NotificationCounter.incrementConversationsCount(recipient.id); <FIXE>
<FIXS> public static java.lang.String readUntilNonEmptyLine(java.io.BufferedReader r) { <FIXE>
<FIXS> super.onBackPressed(); <FIXE>
<FIXS> <FIXE>
<FIXS> if ((((currentInput.toLowerCase().contains("sdf")) || (currentInput.toLowerCase().contains("dfg"))) || (currentInput.toLowerCase().contains("cvb"))) || (currentInput.toLowerCase().contains(",./"))) { <FIXE>
<FIXS> dest.writeLong(this.id); dest.writeString(this.title); dest.writeString(this.releaseDate); dest.writeDouble(this.userRating); dest.writeString(this.plot); dest.writeString(this.posterPath); dest.writeString(this.genre); <FIXE>
<FIXS> super.onActivityResult(requestCode, resultCode, data); <FIXE>
<FIXS> if ((blocks[y][x]) == null) { <FIXE>
<FIXS> synchronized(this.stash) { if (this.stash.containsKey(item)) { final java.util.Set<java.util.UUID> uuids = this.stash.get(item); uuids.remove(player); if (uuids.isEmpty()) this.stash.remove(item); } <FIXE>
<FIXS> com.xebialabs.deployit.plugin.api.udm.Deployed<?, ?> deployed = getDeployed("1.5.0", "puppetlabs-apache"); <FIXE>
<FIXS> if ((federatedRecConfiguration.sourceSelectors) != null) { java.util.ArrayList<java.lang.String> sourceSelectors = new java.util.ArrayList<java.lang.String>(); java.util.Collections.addAll(sourceSelectors, federatedRecConfiguration.sourceSelectors); secureUserProfile = sourceSelection(secureUserProfile, sourceSelectors); } <FIXE>
<FIXS> listScheduleAdapter.add(schedule); <FIXE>
<FIXS> return ((facing == (net.minecraft.util.EnumFacing.DOWN)) || (facing == null)) && (capability == (net.minecraftforge.energy.CapabilityEnergy.ENERGY)) ? ((T) (energyStorage)) : super.getCapability(capability, facing); <FIXE>
<FIXS> <FIXE>
<FIXS> if (!(path.contains(node))) { <FIXE>
<FIXS> break; <FIXE> <FIXS> break; <FIXE> <FIXS> break; <FIXE>
<FIXS> public com.sk89q.worldedit.CuboidClipboard getSchematic(java.lang.String schematicName) { <FIXE> <FIXS> <FIXE>
<FIXS> shareIntent.putExtra(Intent.EXTRA_TEXT, ((words.getText()) + (com.app.cryptotunnel.nutriplan.HealthTips.APP_SHARE_HASHTAG))); <FIXE>
<FIXS> if ((mItems.size()) > 0) mItems.get(0).setEnabled(true); <FIXE>
<FIXS> private synchronized long registerOperationWithHeapSize(long heapSize) throws java.lang.InterruptedException { <FIXE>
<FIXS> boolean insertUserChild(java.lang.String userId, long childId, int isOwner) { <FIXE>
<FIXS> if ((((t != (fr.lteconsulting.pomexplorer.Client.class)) && (t != (fr.lteconsulting.pomexplorer.WorkingSession.class))) && (t != (fr.lteconsulting.pomexplorer.commands.CommandOptions.class))) && (t != (fr.lteconsulting.pomexplorer.ILogger.class))) <FIXE>
<FIXS> long currentWithoutPostZone = postTz.convertLocalToUTC(time, false); <FIXE> <FIXS> return postTz.convertUTCToLocal(preTz.convertLocalToUTC(nextLocal, false)); <FIXE>
<FIXS> }else { this.atom = null; <FIXE>
<FIXS> <FIXE>
<FIXS> int length = (ipArray.length) - 1; for (int i = length; i >= 0; i--) { ip = java.lang.Long.parseLong(ipArray[(length - i)]); <FIXE>
<FIXS> <FIXE>
<FIXS> private void setupGit(java.lang.String url) throws java.io.IOException { hudson.plugins.git.UserRemoteConfig config = new hudson.plugins.git.UserRemoteConfig(url, null, null, null); <FIXE>
<FIXS> java.lang.StringBuilder url = new java.lang.StringBuilder(com.paypal.musictag.dao.usingwebservice.api.CoverArtArchiveAPI.URL).append(subUrl).append(gid); <FIXE> <FIXS> return com.paypal.musictag.util.MusicTagUtil.jsontoMap(json); <FIXE>
<FIXS> maxKey[0] = dessert.getId(); <FIXE>
<FIXS> com.bmc.justdoit.smartkanban.api.objects.KanbanGeneratorRequest request = ((com.bmc.justdoit.smartkanban.api.objects.KanbanGeneratorRequest) (KanbanQueue.CREATOR_QUEUE.poll())); if (request != null) { <FIXE> <FIXS> } <FIXE>
<FIXS> for (int i = 0; i > (enemies.size()); i++) { <FIXE>
<FIXS> Quick.quickSortH(data, start, index); <FIXE>
<FIXS> <FIXE>
<FIXS> root = new xlp.util.genric.list.Element(); <FIXE> <FIXS> newElement.setValue(t); <FIXE>
<FIXS> <FIXE> <FIXS> mAdapter.updateDataSet(mItemList); <FIXE>
<FIXS> <FIXE>
<FIXS> timber.log.Timber.e(e, "Exception encountered while fetching the initial folder list"); <FIXE>
<FIXS> desktop_codebehind.Car car = new desktop_codebehind.Car.Builder().primaryColor(colors[(playerID - 1)]).secondaryColor(colors[(5 - (playerID - 1))]).build(); <FIXE>
<FIXS> callbacks.onClientLostRoute(c); <FIXE>
<FIXS> <FIXE>
<FIXS> public void handle(final com.sun.net.httpserver.HttpExchange exchange) throws java.io.IOException { <FIXE> <FIXS> final java.util.Scanner scanner = new java.util.Scanner(this.getFileStream()).useDelimiter("\\A"); final java.lang.String response = (scanner.hasNext()) ? scanner.next() : ""; <FIXE> <FIXS> final java.io.OutputStream os = exchange.getResponseBody(); <FIXE> <FIXS> <FIXE>
<FIXS> if (sortOrder == null) { sortOrder = (MoviesContract.MoviesEntry.COLUMN_POPULARITY) + " DESC"; } <FIXE>
<FIXS> public org.apache.lucene.util.LongBitSet acceptedGlobalOrdinals(org.apache.lucene.index.RandomAccessOrds globalOrdinals) throws java.io.IOException { <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> edu.uci.eecs.wukong.framework.model.InitValue value = new edu.uci.eecs.wukong.framework.model.InitValue(componentId, (propertyNumber++), val); <FIXE>
<FIXS> public void flatMap(org.wikipedia.citolytics.clickstream.types.ClickStreamResult r, org.apache.flink.util.Collector<org.apache.flink.api.java.tuple.Tuple2<java.lang.String, java.lang.Long>> out) throws java.lang.Exception { <FIXE> <FIXS> out.collect(new org.apache.flink.api.java.tuple.Tuple2(r.getRecommendations().get(0).getRecommendedArticle(), 1L)); <FIXE>
<FIXS> public static java.lang.String emailsMinusYou(java.util.List<com.zulip.android.models.Person> people, com.zulip.android.models.Person you) { java.util.ArrayList<java.lang.String> names = new java.util.ArrayList<>(); <FIXE>
<FIXS> csci4311.nc.NetcatUDPClient.clientSocket.send(new java.net.DatagramPacket(sendData, sendData.length, csci4311.nc.NetcatUDPClient.ipAddress, port)); <FIXE> <FIXS> <FIXE>
<FIXS> if (answer.equals(userEnterAnswer)) <FIXE>
<FIXS> if ((org.spinsuite.bchat.view.FV_Thread.m_Request) == null) return false; <FIXE>
<FIXS> java.util.ArrayList<java.lang.String> msgErr = new java.util.ArrayList(java.util.Arrays.asList(ex.getMessage().split("\n"))); <FIXE>
<FIXS> if (!(dch07m.getText().toString().isEmpty())) { <FIXE>
<FIXS> com.emc.sa.service.vipr.block.ExportBlockVolumeHelper.precheckPortGroupParameter(virtualPool, portGroup); <FIXE>
<FIXS> <K, V> org.ehcache.Ehcache<K, V> createNewEhcache(final java.lang.String alias, final org.ehcache.config.CacheConfiguration<K, V> config, final java.lang.Class<K> keyType, final java.lang.Class<V> valueType) { final org.ehcache.Ehcache<K, V> ehcache = super.createNewEhcache(alias, config, keyType, valueType); <FIXE>
<FIXS> if (inputText.isEmpty()) { textFieldResults.setText("0"); }else { textFieldResults.setText(inputText); } <FIXE>
<FIXS> <FIXE>
<FIXS> return method.invoke(kylin, host); <FIXE>
<FIXS> out.writeOut("printWrongSequenceHeightWidth"); java.lang.System.out.println(((width + "x") + height)); <FIXE>
<FIXS> <FIXE>
<FIXS> return ((-p) * ((java.lang.Math.log(p)) / (java.lang.Math.log(2)))) - ((1 - p) * ((java.lang.Math.log((1 - p))) / (java.lang.Math.log(2)))); <FIXE>
<FIXS> types = org.cytoscape.tableimport.internal.util.TypeUtil.guessTypes(importType, model, dataTypes, null); <FIXE>
<FIXS> java.lang.String recipient = com.amazonaws.samples.UI_Mailbox.toField.getText().toLowerCase(); <FIXE>
<FIXS> public void move(int x, int y, final java.lang.Integer activityClass) { <FIXE>
<FIXS> return org.pac4j.core.util.CommonHelper.toString(this.getClass(), "key", key, "secret", secret, "tokenAsHeader", tokenAsHeader, "connectTimeout", connectTimeout, "readTimeout", readTimeout, "responseType", responseType, "scope", scope, "api", api, "hasGrantType", hasGrantType, "service", service, "hasBeenCancelledFactory", hasBeenCancelledFactory, "profileDefinition", profileDefinition); <FIXE>
<FIXS> if (totalDays == 0) { return 0; }else { return ((int) (totalSteps)) / totalDays; } <FIXE>
<FIXS> prefs.edit().remove(key).commit(); <FIXE>
<FIXS> java.lang.System.out.println(msg); <FIXE>
<FIXS> return ((((((((("JavascriptConsoleResultBase [renderedTemplate=" + (this.renderedTemplate)) + ", spaceNodeRef=") + (this.spaceNodeRef)) + ", spacePath=") + (this.spacePath)) + ", scriptPerformance=") + (this.scriptPerformance)) + ", freemarkerPerformance=") + (this.freemarkerPerformance)) + "]"; <FIXE>
<FIXS> public void playerPassword(org.bukkit.entity.Player p, java.lang.String password) { <FIXE>
<FIXS> java.lang.String newString = (newData != null) ? new java.lang.String(newData) : null; <FIXE>
<FIXS> if (jidAllocated.contains(task.getJid())) { <FIXE>
<FIXS> }else { com.liferay.mobile.screens.util.LiferayLogger.e("Error loading screenlet"); <FIXE> <FIXS> <FIXE>
<FIXS> assertEquals(1, actual.size()); <FIXE>
<FIXS> order.setStatus(status); <FIXE>
<FIXS> return new com.intellij.xdebugger.impl.evaluate.ExpressionInputComponent(project, myEditorsProvider, mySourcePosition, text, myDisposable); <FIXE>
<FIXS> if (position >= 0) { <FIXE>
<FIXS> java.lang.StringBuilder codedMessage = new java.lang.StringBuilder(); <FIXE>
<FIXS> queryString.trim(); if ((determineCheckedButton()) == "all") queryString = "true"; <FIXE>
<FIXS> while ((index < (line.length())) && (java.lang.Character.isWhitespace(line.charAt(index)))) { <FIXE>
<FIXS> switch (requestCode) { case com.csci448.freshapps.keepitfresh.ItemListFragment.REQUEST_OPTION : com.csci448.freshapps.keepitfresh.SortOptions option = ((com.csci448.freshapps.keepitfresh.SortOptions) (data.getSerializableExtra(SortOptionsDialogFragment.EXTRA_SORT_OPTION))); updateUI(option); break; default : updateUI(); break; <FIXE>
<FIXS> <FIXE>
<FIXS> if ((i > 0) && ((i + 1) < (args.length()))) { <FIXE> <FIXS> id = decc.dht.Key.load(args.substring((i + 1))); <FIXE>
<FIXS> java.lang.System.out.print("Input password: "); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> case org.creativecommons.thelist.adapters.FeedAdapter.ERROR_VIEW : holder.iconImageView.setImageResource(R.drawable.ic_error_red_24dp); break; <FIXE> <FIXS> <FIXE>
<FIXS> localizationView.reset(); <FIXE>
<FIXS> <FIXE>
<FIXS> public void checkMapResolve(java.util.Map object, java.lang.Object fieldName) { <FIXE>
<FIXS> } if ((doneTask) != null) { doneTask.run(); doneTask = null; <FIXE>
<FIXS> <FIXE>
<FIXS> return (((("From: " + (frcRow.getCommentGiverName())) + " [") + (frcRow.getCreatedAt())) + "] ") + (frcRow.getEditedAt()); <FIXE>
<FIXS> if ((connection.isConnected()) && (((mLowestPriorityConnection) == null) || ((mLowestPriorityConnection.getPriority()) < (connection.getPriority())))) { <FIXE>
<FIXS> }else if (dt == (com.jug.export.CellStatsExporter.SegmentRecord.LOWER)) { ret = ret + "B"; }else if (dt == (com.jug.export.CellStatsExporter.SegmentRecord.UNKNOWN)) { ret = ret + "U"; }else { ret = ret + dt; } <FIXE>
<FIXS> java.lang.String newName; <FIXE> <FIXS> newName = com.equinox.Parser.appendParameters(keyParamPairs, 0, currentIndex); <FIXE>
<FIXS> return new io.yawp.commons.http.JsonResponse(); <FIXE>
<FIXS> java.util.logging.Logger root = java.util.logging.Logger.getLogger(de.fosd.jdime.Main.class.getPackage().getName()); <FIXE>
<FIXS> if (id != null) { <FIXE>
<FIXS> @java.lang.SuppressWarnings(value = { "unchecked" , "rawtypes" }) private void insertIDandTypeforItemsBlock(java.util.Map itemsObject, java.lang.String schemaArrayItemsID, java.lang.String schemaArrayItemsType) { <FIXE>
<FIXS> <FIXE>
<FIXS> if ((user != null) && (user.isMyPassword(pass))) { <FIXE> <FIXS> <FIXE>
<FIXS> private gov.nist.healthcare.tools.hl7.v2.igamt.lite.domain.Datatype getDataType(java.lang.String name, java.lang.String hl7Version) { <FIXE>
<FIXS> if (((fileId) == null) || (((picture) != null) && (!(fileId.equals(picture.getUUID()))))) { <FIXE> <FIXS> fileId = picture.getUUID(); <FIXE>
<FIXS> <FIXE>
<FIXS> org.support.project.knowledge.dao.MailHooksDao.get().physicalDelete(mailHookId); <FIXE>
<FIXS> private void updateVersion(java.lang.Long slbId) throws java.lang.Exception { <FIXE> <FIXS> throw e; <FIXE>
<FIXS> <FIXE>
<FIXS> if (links != null) { for (org.eclipse.smarthome.core.thing.link.ItemChannelLink removedItemChannelLink : links) { notifyListenersAboutRemovedElement(removedItemChannelLink); } <FIXE>
<FIXS> org.apache.flink.runtime.query.QueryableStateClient.LOG.error("Failed to shut down ActorSystem", t); <FIXE>
<FIXS> if (((response.body()) == null) || ((response.body().hits.size()) < 1)) { <FIXE>
<FIXS> if ((groupKey != null) && (org.apache.commons.lang3.StringUtils.isBlank(groupKey))) { <FIXE>
<FIXS> private void addAppointmentBinding(org.rapla.entities.domain.Appointment appRef, org.rapla.entities.storage.ReferenceInfo<org.rapla.entities.domain.Allocatable> allocationId) { <FIXE>
<FIXS> model.Position position = offend(boardClass, attacker, new java.util.HashMap<>(), i); <FIXE>
<FIXS> if (rv == rw) { return ; } int sv = size[rv]; int sw = size[rw]; <FIXE>
<FIXS> if (this.isFulfilled(distribution)) { return ; } <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> public static boolean validatePriority(java.lang.String priority) { <FIXE>
<FIXS> ecommerce.rmall.domain.Page<ecommerce.rmall.domain.Order> page = this.service.queryProcessingWithPage(pageNumber); <FIXE>
<FIXS> <FIXE>
<FIXS> setAllNormalPinsVisibility(popBusStationPins, true); <FIXE>
<FIXS> java.lang.System.out.println(((("loading nodes/ars from " + nodeFile) + " / ") + arcFile)); <FIXE>
<FIXS> public static void setStatus(com.onaio.steps.model.Household household, com.onaio.steps.model.Member member, java.util.ArrayList<java.lang.String> row) { <FIXE>
<FIXS> <FIXE> <FIXS> while (!(gl.processCommand("MOVE W", id).equals("FAIL"))) { <FIXE> <FIXS> while (!(gl.processCommand("MOVE N", id).equals("FAIL"))) { <FIXE>
<FIXS> return new org.springframework.http.ResponseEntity("Collection received", org.springframework.http.HttpStatus.OK); <FIXE>
<FIXS> return ((!(name.endsWith(".json"))) && (!(name.endsWith(endsWith)))) && (!(name.equals("instant-run"))); <FIXE>
<FIXS> java.util.concurrent.TimeUnit min = org.libsmith.anvil.time.TimePeriod.min(origin.getTimeUnit(), bound.getTimeUnit()); <FIXE>
<FIXS> if ((mTripbookItem) != null) { mTripbookItem.setThumbnail(mImageFilePath); } <FIXE>
<FIXS> public java.util.List<wyvern.tools.parsing.coreparser.Token> checkLex(java.lang.String input, int[] kinds) throws edu.umn.cs.melt.copper.runtime.logging.CopperParserException, java.io.IOException { <FIXE> <FIXS> return tokens; <FIXE>
<FIXS> if ((((big.numMarked) == 9) && ((big.winner) != 0)) && ((idToPlayOn) == (big.id))) { <FIXE>
<FIXS> return isChecked ? !(childPositions.add(packedPosition)) : childPositions.remove(packedPosition); <FIXE>
<FIXS> for (org.opendaylight.distributed.tx.api.DTXLogicalTXProviderType logicalTXProviderType : deviceMap.keySet()) { txProviderMap.get(logicalTXProviderType).releaseTransactionDevices(deviceMap.get(logicalTXProviderType)); } <FIXE>
<FIXS> oldTarget.getActor().remove(); <FIXE>
<FIXS> mProcedureNameManager.clear(); <FIXE>
<FIXS> while ((tasks.isEmpty()) && (alive.get())) { <FIXE> <FIXS> if (!(alive.get())) { <FIXE>
<FIXS> if (arr == null) return null; <FIXE>
<FIXS> <FIXE>
<FIXS> parsedFile.add(newFileCheckSum); <FIXE>
<FIXS> <FIXE> <FIXS> if ((fragment.lastIndexOf(org.dita.dost.writer.SLASH)) != (-1)) { return fragment.substring(((fragment.lastIndexOf(org.dita.dost.writer.SLASH)) + 1)); <FIXE> <FIXS> return fragment; <FIXE> <FIXS> return null; <FIXE>
<FIXS> <FIXE>
<FIXS> assertTrue(((dao.playerComparison((((rand.nextFloat()) * ((max) - (min))) + (min)), "RB", "New York Jets")) > 0)); <FIXE>
<FIXS> doc.setCharacterAttributes(t.pos().offset(), t.length(), doc.getStyle(token_style.get(t.type())), true); <FIXE>
<FIXS> int r = ((int) (java.lang.Math.round((((coord.getY()) - (y0)) / (cellSize))))); int c = ((int) (java.lang.Math.round((((coord.getX()) - (x0)) / (cellSize))))); <FIXE>
<FIXS> java.lang.String fd = getFloatRegister(parts[1]); <FIXE> <FIXS> java.lang.String ft = getFloatRegister(parts[3]); <FIXE> <FIXS> return ((((opcode + format) + ft) + fs) + fd) + funct; <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> super.width = (text.length()) + 2; super.height = 1; <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> requestMetaData.remove(ackId); <FIXE>
<FIXS> public static int getBlockOrFacadeMetadata(net.minecraft.world.IBlockAccess world, int x, int y, int z, int side) { <FIXE>
<FIXS> put(sns.teamcity.model.DiskSpaceSummary.FREE_SPACE, java.lang.String.valueOf(freeSpace)); <FIXE> <FIXS> <FIXE>
<FIXS> if ((!(value2.equals("null"))) && (!(value2.equals("")))) { <FIXE>
<FIXS> double[] controlledPositionAxes = new double[]{ 1.0 , 1.0 , 1.0 }; double[] controlledOrientationAxes = new double[]{ 0.0 , 0.0 , 0.0 }; <FIXE>
<FIXS> boolean intStatus = nachos.threads.Machine.interrupt().disable(); <FIXE> <FIXS> <FIXE>
<FIXS> appWidgetManager.updateAppWidget(appWidgetId, updateWidgetListView(context, appWidgetId)); <FIXE> <FIXS> <FIXE>
<FIXS> if ((callback) == null) { return ; } <FIXE>
<FIXS> adb.setTitle(messageId); <FIXE>
<FIXS> <FIXE>
<FIXS> java.util.Iterator<java.util.Timer> iterator = com.sb.elsinore.LaunchControl.timerList.iterator(); java.util.Timer tTimer; while (iterator.hasNext()) { tTimer = iterator.next(); if (tTimer.getName().equalsIgnoreCase(name)) { com.sb.elsinore.LaunchControl.timerList.remove(tTimer); } } <FIXE>
<FIXS> this.bg.setOnMouseMoved(( e) -> java.lang.System.exit(0)); <FIXE>
<FIXS> vm.selectAll(sels, true); <FIXE>
<FIXS> java.util.List<org.talend.core.model.general.ModuleNeeded> childrenModules = org.talend.designer.core.utils.JavaProcessUtil.getChildrenModules(node, java.util.Collections.emptySet(), false); <FIXE>
<FIXS> if ((board[r][c]) != null) board[r][c].draw(g); <FIXE>
<FIXS> <FIXE>
<FIXS> while ((i < (arr.size())) && ((arr.get(i)) != value)) <FIXE>
<FIXS> if ((camera) != null) return true; <FIXE>
<FIXS> return ((((em.name) == null) && ((this.name) == null)) || (em.name.equals(this.name))) && ((java.lang.Double.compare(em.intensity, this.intensity)) == 0); <FIXE>
<FIXS> return (this.emptySpaceLocation.getY()) < 2; case "s" : <FIXE> <FIXS> <FIXE>
<FIXS> if (md == null) { return null; } <FIXE> <FIXS> <FIXE>
<FIXS> session.setAttribute("usuarioLogado", usuarioRetornado); <FIXE> <FIXS> session.setAttribute("ehAdministrador", usuarioRetornado); <FIXE>
<FIXS> return (((((t.getIdentificador()) == null) || ((t.getPropiedad().getCalle()) == null)) || ((t.getCliente().getPersona()) == null)) || ((t.getCreador().getPersona()) == null)) || (t.getGarantia().equals("")); <FIXE>
<FIXS> if (null != (job)) { map.put("job", job.toMap()); } <FIXE>
<FIXS> java.lang.String area = xarea.getString(); <FIXE>
<FIXS> <FIXE>
<FIXS> new com.rapplogic.aru.uploader.xbee.XBeeSketchUploader().process("/Users/andrew/Documents/dev/arduino-remote-uploader/resources/BlinkSlow.cpp.hex", "/dev/tty.usbserial-A6005uRz", java.lang.Integer.parseInt("9600"), "0013A200408B98FF", false, 5, 0, 500, 0); <FIXE>
<FIXS> cn.academy.terminal.item.ItemTerminalInstaller.startInstalling(player); <FIXE>
<FIXS> if ((newText.length()) > 0) { <FIXE>
<FIXS> if (checkCornerCase(rooms)) { return ; } <FIXE>
<FIXS> while (sideFieldIndex < ((listOfPossibleMoves.size()) - 1)) { <FIXE> <FIXS> <FIXE> <FIXS> sideFieldIndex++; <FIXE>
<FIXS> for (int i = 0; i < (length); i++) { <FIXE>
<FIXS> private java.util.HashMap getLimitedUserInfo() { java.util.HashMap info = new java.util.HashMap<>(); <FIXE>
<FIXS> for (int activityNdx = 0; activityNdx < numActivities; ++activityNdx) { <FIXE>
<FIXS> image.clearAnimation(); <FIXE>
<FIXS> if (value == null) { query = null; }else { query = config.getParser().validateQuery(this, value, 0, (-1)); <FIXE>
<FIXS> return ("/" + (encodeIfNecessary(this.root.getName()))) + "*"; <FIXE>
<FIXS> return id.getNode(); <FIXE>
<FIXS> if (!(subject.startsWith("CAD Page"))) <FIXE>
<FIXS> <FIXE>
<FIXS> if ((selectedObjectRefs.size()) == 0) return org.miradi.objecthelpers.ORef.INVALID; <FIXE>
<FIXS> <FIXE> <FIXS> player.release(); vibrator.cancel(); <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> public static pedca.context.Context createAndSaveBottleneckContext(java.lang.String path, float sizeX, float sizeY, float bottleneckWidth, float bottleneckHeight, float bottleneckPosY) { <FIXE>
<FIXS> throw new java.lang.IllegalArgumentException(("Invalid page number; write aborted" + (pageno.pid))); <FIXE>
<FIXS> org.tomahawk.libtomahawk.collection.StationPlaylist stationPlaylist = org.tomahawk.libtomahawk.collection.StationPlaylist.get(((org.tomahawk.libtomahawk.collection.Playlist) (item))); if (stationPlaylist != (getPlaybackManager().getPlaylist())) { <FIXE>
<FIXS> <FIXE>
<FIXS> return value == 0L ? -1 : (position - 1) - (java.lang.Long.numberOfLeadingZeros(value)); <FIXE>
<FIXS> vakje = null; <FIXE>
<FIXS> verticeFunction.addMapping(new java.lang.String("B"), new java.lang.String("B")); <FIXE>
<FIXS> java.lang.System.out.println("Color = yellow"); <FIXE> <FIXS> <FIXE>
<FIXS> throw new java.lang.IllegalArgumentException("basePackageNames must not be empty "); <FIXE>
<FIXS> synchronized(this) { <FIXE>
<FIXS> processingAnim(cmdString); <FIXE>
<FIXS> break; <FIXE>
<FIXS> for (java.util.Map.Entry<java.lang.String, expert_system.Question> elements : ruleMap.entrySet()) { <FIXE>
<FIXS> return numAnimats; <FIXE>
<FIXS> if (confFile != null) { try (java.io.FileOutputStream out = new java.io.FileOutputStream(confFile)) { ovt.OVTCore.globalProperties.save(out, "OVT properties file."); } <FIXE>
<FIXS> nextMove.updateUtilityWithCoins(); <FIXE>
<FIXS> <FIXE> <FIXS> drawLives(); drawScore(graphics); <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> public double curve(double t) { if (t <= 0.5) { return (1 - (super.curve((1 - (t * 2))))) * 0.5; <FIXE> <FIXS> return ((super.curve(((t * 2) - 1))) * 0.5) + 0.5; <FIXE>
<FIXS> listView = findView(R.id.lv_main_providers_list); <FIXE>
<FIXS> } if (!hasTag) { modifiedTags.add(tagToAdd); <FIXE>
<FIXS> <FIXE>
<FIXS> private com.amazonaws.services.kinesis.scaling.ScalingOperationReport scaleStream(java.lang.String streamName, int originalShardCount, int targetShards, int operationsMade, int shardsCompleted, long startTime, java.lang.Integer minShards, java.lang.Integer maxShards) throws java.lang.Exception { <FIXE> <FIXS> return scaleStream(streamName, originalShardCount, targetShards, operationsMade, shardsCompleted, startTime, getOpenShardStack(streamName), minShards, maxShards); <FIXE>
<FIXS> <FIXE>
<FIXS> _disposed = true; <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> intent.putExtra("flag", true); <FIXE>
<FIXS> org.usfirst.frc.team3243.robot.InputManager.axis[0] = org.usfirst.frc.team3243.robot.InputManager.ps2controller.getRawAxis(1); org.usfirst.frc.team3243.robot.InputManager.axis[1] = -(org.usfirst.frc.team3243.robot.InputManager.ps2controller.getRawAxis(0)); org.usfirst.frc.team3243.robot.InputManager.axis[2] = org.usfirst.frc.team3243.robot.InputManager.ps2controller.getRawAxis(2); <FIXE>
<FIXS> return new schn27.zorlog.data.DataSourceMath.Handle(false, ds.getHandle(name)); <FIXE>
<FIXS> if ((marble == null) || ((marble.getId()) != (updatedMarble.getId()))) { <FIXE> <FIXS> marble.purposeNotes = updatedMarble.purposeNotes; marble.performanceNotes = updatedMarble.performanceNotes; break; <FIXE>
<FIXS> <FIXE> <FIXS> u.dealCardToCol(0, card1); u.dealCardToCol(0, card2); <FIXE>
<FIXS> android.graphics.Bitmap b = com.daimajia.androidviewhover.tools.Util.getViewBitmap(this); if (b == null) return ; android.graphics.Bitmap bm = com.daimajia.androidviewhover.tools.Blur.apply(getContext(), b); <FIXE>
<FIXS> int lastDegree = -(BinomialHeap.INFINITY); <FIXE> <FIXS> if ((x.degree) <= lastDegree) { <FIXE>
<FIXS> <FIXE> <FIXS> org.elasticsearch.common.settings.Settings.Builder elasticsearchSettings = org.elasticsearch.common.settings.Settings.settingsBuilder().put("cluster.name", matchpconfig.getEsClusterName()).put("path.home", matchpconfig.getEsPath()); node = org.elasticsearch.node.NodeBuilder.nodeBuilder().local(true).settings(elasticsearchSettings.build()).node(); <FIXE> <FIXS> } catch (java.lang.Exception e) { <FIXE>
<FIXS> series = db.getSeries(2, false, null); <FIXE>
<FIXS> org.junit.Assert.assertTrue(((((xbot.common.controls.actuators.MockCANTalon) (drive.rightDrive)).getSetpoint()) >= 0)); <FIXE>
<FIXS> return ((steps) == (node.steps)) && (java.util.Arrays.equals(word, node.word)); <FIXE>
<FIXS> if ((t1 != null) && (!("".equals(t1.trim())))) { <FIXE>
<FIXS> append(bufa, a); append(bufa, b); <FIXE>
<FIXS> android.widget.Toast.makeText(context, R.string.tags_edition_failed, Toast.LENGTH_SHORT).show(); <FIXE>
<FIXS> block.setNumBytes(((block.getNumBytes()) + currLen)); <FIXE>
<FIXS> entity.Customer c = em.find(entity.Customer.class, id); <FIXE>
<FIXS> if (o == null) return false; if (!(o instanceof java.lang.Number)) <FIXE>
<FIXS> java.util.List<eu.h2020.symbiote.cloud.model.data.observation.Observation> value = new java.util.ArrayList(); <FIXE>
<FIXS> logger.info("Resetting configuration for MAX! Cube {}", getThing().getUID()); <FIXE>
<FIXS> int[] a = new int[]{ 3 , 5 }; <FIXE> <FIXS> head = obj.reverseBetween(head, 1, 2); <FIXE>
<FIXS> <FIXE>
<FIXS> if (hmiVal != null) { if ((hmiVal.equals(HMILevel.HMI_FULL)) || (hmiVal.equals(HMILevel.HMI_LIMITED))) setUserSelectedStatus(true); else if (hmiVal.equals(HMILevel.HMI_NONE)) setUserSelectedStatus(false); <FIXE> <FIXS> }else { setUserSelectedStatus(false); } <FIXE>
<FIXS> public model.Book get(long key) { <FIXE>
<FIXS> java.lang.String line; try { <FIXE> <FIXS> while (line != null) { nflTeamSettingsBuilder.append(line); nflTeamSettingsBuilder.append("\n"); line = fileReader.readLine(); } } finally { fileReader.close(); } <FIXE>
<FIXS> org.hamcrest.MatcherAssert.assertThat(com.ddiehl.timesincetextview.TimeSince.getFormattedDateString(((mTime) - ((24 * 60) * 60)), mTime, false, getContext()), com.ddiehl.timesincetextview.TimeSinceTextViewAndroidTest.is(getQuantityString(R.plurals.tstv_timespan_days, 1))); <FIXE>
<FIXS> if (userOTP != null) { userOTP.setValidUser(true); userOTP.setQrcode(qrcode); userOTP.setModifiedTime(date); return userOTPDao.saveUserOTP(userOTP); <FIXE> <FIXS> return userOTP; <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> synchronized(this) { if (!(methods.containsKey(amountOfParams))) { java.lang.String fullName = ((java.lang.String) (be.nabu.libs.evaluator.impl.MethodOperation.getParts().get(0).getContent())); methods.put(amountOfParams, findMethod(fullName, amountOfParams)); } } <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> updateMovement(); <FIXE> <FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> pi.pathfinder.GraphConverter.logger.info(map.getObstacles()); <FIXE>
<FIXS> java.util.Map<java.lang.Long, java.util.Set<java.lang.String>> tags = userQueryDao.getQueryTags(java.util.Arrays.asList(16L, 17L)); <FIXE>
<FIXS> result = this.keyValue.get(key); <FIXE>
<FIXS> while (index < (aList.size())) { element = aList.get(index); <FIXE>
<FIXS> if (resultFilterMethod != (com.ghostflying.portalwaitinglist.util.SettingUtil.getResultFilterMethod())) { <FIXE>
<FIXS> com.github.infosimulators.events.EventRegistry.fire(new com.github.infosimulators.events.Event(com.github.infosimulators.events.EventType.TRAINER_GENERATED_FIRST_GEN)); <FIXE>
<FIXS> houseElements.get(i).setAttribute(model.ViewHandler.inView, "false"); <FIXE>
<FIXS> warUsers.add(p); <FIXE>
<FIXS> <FIXE>
<FIXS> for (int i = 0; i < ((myArrayList.size()) - 1); i++) { java.lang.System.out.println(myArrayList.size()); if (myArrayList.get(i).getTitle().contains(findTitle)) { <FIXE> <FIXS> return -1; <FIXE>
<FIXS> <FIXE>
<FIXS> while ((((t) <= (tf)) || ((nProf) > 0)) || ((nAlu) > 0)) { <FIXE>
<FIXS> <FIXE> <FIXS> if (nodeState != null) { org.opendaylight.bgpcep.pcep.topology.provider.ServerSessionManager.LOG.debug("Node {} unbound", nodeState.getNodeId()); nodeState.released(persistNode); } <FIXE>
<FIXS> protected void removeType(java.lang.String name) { <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> return addSeries(seriesName, org.knowm.xchart.internal.Utils.getDoubleArrayFromNumberList(xData), org.knowm.xchart.internal.Utils.getDoubleArrayFromNumberList(yData), org.knowm.xchart.internal.Utils.getDoubleArrayFromNumberList(bubbleData)); <FIXE>
<FIXS> service.init(currentTimeMillis, getScreenOnTimeLocked(currentTimeMillis)); <FIXE>
<FIXS> <FIXE>
<FIXS> if (nodes == null) { return taxa; } <FIXE>
<FIXS> <FIXE>
<FIXS> int r = edu.princeton.cs.algs4.StdRandom.uniform(0, (i + 1)); <FIXE>
<FIXS> public int HitOrStand(int i) { int x = i; <FIXE> <FIXS> x += drawCard(); java.lang.System.out.println(x); if (x > 21) { return x; <FIXE> <FIXS> return x; <FIXE> <FIXS> return x; <FIXE>
<FIXS> randomSongs.add(albumSongs.get((randNum - 1))); <FIXE>
<FIXS> <FIXE>
<FIXS> if ((obj == null) || (!(obj instanceof com.iota.iri.Neighbor))) { <FIXE>
<FIXS> if (reader == null) { return ""; } <FIXE>
<FIXS> <FIXE>
<FIXS> java.lang.System.out.println("Configuration file does not exist!"); return new org.json.JSONObject(); <FIXE> <FIXS> return new org.json.JSONObject(); <FIXE>
<FIXS> public E remove(int location) { location = location - 1; if (((location < (currentSize)) && (location >= 0)) && (!(isEmpty()))) { E obj = array[location]; (currentSize)--; dynamicResize(false); shiftElements(location, false); return obj; <FIXE>
<FIXS> <FIXE>
<FIXS> return null; <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> return new seedu.todolist.model.task.Task(name, null, null, tags); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> reset(intentSynchronizer); <FIXE> <FIXS> replay(intentSynchronizer); <FIXE> <FIXS> verify(intentSynchronizer); <FIXE>
<FIXS> private static int getSequenceNumber(byte[] datagramContents) { <FIXE>
<FIXS> sb.append(java.lang.String.format((("\n" + indent) + " public const int %sId = %d;\n"), uk.co.real_logic.sbe.generation.csharp.CSharpUtil.CSharpUtil.formatPropertyName(token.name()), token.id())); <FIXE>
<FIXS> return prev_level > (rooms_list.get(roomID).getLevel()); <FIXE>
<FIXS> org.usfirst.frc.team1100.robot.subsystems.Drive.getInstance().driveMecanum(org.usfirst.frc.team1100.robot.OI.getInstance().getLeftStick().getX(), org.usfirst.frc.team1100.robot.OI.getInstance().getLeftStick().getY(), org.usfirst.frc.team1100.robot.OI.getInstance().getRightStick().getY()); <FIXE>
<FIXS> private void unregisterHandler(org.osgi.framework.ServiceRegistration<org.eclipse.smarthome.core.thing.binding.ThingHandler> serviceRegistration) { org.eclipse.smarthome.core.thing.binding.ThingHandler thingHandler = ((org.eclipse.smarthome.core.thing.binding.ThingHandler) (bundleContext.getService(serviceRegistration.getReference()))); removeHandler(thingHandler); thingHandler.dispose(); serviceRegistration.unregister(); if (thingHandler instanceof org.eclipse.smarthome.core.thing.binding.BaseThingHandler) { ((org.eclipse.smarthome.core.thing.binding.BaseThingHandler) (thingHandler)).unsetBundleContext(bundleContext); <FIXE>
<FIXS> marker.setVisible(false); <FIXE>
<FIXS> if ((binaryData == null) || ((binaryData.getDataSize()) == 0)) { <FIXE>
<FIXS> private static void setVertGroup(javax.swing.GroupLayout layout, javax.swing.JScrollPane jScrollPane1, javax.swing.JScrollPane jScrollPane2, javax.swing.JLabel jLabel1, javax.swing.JLabel status, javax.swing.JTextField cmdEntry) { <FIXE>
<FIXS> public void setupEventListeners() { <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> return ((data.getNext()) != null) || ((data.getPrevious()) != null); <FIXE>
<FIXS> int i = 1; <FIXE>
<FIXS> if (lhsRoadCamera.getSyncId().equals(currentSyncId)) { <FIXE> <FIXS> if (rhsRoadCamera.getSyncId().equals(currentSyncId)) { <FIXE>
<FIXS> org.junit.Assert.assertEquals(1, req.getOp()); <FIXE>
<FIXS> java.lang.String message; <FIXE>
<FIXS> context.startActivity(android.content.Intent.createChooser(emailIntent, context.getString(R.string.select_app)).setFlags(Intent.FLAG_ACTIVITY_NEW_TASK)); <FIXE>
<FIXS> if (item == null) { return false; } <FIXE>
<FIXS> throw new java.lang.AssertionError(("failed to parse object source: " + expectedJsonObjectSource)); <FIXE>
<FIXS> return l2.compareTo(l1); <FIXE>
<FIXS> java.util.ArrayList<java.util.ArrayList<java.lang.String>> last_id = new java.util.ArrayList(place_bet.ExecuteQuery("SELECT max(BetID) FROM bets;")); <FIXE>
<FIXS> <FIXE> <FIXS> emailService.sendEmailReminder(respondant); <FIXE>
<FIXS> updateLogic(true); <FIXE> <FIXS> updateLogic(true); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> int moveCounter = 1; <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> mChangeListener.sendChange(new com.deepercreeper.vampireapp.host.change.HealthChange(false, mValue)); <FIXE>
<FIXS> return "Worst: " + "0"; <FIXE>
<FIXS> com.squareup.picasso.Picasso.with(mContext).load(restaurant.getImageUrl()).into(mRestaurantImageView); <FIXE>
<FIXS> com.pushbots.push.Pushbots.sharedInstance().untag(lectureId); <FIXE>
<FIXS> producer.start(defaultCameraSettings); <FIXE>
<FIXS> mControlOverlayLayout.updateStreamingStatusOnUiThread(false); <FIXE>
<FIXS> java.lang.Thread.sleep((1 * 1000L)); <FIXE>
<FIXS> <FIXE>
<FIXS> return allLines.substring(0, ((allLines.length()) - 1)); <FIXE>
<FIXS> filterOutput.clear(); <FIXE>
<FIXS> private java.lang.String percentEncodeRfc3986(java.lang.String s) { <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> if ((normalTasks.isEmpty()) && (events.isEmpty())) { <FIXE>
<FIXS> <FIXE> <FIXS> int tmp = dataAddr; <FIXE> <FIXS> return tmp; <FIXE>
<FIXS> <FIXE> <FIXS> java.lang.System.out.println(manager.checkLogin(l)); if (!(manager.checkLogin(l))) { <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> for (int i = 0; i < (N); i++) { copyIfNotNull(a, temp, i, i); <FIXE>
<FIXS> if (geoNameId.equals(location.getGeoNameId())) { <FIXE>
<FIXS> if ((mr) == null) return ; <FIXE>
<FIXS> <FIXE>
<FIXS> org.smart4j.framework.dao.bean.Pager<org.bright.sepe.entity.Notice> noticePager = noticeService.getNoticePager(pageNumber, pageSize, "", ""); <FIXE>
<FIXS> private static int getReceiverID(byte[] datagramContents) { <FIXE>
<FIXS> imageItems.add(new com.application.dsmsocial.ImageItem(bitmap, null)); <FIXE>
<FIXS> public void setIncomingPortletCandidate(final org.vaadin.addons.portallayout.gwt.client.portlet.PortletChrome portletWidget) { <FIXE> <FIXS> final com.vaadin.client.ComponentConnector pc = com.vaadin.client.Util.findConnectorFor(portletWidget.getContentWidget()); if ((outcomingPortletCandidate) == pc) { outcomingPortletCandidate = null; <FIXE> <FIXS> incomingPortletCandidate = pc; <FIXE>
<FIXS> return new com.fmtech.categoryrecyclerview.CategoryAdapter.CategoryTitleViewHolder(mLayoutInflater.inflate(R.layout.item_category_list_subtitle, null, false)); <FIXE> <FIXS> return new com.fmtech.categoryrecyclerview.CategoryAdapter.CategoryItemViewHolder(mLayoutInflater.inflate(R.layout.item_category_list_subitem, null, false)); <FIXE> <FIXS> <FIXE>
<FIXS> int i = com.ywca.pentref.common.PentrefProvider.mUriMatcher.match(uri); <FIXE>
<FIXS> <FIXE>
<FIXS> pSize += pPosition; for (int i = pPosition; i < pSize; ++i) { <FIXE>
<FIXS> opts.addOption("bitset", "bitset_input", false, "Use Bitset for the input of pos_items [default:false]"); <FIXE>
<FIXS> if ((enemies.get(i).getHealth()) <= 0) <FIXE>
<FIXS> @my.epam.collections.Test <FIXE> <FIXS> list.add(1, 40); <FIXE>
<FIXS> return new ru.itis.inform.department.dao.models.User(resultSet.getInt("id"), resultSet.getString("username"), resultSet.getString("email"), resultSet.getString("city"), resultSet.getString("age"), resultSet.getString("gender"), resultSet.getString("passportData"), resultSet.getString("snils")); <FIXE>
<FIXS> return (value == null) || (value.equals("")); <FIXE>
<FIXS> com.bryan.lib.dialog.FastDialog.ShowActionSheetDialog(context, stringItems, new com.flyco.dialog.listener.OnOperItemClickL() { <FIXE>
<FIXS> <FIXE> <FIXS> synchronized(mAppWidgetServices) { com.android.server.AppWidgetServiceImpl impl = mAppWidgetServices.get(userId); mAppWidgetServices.remove(userId); if (impl == null) { com.android.server.AppWidgetServiceImpl.getSettingsFile(userId).delete(); }else { impl.onUserRemoved(); } <FIXE>
<FIXS> if (layerName.equals(layer.getName())) { <FIXE> <FIXS> res = createLayer(description, layerName, monitor); <FIXE>
<FIXS> resourceStreamingManager.activateMasterResourceStreamer(newMasterResourceStreamer, () -> { <FIXE>
<FIXS> map.remove(idx); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> if (((!(taskToUpdate.equals(editedTask))) && (internalList.contains(editedTask))) && (!(editedTask.getCategories().contains(Category.done)))) { throw new seedu.taskboss.model.task.UniqueTaskList.DuplicateTaskException(); <FIXE>
<FIXS> <FIXE>
<FIXS> this.socket.close(); <FIXE> <FIXS> if ((this.listenThread) != null) { <FIXE>
<FIXS> project = org.springsource.ide.eclipse.commons.tests.util.StsTestUtil.createPredefinedProject("validation", "org.springframework.ide.eclipse.beans.core.tests"); <FIXE> <FIXS> <FIXE>
<FIXS> super.onBackPressed(); <FIXE> <FIXS> <FIXE>
<FIXS> final com.oasisfeng.hack.Hack.HackedTargetField<java.lang.Integer> field = com.oasisfeng.hack.Hack.into(com.oasisfeng.hack.HackTest.Simple.class).staticField("mIntField").fallbackTo((-1)); <FIXE>
<FIXS> int id = -1; <FIXE> <FIXS> id = rs.getInt(1); <FIXE>
<FIXS> <FIXE>
<FIXS> locks.add(lf.getINodeLock((!(dir.isQuotaEnabled())), nameNode, lockType, INodeResolveType.PATH, src)).add(lf.getBlockLock()).add(lf.getBlockRelated(BLK.RE, BLK.ER, BLK.CR, BLK.UC)); <FIXE>
<FIXS> static void processCourseClasses(org.jdom2.Element response, org.jdom2.Element courseClass) throws java.lang.Exception { response.addContent(edu.stanford.CourseTrans.createNewCourse(courseClass)); <FIXE>
<FIXS> if (foto == null) return ; <FIXE>
<FIXS> if ((mMeetingId) >= 0) { int position = mMeetingPagerAdapter.getPositionForMeetingId(mMeetingId); ca.rmen.android.scrumchatter.util.Log.v(TAG, ((("meeting " + (mMeetingId)) + " is on page ") + position)); mBinding.pager.setCurrentItem(position); } <FIXE>
<FIXS> }else { standaloneLinks = new java.util.LinkedList<>(); <FIXE>
<FIXS> return org.silverpeas.components.projectmanager.model.ProjectManagerDAO.getMostDistantTask(con, taskId); <FIXE>
<FIXS> private java.lang.String getSequence(com.axelor.apps.base.db.Company company) throws com.axelor.exception.AxelorException { <FIXE>
<FIXS> int minValue = -9; <FIXE>
<FIXS> <FIXE> <FIXS> test.setFormat(format); <FIXE>
<FIXS> <FIXE>
<FIXS> mTabsView.tabRemoved(0); <FIXE>
<FIXS> org.elasticsearch.action.bulk.BulkRequestBuilder bulkRequestBuilder = client.prepareBulk().setRefresh(refresh); for (java.lang.String docId : idJsonDocMap.keySet()) { bulkRequestBuilder.add(client.prepareIndex(indexName, indexType, docId).setSource(idJsonDocMap.get(docId))); } <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> java.lang.String finalLayouConstraints = layoutConstraints; if (layoutConstraints != null) { if (org.jskat.gui.swing.LayoutFactory.isMacOS()) { finalLayouConstraints = org.jskat.gui.swing.LayoutFactory.injectMacOSLayoutConstraints(layoutConstraints); }else if (layoutConstraints != null) { finalLayouConstraints = layoutConstraints; } <FIXE>
<FIXS> if (collection == null) { return null; } <FIXE>
<FIXS> java.lang.System.out.println("Would you like to stop the server? Y/N"); input = read.nextLine().charAt(0); <FIXE> <FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> org.talend.mdm.commmon.metadata.FieldMetadata fieldMetadata = org.talend.mdm.commmon.metadata.annotation.ForeignKeyProcessor.getFieldMetadata(repository, type, appInfo, path, false); <FIXE>
<FIXS> private boolean setPlayerToHaveLargestArmy(int playerIndex) { <FIXE>
<FIXS> if (alleleAssay.getId().equals(selectedAlleleAssay.getId())) { <FIXE>
<FIXS> int i = 0; for (int x : new int[numberOfEngines]) { hxSoundEngines.get(i).release(); com.huhx0015.hxaudio.utils.HXLog.d(com.huhx0015.hxaudio.audio.HXSound.LOG_TAG, (("RELEASE: release(): HXSoundEngine (" + i) + ") is released.")); i++; <FIXE> <FIXS> hxSoundEngines = null; <FIXE>
<FIXS> if (agent.sendCommand(monopolyCommand)) { <FIXE>
<FIXS> for (int i = 1; i <= nbCandidates; i++) { <FIXE>
<FIXS> } catch (java.lang.Exception e) { <FIXE>
<FIXS> if (waitMillis < 0) added.await(); else added.await(waitMillis, java.util.concurrent.TimeUnit.MILLISECONDS); <FIXE>
<FIXS> switch (response.code()) { <FIXE>
<FIXS> <FIXE>
<FIXS> return java.lang.Integer.parseInt(element.getAttribute(attrName)); <FIXE>
<FIXS> int offset = content.toLowerCase().indexOf(mSearchQuery.toLowerCase()); <FIXE>
<FIXS> <FIXE>
<FIXS> if (((mRunningMonitor) == null) && ((mStateMonitor) != null)) { <FIXE>
<FIXS> if ((size) > ((queue.length) / 2)) { <FIXE>
<FIXS> <FIXE> <FIXS> int currentPos = this.chunkId; (this.chunkId)++; <FIXE>
<FIXS> instructions.add(new cs444.codegen.arm.instructions.Add(cs444.codegen.arm.Register.R0, cs444.codegen.arm.Register.R0, cs444.codegen.arm.Register.R8, sizeHelper)); <FIXE>
<FIXS> org.junit.Assert.assertEquals(20140912, addYears(20140912, 0)); org.junit.Assert.assertEquals(20140912, addYears(20130912, 1)); org.junit.Assert.assertEquals(20140912, addYears(20150912, (-1))); org.junit.Assert.assertEquals(20140912, addYears(10140912, 1000)); org.junit.Assert.assertEquals(20160228, addYears(20140228, 2)); <FIXE>
<FIXS> given().filter(io.restassured.filter.log.ResponseLoggingFilter.logResponseToIfMatches(captor, equalTo(400))).expect().body("greeting", equalTo("Greetings John Doe")).when().get("/greet?firstName=John&lastName=Doe"); <FIXE>
<FIXS> msg = (((("Successfully changed " + (player.getName())) + " to group ") + newGroup) + " in world ") + world; <FIXE> <FIXS> msg = (((("Unsuccessfully changed " + (player.getName())) + " to group ") + newGroup) + " in world ") + world; <FIXE>
<FIXS> java.lang.Double distance = cluster.getCentroid(false).getDistanceFromVector(d.getVector()); <FIXE>
<FIXS> java.lang.ClassLoader resultsClassLoader = org.jsonschema2pojo.integration.EnumIT.classSchemaRule.generateAndCompile("/schema/enum/typeWithEnumProperty.json", "com.example", config("propertyWordDelimiters", "_")); <FIXE>
<FIXS> java.lang.System.err.println(cookies); <FIXE> <FIXS> if (cookies != null) { java.util.StringTokenizer tokenizer = new java.util.StringTokenizer(cookies, "; "); while (tokenizer.hasMoreTokens()) { java.lang.String cookie = tokenizer.nextToken(); cookiesList.add(cookie); } } <FIXE>
<FIXS> <FIXE>
<FIXS> loginView(false); <FIXE>
<FIXS> lockCount -= 1; <FIXE>
<FIXS> block.addStatement(this.currentInstructionStatement); <FIXE> <FIXS> <FIXE>
<FIXS> private static void menuOptions() throws java.io.IOException { <FIXE>
<FIXS> if ((index >= (matchData.getValues().length)) || (index < 0)) { <FIXE>
<FIXS> new android.support.v7.app.AlertDialog.Builder(getActivity()).setTitle("Permission Needed").setMessage("Permission rationale here").setNegativeButton("Cancel", null).setPositiveButton("Request Permission", new android.content.DialogInterface.OnClickListener() { <FIXE>
<FIXS> this.keepRunning.set(false); <FIXE>
<FIXS> deleteBrackets(((((BracketTable.Cols.FK_EVENT_ID) + " = ? AND ") + (BracketTable.Cols.USER_ADDED)) + " = ?"), new java.lang.String[]{ "" + event_id , "0" }); <FIXE>
<FIXS> <FIXE>
<FIXS> if (highestSlot < 9) { <FIXE>
<FIXS> public void invoke(java.util.List<java.lang.String> args) { final java.lang.String name = args.get(0); args.remove(0); <FIXE>
<FIXS> private entity.Usuario getUsrByName(java.lang.String usr) { <FIXE>
<FIXS> nz.ac.elec.agbase.android_agbase_api.agbase_models.Sensor sensor = nz.ac.elec.agbase.android_agbase_db.AgBaseDatabaseManager.getInstance().readSensorWithGuid(weatherAlertBuffer.getDeviceGuid()); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> s = s.toLowerCase(); <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> if (image == null) return ; <FIXE>
<FIXS> org.usfirst.frc.team68.robot.subsystems.Intake.getIntake().setIntakeArm(org.usfirst.frc.team68.robot.RobotMap.intakePositions[(index++)]); <FIXE>
<FIXS> @org.junit.Test public void TestGetProblemTests() { <FIXE>
<FIXS> if (p != c) { mb.add(p); } <FIXE>
<FIXS> if ((currentTime) >= (duration)) { <FIXE>
<FIXS> <FIXE> <FIXS> return converter.convertList(domainRepository.getElencoCauseRotturaCristalli(), msa.application.service.domain.CausaRotturaCristalliDTO.class); <FIXE>
<FIXS> @org.junit.Test <FIXE> <FIXS> <FIXE>
<FIXS> int temp = 0; <FIXE> <FIXS> temp = S[i]; <FIXE> <FIXS> temp = 0; <FIXE>
<FIXS> <FIXE>
<FIXS> agent.setWorldTranslation(agent.getPredictedPosition(tpf)); <FIXE>
<FIXS> public java.util.ArrayList<com.badlogic.gdx.maps.MapObject> checkObjectFor(com.badlogic.gdx.maps.MapLayer layer, java.lang.String property) { java.util.ArrayList<com.badlogic.gdx.maps.MapObject> o = new java.util.ArrayList<com.badlogic.gdx.maps.MapObject>(); <FIXE>
<FIXS> while (((current) == null) || (!(current.hasNext()))) { if (rels.hasNext()) { current = rels.next().other().iterator(); }else { break; } } return ((current) != null) && (current.hasNext()); <FIXE>
<FIXS> public void moveUpPackageableElements(org.eclipse.uml2.uml.PackageableElement packageableElement, java.util.Collection<org.eclipse.uml2.uml.PackageableElement> packageableElementsToMove) { <FIXE>
<FIXS> while (count != 7) { <FIXE> <FIXS> java.lang.System.out.println(weekly); <FIXE>
<FIXS> buffer = new java.lang.StringBuilder(); <FIXE>
<FIXS> final long setBit = 1L << (wordNum & 63); if ((tracker1[(wordNum >>> 6)] |= setBit) == setBit) { <FIXE>
<FIXS> <FIXE>
<FIXS> android.app.Notification.Builder notificationBuilder = new android.app.Notification.Builder(context).setSmallIcon(android.R.drawable.stat_sys_warning).setContentTitle("Novas notícias estão disponíveis!").setContentText("Clique aqui para acessar sua lista de notícias e manter-se informado").setVibrate(mVibratePattern); <FIXE>
<FIXS> if (title == null) title = ""; <FIXE>
<FIXS> public javax.ws.rs.core.Response submitCmdlet(@javax.ws.rs.PathParam(value = "actionType") java.lang.String actionType, @javax.ws.rs.FormParam(value = "args") java.lang.String args) { <FIXE>
<FIXS> int score = 0; if (linesCleared > 0) { score = ((int) (((((java.lang.Math.pow(linesCleared, 3)) / 6.0) - (java.lang.Math.pow(linesCleared, 2))) + ((23 * linesCleared) / 6.0)) - 2)); } <FIXE>
<FIXS> <FIXE>
<FIXS> private void collapseViews(android.view.View fab, final boolean collapsing) { <FIXE> <FIXS> <FIXE>
<FIXS> if ((appCount) == 1) { com.ufo.socketioandroiddemo.login.UserInfoRepository userInfoRepository = com.ufo.socketioandroiddemo.login.UserInfoRepository.getInstance(); com.ufo.socketioandroiddemo.login.UserInfoBean bean = userInfoRepository.currentUser(getApplicationContext()); if (bean != null) { getRecent(); startSocketIOService(); } <FIXE>
<FIXS> @org.springframework.security.access.prepost.PreAuthorize(value = "#store != null && #store.user != null && #store.user.id == authentication.user.id") <FIXE> <FIXS> return oldStore; <FIXE>
<FIXS> if (domain == null) return null; <FIXE>
<FIXS> public app2dapi.geometry.G2D.Vector2D transform(app2dapi.geometry.G2D.Vector2D v) { <FIXE>
<FIXS> java.lang.String userName = null; if ((userInfo) != null) { userName = userInfo.optString("username"); } <FIXE>
<FIXS> jsonFrame.setFloat("magnitude", frame.magnitude()); <FIXE>
<FIXS> <FIXE>
<FIXS> if ((x < (this.width)) || (x >= (this.height))) { <FIXE> <FIXS> if ((y < (this.height)) || (y >= (this.height))) { <FIXE>
<FIXS> net.myonlinestuff.torrentdl.service.Parser.LOGGER.info("element found: {}", el.size()); <FIXE>
<FIXS> <FIXE>
<FIXS> private static java.lang.String join(java.lang.String[] set, java.lang.String medium, int offset) { java.lang.String s = set[offset]; <FIXE> <FIXS> if (i > offset) <FIXE>
<FIXS> fragmentManager.beginTransaction().replace(R.id.container, tw.edu.ncu.cc.course.ScheduleFragment.newInstance(this)).commit(); <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> return (portOffset) == null ? ((ipAddress) + "::") + port : ((((ipAddress) + ":") + ((portOffset) + port)) + ":") + port; <FIXE>
<FIXS> public int handle(java.io.InputStream ips, java.io.OutputStream ops) throws java.io.IOException { <FIXE> <FIXS> return -32700; <FIXE> <FIXS> return handleNode(jsonNode, ops); <FIXE>
<FIXS> if (fileNameIndex == (-1)) { fileNameIndex = 0; } <FIXE>
<FIXS> ru.cdek.example.repository.jdbc.JdbcEntityRepositoryImpl.logger.info(java.lang.String.format("Added entity with id - %d (name: %s)", id.intValue(), entity.getName())); <FIXE>
<FIXS> <FIXE>
<FIXS> mViewPager.setCurrentItem(0); <FIXE>
<FIXS> oneHourTimerLatch = new java.util.concurrent.CountDownLatch(24); <FIXE>
<FIXS> if (this.hasBeenAnswered = this.nextCommand.apply(t)) this.setChanged(); this.notifyObservers(new java.lang.Object[]{ this.nextCommand.getClass() , t }); <FIXE>
<FIXS> return names; <FIXE>
<FIXS> <FIXE>
<FIXS> org.hibernate.Hibernate.initialize(race); <FIXE>
<FIXS> if ((exercisesListView.getSelectionModel().getSelectedItem()) != null) { selection.exercise = new trainer.models.Exercise(selection.catalog, exercisesListView.getSelectionModel().getSelectedItem().toString()); exerciseTextArea.setText(selection.exercise.description); trainer.App.getInstance().controllers.put("trainer", trainer.gui.TrainerController.createWithName("trainer")); } <FIXE>
<FIXS> <FIXE>
<FIXS> backPressed = true; <FIXE>
<FIXS> int index = 0; while (index < (mostsimilar.size())) { newart.buildLink(((internetz.Artifact) (mostsimilar.get(index)))); index++; <FIXE>
<FIXS> addressRepository.close(); <FIXE>
<FIXS> assertEquals(Direction.RIGHT, move); <FIXE>
<FIXS> int row = GUI.getLoc(((int) (e.getY()))); <FIXE>
<FIXS> ft.replace(R.id.activity_container, fragment, fragment.getClass().getSimpleName()); <FIXE>
<FIXS> if ((requestCode == (rray.me.androidresume.BasicInfoEditActivity.REQ_CODE_PICK_IMAGE)) && (resultCode == (android.app.Activity.RESULT_OK))) { <FIXE>
<FIXS> mushList = mush.getMushrooms(database.getReadableDatabase(), foundMushroomIDs, activeMinorSignValues, true); <FIXE>
<FIXS> if (speed <= 1) { <FIXE>
<FIXS> mRoot.split(down, right); <FIXE>
<FIXS> return reader.getElementCount(elementType); <FIXE>
<FIXS> public boolean setGoalTarget(net.minecraft.server.v1_9_R1.EntityLiving entityliving, org.bukkit.event.entity.EntityTargetEvent.TargetReason reason, boolean fireEvent) { <FIXE> <FIXS> return true; <FIXE>
<FIXS> analyster.dispose(); <FIXE> <FIXS> <FIXE>
<FIXS> char[] chars = sune.util.ssdf2.SSDF.format(content.toCharArray()); return sune.util.ssdf2.SSDF.readObjects(chars, 0, chars.length); <FIXE>
<FIXS> final java.lang.String username = user.getUsername(); searchUsername = username; <FIXE>
<FIXS> org.junit.Assert.assertTrue(((transaction.getTrasactionId()) >= 1)); <FIXE> <FIXS> org.junit.Assert.assertTrue(((transaction.getTrasactionId()) >= 2)); <FIXE> <FIXS> org.junit.Assert.assertTrue(((transaction.getTrasactionId()) >= 3)); <FIXE>
<FIXS> if ((asciiCount[i]) > 1) { <FIXE>
<FIXS> if (statusMessage != null) { this.progressLabel.setText(statusMessage); } java.lang.System.out.println(statusMessage); <FIXE>
<FIXS> final int length2 = offset2 + length; <FIXE> <FIXS> <FIXE> <FIXS> return super.section(offset, (-offset2)).concat(array.section(0, length2)); <FIXE>
<FIXS> if (((topicFragment != null) && ((event.getTopic().id()) == (topicFragment.getTopic().id()))) && ((event.getPage()) == (topicFragment.getCurrentPage()))) { <FIXE>
<FIXS> <FIXE>
<FIXS> java.lang.System.out.println((((("Ran " + (io.github.zaphodious.essentialsorcery.core.Reference.MODID)) + ":") + (net.minecraft.item.Item.getItemFromBlock(block).getUnlocalizedName())) + " through the render reg.")); <FIXE>
<FIXS> new com.example.tberroa.girodicerapp.database.LocalDB().clear(); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> org.junit.Assert.assertEquals(cutFromTestGraph.toString(), fordTestGraph.maxFlowMinCut.toString()); <FIXE>
<FIXS> <FIXE>
<FIXS> addDistilleryRecipe((i + 1), aInput, aOutputs[i], (aDuration * 2), (aEUt / 4), false); <FIXE>
<FIXS> return this.setTimer(timerType, timer); <FIXE>
<FIXS> for (int i = 0; (statArray[i]) != null; ++i) { <FIXE>
<FIXS> <FIXE>
<FIXS> loadPersistenceLayer(true); <FIXE>
<FIXS> memory.copyMemory(((((sun.nio.ch.DirectBuffer) (bytes)).address()) + offset), ((address) + (translate(offsetInRDO))), length); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> return org.wso2.carbon.apimgt.rest.api.common.util.RestApiUtil.adminRestAPIDefinition; <FIXE>
<FIXS> java.util.ArrayList<java.lang.String> theList = new java.util.ArrayList<java.lang.String>(); com.rfo.basic.Run.theLists.set(listIndex, theList); <FIXE>
<FIXS> if (MainActivity.schedule.add(((dayWeek) + 1), from_hours.getValue(), from_minutes.getValue(), to_hours.getValue(), to_minutes.getValue())) { <FIXE>
<FIXS> <FIXE>
<FIXS> try (java.sql.Statement stmt = jdbcFixture.getConnection().createStatement();java.sql.ResultSet rs = stmt.executeQuery(((("select r_is_group from dm_user" + " where user_name = '") + accessorName) + "'"))) { <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> return ((java.lang.Math.pow(java.lang.Math.abs((x - oldX)), 2)) + (java.lang.Math.pow(java.lang.Math.abs((y - oldy)), 2))) > (java.lang.Math.pow(mSlopeDistance, 2)); <FIXE>
<FIXS> <FIXE>
<FIXS> private static long getSerialVersionUID(org.babyfish.persistence.tool.path.TypedQueryPathProcessor.MetaClass metaClass, java.lang.String nestedSimpleClassName) throws java.io.IOException { <FIXE>
<FIXS> if ((type) == 0) { getBooks(pageIndex); } <FIXE>
<FIXS> if (java.lang.Boolean.TRUE.equals(args[1])) { <FIXE>
<FIXS> if (text.equals("")) { <FIXE>
<FIXS> hoursNotScheduled += offices.officeReq.get(i).get(j); <FIXE> <FIXS> return hoursNotScheduled / 2; <FIXE>
<FIXS> if (((savedInstanceState != null) && (!(defaults))) && ((bottomBar) != null)) { <FIXE>
<FIXS> java.lang.String id = pUri.getQueryParameter("playlistId"); <FIXE> <FIXS> android.support.v4.media.MediaBrowserCompat.MediaItem mediaItem = ((android.support.v4.media.MediaBrowserCompat.MediaItem) (transactions.get(id))); transactions.remove(id); <FIXE>
<FIXS> int count = (getFragmentManager().getBackStackEntryCount()) - 1; <FIXE>
<FIXS> while ((textWOWhites.endsWith(" ")) || (textWOWhites.endsWith("\t"))) <FIXE>
<FIXS> eu.learnpad.ca.rest.data.collaborative.CollaborativeContentAnalysis caa = eu.learnpad.ca.rest.impl.ColloborativeContentVerificationsImpl.map.get(java.lang.Integer.valueOf(contentID)); <FIXE>
<FIXS> com.google.common.base.Preconditions.checkState(((this.state.get()) == (State.INITED)), ("Can only run while in INITED state. Current: " + (this.state))); this.state.set(State.RUNNING); <FIXE>
<FIXS> if (((ep instanceof net.minecraft.entity.player.EntityPlayerMP) && (me.dags.daflight.DaFlight.get().DFController.noClipOn)) && (me.dags.daflight.DaFlight.get().DFController.flyModOn)) { <FIXE>
<FIXS> <FIXE>
<FIXS> int widthMeasureSpec = View.MeasureSpec.makeMeasureSpec(textWidth, View.MeasureSpec.EXACTLY); <FIXE>
<FIXS> <FIXE>
<FIXS> return (((sample.Models.LoginUser.checkFile()) && (sample.Models.LoginUser.checkUserName(userName))) && (sample.Models.LoginUser.checkPassWord(password, userName))) && (sample.Models.LoginUser.check); <FIXE>
<FIXS> double rn = (java.lang.Math.pow(getAbs(), n)) * (java.lang.Math.cos((n * (getAngle())))); double in = (java.lang.Math.pow(getAbs(), n)) * (java.lang.Math.sin((n * (getAngle())))); <FIXE>
<FIXS> com.jeszka.domain.AppCredentials appCredentials = new com.jeszka.domain.AppCredentials.Builder().appName(appName).username(hashedUser).password(hashedPassword).enabled(true).build(); final int result = posterDao.saveAppCredentials(appCredentials); java.lang.System.out.println(("Storing credentials result: " + result)); return result == 1; <FIXE>
<FIXS> if ((o == null) || (!(o instanceof me.newyith.fortress.util.BaseUUID))) <FIXE>
<FIXS> if (aY < bY) { <FIXE>
<FIXS> task.handleConfigXml(org.openmrs.addonindex.TestUtil.getFileAsString("config.withRelativePathDtd.xml"), version); org.junit.Assert.assertThat(version.getModulePackage(), org.hamcrest.core.Is.is("org.openmrs.module.mdrtb")); org.junit.Assert.assertThat(version.getModuleId(), org.hamcrest.core.Is.is("mdrtb")); <FIXE>
<FIXS> public static void cancelNotification(android.content.Context context, int notificationId) { <FIXE> <FIXS> android.app.NotificationManager nMgr = ((android.app.NotificationManager) (context.getApplicationContext().getSystemService(ns))); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> if (((this.label) != null) && (this.label.equalsIgnoreCase(str))) <FIXE>
<FIXS> int row = (me - ms) + 1; <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> if ((mAdView) != null) { java.lang.String adsTestId = "7CFCF353FBC40363065F03DFAC7D7EE4"; com.google.android.gms.ads.AdRequest adRequest = new com.google.android.gms.ads.AdRequest.Builder().addTestDevice(adsTestId).addKeyword("smartphone").addKeyword("tablet").addKeyword("news apps").addKeyword("games").build(); mAdView.loadAd(adRequest); } <FIXE>
<FIXS> <FIXE>
<FIXS> if ((DatasetCleanup.featureSpace[i][j].equals(null)) || (DatasetCleanup.featureSpace[i][j].equals(""))) <FIXE>
<FIXS> if ((this.getDialog()) != null) { javax.sip.message.Request byeRequest = this.getDialog().createRequest(Request.BYE); java.lang.System.out.println(("CREATE BYE REQUEST ->" + byeRequest)); sipConnector.sendRequest(byeRequest, this); } <FIXE>
<FIXS> md.setValue(com.digitalpebble.storm.crawler.util.MetadataTransfer.depthKeyName, java.lang.Integer.toString((++depth))); <FIXE>
<FIXS> obj.put("lastLogin", lastLogin.toString()); <FIXE>
<FIXS> org.hibernate.boot.Metadata metadata = new org.hibernate.boot.MetadataSources(ssr).addAnnotatedClass(org.hibernate.test.annotations.basic.CollectionAsBasicTest.Post.class).getMetadataBuilder().applyBasicType(new org.hibernate.test.annotations.basic.CollectionAsBasicTest.DelimitedStringsType()).build(); <FIXE>
<FIXS> for (int i = 0; i < 1; ++i) { <FIXE>
<FIXS> org.molgenis.selenium.util.SignUtil.signIn(this.driver, baseURL, uid, pwd); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> }else { flagEmptyList = false; <FIXE>
<FIXS> com.example.saksham.overlayscreenshort.PlaylistAdapter.changeActiveItemBackground(temp); <FIXE>
<FIXS> public static float getScaleFactor() { <FIXE>
<FIXS> return this.hbaseOperations2.find(HBaseTables.AGENTINFO, scan, new com.navercorp.pinpoint.web.dao.hbase.HbaseAgentInfoDao.AgentInfoResultsExtractor()); <FIXE>
<FIXS> if ((com.ilm.sandwich.OsmMap.listHandler) != null) { com.ilm.sandwich.OsmMap.listHandler.removeCallbacksAndMessages(null); } <FIXE>
<FIXS> public org.projectbuendia.client.ui.SnackBar.Message getMessage(@android.support.annotation.StringRes <FIXE>
<FIXS> <FIXE>
<FIXS> this.update(new de.prob2.ui.project.Project(this.getName(), this.getDescription(), machinesList, this.getPreferences(), this.getRunconfigurations(), this.getLocation())); <FIXE>
<FIXS> <FIXE>
<FIXS> if (pwField.getText().equals(pwConfirmField.getText())) { <FIXE>
<FIXS> db.replace(com.example.lenni.blackjack_ptm.LeaderBoardDbHelper.TABLE_LEADERBOARD, null, values); <FIXE>
<FIXS> if ((sword) == null) { nidhogglike.entities.Sword sword = ((nidhogglike.game.NidhoggUniverse) (data.getUniverse())).getFreeSword(); if (sword != null) { setSword(sword); } } <FIXE>
<FIXS> numAdded++; <FIXE> <FIXS> <FIXE>
<FIXS> @com.oracle.truffle.api.CompilerDirectives.TruffleBoundary <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> case ACTUATED : return R.drawable.connected; <FIXE> <FIXS> <FIXE>
<FIXS> cal.set(java.util.Calendar.MONTH, month); <FIXE>
<FIXS> android.util.Log.i("Start game", ((((myBaseId + ":") + enemyBaseId) + ":") + enemyIds)); <FIXE>
<FIXS> fiches = (fiches) - (2 * (puntata)); <FIXE>
<FIXS> return ((byte) (bufferedInputStream.read())); <FIXE> <FIXS> throw com.google.common.base.Throwables.propagate(e); <FIXE>
<FIXS> if ((candidateRepository.getFeedbacks(c.getId()).size()) > 0) <FIXE>
<FIXS> if (sites != null) { for (java.lang.String siteName : sites) { java.lang.String URL = com.Ben12345rocks.VotingPlugin.Config.ConfigVoteSites.getInstance().getServiceSite(siteName); if (URL.equals(url)) { return siteName; } <FIXE>
<FIXS> bundleFactory.buildPackage(pkgInfo.getPkg(), true, true); <FIXE>
<FIXS> this.minConfidence = minConf; <FIXE>
<FIXS> dateList.add(((((((("" + (day < 10 ? '0' : "")) + day) + "/") + (month < 10 ? '0' : "")) + month) + "/") + year)); <FIXE>
<FIXS> java.util.HashMap[] viewData = findKeyData(views); <FIXE>
<FIXS> java.lang.System.out.println(field.getToken()); <FIXE>
<FIXS> <FIXE>
<FIXS> g.fillOval(x, y, radius, radius); g.drawOval((((x) + ((radius) / 2)) - ((range) / 2)), (((y) + ((radius) / 2)) - ((range) / 2)), range, range); <FIXE>
<FIXS> model.addAttribute("issue", issueService.findById(issueId)); <FIXE>
<FIXS> public com.xrtb.common.Campaign getCampaign(java.lang.String name, java.lang.String id) { com.xrtb.db.User u = map.get(name); if (u == null) return null; for (com.xrtb.common.Campaign c : u.campaigns) { if (c.adId.equals(id)) return c; } <FIXE>
<FIXS> if (ch != null) { onClientDelete(ch, objectGraph); } <FIXE> <FIXS> if (childEntity != null) { onClientDelete(childEntity, objectGraph); } <FIXE>
<FIXS> nullChecker.add("topicFilter"); <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> if ((ret != null) && ((ret.getClass()) == (boolean.class))) <FIXE>
<FIXS> java.util.Set recipeList = recipeService.getRecipes(); <FIXE>
<FIXS> if ((user != null) && (!(org.springframework.util.CollectionUtils.isEmpty(user.getPostings())))) { <FIXE>
<FIXS> when(boardsAdapter.createBoard(org.mockito.Matchers.any(haw.vs.superteam.gamesservice.Game.class))).thenReturn(true); <FIXE>
<FIXS> compiler.report(com.google.javascript.jscomp.JSError.make(n, Es6ToEs3Converter.CANNOT_CONVERT_YET, "Case statements that contain yields")); <FIXE>
<FIXS> public void buttonPressed(java.lang.String buttonName, double result) { <FIXE>
<FIXS> entries.add(new Entry(allTrials.get(((counter) - 1)), answer, (((inCircleSteps) * 1.0) / (totalTimeSteps)), startTime, counter, currentGazeDataSet, new Tuple(this.getGCanvas().getLocationOnScreen()), ((inPracticeMode) && ((counter) < 5)))); <FIXE>
<FIXS> yeongdejong.com.assamhouse.Toast.makeText(this, size, Toast.LENGTH_SHORT).show(); <FIXE>
<FIXS> name = name.replace("i_", "q_"); <FIXE> <FIXS> name = name.replace("q_", "i_"); <FIXE>
<FIXS> hs.add(new org.talend.hadoop.distribution.DistributionModuleGroup(HDInsight36Constant.SPARK_HIVE_MRREQUIRED_MODULE_GROUP.getModuleName(), false, null)); hs.add(new org.talend.hadoop.distribution.DistributionModuleGroup(HDInsight36Constant.SPARK_SQL_MRREQUIRED_MODULE_GROUP.getModuleName(), false, null)); <FIXE>
<FIXS> com.hazelcast.simulator.coordinator.TestSuite suite = newTestSuite(); <FIXE>
<FIXS> context.write(key, pr); <FIXE>
<FIXS> <FIXE>
<FIXS> hash = hash ^ b; <FIXE>
<FIXS> java.lang.System.out.println(thrwbl.getMessage()); <FIXE>
<FIXS> com.cyapass.cyapass.MainActivity.currentSiteKey.setMaxLength(0); <FIXE>
<FIXS> return this.isSupportedDeploymentPair(type, infrastructureNodeType.getId(), false); <FIXE>
<FIXS> <FIXE>
<FIXS> return new nu.yona.server.analysis.service.UserAnonymizedSynchronizer.Lock(userAnonymizedID, (lockStatus == (nu.yona.server.analysis.service.UserAnonymizedSynchronizer.LockStatus.FREE))); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> com.alanhmak.cordova.plugin.MixpanelPlugin.mixpanel.alias(aliasId, null); <FIXE>
<FIXS> return 0; <FIXE>
<FIXS> file.release(curBlock); <FIXE>
<FIXS> net.minecraftforge.fml.common.registry.GameRegistry.register((blockTorch = new com.builtbroken.bonetorch.torch.BlockBoneTorch())); <FIXE>
<FIXS> return true; <FIXE>
<FIXS> user = null; <FIXE>
<FIXS> <FIXE>
<FIXS> java.lang.System.out.println(); <FIXE> <FIXS> java.lang.System.out.println(); <FIXE>
<FIXS> cameraType = ((captureType) == (com.onfido.android.sdk.capture.ui.CaptureType.FACE)) ? Camera.CameraInfo.CAMERA_FACING_FRONT : Camera.CameraInfo.CAMERA_FACING_BACK; <FIXE>
<FIXS> for (java.lang.String x : splittedList) { if ((x.trim().length()) > 0) { toDoList.add(x.trim()); } } <FIXE>
<FIXS> <FIXE>
<FIXS> for (int x = java.lang.Math.min(x1, x2); x < ((java.lang.Math.max(x1, x2)) + 1); x++) { <FIXE>
<FIXS> java.lang.Long messageReciviedTime = message.getTimestampMillis(); <FIXE>
<FIXS> <FIXE>
<FIXS> if (input.getText().toString().trim().isEmpty()) return ; <FIXE>
<FIXS> usertype = platoUI.libControl.login(username, password); <FIXE>
<FIXS> <FIXE>
<FIXS> me.dmillerw.consequence.Consequence.INSTANCE.adapterDir = new java.io.File(event.getModConfigurationDirectory(), "consequence/adapters"); <FIXE>
<FIXS> <FIXE>
<FIXS> name = name.toLowerCase(); <FIXE>
<FIXS> pokemonAttackDto.setPokemonId(resultSet.getInt("pokemon_id")); pokemonAttackDto.setAttackId(resultSet.getInt("attack_id")); <FIXE>
<FIXS> com.sergey.restclinic.models.Doctor doctor = a.lookupDoctor(TESTDOC1); com.sergey.restclinic.models.Patient patient = a.lookupPatient(TESTPAT1); <FIXE>
<FIXS> protected boolean isClientVersionCompatible(java.lang.String clientVersion) { <FIXE>
<FIXS> solve10.solve(); <FIXE> <FIXS> java.lang.System.out.println(solve10.getDist()); <FIXE>
<FIXS> android.widget.TextView text1 = ((android.widget.TextView) (view.findViewById(android.R.id.text1))); android.widget.TextView text2 = ((android.widget.TextView) (view.findViewById(android.R.id.text2))); <FIXE>
<FIXS> if (((data != null) & ((data.getStatus()) == (com.cardinfolink.madgazescan.api.ResponseCode.SUCCESS))) & (com.cardinfolink.madgazescan.utils.CollectionUtils.isValid(data.getData()))) { <FIXE>
<FIXS> public static synchronized void putString(android.content.Context context, java.lang.String key, java.lang.String value, boolean commit) { <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> return com.example.gil.myweather.weather.control.WeatherFragment.newInstance(1); <FIXE> <FIXS> return com.example.gil.myweather.weather.control.WeatherFragment.newInstance(2); <FIXE> <FIXS> <FIXE>
<FIXS> b = (s.update()) || b; <FIXE>
<FIXS> <FIXE>
<FIXS> if (language == null) languageId = null; <FIXE>
<FIXS> public void checkStatus() { <FIXE>
<FIXS> if (i == 2) { cleanSlate(); <FIXE> <FIXS> } <FIXE>
<FIXS> <FIXE>
<FIXS> mPratilipiListAdapter = new com.pratilipi.mobile.android.PratilipiList.PratilipiListAdapter(mActivityContext, this, mSearchQuery); <FIXE>
<FIXS> daysSelected = new java.util.ArrayList<java.lang.Integer>(); <FIXE> <FIXS> this.headBackToMainScreen(); <FIXE>
<FIXS> assertEquals(1, desc.getProvidedProperties().size()); <FIXE>
<FIXS> if (this.organic) { <FIXE> <FIXS> result += (this.name) + " "; if (this.fruit) { <FIXE> <FIXS> result += ("- " + (this.weight)) + " lbs"; <FIXE>
<FIXS> targetX = control.tileList.get(((curSpace) + 1)).x; targetY = control.tileList.get(((curSpace) + 1)).y; <FIXE>
<FIXS> org.json.JSONArray storyArray = new org.json.JSONArray(); <FIXE> <FIXS> return null; <FIXE> <FIXS> return storyArray; <FIXE>
<FIXS> <FIXE>
<FIXS> public void populateViewHolder(id.sch.smktelkom_mlg.project2.xirpl10816242534.oeripbedjoe.Fragment.Fragment2.BeratHolder beratViewHolder, id.sch.smktelkom_mlg.project2.xirpl10816242534.oeripbedjoe.DataAdapter data, int position) { <FIXE>
<FIXS> deleteLobby(lobbies); <FIXE>
<FIXS> return 0; <FIXE>
<FIXS> if (e.isPopupTrigger()) { <FIXE>
<FIXS> } catch (java.io.IOException | java.lang.RuntimeException e) { <FIXE>
<FIXS> return !((width == 0) || (height == 0)); <FIXE>
<FIXS> new java.lang.Thread(() -> { try { Audio.SongPlayer.sleepNanos(packet.launchTime); } catch (java.lang.InterruptedException e) { java.lang.System.out.println(e); } java.lang.System.out.println("Pause"); playing = false; speakerCache.stop(); }).start(); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> java.sql.ResultSet resultSet = pstmt.executeQuery(); <FIXE>
<FIXS> if (internalMap.get(i).getKey().equals(key)) <FIXE>
<FIXS> models.Card c = card; <FIXE>
<FIXS> com.woalk.apps.xposed.notifcount.XposedMod.mSettingsHelper.reload(); com.woalk.apps.xposed.notifcount.XposedMod.autoApplyNumber(sbn.getNotification(), com.woalk.apps.xposed.notifcount.XposedMod.mSettingsHelper.getSetting(sbn.getPackageName())); <FIXE>
<FIXS> <FIXE>
<FIXS> if ((this.excludes) != null) for (java.lang.String excl : this.excludes) { if (excl.equals(className)) <FIXE> <FIXS> if (excl.endsWith(".*")) { java.lang.String baseName = excl.substring(0, ((excl.length()) - 1)); if (className.startsWith(baseName)) return ; } <FIXE> <FIXS> <FIXE>
<FIXS> uploadUrl = qiniuCloudService.simpleUploadWithoutKey(file); <FIXE>
<FIXS> <FIXE>
<FIXS> if (surrOwners == null) return false; <FIXE>
<FIXS> public void backupAllMenuItemAction() { <FIXE>
<FIXS> try { while (true) { int read = fileInputStream.read(buffer); if (read == (-1)) break; bytes.write(buffer, 0, read); } } finally { fileInputStream.close(); } <FIXE>
<FIXS> if (size == 0) { shortestpath = null; return ; } <FIXE>
<FIXS> return new org.apache.cassandra.db.RowIndexEntry.IndexedEntry(position, in, idxInfoSerializer, version); <FIXE>
<FIXS> assertThat(chksumChannel.getChecksum(), equalTo(null)); <FIXE>
<FIXS> public java.lang.String format(org.joda.time.DateTime dateTime) { <FIXE>
<FIXS> org.wso2.carbon.security.caas.user.core.bean.User testUser = new org.wso2.carbon.security.caas.user.core.bean.User.UserBuilder().setUserId("testUser").setIdentityStore(new org.wso2.carbon.security.caas.user.core.store.IdentityStoreImpl()).setAuthorizationStore(new org.wso2.carbon.security.caas.user.core.store.AuthorizationStoreImpl()).setClaimManager(new org.wso2.carbon.security.caas.user.core.claim.InMemoryClaimManager()).build(); <FIXE>
<FIXS> if ((location.getLastlocation()) != null) { <FIXE> <FIXS> cfinterface.setDefoultLoc(); cfinterface.setLocUnavaliable(); }else { cfinterface.setCoords((((java.lang.String.valueOf(location.getLat())) + " and ") + (java.lang.String.valueOf(location.getLng())))); } <FIXE>
<FIXS> slideMenuAdapter = new com.svs.hztb.Adapters.SlideMenuAdapter(getApplicationContext(), menuItems, this); <FIXE>
<FIXS> if ((map != null) && ((map.size()) >= 2)) { <FIXE>
<FIXS> java.lang.System.out.println("Player 1 wins"); <FIXE> <FIXS> java.lang.System.out.println("Player 2 wins"); <FIXE>
<FIXS> v.bottom = (edu.zucc.xk31401419.mycurrencies.utils.MathUtil.getMaxAndMin(rateValuesTab)[1]) * ((float) (0.9)); v.top = (edu.zucc.xk31401419.mycurrencies.utils.MathUtil.getMaxAndMin(rateValuesTab)[0]) * ((float) (1.1)); <FIXE>
<FIXS> for (uialgebra.algebra.UIATokenElement elem : getTop().getLeftsideElements()) <FIXE>
<FIXS> cal.set(java.util.Calendar.MONTH, (month - 1)); <FIXE>
<FIXS> } catch (final java.lang.Exception t) { <FIXE>
<FIXS> mChatView.setUsernameTextColor(Color.BLACK); mChatView.setSendTimeTextColor(Color.BLACK); <FIXE>
<FIXS> public boolean createStudent(java.lang.String userID, java.lang.String pass, java.lang.String name) { <FIXE> <FIXS> flash.card.java.model.Student s = new flash.card.java.model.Student(userID, pass, name); <FIXE>
<FIXS> i++; <FIXE>
<FIXS> if ((score) >= ((level) * (home.tetris.Scene.SCORE_PER_LEVEL))) { <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> if (nextWord.contains(monthsInYear[i])) { <FIXE>
<FIXS> editor.commit(); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> parameters.addDetachedFilters("procedure", criteria); <FIXE>
<FIXS> val = this.spades.indexOf(card); <FIXE> <FIXS> val = this.hearts.indexOf(card); <FIXE> <FIXS> val = this.clubs.indexOf(card); <FIXE> <FIXS> val = this.diamonds.indexOf(card); <FIXE>
<FIXS> return logic.editTask(taskID, date); <FIXE>
<FIXS> assertEquals(20, bbox.getMinYWorld(), 0); <FIXE> <FIXS> assertEquals(120, bbox.getMinYWorld(), 0); <FIXE>
<FIXS> assert col instanceof org.apache.sqoop.connector.common.Time; assert obj instanceof org.joda.time.LocalTime; <FIXE>
<FIXS> if ((action) != null) { action.act(delta); if (action.isDone()) action.callActionCompletedListener(); } <FIXE>
<FIXS> if ((((sender) == null) || ((sender.getBlock()) == null)) || ((sender.getBlock().getType()) == (org.bukkit.Material.COMMAND))) { <FIXE>
<FIXS> int actionIndexOnStart = java.lang.Integer.parseInt(sharedPrefs.getString(getString(R.string.key_prefActionOnStart), java.lang.Integer.toString(ActionOnStartRandomAyah))); <FIXE>
<FIXS> hideUserOptions(); <FIXE>
<FIXS> <FIXE>
<FIXS> return true; <FIXE>
<FIXS> java.util.List<com.mongodb.ServerAddress> seeds = org.mapad.google.common.utils.MongoUtils.getSeeds(context.getString((prefix + (org.mapad.google.common.utils.MongoUtils.HOSTNAMES)))); <FIXE>
<FIXS> final int cy = (mDual) ? (mIcon.getTop()) + (mIcon.getHeight()) : height / 2; <FIXE>
<FIXS> ret = "" + (value); <FIXE>
<FIXS> if (((r.getBomb()) != null) && ((r.getBomb().getBombtype()) > (this.bombtype))) { <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> for (com.kosn.entity.Item checkItem : equippedItems) { if (checkItem.getName().startsWith(target)) { return checkItem; } } <FIXE>
<FIXS> locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 0, 0, locationListener); <FIXE>
<FIXS> <FIXE> <FIXS> bld.append(getResolvedMetadataVersion(element).getMajor()); <FIXE>
<FIXS> if (sort == null) return null; <FIXE>
<FIXS> return ((T) (new javax.crypto.spec.IvParameterSpec(iv))); <FIXE>
<FIXS> <FIXE> <FIXS> butterknife.ButterKnife.bind(this); <FIXE>
<FIXS> if ((this.y) == (that.y)) return +0.0; return ((double) ((that.y) - (this.y))) / ((double) ((that.x) - (this.x))); <FIXE>
<FIXS> @java.lang.Override <FIXE> <FIXS> if ((this.files.size()) > 0) <FIXE> <FIXS> for (int i = 0; i < (this.files.size()); ++i) java.lang.System.out.println((" - " + (this.files.get(i)))); <FIXE>
<FIXS> if (!(stack.getStackInSlot(i).isEmpty())) <FIXE>
<FIXS> org.eclipse.smarthome.config.core.Configuration configuration = editConfiguration(); <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> if ((aux.isAssignableFrom(clazz)) && ((found == null) || (aux.isAssignableFrom(found)))) { <FIXE>
<FIXS> <FIXE>
<FIXS> org.exist.xquery.value.Sequence result = orderedResult; <FIXE> <FIXS> result = ((org.exist.xquery.FLWORClause) (getReturnExpression())).postEval(seq); <FIXE> <FIXS> return super.postEval(result); <FIXE>
<FIXS> public void updateReel(double x, double y, double orientationReelle, boolean enMarcheAvant, double courbureReelle) { <FIXE>
<FIXS> if (((rs) != null) && (ret == null)) <FIXE>
<FIXS> assertTrue(assert_); <FIXE> <FIXS> assertEquals(s, "test.int1"); <FIXE>
<FIXS> private int getBillWorth(int itemDamage, int stackSize) { <FIXE>
<FIXS> java.util.List<java.lang.String> res = new java.util.LinkedList<java.lang.String>(); <FIXE> <FIXS> return res; <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> mScanHandler.removeCallbacks(mBleScannerTimeoutRunnable); <FIXE>
<FIXS> length = ((end.getRow()) - (start.getRow())) + 1; <FIXE> <FIXS> length = ((end.getCol()) - (start.getCol())) + 1; <FIXE>
<FIXS> com.ullink.slack.simpleslackapi.impl.SlackMessageHandleImpl<com.ullink.slack.simpleslackapi.replies.SlackChannelReply> handle = new com.ullink.slack.simpleslackapi.impl.SlackMessageHandleImpl<com.ullink.slack.simpleslackapi.replies.SlackChannelReply>(getNextMessageId()); <FIXE>
<FIXS> Game.GameController.movement(((jailedPlayer.getPlace()) + 1), 11, jailedPlayer, fieldController, playerController); <FIXE>
<FIXS> sb.append("class ").append(clazz.getSimpleName()); <FIXE> <FIXS> sb.append(modifiers).append(" class ").append(clazz.getSimpleName()); <FIXE>
<FIXS> if (((((sourceAsMap == null) || (fields == null)) || (sourceAsMap.isEmpty())) || (included == null)) || (included.isEmpty())) { <FIXE>
<FIXS> if (((getBuilder().mColorsSub) == null) || (((getBuilder().mColorsSub.length) - 1) < topIndex)) <FIXE>
<FIXS> public static int findPositionById(android.database.Cursor list, long id) { if (list == null) <FIXE> <FIXS> while (list.moveToNext()) { if ((list.getLong(0)) == id) { return list.getPosition(); <FIXE>
<FIXS> if ((cell != null) && (cellMap.containsKey(cell.getCellId()))) { <FIXE>
<FIXS> if (templateID < 1) mob.setTemplateID(getNextFreeID()); else mob.setTemplateID(templateID); <FIXE>
<FIXS> org.avaje.docker.commands.PostgresContainer.log.debug("create postgres user {}", dbConfig.getDbUser()); <FIXE>
<FIXS> syncBladeInterval = java.lang.Integer.parseInt(configDao.getValue(Config.UCSSyncBladeInterval.key())); <FIXE>
<FIXS> expectedMessages.add(HubProxyInfoBuilder.ERROR_MSG_CREDENTIALS_INVALID); <FIXE>
<FIXS> <FIXE>
<FIXS> java.lang.Comparable sanitizedValue = sanitizeValue(o); <FIXE> <FIXS> java.lang.Comparable sanitizedValue = sanitizeValue(oldValue); <FIXE>
<FIXS> bookmarksPublishSubject.onNext(true); <FIXE>
<FIXS> if (this.items[i].getId().equals(updated.getId())) { <FIXE>
<FIXS> <FIXE>
<FIXS> io.minio.MinioClient client = new io.minio.MinioClient(server.url("")); <FIXE>
<FIXS> if ((getEpisode()) == null) return ; <FIXE>
<FIXS> com.emc.storageos.xtremio.restapi.model.response.XtremIOInitiator initiatorObj = client.getInitiator(initiator.getLabel(), xioClusterName); <FIXE>
<FIXS> toReturn.add(new java.lang.String(packet.getData())); <FIXE>
<FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> this.songIndex = index; <FIXE> <FIXS> <FIXE>
<FIXS> if (sqlConnection.createConnection()) { createConnection.setDisable(true); clear.setDisable(false); closeConnection.setDisable(false); sentRequest.setDisable(false); additionalQueryBox.setDisable(false); addQueryToCollection.setDisable(false); openConnection.setDisable(true); offConnection.setDisable(false); investigation.setDisable(false); this.isConnected = true; } <FIXE>
<FIXS> user = userService.selectUserByName(curusername); <FIXE>
<FIXS> java.lang.String username, @ninja.params.PathParam(value = "work") <FIXE> <FIXS> www.purple.mixxy.models.User user = userDao.getUser(username); <FIXE> <FIXS> java.lang.System.out.println(user); if ((user == null) || (comic == null)) { <FIXE>
<FIXS> java.util.function.Predicate<de.blackcraze.grb.model.entity.StockType> filter = ( stock) -> !(de.blackcraze.grb.i18n.Resource.getItem(stock.getName(), locale).toLowerCase().contains(name.toLowerCase())); <FIXE>
<FIXS> if (!(semaphore.tryAcquire(1, acquireTimeoutMs, java.util.concurrent.TimeUnit.MILLISECONDS))) { <FIXE>
<FIXS> <FIXE>
<FIXS> length = java.lang.Math.min(length, data.length); for (int i = 0; i < length; i++) { <FIXE>
<FIXS> if ((recordId) != null) { simpleSession.setId(recordId.toString()); } <FIXE>
<FIXS> public static <T> java.util.Map<java.lang.String, T> fromBundle(android.os.Bundle input, java.lang.Class<T> claz) { <FIXE> <FIXS> output.put(key, ((T) (input.get(key)))); <FIXE>
<FIXS> if ((array2.length) != 0) { <FIXE>
<FIXS> java.lang.String match = "import foo;\n" + ((("\n" + "public class Foo {/*comment*/}\n") + "\n") + "\n"); <FIXE>
<FIXS> private int getPlayerForLine(final int row, final java.lang.String playerFigure) { <FIXE>
<FIXS> if (team.name.equals(this.name)) <FIXE>
<FIXS> <FIXE>
<FIXS> return org.concordion.api.MultiValueResult.multiValueResult().with(specs.response.STATUS, jsonNode.get(specs.response.STATUS).textValue()).with(specs.response.ERROR_CODE, jsonNode.get(specs.response.ERROR_CODE).textValue()).with(specs.response.ERROR_MESSAGE, jsonNode.get(specs.response.ERROR_MESSAGE).textValue()).with(specs.response.CUSTOMER_MESSAGE, jsonNode.get(specs.response.CUSTOMER_MESSAGE).textValue()); <FIXE>
<FIXS> return new org.eclipse.titan.runtime.core.TitanBoolean(get_char().operatorEquals(other_value.charAt(0))); <FIXE>
<FIXS> int size = points.size(); java.util.List<com.google.android.gms.maps.model.LatLng> result = new java.util.ArrayList<>(size); if (size == 0) { return result; } <FIXE>
<FIXS> valuesToInsert.put("glucoseValue", java.lang.Integer.parseInt(((android.widget.EditText) (promptView.findViewById(R.id.measurement))).getText().toString())); <FIXE>
<FIXS> insertDBData(com.sweproject.calorietracker.DataObjects.Food_Day.class, this, new com.sweproject.calorietracker.DataObjects.Food_Day(FragmentCalendar.currentDay.getId(), ((mServingSpin.getSelectedItemPosition()) + 1), mServingSizes.get(mSelectedIndex).getId()), false); <FIXE>
<FIXS> if (util.RandUtil.containsTuple(enemy.getPosition(), user.getVisiblePositions())) { room.printMonsters(j, user.getVisiblePositions()); <FIXE>
<FIXS> <FIXE> <FIXS> java.sql.Connection conn = null; <FIXE>
<FIXS> log.debug(java.lang.String.format("Component '%s' output size '%d' target => '%s'", src.getName(), (output != null ? output.size() : 0), targetName)); <FIXE>
<FIXS> tern.eclipse.ide.ui.utils.EditorUtils.openInEditor(file, (start != null ? start.intValue() : -1), ((start != null) && (end != null) ? (end.intValue()) - (start.intValue()) : -1), true); <FIXE>
<FIXS> holder.mTextView.setText(mValues.get(position)); <FIXE>
<FIXS> com.tsystems.javaschool.timber.logiweb.service.TruckService truckService = new com.tsystems.javaschool.timber.logiweb.service.TruckService(new com.tsystems.javaschool.timber.logiweb.dao.TruckDao()); java.util.List<com.tsystems.javaschool.timber.logiweb.entity.Truck> trucks = truckService.findAll(); request.setAttribute("trucks", trucks); javax.servlet.RequestDispatcher rd = getServletContext().getRequestDispatcher("/trucks.jsp"); rd.forward(request, response); <FIXE>
<FIXS> if (((stateStack.size()) < 1) || (outOfBounds(index))) { <FIXE>
<FIXS> if ((subexpression) != "") { expressionParts.add(new app.com.example.grace.currencycalculator.models.Operand(new java.lang.StringBuilder(subexpression).reverse().toString())); subexpression = ""; } <FIXE>
<FIXS> <FIXE> <FIXS> mVibrator.cancel(); <FIXE>
<FIXS> com.github.javalbert.sqlbuilder.dsl.com.github.javalbert.sqlbuilder.Predicate predicate = new com.github.javalbert.sqlbuilder.dsl.com.github.javalbert.sqlbuilder.Predicate(); <FIXE>
<FIXS> <FIXE>
<FIXS> result.add(sensor); <FIXE>
<FIXS> assertQuestionInSurvey(questions.PostQuestionTest.surveyId, questionId); <FIXE>
<FIXS> com.example.mapinguari.workoutclass.exerciseObjectsViews.IntervalView addInterval(com.example.mapinguari.workoutclass.exerciseObjects.Interval interval) { com.example.mapinguari.workoutclass.exerciseObjectsViews.IntervalView intervalView = new com.example.mapinguari.workoutclass.exerciseObjectsViews.IntervalView(context, interval); int pos = (intervalsView.getChildCount()) - 2; <FIXE> <FIXS> return intervalView; <FIXE>
<FIXS> reference.set(value); <FIXE>
<FIXS> acceptActualType((((((org.eclipse.xtext.xbase.typesystem.conformance.ConformanceFlags.CHECKED_SUCCESS) | (org.eclipse.xtext.xbase.typesystem.conformance.ConformanceFlags.LAMBDA_VOID_COMPATIBLE)) | (org.eclipse.xtext.xbase.typesystem.conformance.ConformanceFlags.PROPAGATED_TYPE)) | (org.eclipse.xtext.xbase.typesystem.conformance.ConformanceFlags.SEALED)) | (org.eclipse.xtext.xbase.typesystem.conformance.ConformanceFlags.PREFERRED_LAMBDA_SUGAR))); <FIXE> <FIXS> acceptActualType(((((org.eclipse.xtext.xbase.typesystem.conformance.ConformanceFlags.CHECKED_SUCCESS) | (org.eclipse.xtext.xbase.typesystem.conformance.ConformanceFlags.LAMBDA_VOID_COMPATIBLE)) | (org.eclipse.xtext.xbase.typesystem.conformance.ConformanceFlags.PROPAGATED_TYPE)) | (org.eclipse.xtext.xbase.typesystem.conformance.ConformanceFlags.SEALED))); <FIXE>
<FIXS> pickNumber(start); <FIXE>
<FIXS> thread = new java.lang.Thread(this); thread.setDaemon(true); thread.start(); <FIXE>
<FIXS> <FIXE>
<FIXS> broadcastToClients(NetworkMessages.nextQ); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE> <FIXS> java.nio.file.Path taskFile = java.nio.file.Paths.get("/home/salankiv/greenfox/salankiv-todo-app/assets/tasks.txt"); <FIXE>
<FIXS> if (((!(mTwoPane)) && (fragment != null)) && (fragment instanceof com.qualicom.availabilitydashboard.NodeListActivityFragment)) { <FIXE>
<FIXS> java.lang.String text = tuple.getValue(0).toString(); <FIXE>
<FIXS> javax.sound.sampled.AudioInputStream inputStream = javax.sound.sampled.AudioSystem.getAudioInputStream(java.lang.ClassLoader.getSystemResource(Game.musicFile)); <FIXE>
<FIXS> <FIXE> <FIXS> clients[index].write(data); <FIXE>
<FIXS> public de.marsetex.lab2.task3.RationalNumber add(de.marsetex.lab2.task3.RationalNumber other) { <FIXE>
<FIXS> for (java.lang.String string : colored) { <FIXE>
<FIXS> @java.lang.Override <FIXE> <FIXS> flow = false; <FIXE>
<FIXS> int i = ((int) (((java.lang.Math.random()) * 33) % (com.coollooks.Util.tShirtPathList.size()))); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> descendents.add(kid); <FIXE>
<FIXS> return com.annimon.stream.Stream.of(new com.fastaccess.data.dao.FragmentPagerAdapterModel(context.getString(R.string.opened), com.fastaccess.ui.modules.repos.issues.issue.RepoOpenedIssuesView.newInstance(repoId, login)), new com.fastaccess.data.dao.FragmentPagerAdapterModel(context.getString(R.string.closed), com.fastaccess.ui.modules.repos.issues.issue.RepoClosedIssuesView.newInstance(repoId, login))).collect(com.annimon.stream.Collectors.toList()); <FIXE>
<FIXS> this.to.add(new javax.mail.internet.InternetAddress(mail)); <FIXE>
<FIXS> java.lang.String ext = libra.common.helpers.PathHelper.getExtensionWithoutCompressed(path.getName()); if (ext != null) { ext = ext.toLowerCase(); } <FIXE> <FIXS> if (fext.equals(ext)) { <FIXE>
<FIXS> org.junit.Assert.assertEquals("Il y a plus de 7 utilisateurs, le webservice \"userControl\" ne sont pas correctement configur\u00e9", 6, users.size()); org.junit.Assert.assertNotEquals("Admin", users.get(0).getLname()); <FIXE>
<FIXS> if (characterMovementComponent.jumpingRequested) characterMovementComponent.jumpingRequested = false; <FIXE>
<FIXS> if ((data == null) || ((data.length) < 2)) { return null; } <FIXE>
<FIXS> com.badlogic.gdx.backends.lwjgl3.Lwjgl3Application.errorCallback = null; <FIXE> <FIXS> com.badlogic.gdx.backends.lwjgl3.Lwjgl3Application.glDebugCallback = null; <FIXE>
<FIXS> newCnf.add(newClause); <FIXE>
<FIXS> try { Elevator.setBottom.event(); waitUntil(Elevator.atBottom); Rollers.open.set(true); Rollers.direction.set(false); Rollers.running.set(true); waitUntil(ccre.ctrl.BooleanMixing.invert(AutoLoader.crateInPosition)); waitForTime(timeout); Rollers.running.set(false); } finally { running.set(false); } <FIXE>
<FIXS> return new com.nostra13.universalimageloader.core.DisplayImageOptions.Builder().showImageOnLoading(icon).showImageForEmptyUri(icon).showImageOnFail(icon).cacheInMemory(false).cacheOnDisk(true).imageScaleType(ImageScaleType.EXACTLY).considerExifParams(true).bitmapConfig(Bitmap.Config.RGB_565).displayer(new com.nostra13.universalimageloader.core.display.FadeInBitmapDisplayer(1000)).build(); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> if (prevs == null) { <FIXE>
<FIXS> oxygenMeter.reset(); staminaMeter.reset(); <FIXE>
<FIXS> private java.util.Map<helper.Position, java.util.Map<java.lang.String, java.util.Set<java.lang.String>>> getRelationReprs() { java.util.Map<helper.Position, java.util.Map<java.lang.String, java.util.Set<java.lang.String>>> relationReprs = new java.util.HashMap<helper.Position, java.util.Map<java.lang.String, java.util.Set<java.lang.String>>>(); <FIXE> <FIXS> relationReprs.put(p, new java.util.HashMap<java.lang.String, java.util.Set<java.lang.String>>()); <FIXE>
<FIXS> private void info(java.lang.String[] message) { <FIXE>
<FIXS> double minSpread = 9999; <FIXE>
<FIXS> <FIXE>
<FIXS> switch (department.toLowerCase()) { <FIXE>
<FIXS> inst = translator.cast(clazz, wrapped); <FIXE>
<FIXS> org.springframework.ui.Model model = mock(org.springframework.ui.Model.class); <FIXE> <FIXS> when(this.accounts.getList()).thenReturn(accounts); <FIXE> <FIXS> verify(model).addAttribute("accounts", accounts); <FIXE>
<FIXS> java.util.Date date = null; <FIXE>
<FIXS> org.junit.Assert.assertThat(org.jenkinsci.plugins.github.webhook.WebhookManager.forHookUrl(org.jenkinsci.plugins.github.webhook.WebhookManagerTest.HOOK_ENDPOINT).createHookSubscribedTo(com.google.common.collect.Lists.newArrayList(org.kohsuke.github.GHEvent.PUSH), null).apply(new com.cloudbees.jenkins.GitHubRepositoryName("github.com", "name", "repo")), org.hamcrest.Matchers.nullValue()); <FIXE>
<FIXS> <FIXE>
<FIXS> if ((net.minecraft.client.Minecraft.getMinecraft().thePlayer) == null) { return null; } <FIXE> <FIXS> return null; <FIXE>
<FIXS> tFrequency.setFrequency(utility.Util.getRandomNumber(1, 1)); <FIXE>
<FIXS> <FIXE> <FIXS> final android.view.View buttonReset = findViewById(R.id.button_new_appointment); <FIXE>
<FIXS> game.GameMaster.playerAL.add(new game.Player(0.0, i, 0.0, 0, game.GameMaster.names[(i - 1)], 0)); <FIXE>
<FIXS> break; <FIXE>
<FIXS> org.cloudfoundry.operations.ApplicationsTest.createApplication(this.cloudFoundryOperations, org.cloudfoundry.operations.ApplicationsTest.getApplicationBits(), applicationName, true).then(this.cloudFoundryOperations.applications().restart(org.cloudfoundry.operations.applications.RestartApplicationRequest.builder().name(applicationName).build())).subscribe(testSubscriber()); <FIXE>
<FIXS> com.mygdx.game.shared.model.CollideablePolygon tilePolygon = com.mygdx.game.shared.model.TilePolygonLoader.loadTilePolygon(tile); <FIXE>
<FIXS> java.lang.String msg = (((((("IPTABLE " + (this.messageID)) + " ") + (this.ipAddress)) + " ") + (this.port)) + " ") + (this.ipTable); <FIXE>
<FIXS> update(); <FIXE>
<FIXS> if (null == content) { return 0; } <FIXE>
<FIXS> setWebDriver(retVal); <FIXE> <FIXS> <FIXE>
<FIXS> private java.lang.String convertRequestToString() throws java.io.IOException { <FIXE>
<FIXS> return matches.values().contains(true); <FIXE>
<FIXS> public double distanceTo(pathfinding.MapNode n) { <FIXE>
<FIXS> vm.setVpnState(VmVpnState.CONNECTED); <FIXE> <FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> _currentBldg = bldg; <FIXE> <FIXS> <FIXE>
<FIXS> strategy.handleAutomatonResets(model, AutomatonFactory.eINSTANCE); <FIXE> <FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> model.addAttribute(paginationInfo); <FIXE>
<FIXS> double k = (java.lang.Math.signum(stellarium.util.math.Spmath.getD(sciapi.api.value.util.VOp.dot(sciapi.api.value.euclidian.CrossUtil.cross(((sciapi.api.value.IValRef) (EcRPosG)), ((sciapi.api.value.IValRef) (stellarium.stellars.EcRPos))), ((sciapi.api.value.IValRef) (Pole)))))) * (1.0 - (getPhase())); <FIXE>
<FIXS> private java.util.Collection<org.litepal.crud.model.AssociationsInfo> analyzeAssociations(org.litepal.crud.DataSupport baseObj) { <FIXE> <FIXS> return associationInfos; <FIXE>
<FIXS> camera1Controller.update(elapsedTimeMS); super.update(elapsedTimeMS); <FIXE> <FIXS> <FIXE>
<FIXS> return (className != null) && (className.equals(net.x11.patch.XKeysymTransformer.XNET_PROTOCOL)) ? doClass(className, classBeingRedefined, classfileBuffer) : classfileBuffer; <FIXE>
<FIXS> return testPath; <FIXE>
<FIXS> java.lang.System.out.println(); <FIXE>
<FIXS> if (((intrinsicVideoSize.x) <= (view.getWidth())) && ((intrinsicVideoSize.y) <= (view.getHeight()))) { <FIXE>
<FIXS> sbahjsic.io.StandardLibrary.LOADED.add(packageName); <FIXE> <FIXS> <FIXE>
<FIXS> io.oasp.module.rest.service.impl.RestServiceExceptionFacade.LOG.error("Service failed on server", userError); <FIXE>
<FIXS> if ((isGameOver) || (computerMove == (-1))) { <FIXE> <FIXS> <FIXE>
<FIXS> java.math.BigDecimal valueBD = new java.math.BigDecimal(value); int newScale = sigFigs - ((valueBD.precision()) - (valueBD.scale())); java.math.BigDecimal valueBDtoSize = valueBD.setScale(newScale, java.math.RoundingMode.HALF_UP); <FIXE>
<FIXS> if (data != null) { final android.database.Cursor suggestionsCursor = ((com.android.contacts.list.JoinContactLoader.JoinContactLoaderResult) (data)).suggestionCursor; onContactListLoaded(suggestionsCursor, data); } <FIXE>
<FIXS> org.ballerinalang.model.values.BMessage bMessage = ((org.ballerinalang.model.values.BMessage) (getRefArgument(context, 1))); <FIXE>
<FIXS> <FIXE>
<FIXS> <FIXE>
<FIXS> executorService.shutdown(); <FIXE> <FIXS> <FIXE> <FIXS> <FIXE>
<FIXS> Controller controller = new Controller(); <FIXE>
<FIXS> drawLives(graphics); <FIXE>
<FIXS> if (!(this.suit.equals(other.suit))) { <FIXE>
<FIXS> } catch (java.lang.NoSuchMethodException nsme) { <FIXE> <FIXS> <FIXE>
<FIXS> startNotification(contact, context); <FIXE>
<FIXS> view = inflater.inflate(R.layout.fragment_sidebar, container, false); <FIXE> <FIXS> <FIXE>
<FIXS> if (quantity > (getMaximumQuantity())) { <FIXE>
<FIXS> if (java.util.Arrays.equals(element, array)) { return true; <FIXE> <FIXS> return false; <FIXE>
<FIXS> java.lang.System.out.println(play.libs.Json.toJson(usuario)); <FIXE>
<FIXS> getContext().alliance(1, 1); getContext().alliance(2, 1); <FIXE>
<FIXS> <FIXE>
<FIXS> public static boolean differByOne(java.lang.String word, java.lang.String ladderLast) { <FIXE>
<FIXS> calculateProjectDays(project); <FIXE> <FIXS> <FIXE>
