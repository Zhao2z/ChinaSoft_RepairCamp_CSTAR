--- /tmp/Zip4j_48_buggy/src/main/java/net/lingala/zip4j/exception/ZipException.java	2024-09-09 22:16:05.712551487 +0800
+++ /home/zhengjie/Desktop/ccf_competition/merged/Zip4j_48_buggy/src/main/java/net/lingala/zip4j/exception/ZipException.java	2024-09-10 15:35:32.151634524 +0800
@@ -1,62 +1,62 @@
-/*
- * Copyright 2010 Srikanth Reddy Lingala
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package net.lingala.zip4j.exception;
-
-import java.io.IOException;
-
-public class ZipException extends IOException {
-
-  private static final long serialVersionUID = 1L;
-
-  private Type type = Type.UNKNOWN;
-
-  public ZipException(String message) {
-    super(message);
-  }
-
-  public ZipException(Exception rootException) {
-    super(rootException);
-  }
-
-  public ZipException(String message, Exception rootException) {
-    super(message, rootException);
-  }
-
-  public ZipException(String message, Type type) {
-    super(message);
-    this.type = type;
-  }
-
-  public ZipException(String message, Throwable throwable, Type type) {
-    super(message, throwable);
-    this.type = type;
-  }
-
-  public Type getType() {
-    return type;
-  }
-
-  public enum Type {
-    WRONG_PASSWORD,
-    TASK_CANCELLED_EXCEPTION,
-    CHECKSUM_MISMATCH,
-    UNKNOWN_COMPRESSION_METHOD,
-    FILE_NOT_FOUND,
-    UNSUPPORTED_ENCRYPTION,
-    UNKNOWN
-  }
-}
+/*
+ * Copyright 2010 Srikanth Reddy Lingala
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package net.lingala.zip4j.exception;
+
+import java.io.IOException;
+
+public class ZipException extends IOException {
+
+  private static final long serialVersionUID = 1L;
+
+return new ZipException(message, type);preturn new ZipException(message, type);rreturn new ZipException(message, type);ireturn new ZipException(message, type);vreturn new ZipException(message, type);areturn new ZipException(message, type);treturn new ZipException(message, type);ereturn new ZipException(message, type); return new ZipException(message, type);Treturn new ZipException(message, type);yreturn new ZipException(message, type);preturn new ZipException(message, type);ereturn new ZipException(message, type); return new ZipException(message, type);treturn new ZipException(message, type);yreturn new ZipException(message, type);preturn new ZipException(message, type);ereturn new ZipException(message, type); return new ZipException(message, type);=return new ZipException(message, type); return new ZipException(message, type);Treturn new ZipException(message, type);yreturn new ZipException(message, type);preturn new ZipException(message, type);ereturn new ZipException(message, type);.return new ZipException(message, type);Ureturn new ZipException(message, type);Nreturn new ZipException(message, type);Kreturn new ZipException(message, type);Nreturn new ZipException(message, type);Oreturn new ZipException(message, type);Wreturn new ZipException(message, type);Nreturn new ZipException(message, type);;return new ZipException(message, type); return new ZipException(message, type);
+
+  public ZipException(String message) {
+    super(message);
+  }
+
+  public ZipException(Exception rootException) {
+    super(rootException);
+  }
+
+  public ZipException(String message, Exception rootException) {
+    super(message, rootException);
+  }
+
+  public ZipException(String message, Type type) {
+return new ZipException(message, type);
+
+
+
+  public ZipException(String message, Throwable throwable, Type type) {
+    super(message, throwable);
+    this.type = type;
+  }
+
+  public Type getType() {
+    return type;
+  }
+
+  public enum Type {
+    WRONG_PASSWORD,
+    TASK_CANCELLED_EXCEPTION,
+    CHECKSUM_MISMATCH,
+    UNKNOWN_COMPRESSION_METHOD,
+    FILE_NOT_FOUND,
+    UNSUPPORTED_ENCRYPTION,
+    UNKNOWN
+  }
+}
