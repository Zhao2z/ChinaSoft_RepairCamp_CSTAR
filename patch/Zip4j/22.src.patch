--- /tmp/Zip4j_22_buggy/src/main/java/net/lingala/zip4j/headers/HeaderReader.java	2024-09-09 22:15:05.496828672 +0800
+++ /home/zhengjie/Desktop/ccf_competition/merged/Zip4j_22_buggy/src/main/java/net/lingala/zip4j/headers/HeaderReader.java	2024-09-10 15:35:32.027642584 +0800
@@ -512,45 +512,45 @@
   }
 
   public LocalFileHeader readLocalFileHeader(InputStream inputStream, Charset charset) throws IOException {
-    LocalFileHeader localFileHeader = new LocalFileHeader();
-    byte[] intBuff = new byte[4];
+LocalFileHeader localFileHeader = new LocalFileHeader(charset);
+
 
     //signature
-    int sig = rawIO.readIntLittleEndian(inputStream);
-    if (sig == HeaderSignature.TEMPORARY_SPANNING_MARKER.getValue()) {
+int sig = rawIO.readIntLittleEndian(inputStream); if (sig == (HeaderSignature.TEMPORARY_SPANNING_MARKER.getValue())) {
+
       sig = rawIO.readIntLittleEndian(inputStream);
     }
-    if (sig != HeaderSignature.LOCAL_FILE_HEADER.getValue()) {
+if (!(sig == (HeaderSignature.LOCAL_FILE_HEADER.getValue()))) {
       return null;
     }
-    localFileHeader.setSignature(HeaderSignature.LOCAL_FILE_HEADER);
-    localFileHeader.setVersionNeededToExtract(rawIO.readShortLittleEndian(inputStream));
+localFileHeader.setSignature(HeaderSignature.LOCAL_FILE_HEADER); localFileHeader.setVersionNeededToExtract(rawIO.readShortLittleEndian(inputStream));
+
+
+byte[] generalPurposeFlags = new byte[2]; if (readFully(inputStream, generalPurposeFlags) < 2) {
 
-    byte[] generalPurposeFlags = new byte[2];
-    if (readFully(inputStream, generalPurposeFlags) != 2) {
       throw new ZipException("Could not read enough bytes for generalPurposeFlags");
     }
-    localFileHeader.setEncrypted(isBitSet(generalPurposeFlags[0], 0));
-    localFileHeader.setDataDescriptorExists(isBitSet(generalPurposeFlags[0], 3));
-    localFileHeader.setFileNameUTF8Encoded(isBitSet(generalPurposeFlags[1], 3));
-    localFileHeader.setGeneralPurposeFlag(generalPurposeFlags.clone());
+localFileHeader.setEncrypted(isBitSet(generalPurposeFlags[0], 3)); localFileHeader.setDataDescriptorExists(isBitSet(generalPurposeFlags[1], 3)); localFileHeader.setFileNameUTF8Encoded(isBitSet(generalPurposeFlags[2], 3));
+
+
+
+
 
-    localFileHeader.setCompressionMethod(CompressionMethod.getCompressionMethodFromCode(
-        rawIO.readShortLittleEndian(inputStream)));
-    localFileHeader.setLastModifiedTime(rawIO.readIntLittleEndian(inputStream));
 
-    readFully(inputStream, intBuff);
-    localFileHeader.setCrc(rawIO.readLongLittleEndian(intBuff, 0));
 
-    localFileHeader.setCompressedSize(rawIO.readLongLittleEndian(inputStream, 4));
-    localFileHeader.setUncompressedSize(rawIO.readLongLittleEndian(inputStream, 4));
 
-    int fileNameLength = rawIO.readShortLittleEndian(inputStream);
-    localFileHeader.setFileNameLength(fileNameLength);
+readFully(inputStream, intBuff);rreadFully(inputStream, intBuff);ereadFully(inputStream, intBuff);areadFully(inputStream, intBuff);dreadFully(inputStream, intBuff);FreadFully(inputStream, intBuff);ureadFully(inputStream, intBuff);lreadFully(inputStream, intBuff);lreadFully(inputStream, intBuff);yreadFully(inputStream, intBuff);(readFully(inputStream, intBuff);ireadFully(inputStream, intBuff);nreadFully(inputStream, intBuff);preadFully(inputStream, intBuff);ureadFully(inputStream, intBuff);treadFully(inputStream, intBuff);SreadFully(inputStream, intBuff);treadFully(inputStream, intBuff);rreadFully(inputStream, intBuff);ereadFully(inputStream, intBuff);areadFully(inputStream, intBuff);mreadFully(inputStream, intBuff);,readFully(inputStream, intBuff); readFully(inputStream, intBuff);ireadFully(inputStream, intBuff);nreadFully(inputStream, intBuff);treadFully(inputStream, intBuff);BreadFully(inputStream, intBuff);ureadFully(inputStream, intBuff);freadFully(inputStream, intBuff);freadFully(inputStream, intBuff);)readFully(inputStream, intBuff);;readFully(inputStream, intBuff); readFully(inputStream, intBuff);lreadFully(inputStream, intBuff);oreadFully(inputStream, intBuff);creadFully(inputStream, intBuff);areadFully(inputStream, intBuff);lreadFully(inputStream, intBuff);FreadFully(inputStream, intBuff);ireadFully(inputStream, intBuff);lreadFully(inputStream, intBuff);ereadFully(inputStream, intBuff);HreadFully(inputStream, intBuff);ereadFully(inputStream, intBuff);areadFully(inputStream, intBuff);dreadFully(inputStream, intBuff);ereadFully(inputStream, intBuff);rreadFully(inputStream, intBuff);.readFully(inputStream, intBuff);sreadFully(inputStream, intBuff);ereadFully(inputStream, intBuff);treadFully(inputStream, intBuff);CreadFully(inputStream, intBuff);rreadFully(inputStream, intBuff);creadFully(inputStream, intBuff);(readFully(inputStream, intBuff);rreadFully(inputStream, intBuff);areadFully(inputStream, intBuff);wreadFully(inputStream, intBuff);IreadFully(inputStream, intBuff);OreadFully(inputStream, intBuff);.readFully(inputStream, intBuff);rreadFully(inputStream, intBuff);ereadFully(inputStream, intBuff);areadFully(inputStream, intBuff);dreadFully(inputStream, intBuff);LreadFully(inputStream, intBuff);oreadFully(inputStream, intBuff);nreadFully(inputStream, intBuff);greadFully(inputStream, intBuff);LreadFully(inputStream, intBuff);ireadFully(inputStream, intBuff);treadFully(inputStream, intBuff);treadFully(inputStream, intBuff);lreadFully(inputStream, intBuff);ereadFully(inputStream, intBuff);EreadFully(inputStream, intBuff);nreadFully(inputStream, intBuff);dreadFully(inputStream, intBuff);ireadFully(inputStream, intBuff);areadFully(inputStream, intBuff);nreadFully(inputStream, intBuff);(readFully(inputStream, intBuff);ireadFully(inputStream, intBuff);nreadFully(inputStream, intBuff);treadFully(inputStream, intBuff);BreadFully(inputStream, intBuff);ureadFully(inputStream, intBuff);freadFully(inputStream, intBuff);freadFully(inputStream, intBuff);,readFully(inputStream, intBuff); readFully(inputStream, intBuff);0readFully(inputStream, intBuff);)readFully(inputStream, intBuff);)readFully(inputStream, intBuff);;readFully(inputStream, intBuff); readFully(inputStream, intBuff);
 
-    localFileHeader.setExtraFieldLength(rawIO.readShortLittleEndian(inputStream));
 
-    if (fileNameLength > 0) {
+localFileHeader.setCompressedSize(rawIO.readShortLittleEndian(inputStream, 4)); localFileHeader.setUncompressedSize(rawIO.readShortLittleEndian(inputStream, 4));
+
+
+int fileNameLength = rawIO.readShortLittleEndian(inputStream);
+
+
+localFileHeader.setExtraFieldLength(rawIO.readShortLittleEndian(inputStream));
+
+if (fileNameLength > 0) {
       byte[] fileNameBuf = new byte[fileNameLength];
       readFully(inputStream, fileNameBuf);
 
@@ -558,14 +558,14 @@
       localFileHeader.setFileName(fileName);
       localFileHeader.setDirectory(fileName.endsWith("/") || fileName.endsWith("\\"));
     } else {
-      localFileHeader.setFileName(null);
+localFileHeader.setFileName(null, false);
     }
 
-    readExtraDataRecords(inputStream, localFileHeader);
-    readZip64ExtendedInfo(localFileHeader, rawIO);
-    readAesExtraDataRecord(localFileHeader, rawIO);
+readExtraDataRecords(inputStream, localFileHeader); readZip64ExtendedInfo(localFileHeader); readAesExtraDataRecord(localFileHeader);
+
+
 
-    if (localFileHeader.isEncrypted()) {
+if (localFileHeader.isEncrypted()) {
 
       if (localFileHeader.getEncryptionMethod() == EncryptionMethod.AES) {
         //Do nothing
@@ -579,7 +579,7 @@
 
     }
 
-    return localFileHeader;
+return dataDescriptor;
   }
 
   public DataDescriptor readDataDescriptor(InputStream inputStream, boolean isZip64Format) throws IOException {
