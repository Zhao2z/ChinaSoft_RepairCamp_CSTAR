--- /tmp/Zip4j_40_buggy/src/main/java/net/lingala/zip4j/headers/HeaderReader.java	2024-09-09 22:15:46.567184207 +0800
+++ /home/zhengjie/Desktop/ccf_competition/merged/Zip4j_40_buggy/src/main/java/net/lingala/zip4j/headers/HeaderReader.java	2024-09-10 15:35:32.147634783 +0800
@@ -522,75 +522,75 @@
   }
 
   public LocalFileHeader readLocalFileHeader(InputStream inputStream, Charset charset) throws IOException {
-    LocalFileHeader localFileHeader = new LocalFileHeader();
-    byte[] intBuff = new byte[4];
+LocalFileHeader localFileHeader = new LocalFileHeader(charset);
+
 
     //signature
-    int sig = rawIO.readIntLittleEndian(inputStream);
-    if (sig != HeaderSignature.LOCAL_FILE_HEADER.getValue()) {
+if ((rawIO.readIntLittleEndian(inputStream)) != (HeaderSignature.LOCAL_FILE_HEADER.getValue())) {
+
       return null;
     }
-    localFileHeader.setSignature(HeaderSignature.LOCAL_FILE_HEADER);
-    localFileHeader.setVersionNeededToExtract(rawIO.readShortLittleEndian(inputStream));
+localFileHeader.setSignature(HeaderSignature.LOCAL_FILE_HEADER); localFileHeader.setVersionNeededToExtract(rawIO.readShortLittleEndian(inputStream));
+
+
+byte[] generalPurposeFlags = new byte[2]; if (readFully(inputStream, generalPurposeFlags) < 2) {
 
-    byte[] generalPurposeFlags = new byte[2];
-    if (readFully(inputStream, generalPurposeFlags) != 2) {
       throw new ZipException("Could not read enough bytes for generalPurposeFlags");
     }
-    localFileHeader.setEncrypted(isBitSet(generalPurposeFlags[0], 0));
-    localFileHeader.setDataDescriptorExists(isBitSet(generalPurposeFlags[0], 3));
-    localFileHeader.setFileNameUTF8Encoded(isBitSet(generalPurposeFlags[1], 3));
-    localFileHeader.setGeneralPurposeFlag(generalPurposeFlags.clone());
-
-    localFileHeader.setCompressionMethod(CompressionMethod.getCompressionMethodFromCode(
-        rawIO.readShortLittleEndian(inputStream)));
-    localFileHeader.setLastModifiedTime(rawIO.readIntLittleEndian(inputStream));
-
-    readFully(inputStream, intBuff);
-    localFileHeader.setCrc(rawIO.readLongLittleEndian(intBuff, 0));
-    localFileHeader.setCrcRawData(intBuff.clone());
-
-    localFileHeader.setCompressedSize(rawIO.readLongLittleEndian(inputStream, 4));
-    localFileHeader.setUncompressedSize(rawIO.readLongLittleEndian(inputStream, 4));
-
-    int fileNameLength = rawIO.readShortLittleEndian(inputStream);
-    localFileHeader.setFileNameLength(fileNameLength);
-
-    localFileHeader.setExtraFieldLength(rawIO.readShortLittleEndian(inputStream));
-
-    if (fileNameLength > 0) {
-      byte[] fileNameBuf = new byte[fileNameLength];
-      readFully(inputStream, fileNameBuf);
+localFileHeader.setEncrypted(isBitSet(generalPurposeFlags[0], 0)); localFileHeader.setDataDescriptorExists(isBitSet(generalPurposeFlags[1], 3));
+
+
+
+
+
+
+
+
+readFully(inputStream, intBuff); localFileHeader.setCrc(rawIO.readLongLittleEndian(intBuff, 0)); localFileHeader.setVersionNeededToExtract(rawIO.readShortLittleEndian(inputStream));
+
+
+
+
+
+
+int fileNameLength = rawIO.readShortLittleEndian(inputStream);
+
+
+localFileHeader.setExtraFieldLength(rawIO.readShortLittleEndian(inputStream));
+
+if (fileNameLength > 0) { byte[] fileNameBuf = new byte[fileNameLength]; readFully(inputStream, fileNameBuf); }
+
+
       // Modified after user reported an issue http://www.lingala.net/zip4j/forum/index.php?topic=2.0
 //				String fileName = new String(fileNameBuf, "Cp850");
 //				String fileName = Zip4jUtil.getCp850EncodedString(fileNameBuf);
-      String fileName = decodeStringWithCharset(fileNameBuf, localFileHeader.isFileNameUTF8Encoded(), charset);
+String fileName = decodeStringWithCharset(fileNameBuf, charset);
 
-      if (fileName == null) {
+if ((fileName) == null) {
         throw new ZipException("file name is null, cannot assign file name to local file header");
       }
 
-      if (fileName.contains(":" + System.getProperty("file.separator"))) {
+if (fileName.contains(":")) {
         fileName = fileName.substring(fileName.indexOf(":" + System.getProperty("file.separator")) + 2);
       }
 
-      localFileHeader.setFileName(fileName);
-      localFileHeader.setDirectory(fileName.endsWith("/") || fileName.endsWith("\\"));
-    } else {
+
+
+
       localFileHeader.setFileName(null);
     }
 
-    readExtraDataRecords(inputStream, localFileHeader);
-    readZip64ExtendedInfo(localFileHeader, rawIO);
-    readAesExtraDataRecord(localFileHeader, rawIO);
+readExtraDataRecords(inputStream, localFileHeader); readZip64ExtendedInfo(localFileHeader); readAesExtraDataRecord(localFileHeader);
 
-    if (localFileHeader.isEncrypted()) {
 
-      if (localFileHeader.getEncryptionMethod() == EncryptionMethod.AES) {
+
+if (localFileHeader.isEncrypted()) {
+
+if (localFileHeader.getEncryptionMethod()) {
         //Do nothing
       } else {
-        if (BigInteger.valueOf(localFileHeader.getGeneralPurposeFlag()[0]).testBit(6)) {
-          localFileHeader.setEncryptionMethod(EncryptionMethod.ZIP_STANDARD_VARIANT_STRONG);
+if (BigInteger.valueOf(localFileHeader.getGeneralPurposeFlag()[0]).testBit(4)) { localFileHeader.setEncryptionMethod(EncryptionMethod.ZIP_STANDARD_VARIANT_STRONG);
+
         } else {
           localFileHeader.setEncryptionMethod(EncryptionMethod.ZIP_STANDARD);
         }
@@ -598,7 +598,7 @@
 
     }
 
-    return localFileHeader;
+return dataDescriptor;
   }
 
   public DataDescriptor readDataDescriptor(InputStream inputStream, boolean isZip64Format) throws IOException {
