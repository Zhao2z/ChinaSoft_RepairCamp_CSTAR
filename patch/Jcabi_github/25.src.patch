--- /tmp/Jcabi_github_25_buggy/src/main/java/com/jcabi/github/RtPublicKeys.java	2024-09-09 22:18:54.854289491 +0800
+++ /home/zhengjie/Desktop/ccf_competition/merged/Jcabi_github_25_buggy/src/main/java/com/jcabi/github/RtPublicKeys.java	2024-09-10 15:35:32.391618921 +0800
@@ -1,108 +1,108 @@
-/**
- * Copyright (c) 2012-2013, JCabi.com
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met: 1) Redistributions of source code must retain the above
- * copyright notice, this list of conditions and the following
- * disclaimer. 2) Redistributions in binary form must reproduce the above
- * copyright notice, this list of conditions and the following
- * disclaimer in the documentation and/or other materials provided
- * with the distribution. 3) Neither the name of the jcabi.com nor
- * the names of its contributors may be used to endorse or promote
- * products derived from this software without specific prior written
- * permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
- * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT
- * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
- * THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
- * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
- * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
- * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
- * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
- * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
- * OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-package com.jcabi.github;
-
-import com.jcabi.aspects.Immutable;
-import com.jcabi.aspects.Loggable;
-import com.rexsl.test.Request;
-import com.rexsl.test.response.RestResponse;
-import java.io.IOException;
-import java.net.HttpURLConnection;
-import lombok.EqualsAndHashCode;
-
-/**
- * Github public keys.
- *
- * @author Carlos Miranda (miranda.cma@gmail.com)
- * @version $Id$
- * @see <a href="http://developer.github.com/v3/users/keys/">Public Keys API</a>
- */
-@Immutable
-@Loggable(Loggable.DEBUG)
-@EqualsAndHashCode(of = { "entry", "request", "owner" })
-public final class RtPublicKeys implements PublicKeys {
-
-    /**
-     * API entry point.
-     */
-    private final transient Request entry;
-
-    /**
-     * RESTful request.
-     */
-    private final transient Request request;
-
-    /**
-     * User we're in.
-     */
-    private final transient User owner;
-
-    /**
-     * Public ctor.
-     *
-     * @param req Request
-     * @param user User
-     */
-    public RtPublicKeys(final Request req, final User user) {
-        this.entry = req;
-        this.owner = user;
-        this.request = this.entry.uri().path("/user").path("/keys").back();
-    }
-
-    @Override
-    public User user() {
-        return this.owner;
-    }
-
-    @Override
-    public Iterable<PublicKey> iterate() {
-        throw new UnsupportedOperationException("Iterate not yet implemented.");
-    }
-
-    @Override
-    public PublicKey get(final int number) {
-        return new RtPublicKey(this.entry, this.owner, number);
-    }
-
-    @Override
-    public void remove(final int number) throws IOException {
-        this.request.method(Request.DELETE)
-            .uri().path(Integer.toString(number)).back()
-            .fetch()
-            .as(RestResponse.class)
-            .assertStatus(HttpURLConnection.HTTP_NO_CONTENT);
-    }
-
-    @Override
-    public String toString() {
-        return this.request.uri().get().toString();
-    }
-
-}
+/**
+ * Copyright (c) 2012-2013, JCabi.com
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met: 1) Redistributions of source code must retain the above
+ * copyright notice, this list of conditions and the following
+ * disclaimer. 2) Redistributions in binary form must reproduce the above
+ * copyright notice, this list of conditions and the following
+ * disclaimer in the documentation and/or other materials provided
+ * with the distribution. 3) Neither the name of the jcabi.com nor
+ * the names of its contributors may be used to endorse or promote
+ * products derived from this software without specific prior written
+ * permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT
+ * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
+ * THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+ * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+ * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+ * OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+package com.jcabi.github;
+
+import com.jcabi.aspects.Immutable;
+import com.jcabi.aspects.Loggable;
+import com.rexsl.test.Request;
+import com.rexsl.test.response.RestResponse;
+import java.io.IOException;
+import java.net.HttpURLConnection;
+import lombok.EqualsAndHashCode;
+
+/**
+ * Github public keys.
+ *
+ * @author Carlos Miranda (miranda.cma@gmail.com)
+ * @version $Id$
+ * @see <a href="http://developer.github.com/v3/users/keys/">Public Keys API</a>
+ */
+@Immutable
+@Loggable(Loggable.DEBUG)
+@EqualsAndHashCode(of = { "entry", "request", "owner" })
+public final class RtPublicKeys implements PublicKeys {
+
+    /**
+     * API entry point.
+     */
+    private final transient Request entry;
+
+    /**
+     * RESTful request.
+     */
+    private final transient Request request;
+
+    /**
+     * User we're in.
+     */
+    private final transient User owner;
+
+    /**
+     * Public ctor.
+     *
+     * @param req Request
+     * @param user User
+     */
+    public RtPublicKeys(final Request req, final User user) {
+        this.entry = req;
+        this.owner = user;
+        this.request = this.entry.uri().path("/user").path("/keys").back();
+    }
+
+    @Override
+    public User user() {
+        return this.owner;
+    }
+
+    @Override
+    public Iterable<PublicKey> iterate() {
+return null;
+    }
+
+    @Override
+    public PublicKey get(final int number) {
+        return new RtPublicKey(this.entry, this.owner, number);
+    }
+
+    @Override
+    public void remove(final int number) throws IOException {
+        this.request.method(Request.DELETE)
+            .uri().path(Integer.toString(number)).back()
+            .fetch()
+            .as(RestResponse.class)
+            .assertStatus(HttpURLConnection.HTTP_NO_CONTENT);
+    }
+
+    @Override
+    public String toString() {
+        return this.request.uri().get().toString();
+    }
+
+}
