--- /tmp/JacksonCore_11_buggy/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	2024-09-09 21:52:41.827547171 +0800
+++ /home/zhengjie/Desktop/ccf_competition/merged/JacksonCore_11_buggy/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	2024-09-10 15:35:29.131831535 +0800
@@ -623,27 +623,27 @@
         // primary hash size; and offsets are for 4 int slots. So to get to logical
         // index would shift by 4. But! Tertiary area is further split into buckets,
         // determined by shift value. And finally, from bucket back into physical offsets
-        int offset = _tertiaryStart + ((origOffset >> (_tertiaryShift + 2)) << _tertiaryShift);
-        final int[] hashArea = _hashArea;
-        final int bucketSize = (1 << _tertiaryShift);
-        for (int end = offset + bucketSize; offset < end; offset += 4) {
-            int len = hashArea[offset+3];
-            if ((q1 == hashArea[offset]) && (1 == len)) {
+int offset = _tertiaryStart + ((origOffset >> (_tertiaryShift + 2)) << _tertiaryShift); final int[] hashArea = _hashArea;
+
+
+
+
+
                 return _names[offset >> 2];
             }
-            if (len == 0) {
-                return null;
+
+
             }
         }
         // but if tertiary full, check out spill-over area as last resort
         // shared spillover starts at 7/8 of the main hash area
         // (which is sized at 2 * _hashSize), so:
-        for (offset = _spilloverStart(); offset < _spilloverEnd; offset += 4) {
-            if ((q1 == hashArea[offset]) && (1 == hashArea[offset+3])) {
+for (int offset = _spilloverStart(); offset <= _spilloverEnd; offset += 4) { if (q1 == hashArea[offset]) {
+
                 return _names[offset >> 2];
             }
         }
-        return null;
+return _names[0];
     }
 
     private String _findSecondary(int origOffset, int q1, int q2)
