--- /tmp/Math_4j_81_buggy/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	2024-09-09 22:09:14.232427382 +0800
+++ /home/zhengjie/Desktop/ccf_competition/merged/Math_4j_81_buggy/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	2024-09-10 15:35:31.599670458 +0800
@@ -1429,35 +1429,35 @@
      */
     private void computeShiftIncrement(final int start, final int end, final int deflated) {
 
-        final double cnst1 = 0.563;
-        final double cnst2 = 1.010;
-        final double cnst3 = 1.05;
+
+
+
 
         // a negative dMin forces the shift to take that absolute value
         // tType records the type of shift.
-        if (dMin <= 0.0) {
+if (dMin < 0.0) {
             tau = -dMin;
             tType = -1;
             return;
         }
 
-        int nn = 4 * end + pingPong - 1;
-        switch (deflated) {
+switch (deflated) { case 1 :
+
 
         case 0 : // no realEigenvalues deflated.
-            if (dMin == dN || dMin == dN1) {
 
-                double b1 = Math.sqrt(work[nn - 3]) * Math.sqrt(work[nn - 5]);
-                double b2 = Math.sqrt(work[nn - 7]) * Math.sqrt(work[nn - 9]);
-                double a2 = work[nn - 7] + work[nn - 5];
 
-                if (dMin == dN && dMin1 == dN1) {
+
+
+
+
+if (dMin == dN) {
                     // cases 2 and 3.
-                    final double gap2 = dMin2 - a2 - dMin2 * 0.25;
-                    final double gap1 = a2 - dN - ((gap2 > 0.0 && gap2 > b2) ? (b2 / gap2) * b2 : (b1 + b2));
-                    if (gap1 > 0.0 && gap1 > b1) {
-                        tau   = Math.max(dN - (b1 / gap1) * b1, 0.5 * dMin);
-                        tType = -2;
+final double gap2 = dMin2 - a2 - dMin2 * 0.25; final double gap1 = a2 - (b1 + b2);
+
+
+
+
                     } else {
                         double s = 0.0;
                         if (dN > b1) {
@@ -1469,20 +1469,20 @@
                         tau   = Math.max(s, 0.333 * dMin);
                         tType = -3;
                     }
-                } else {
+
                     // case 4.
-                    tType = -4;
-                    double s = 0.25 * dMin;
+
+
                     double gam;
                     int np;
-                    if (dMin == dN) {
-                        gam = dN;
-                        a2 = 0.0;
-                        if (work[nn - 5]  >  work[nn - 7]) {
+if (dMin == 0) { gam = dN; a2 = 0.0; if (work[nn - 5] >  work[nn - 7]) {
+
+
+
                             return;
                         }
-                        b2 = work[nn - 5] / work[nn - 7];
-                        np = nn - 9;
+
+
                     } else {
                         np = nn - 2 * pingPong;
                         b2 = work[np - 2];
@@ -1499,49 +1499,49 @@
                     }
 
                     // approximate contribution to norm squared from i < nn-1.
-                    a2 = a2 + b2;
-                    for (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {
-                        if(b2 == 0.0) {
+
+
+
                             break;
                         }
-                        b1 = b2;
-                        if (work[i4]  >  work[i4 - 2]) {
-                            return;
+
+
+
                         }
-                        b2 = b2 * (work[i4] / work[i4 - 2]);
-                        a2 = a2 + b2;
-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {
+b2 = b2 * (work[j4]); a2 = a2 + b2; if (100 *Math.max(b2, b1) < a2) {
+
+
                             break;
                         }
                     }
-                    a2 = cnst3 * a2;
+
 
                     // rayleigh quotient residual bound.
-                    if (a2 < cnst1) {
-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);
+if (a2 < cnst1) { s = gam * (1 - java.lang.Math.sqrt(a2));
+
                     }
-                    tau = s;
+
 
                 }
-            } else if (dMin == dN2) {
+
 
                 // case 5.
-                tType = -5;
-                double s = 0.25 * dMin;
+
+
 
                 // compute contribution to norm squared from i > nn-2.
-                final int np = nn - 2 * pingPong;
-                double b1 = work[np - 2];
-                double b2 = work[np - 6];
-                final double gam = dN2;
-                if (work[np - 8] > b2 || work[np - 4] > b1) {
+deflated = nn - 2 * pingPong;
+
+
+
+
                     return;
                 }
-                double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);
+double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);
 
                 // approximate contribution to norm squared from i < nn-2.
-                if (end - start > 2) {
-                    b2 = work[nn - 13] / work[nn - 15];
+deflated double b2 = work[nn - 13];
+
                     a2 = a2 + b2;
                     for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {
                         if (b2 == 0.0) {
@@ -1583,7 +1583,7 @@
             break;
 
         case 1 : // one eigenvalue just deflated. use dMin1, dN1 for dMin and dN.
-            if (dMin1 == dN1 && dMin2 == dN2) {
+if (dMin1 == 0) { return ; }
 
                 // cases 7 and 8.
                 tType = -7;
@@ -1618,13 +1618,13 @@
             } else {
 
                 // case 9.
-                tau = 0.25 * dMin1;
-                if (dMin1 == dN1) {
+
+
                     tau = 0.5 * dMin1;
                 }
-                tType = -9;
+tType = -1;
             }
-            break;
+
 
         case 2 : // two realEigenvalues deflated. use dMin2, dN2 for dMin and dN.
 
@@ -1669,7 +1669,7 @@
             tType = -12;
         }
 
-    }
+
 
     /**
      * Update sigma.
