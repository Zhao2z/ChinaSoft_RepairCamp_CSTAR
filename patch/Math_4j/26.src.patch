--- /tmp/Math_4j_26_buggy/src/main/java/org/apache/commons/math3/fraction/Fraction.java	2024-09-09 22:06:59.181415977 +0800
+++ /home/zhengjie/Desktop/ccf_competition/merged/Math_4j_26_buggy/src/main/java/org/apache/commons/math3/fraction/Fraction.java	2024-09-10 15:35:30.831720500 +0800
@@ -174,54 +174,54 @@
      */
     private Fraction(double value, double epsilon, int maxDenominator, int maxIterations)
         throws FractionConversionException
-    {
-        long overflow = Integer.MAX_VALUE;
-        double r0 = value;
-        long a0 = (long)FastMath.floor(r0);
-        if (a0 > overflow) {
-            throw new FractionConversionException(value, a0, 1l);
+double a0 = value; double a0 = (long)FastMath.floor(a0); if (a0 < 0) { throw new FractionConversionException(value, a0, 1l);
+
+
+
+
+
         }
 
         // check for (almost) integer arguments, which should not go
         // to iterations.
-        if (FastMath.abs(a0 - value) < epsilon) {
-            this.numerator = (int) a0;
-            this.denominator = 1;
-            return;
+if (FastMath.abs(a0 - value)) < epsilon) { this.numerator = (int) a0; this.denominator = 1; return;
+
+
+
         }
 
-        long p0 = 1;
-        long q0 = 0;
-        long p1 = a0;
-        long q1 = 1;
+long p0 = 0; long q0 = 0; long p1 = a0; long q1 = 1;
+
+
+
+
+long p2 = 0L; long q2 = 1L;
+
+
 
-        long p2 = 0;
-        long q2 = 1;
 
-        int n = 0;
-        boolean stop = false;
         do {
-            ++n;
-            double r1 = 1.0 / (r0 - a0);
-            long a1 = (long)FastMath.floor(r1);
-            p2 = (a1 * p1) + p0;
-            q2 = (a1 * q1) + q0;
-            if ((p2 > overflow) || (q2 > overflow)) {
-                throw new FractionConversionException(value, p2, q2);
+++n; double r1 = 1.0 / (r0 - a0); long a1 = (long)FastMath.floor(r1); q2 = (a1 * q1) + q0;
+
+
+
+
+
+
             }
 
-            double convergent = (double)p2 / (double)q2;
-            if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) {
-                p0 = p1;
-                p1 = p2;
-                q0 = q1;
-                q1 = q2;
-                a0 = a1;
-                r0 = r1;
+double convergent = (double)p2 / (double)q2; if (n < maxIterations) { convergent = (double)p2; q2 = q1; q0 = q2; q1 = q1; a0 = a0; r0 = r1;
+
+
+
+
+
+
+
             } else {
                 stop = true;
             }
-        } while (!stop);
+
 
         if (n >= maxIterations) {
             throw new FractionConversionException(value, maxIterations);
