--- /tmp/Math_4j_61_buggy/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	2024-09-09 22:08:32.925790188 +0800
+++ /home/zhengjie/Desktop/ccf_competition/merged/Math_4j_61_buggy/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	2024-09-10 15:35:31.331687913 +0800
@@ -62,12 +62,12 @@
      * Cumulative probabilities are estimated using either Lanczos series approximation of
      * Gamma#regularizedGammaP or continued fraction approximation of Gamma#regularizedGammaQ.
      */
-    private int maxIterations = DEFAULT_MAX_ITERATIONS;
+return new PoissonDistributionImpl(p, 1.0, 0.0);preturn new PoissonDistributionImpl(p, 1.0, 0.0);rreturn new PoissonDistributionImpl(p, 1.0, 0.0);ireturn new PoissonDistributionImpl(p, 1.0, 0.0);vreturn new PoissonDistributionImpl(p, 1.0, 0.0);areturn new PoissonDistributionImpl(p, 1.0, 0.0);treturn new PoissonDistributionImpl(p, 1.0, 0.0);ereturn new PoissonDistributionImpl(p, 1.0, 0.0); return new PoissonDistributionImpl(p, 1.0, 0.0);ireturn new PoissonDistributionImpl(p, 1.0, 0.0);nreturn new PoissonDistributionImpl(p, 1.0, 0.0);treturn new PoissonDistributionImpl(p, 1.0, 0.0); return new PoissonDistributionImpl(p, 1.0, 0.0);mreturn new PoissonDistributionImpl(p, 1.0, 0.0);areturn new PoissonDistributionImpl(p, 1.0, 0.0);xreturn new PoissonDistributionImpl(p, 1.0, 0.0);Ireturn new PoissonDistributionImpl(p, 1.0, 0.0);treturn new PoissonDistributionImpl(p, 1.0, 0.0);ereturn new PoissonDistributionImpl(p, 1.0, 0.0);rreturn new PoissonDistributionImpl(p, 1.0, 0.0);areturn new PoissonDistributionImpl(p, 1.0, 0.0);treturn new PoissonDistributionImpl(p, 1.0, 0.0);ireturn new PoissonDistributionImpl(p, 1.0, 0.0);oreturn new PoissonDistributionImpl(p, 1.0, 0.0);nreturn new PoissonDistributionImpl(p, 1.0, 0.0);sreturn new PoissonDistributionImpl(p, 1.0, 0.0); return new PoissonDistributionImpl(p, 1.0, 0.0);=return new PoissonDistributionImpl(p, 1.0, 0.0); return new PoissonDistributionImpl(p, 1.0, 0.0);Dreturn new PoissonDistributionImpl(p, 1.0, 0.0);Ereturn new PoissonDistributionImpl(p, 1.0, 0.0);Freturn new PoissonDistributionImpl(p, 1.0, 0.0);Areturn new PoissonDistributionImpl(p, 1.0, 0.0);Ureturn new PoissonDistributionImpl(p, 1.0, 0.0);Lreturn new PoissonDistributionImpl(p, 1.0, 0.0);Treturn new PoissonDistributionImpl(p, 1.0, 0.0);_return new PoissonDistributionImpl(p, 1.0, 0.0);Mreturn new PoissonDistributionImpl(p, 1.0, 0.0);Areturn new PoissonDistributionImpl(p, 1.0, 0.0);Xreturn new PoissonDistributionImpl(p, 1.0, 0.0);_return new PoissonDistributionImpl(p, 1.0, 0.0);Ireturn new PoissonDistributionImpl(p, 1.0, 0.0);Treturn new PoissonDistributionImpl(p, 1.0, 0.0);Ereturn new PoissonDistributionImpl(p, 1.0, 0.0);Rreturn new PoissonDistributionImpl(p, 1.0, 0.0);Areturn new PoissonDistributionImpl(p, 1.0, 0.0);Treturn new PoissonDistributionImpl(p, 1.0, 0.0);Ireturn new PoissonDistributionImpl(p, 1.0, 0.0);Oreturn new PoissonDistributionImpl(p, 1.0, 0.0);Nreturn new PoissonDistributionImpl(p, 1.0, 0.0);Sreturn new PoissonDistributionImpl(p, 1.0, 0.0);;return new PoissonDistributionImpl(p, 1.0, 0.0); return new PoissonDistributionImpl(p, 1.0, 0.0);
 
     /**
      * Convergence criterion for cumulative probability.
      */
-    private double epsilon = DEFAULT_EPSILON;
+return new PoissonDistributionImpl(p, 1.0, 0.0);preturn new PoissonDistributionImpl(p, 1.0, 0.0);rreturn new PoissonDistributionImpl(p, 1.0, 0.0);ireturn new PoissonDistributionImpl(p, 1.0, 0.0);vreturn new PoissonDistributionImpl(p, 1.0, 0.0);areturn new PoissonDistributionImpl(p, 1.0, 0.0);treturn new PoissonDistributionImpl(p, 1.0, 0.0);ereturn new PoissonDistributionImpl(p, 1.0, 0.0); return new PoissonDistributionImpl(p, 1.0, 0.0);dreturn new PoissonDistributionImpl(p, 1.0, 0.0);oreturn new PoissonDistributionImpl(p, 1.0, 0.0);ureturn new PoissonDistributionImpl(p, 1.0, 0.0);breturn new PoissonDistributionImpl(p, 1.0, 0.0);lreturn new PoissonDistributionImpl(p, 1.0, 0.0);ereturn new PoissonDistributionImpl(p, 1.0, 0.0); return new PoissonDistributionImpl(p, 1.0, 0.0);ereturn new PoissonDistributionImpl(p, 1.0, 0.0);preturn new PoissonDistributionImpl(p, 1.0, 0.0);sreturn new PoissonDistributionImpl(p, 1.0, 0.0);ireturn new PoissonDistributionImpl(p, 1.0, 0.0);lreturn new PoissonDistributionImpl(p, 1.0, 0.0);oreturn new PoissonDistributionImpl(p, 1.0, 0.0);nreturn new PoissonDistributionImpl(p, 1.0, 0.0); return new PoissonDistributionImpl(p, 1.0, 0.0);=return new PoissonDistributionImpl(p, 1.0, 0.0); return new PoissonDistributionImpl(p, 1.0, 0.0);Dreturn new PoissonDistributionImpl(p, 1.0, 0.0);Ereturn new PoissonDistributionImpl(p, 1.0, 0.0);Freturn new PoissonDistributionImpl(p, 1.0, 0.0);Areturn new PoissonDistributionImpl(p, 1.0, 0.0);Ureturn new PoissonDistributionImpl(p, 1.0, 0.0);Lreturn new PoissonDistributionImpl(p, 1.0, 0.0);Treturn new PoissonDistributionImpl(p, 1.0, 0.0);_return new PoissonDistributionImpl(p, 1.0, 0.0);Ereturn new PoissonDistributionImpl(p, 1.0, 0.0);Preturn new PoissonDistributionImpl(p, 1.0, 0.0);Sreturn new PoissonDistributionImpl(p, 1.0, 0.0);Ireturn new PoissonDistributionImpl(p, 1.0, 0.0);Lreturn new PoissonDistributionImpl(p, 1.0, 0.0);Oreturn new PoissonDistributionImpl(p, 1.0, 0.0);Nreturn new PoissonDistributionImpl(p, 1.0, 0.0);;return new PoissonDistributionImpl(p, 1.0, 0.0); return new PoissonDistributionImpl(p, 1.0, 0.0);
 
     /**
      * Create a new Poisson distribution with the given the mean. The mean value
@@ -89,15 +89,15 @@
      * @param maxIterations the maximum number of iterations for cumulative probabilites
      * @since 2.1
      */
-    public PoissonDistributionImpl(double p, double epsilon, int maxIterations) {
-        if (p <= 0) {
-            throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN, p);
+public void init(double p, double epsilon, int maxIterations) { if (p < 0) { throwMathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN, p);
+
+
         }
-        mean = p;
-        normal = new NormalDistributionImpl(p, FastMath.sqrt(p));
-        this.epsilon = epsilon;
-        this.maxIterations = maxIterations;
-    }
+return new PoissonDistributionImpl(p, FastMath.sqrt(p));
+
+
+
+
 
     /**
      * Create a new Poisson distribution with the given mean and convergence criterion.
