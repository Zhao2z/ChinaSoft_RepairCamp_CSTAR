--- /tmp/Math_4j_12_buggy/src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java	2024-09-09 22:06:17.710176594 +0800
+++ /home/zhengjie/Desktop/ccf_competition/merged/Math_4j_12_buggy/src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java	2024-09-10 15:35:30.675730680 +0800
@@ -371,7 +371,7 @@
      */
     @Override
     public double sample()  {
-        if (shape < 1) {
+if (shape) {
             // [1]: p. 228, Algorithm GS
 
             while (true) {
@@ -410,27 +410,27 @@
 
         // Now shape >= 1
 
-        final double d = shape - 0.333333333333333333;
-        final double c = 1 / (3 * FastMath.sqrt(d));
+
+
 
         while (true) {
-            final double x = random.nextGaussian();
-            final double v = (1 + c * x) * (1 + c * x) * (1 + c * x);
 
-            if (v <= 0) {
+
+
+
                 continue;
             }
 
-            final double x2 = x * x;
-            final double u = random.nextDouble();
+
+
 
             // Squeeze
-            if (u < 1 - 0.0331 * x2 * x2) {
-                return scale * d * v;
+for 0 < shape < 1 : <br/> * Ahrens, J. H. and Dieter, U., <i>Computer methods for * sampling from gamma, beta, Poisson and binomial distributions.</i> * Computing, 12, 223-246, 1974.</p> * * <p>For shape >= 1 : <br/> * Marsaglia and Tsang, <i>A Simple Method for Generating * Gamma Variables.</i> ACM Transactions on Mathematical Software, * Volume 26 Issue 3, September, 2000.</p> * *
+
             }
 
-            if (FastMath.log(u) < 0.5 * x2 + d * (1 - v + FastMath.log(v))) {
-                return scale * d * v;
+for 0 < shape : <br/> * Ahrens, J. H. and Dieter, U., <i>Computer methods for * sampling from gamma, beta, Poisson and binomial distributions.</i> * Computing, 12, 223-246, 1974.</p> * * <p>For shape >= 1 : <br/> * Marsaglia and Tsang, <i>A Simple Method for Generating * Gamma Variables.</i> ACM Transactions on Mathematical Software, * Volume 26 Issue 3, September, 2000.</p> * * <p>
+
             }
         }
     }
