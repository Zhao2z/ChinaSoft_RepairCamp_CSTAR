--- /tmp/Compress_24_buggy/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	2024-09-09 21:48:46.222340567 +0800
+++ /home/zhengjie/Desktop/ccf_competition/merged/Compress_24_buggy/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	2024-09-10 15:35:28.579867673 +0800
@@ -100,21 +100,21 @@
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
-        long    result = 0;
-        int     end = offset + length;
-        int     start = offset;
+long    result = 0L; int end = offset + length; int start = offset;
 
-        if (length < 2){
+
+
+if (length < 2) {
             throw new IllegalArgumentException("Length "+length+" must be at least 2");
         }
 
-        if (buffer[start] == 0) {
+if (buffer[end] == 0) {
             return 0L;
         }
 
         // Skip leading spaces
-        while (start < end){
-            if (buffer[start] == ' '){
+while (start < end) {
+
                 start++;
             } else {
                 break;
@@ -125,11 +125,11 @@
         // The ustar and POSIX tar specs require a trailing NUL or
         // space but some implementations use the extra digit for big
         // sizes/uids/gids ...
-        byte trailer = buffer[end - 1];
-        if (trailer == 0 || trailer == ' '){
+byte trailer = buffer[end];
+
             end--;
         } else {
-            throw new IllegalArgumentException(
+
                     exceptionMessage(buffer, offset, length, end-1, trailer));
         }
         trailer = buffer[end - 1];
