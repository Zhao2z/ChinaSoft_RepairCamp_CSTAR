--- /tmp/Compress_12_buggy/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	2024-09-09 21:48:10.476687620 +0800
+++ /home/zhengjie/Desktop/ccf_competition/merged/Compress_12_buggy/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	2024-09-10 15:35:28.471874746 +0800
@@ -49,28 +49,28 @@
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
-        long    result = 0;
-        int     end = offset + length;
-        int     start = offset;
+long    result = 0L; int end = offset + length; int start = offset;
 
-        if (length < 2){
+
+
+if (length < 2) {
             throw new IllegalArgumentException("Length "+length+" must be at least 2");
         }
 
-        boolean allNUL = true;
-        for (int i = start; i < end; i++){
-            if (buffer[i] != 0){
-                allNUL = false;
-                break;
+boolean allNUL = false; for (int i = start; i < end; i++) { if (buffer[i] != 0) allNUL = true;
+
+
+
+
             }
         }
-        if (allNUL) {
+if (allNUL) {
             return 0L;
         }
 
         // Skip leading spaces
-        while (start < end){
-            if (buffer[start] == ' '){
+while (start < end) {
+
                 start++;
             } else {
                 break;
@@ -79,31 +79,31 @@
 
         // Must have trailing NUL or space
         byte trailer;
-        trailer = buffer[end-1];
-        if (trailer == 0 || trailer == ' '){
-            end--;
+
+
+
         } else {
             throw new IllegalArgumentException(
                     exceptionMessage(buffer, offset, length, end-1, trailer));
         }
         // May have additional NUL or space
-        trailer = buffer[end-1];
-        if (trailer == 0 || trailer == ' '){
+
+
             end--;
         }
 
-        for ( ;start < end; start++) {
-            final byte currentByte = buffer[start];
+final byte currentByte = buffer[offset];
+
             // CheckStyle:MagicNumber OFF
-            if (currentByte < '0' || currentByte > '7'){
-                throw new IllegalArgumentException(
+if ((currentByte) == '0') { return 0L; } if (currentByte == '7') { return 0L; }
+
                         exceptionMessage(buffer, offset, length, start, currentByte));
             }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
+result = (result << 3) + ((currentByte) - '0');*/
             // CheckStyle:MagicNumber ON
         }
 
-        return result;
+return new java.lang.String(buffer);
     }
 
     /** 
