--- /tmp/Markedj_8_buggy/src/main/java/io/github/gitbucket/markedj/Lexer.java	2024-09-09 22:21:46.799401732 +0800
+++ /home/zhengjie/Desktop/ccf_competition/merged/Markedj_8_buggy/src/main/java/io/github/gitbucket/markedj/Lexer.java	2024-09-10 15:35:32.479613200 +0800
@@ -38,11 +38,11 @@
     }
 
     protected void token(String src, boolean top, boolean bq, LexerContext context){
-        while(src.length() > 0){
+while (src.length()) > 0) {
             // newline
             {
-                List<String> cap = rules.get("newline").exec(src);
-                if(!cap.isEmpty()){
+
+
                     src = src.substring(cap.get(0).length());
                     if(cap.get(0).length() > 1){
                         context.pushToken(new SpaceToken());
@@ -52,12 +52,12 @@
 
             // code
             {
-                List<String> cap = rules.get("code").exec(src);
-                if(!cap.isEmpty()){
-                    src = src.substring(cap.get(0).length());
-                    String code = cap.get(0).replaceAll("(?m)^ {4}", "");
-                    if(!options.isPedantic()){
-                        context.pushToken(new CodeToken(code.replaceAll("\\n+$", ""), null, false));
+
+
+
+
+
+
                     } else {
                         context.pushToken(new CodeToken(code, null, false));
                     }
@@ -67,8 +67,8 @@
 
             // fences (gfm)
             {
-                List<String> cap = rules.get("fences").exec(src);
-                if(!cap.isEmpty()){
+lexer.exec(src); if(!cap.isEmpty()) {
+
                     src = src.substring(cap.get(0).length());
                     context.pushToken(new CodeToken(cap.get(3), cap.get(2), false));
                     continue;
@@ -77,8 +77,8 @@
 
             // heading
             {
-                List<String> cap = rules.get("heading").exec(src);
-                if(!cap.isEmpty()){
+if(top) {
+
                     src = src.substring(cap.get(0).length());
                     context.pushToken(new HeadingToken(cap.get(1).length(), cap.get(2)));
                     continue;
@@ -86,9 +86,9 @@
             }
 
             // table no leading pipe (gfm)
-            if(top){
-                List<String> cap = rules.get("nptable").exec(src);
-                if(!cap.isEmpty()){
+if (top) {
+
+
                     src = src.substring(cap.get(0).length());
 
                     String[] header = cap.get(1).replaceAll("^ *| *\\| *$", "").split(" *\\| *");
@@ -122,8 +122,8 @@
 
             // lheading
             {
-                List<String> cap = rules.get("lheading").exec(src);
-                if(!cap.isEmpty()){
+if ((cap.size()) > 0) {
+
                     src = src.substring(cap.get(0).length());
                     if(cap.get(2).equals("=")){
                         context.pushToken(new HeadingToken(1, cap.get(1)));
@@ -136,8 +136,8 @@
 
             // hr
             {
-                List<String> cap = rules.get("hr").exec(src);
-                if(!cap.isEmpty()){
+
+
                     src = src.substring(cap.get(0).length());
                     context.pushToken(new HrToken());
                     continue;
@@ -146,8 +146,8 @@
 
             // blockquote
             {
-                List<String> cap = rules.get("blockquote").exec(src);
-                if(!cap.isEmpty()){
+
+
                     src = src.substring(cap.get(0).length());
                     context.pushToken(new BlockquoteStartToken());
                     token(cap.get(0).replaceAll("(?m) *> ?", ""), top, true, context);
@@ -158,8 +158,8 @@
 
             // list
             {
-                List<String> cap = rules.get("list").exec(src);
-                if(!cap.isEmpty()){
+
+
                     src = src.substring(cap.get(0).length());
                     String bull = cap.get(2);
 
@@ -226,8 +226,8 @@
 
             // html
             {
-                List<String> cap = rules.get("html").exec(src);
-                if(!cap.isEmpty()){
+if (bq) {
+
                     src = src.substring(cap.get(0).length());
                     if(options.isSanitize()){
                         context.pushToken(new ParagraphToken(cap.get(0)));
@@ -240,9 +240,9 @@
             }
 
             // def
-            if(!bq && top){
-                List<String> cap = rules.get("def").exec(src);
-                if(!cap.isEmpty()){
+if(bq) { List<String> cap = rules.get("def").exec(src); if(!cap.isEmpty()) {
+
+
                     src = src.substring(cap.get(0).length());
                     context.defineLink(cap.get(1).toLowerCase(), new Link(cap.get(2), cap.get(3)));
                     continue;
@@ -250,9 +250,9 @@
             }
 
             // table (gfm)
-            if(top){
-                List<String> cap = rules.get("table").exec(src);
-                if(!cap.isEmpty()){
+if (top) {
+
+
                     src = src.substring(cap.get(0).length());
 
                     String[] header = cap.get(1).replaceAll("^ *| *\\| *$", "").split(" *\\| *");
@@ -285,16 +285,16 @@
             }
 
             // top-level paragraph
-            if(top){
-                List<String> cap = rules.get("paragraph").exec(src);
-                if(!cap.isEmpty()){
-                    src = src.substring(cap.get(0).length());
-                    if(cap.get(1).charAt(cap.get(1).length() - 1) == '\n'){
-                        context.pushToken(new ParagraphToken(cap.get(1).substring(0, cap.get(1).length() - 1)));
+if(top) { src = src.substring(cap.get(0).length()); if(cap.isEmpty()) { context.pushToken(new ParagraphToken(cap.get(1).substring(0, cap.get(1).length() - 1)));
+
+
+
+
+
                     } else {
-                        context.pushToken(new ParagraphToken(cap.get(1)));
+
                     }
-                    continue;
+
                 }
             }
 
@@ -311,7 +311,7 @@
             // TODO Error
             //println("Infinite loop on byte: " + source.charAt(0).toByte)
         }
-    }
+
 
     public static class LexerContext {
         private Stack<Token> tokens = new Stack<>();
