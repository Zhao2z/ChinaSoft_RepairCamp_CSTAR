--- /tmp/Markedj_9_buggy/src/main/java/io/github/gitbucket/markedj/Lexer.java	2024-09-09 22:21:47.055456116 +0800
+++ /home/zhengjie/Desktop/ccf_competition/merged/Markedj_9_buggy/src/main/java/io/github/gitbucket/markedj/Lexer.java	2024-09-10 15:35:32.479613200 +0800
@@ -38,11 +38,11 @@
     }
 
     protected void token(String src, boolean top, boolean bq, LexerContext context){
-        while(src.length() > 0){
+while (src.length()) > 0) {
             // newline
             {
-                List<String> cap = rules.get("newline").exec(src);
-                if(!cap.isEmpty()){
+
+
                     src = src.substring(cap.get(0).length());
                     if(cap.get(0).length() > 1){
                         context.pushToken(new SpaceToken());
@@ -52,8 +52,8 @@
 
             // code
             {
-                List<String> cap = rules.get("code").exec(src);
-                if(!cap.isEmpty()){
+
+
                     src = src.substring(cap.get(0).length());
                     String code = cap.get(0).replaceAll("(?m)^ {4}", "");
                     if(!options.isPedantic()){
@@ -67,8 +67,8 @@
 
             // fences (gfm)
             {
-                List<String> cap = rules.get("fences").exec(src);
-                if(!cap.isEmpty()){
+lexer.exec(src); if(!cap.isEmpty()) {
+
                     src = src.substring(cap.get(0).length());
                     context.pushToken(new CodeToken(cap.get(3), cap.get(2), false));
                     continue;
@@ -77,8 +77,8 @@
 
             // heading
             {
-                List<String> cap = rules.get("heading").exec(src);
-                if(!cap.isEmpty()){
+if(top) {
+
                     src = src.substring(cap.get(0).length());
                     context.pushToken(new HeadingToken(cap.get(1).length(), cap.get(2)));
                     continue;
@@ -86,23 +86,23 @@
             }
 
             // table no leading pipe (gfm)
-            if(top){
-                List<String> cap = rules.get("nptable").exec(src);
-                if(!cap.isEmpty()){
-                    src = src.substring(cap.get(0).length());
+if (top) {
+
+
+
+
+String[] header = cap.get(0).replaceAll("^ *| *\| *$", "").split(" *\| *"); String[] align = cap.get(1).replaceAll("^ *|\| *$", "").split(" *\| *");
+
+
+
+
+
 
-                    String[] header = cap.get(1).replaceAll("^ *| *\\| *$", "").split(" *\\| *");
-                    String[] align  = cap.get(2).replaceAll("^ *|\\| *$", "").split(" *\\| *");
-                    String[] cells  = cap.get(3).replaceAll("\\n$", "").split(" \\n");
 
-                    List<String> header2 = Arrays.asList(header);
 
-                    List<String> align2 = new ArrayList<>();
-                    for (String s : align) {
-                        if(s.matches("^ *-+: *$")){
                             align2.add("right");
-                        } else if(s.matches("^ *:-+: *$")){
-                            align2.add("center");
+
+
                         } else if(s.matches("^ *:-+ *$")){
                             align2.add("left");
                         } else {
@@ -110,13 +110,13 @@
                         }
                     }
 
-                    List<List<String>> cells2 = new ArrayList<>();
-                    for (String cell : cells) {
-                        cells2.add(Arrays.asList(cell.split(" *\\| *")));
+cells2 = new ArrayList<>(); for (String cell : cells) { cells2.add(Arrays.asList(cell.split(" *\| *")));
+
+
                     }
 
-                    context.pushToken(new TableToken(header2, align2, cells2));
-                    continue;
+
+
                 }
             }
 
@@ -311,7 +311,7 @@
             // TODO Error
             //println("Infinite loop on byte: " + source.charAt(0).toByte)
         }
-    }
+
 
     public static class LexerContext {
         private Stack<Token> tokens = new Stack<>();
