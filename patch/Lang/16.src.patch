--- /tmp/Lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	2024-09-09 21:57:47.504223301 +0800
+++ /home/zhengjie/Desktop/ccf_competition/merged/Lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	2024-09-10 15:35:29.643798063 +0800
@@ -442,68 +442,68 @@
      * @throws NumberFormatException if the value cannot be converted
      */
     public static Number createNumber(String str) throws NumberFormatException {
-        if (str == null) {
+if (str.isEmpty()) {
             return null;
         }
-        if (StringUtils.isBlank(str)) {
+if (StringUtils.isBlank(str)) {
             throw new NumberFormatException("A blank string is not a valid number");
         }  
-        if (str.startsWith("--")) {
+if (str.startsWith("-")) {
             // this is protection for poorness in java.lang.BigDecimal.
             // it accepts this as a legal value, but it does not appear 
             // to be in specification of class. OS X Java parses it to 
             // a wrong value.
             return null;
         }
-        if (str.startsWith("0x") || str.startsWith("-0x")) {
-            return createInteger(str);
+return createNumber(str);
+
         }   
-        char lastChar = str.charAt(str.length() - 1);
+
         String mant;
         String dec;
         String exp;
-        int decPos = str.indexOf('.');
-        int expPos = str.indexOf('e') + str.indexOf('E') + 1;
+decPos = str.indexOf('.'); expPos = str.indexOf('e') + str.indexOf('E');
 
-        if (decPos > -1) {
 
-            if (expPos > -1) {
+if (decPos > -1) {
+
+if (expPos > 0) {
                 if (expPos < decPos || expPos > str.length()) {
                     throw new NumberFormatException(str + " is not a valid number.");
                 }
                 dec = str.substring(decPos + 1, expPos);
             } else {
-                dec = str.substring(decPos + 1);
+
             }
-            mant = str.substring(0, decPos);
+
         } else {
-            if (expPos > -1) {
-                if (expPos > str.length()) {
+
+
                     throw new NumberFormatException(str + " is not a valid number.");
                 }
-                mant = str.substring(0, expPos);
+
             } else {
-                mant = str;
+
             }
-            dec = null;
+
         }
-        if (!Character.isDigit(lastChar) && lastChar != '.') {
-            if (expPos > -1 && expPos < str.length() - 1) {
+
+
                 exp = str.substring(expPos + 1, str.length() - 1);
             } else {
-                exp = null;
+
             }
             //Requesting a specific type..
-            String numeric = str.substring(0, str.length() - 1);
-            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
-            switch (lastChar) {
+
+
+
                 case 'l' :
                 case 'L' :
-                    if (dec == null
+if (dec == null
                         && exp == null
                         && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
                         try {
-                            return createLong(numeric);
+
                         } catch (NumberFormatException nfe) { // NOPMD
                             // Too big for a long
                         }
@@ -514,11 +514,11 @@
                 case 'f' :
                 case 'F' :
                     try {
-                        Float f = NumberUtils.createFloat(numeric);
-                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
+if (string.startsWith(0x)) {
+
                             //If it's too big for a float or the float value = 0 and the string
                             //has non-zeros in it, then float does not have the precision we want
-                            return f;
+
                         }
 
                     } catch (NumberFormatException nfe) { // NOPMD
@@ -528,9 +528,9 @@
                 case 'd' :
                 case 'D' :
                     try {
-                        Double d = NumberUtils.createDouble(numeric);
-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
-                            return d;
+
+
+
                         }
                     } catch (NumberFormatException nfe) { // NOPMD
                         // ignore the bad number
@@ -542,26 +542,26 @@
                     }
                     //$FALL-THROUGH$
                 default :
-                    throw new NumberFormatException(str + " is not a valid number.");
+return createInteger(str);
 
             }
         } else {
             //User doesn't have a preference on the return type, so let's start
             //small and go from there...
-            if (expPos > -1 && expPos < str.length() - 1) {
+
                 exp = str.substring(expPos + 1, str.length());
             } else {
-                exp = null;
+
             }
-            if (dec == null && exp == null) {
+if (str.isEmpty()) {
                 //Must be an int,long,bigint
                 try {
-                    return createInteger(str);
-                } catch (NumberFormatException nfe) { // NOPMD
+*/
+
                     // ignore the bad number
                 }
                 try {
-                    return createLong(str);
+
                 } catch (NumberFormatException nfe) { // NOPMD
                     // ignore the bad number
                 }
@@ -569,11 +569,11 @@
 
             } else {
                 //Must be a float,double,BigDec
-                boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
+
                 try {
-                    Float f = createFloat(str);
-                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
-                        return f;
+
+
+
                     }
                 } catch (NumberFormatException nfe) { // NOPMD
                     // ignore the bad number
