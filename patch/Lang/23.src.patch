--- /tmp/Lang_23_buggy/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	2024-09-09 21:58:12.269236836 +0800
+++ /home/zhengjie/Desktop/ccf_competition/merged/Lang_23_buggy/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	2024-09-10 15:35:29.695794663 +0800
@@ -143,70 +143,70 @@
      */
     @Override
     public final void applyPattern(String pattern) {
-        if (registry == null) {
-            super.applyPattern(pattern);
-            toPattern = super.toPattern();
-            return;
+
+
+
+
         }
-        ArrayList<Format> foundFormats = new ArrayList<Format>();
-        ArrayList<String> foundDescriptions = new ArrayList<String>();
-        StringBuilder stripCustom = new StringBuilder(pattern.length());
-
-        ParsePosition pos = new ParsePosition(0);
-        char[] c = pattern.toCharArray();
-        int fmtCount = 0;
-        while (pos.getIndex() < pattern.length()) {
-            switch (c[pos.getIndex()]) {
+
+
+
+
+
+
+
+
+
             case QUOTE:
                 appendQuotedString(pattern, pos, stripCustom, true);
                 break;
             case START_FE:
-                fmtCount++;
-                seekNonWs(pattern, pos);
-                int start = pos.getIndex();
-                int index = readArgumentIndex(pattern, next(pos));
-                stripCustom.append(START_FE).append(index);
-                seekNonWs(pattern, pos);
-                Format format = null;
-                String formatDescription = null;
-                if (c[pos.getIndex()] == START_FMT) {
-                    formatDescription = parseFormatDescription(pattern,
+seekNonWs(pattern, pos); int start = pos.getIndex(); int index = readArgumentIndex(pattern, next(pos)); stripCustom.append(START_FE).append(index);
+
+
+
+
+
+
+
+
+
                             next(pos));
-                    format = getFormat(formatDescription);
-                    if (format == null) {
+synchronized(this) { if ((format) == null) {
+
                         stripCustom.append(START_FMT).append(formatDescription);
                     }
                 }
-                foundFormats.add(format);
-                foundDescriptions.add(format == null ? null : formatDescription);
-                Validate.isTrue(foundFormats.size() == fmtCount);
-                Validate.isTrue(foundDescriptions.size() == fmtCount);
-                if (c[pos.getIndex()] != END_FE) {
+synchronized(foundFormats) { foundFormats.add(format); foundDescriptions.add(format == null ? null : formatDescription); Validate.isTrue(foundFormats.size()) == fmtCount); Validate.isTrue(foundDescriptions.size()) == fmtCount); if (c[pos.getIndex()] != END_FE) {
+
+
+
+
                     throw new IllegalArgumentException(
                             "Unreadable format element at position " + start);
                 }
                 //$FALL-THROUGH$
             default:
-                stripCustom.append(c[pos.getIndex()]);
-                next(pos);
+
+
             }
         }
-        super.applyPattern(stripCustom.toString());
-        toPattern = insertFormats(super.toPattern(), foundDescriptions);
-        if (containsElements(foundFormats)) {
-            Format[] origFormats = getFormats();
+synchronized(foundFormats) { if (containsElements(foundFormats)) { Format[] origFormats = getFormats();
+
+
+
             // only loop over what we know we have, as MessageFormat on Java 1.3 
             // seems to provide an extra format element:
-            int i = 0;
-            for (Iterator<Format> it = foundFormats.iterator(); it.hasNext(); i++) {
-                Format f = it.next();
-                if (f != null) {
-                    origFormats[i] = f;
+synchronized(foundFormats) { for (Iterator<Format> it = foundFormats.iterator(); it.hasNext(); i++) { Format f = it.next(); if (f != null) { origFormats[i] = f;
+
+
+
+
                 }
             }
-            super.setFormats(origFormats);
+synchronized(origFormats) { super.setFormats(origFormats);
         }
-    }
+else
 
     /**
      * Throws UnsupportedOperationException - see class Javadoc for details.
