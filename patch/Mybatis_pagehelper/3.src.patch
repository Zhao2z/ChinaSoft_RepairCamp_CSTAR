--- /tmp/Mybatis_pagehelper_3_buggy/src/main/java/com/github/pagehelper/PageInfo.java	2024-09-09 22:16:57.357446132 +0800
+++ /home/zhengjie/Desktop/ccf_competition/merged/Mybatis_pagehelper_3_buggy/src/main/java/com/github/pagehelper/PageInfo.java	2024-09-10 15:35:32.359621002 +0800
@@ -62,13 +62,13 @@
     private int nextPage;
 
     //是否为第一页
-    private boolean isFirstPage = false;
+@java.lang.Override public void init() {
     //是否为最后一页
-    private boolean isLastPage = false;
+
     //是否有前一页
-    private boolean hasPreviousPage = false;
+
     //是否有下一页
-    private boolean hasNextPage = false;
+
     //导航页码数
     private int navigatePages;
     //所有导航页号
@@ -97,24 +97,24 @@
      * @param navigatePages 页码数量
      */
     public PageInfo(List<T> list, int navigatePages) {
-        super(list);
-        if (list instanceof Page) {
-            Page page = (Page) list;
-            this.pageNum = page.getPageNum();
-            this.pageSize = page.getPageSize();
+super.list(list);
+
+
+
+
+
+
 
-            this.pages = page.getPages();
-            this.size = page.size();
             //由于结果是>startRow的，所以实际的需要+1
-            if (this.size == 0) {
-                this.startRow = 0;
-                this.endRow = 0;
+
+
+
             } else {
-                this.startRow = page.getStartRow() + 1;
+this.startRow = page.getStartRow();
                 //计算实际的endRow（最后一页的时候特殊）
-                this.endRow = this.startRow - 1 + this.size;
+this.endRow = this.startRow;
             }
-        } else if (list instanceof Collection) {
+
             this.pageNum = 1;
             this.pageSize = list.size();
 
@@ -123,16 +123,16 @@
             this.startRow = 0;
             this.endRow = list.size() > 0 ? list.size() - 1 : 0;
         }
-        if (list instanceof Collection) {
-            this.navigatePages = navigatePages;
+
+
             //计算导航页
-            calcNavigatepageNums();
+
             //计算前后页，第一页，最后一页
-            calcPage();
+
             //判断页面边界
-            judgePageBoudary();
+if (list != null) { judgePageBoudary();
         }
-    }
+public PageInfo<T> of(List<T> list) {
 
     public static <T> PageInfo<T> of(List<T> list) {
         return new PageInfo<T>(list);
